<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Антон Жиянов</title>
    <description>Разработка софта, продуктоводство и здравый смысл</description>
    <link>https://antonz.ru/</link>
    <image>
      <url>https://antonz.ru/assets/favicon/favicon.png</url>
      <title>Антон Жиянов</title>
      <link>https://antonz.ru/</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Fri, 05 Nov 2021 11:14:51 +0000</lastBuildDate><atom:link href="https://antonz.ru/rss" rel="self" type="application/rss+xml" />
    <item>
      <title>Табличные выражения SQL</title>
      <link>https://antonz.ru/cte/</link>
      <pubDate>Fri, 05 Nov 2021 11:14:51 +0000</pubDate>
      
      <guid>https://antonz.ru/cte/</guid>
      <description>Используйте их вместо подзапросов.</description>
      <content:encoded><![CDATA[<p>Прием № 1, чтобы писать хорошие читаемые SQL-запросы — это <em>табличные выражения</em> (CTE). Люди их боятся, а зря. Давайте разберемся за три минуты, читать увесистую книгу по SQL или проходить курсы не придется.</p>
<h2 id="проблема">Проблема</h2>
<p>Допустим, у нас есть таблица продаж по месяцам за два года:</p>
<pre tabindex="0"><code>┌──────┬───────┬───────┬──────────┬─────────┐
│ year │ month │ price │ quantity │ revenue │
├──────┼───────┼───────┼──────────┼─────────┤
│ 2019 │ 1     │ 60    │ 200      │ 12000   │
│ 2019 │ 2     │ 60    │ 660      │ 39600   │
│ 2019 │ 3     │ 60    │ 400      │ 24000   │
│ 2019 │ 4     │ 60    │ 300      │ 18000   │
│ 2019 │ 5     │ 60    │ 440      │ 26400   │
│ 2019 │ 6     │ 60    │ 540      │ 32400   │
│ 2019 │ 7     │ 60    │ 440      │ 26400   │
│ 2019 │ 8     │ 60    │ 440      │ 26400   │
│ 2019 │ 9     │ 60    │ 250      │ 15000   │
│ 2019 │ 10    │ 60    │ 420      │ 25200   │
│ ...  │ ...   │ ...   │ ...      │ ...     │
└──────┴───────┴───────┴──────────┴─────────┘
</code></pre><p><a href="https://sqlime.org/#gist:858c409b81ae3a676580cba6745d68ea">песочница</a></p>
<p>Мы хотим выбрать только те месяцы, выручка за которые превысила среднемесячную за год.</p>
<p>Для начала посчитаем среднемесячную выручку по годам:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>,
  <span style="color:#a90d91">avg</span>(<span style="color:#000">revenue</span>) <span style="color:#a90d91">as</span> <span style="color:#000">avg_rev</span>
<span style="color:#a90d91">from</span> <span style="color:#000">sales</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>;
</code></pre></div><pre tabindex="0"><code>┌──────┬─────────┐
│ year │ avg_rev │
├──────┼─────────┤
│ 2019 │ 25125.0 │
│ 2020 │ 48625.0 │
└──────┴─────────┘
</code></pre><p>Теперь можно выбрать только те записи, <code>revenue</code> в которых не уступает <code>avg_rev</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">sales</span>.<span style="color:#a90d91">year</span>,
  <span style="color:#000">sales</span>.<span style="color:#a90d91">month</span>,
  <span style="color:#000">sales</span>.<span style="color:#000">revenue</span>,
  <span style="color:#000">round</span>(<span style="color:#000">totals</span>.<span style="color:#000">avg_rev</span>) <span style="color:#a90d91">as</span> <span style="color:#000">avg_rev</span>
<span style="color:#a90d91">from</span> <span style="color:#000">sales</span>
  <span style="color:#a90d91">join</span> (
    <span style="color:#a90d91">select</span>
      <span style="color:#a90d91">year</span>,
      <span style="color:#a90d91">avg</span>(<span style="color:#000">revenue</span>) <span style="color:#a90d91">as</span> <span style="color:#000">avg_rev</span>
    <span style="color:#a90d91">from</span> <span style="color:#000">sales</span>
    <span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>
  ) <span style="color:#a90d91">as</span> <span style="color:#000">totals</span>
  <span style="color:#a90d91">on</span> <span style="color:#000">sales</span>.<span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#000">totals</span>.<span style="color:#a90d91">year</span>
<span style="color:#a90d91">where</span> <span style="color:#000">sales</span>.<span style="color:#000">revenue</span> <span style="color:#000">&gt;=</span> <span style="color:#000">totals</span>.<span style="color:#000">avg_rev</span>;
</code></pre></div><pre tabindex="0"><code>┌──────┬───────┬─────────┬─────────┐
│ year │ month │ revenue │ avg_rev │
├──────┼───────┼─────────┼─────────┤
│ 2019 │ 2     │ 39600   │ 25125.0 │
│ 2019 │ 5     │ 26400   │ 25125.0 │
│ 2019 │ 6     │ 32400   │ 25125.0 │
│ 2019 │ 7     │ 26400   │ 25125.0 │
│ ...  │ ...   │ ...     │ ...     │
└──────┴───────┴─────────┴─────────┘
</code></pre><p>Решили с помощью подзапроса:</p>
<ul>
<li>внутренний запрос считает среднемесячную выручку;</li>
<li>внешний соединяется с ним и фильтрует результаты.</li>
</ul>
<p>Запрос в целом получился сложноват. Если вернетесь к нему спустя месяц — наверняка потратите какое-то время на «распутывание». Проблема в том, что такие вложенные запросы приходится читать наоборот:</p>
<ul>
<li>найти самый внутренний запрос, осознать;</li>
<li>мысленно присоединить к более внешнему;</li>
<li>присоединить к следующему внешнему, и так далее.</li>
</ul>
<p>Хорошо, когда вложенных уровня два, как в нашем примере. На практике же я часто встречаю трех- и четырехуровневые подзапросы. Форменное издевательство над читателем.</p>
<h2 id="решение">Решение</h2>
<p>Вместо подзапроса можно использовать <em>табличное выражение</em> (common table expression, CTE). Любой подзапрос <code>X</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">a</span>, <span style="color:#000">b</span>, <span style="color:#a90d91">c</span>
<span style="color:#a90d91">from</span> (<span style="color:#000">X</span>)
<span style="color:#a90d91">where</span> <span style="color:#000">e</span> <span style="color:#000">=</span> <span style="color:#000">f</span>
</code></pre></div><p>Механически превращается в CTE:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">with</span> <span style="color:#000">cte</span> <span style="color:#a90d91">as</span> (<span style="color:#000">X</span>)
<span style="color:#a90d91">select</span> <span style="color:#000">a</span>, <span style="color:#000">b</span>, <span style="color:#a90d91">c</span>
<span style="color:#a90d91">from</span> <span style="color:#000">cte</span>
<span style="color:#a90d91">where</span> <span style="color:#000">e</span> <span style="color:#000">=</span> <span style="color:#000">f</span>
</code></pre></div><p>В нашем примере:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">with</span> <span style="color:#000">totals</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">select</span>
    <span style="color:#a90d91">year</span>,
    <span style="color:#a90d91">avg</span>(<span style="color:#000">revenue</span>) <span style="color:#a90d91">as</span> <span style="color:#000">avg_rev</span>
  <span style="color:#a90d91">from</span> <span style="color:#000">sales</span>
  <span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>
)

<span style="color:#a90d91">select</span>
  <span style="color:#000">sales</span>.<span style="color:#a90d91">year</span>,
  <span style="color:#000">sales</span>.<span style="color:#a90d91">month</span>,
  <span style="color:#000">sales</span>.<span style="color:#000">revenue</span>,
  <span style="color:#000">round</span>(<span style="color:#000">totals</span>.<span style="color:#000">avg_rev</span>) <span style="color:#a90d91">as</span> <span style="color:#000">avg_rev</span>
<span style="color:#a90d91">from</span> <span style="color:#000">sales</span> 
  <span style="color:#a90d91">join</span> <span style="color:#000">totals</span> <span style="color:#a90d91">on</span> <span style="color:#000">totals</span>.<span style="color:#a90d91">year</span> <span style="color:#000">=</span> <span style="color:#000">sales</span>.<span style="color:#a90d91">year</span>
<span style="color:#a90d91">where</span> <span style="color:#000">sales</span>.<span style="color:#000">revenue</span> <span style="color:#000">&gt;=</span> <span style="color:#000">totals</span>.<span style="color:#000">avg_rev</span>;
</code></pre></div><p>С табличным выражением запрос становится одноуровневым — так воспринимать его намного проще. Кроме того, табличное выражение можно переиспользовать в пределах запроса, как будто это обычная таблица:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">with</span> <span style="color:#000">totals</span> <span style="color:#a90d91">as</span> (...)
<span style="color:#a90d91">select</span> ... <span style="color:#a90d91">from</span> <span style="color:#000">sales_ru</span> <span style="color:#a90d91">join</span> <span style="color:#000">totals</span> ...
<span style="color:#a90d91">union</span> <span style="color:#a90d91">all</span>
<span style="color:#a90d91">select</span> ... <span style="color:#a90d91">from</span> <span style="color:#000">sales_us</span> <span style="color:#a90d91">join</span> <span style="color:#000">totals</span> ...
</code></pre></div><p>Табличные выражения SQL чем-то похожи на функции в обычном языке программирования — они уменьшают общую сложность:</p>
<ul>
<li>Можно написать нечитаемую простыню кода, а можно разбить код на понятные отдельные функции и составить программу из них.</li>
<li>Можно возвести башню из пяти этажей подзапросов, а можно вынести подзапросы в CTE и составить общий запрос из них.</li>
</ul>
<h2 id="cte-против-подзапроса">CTE против подзапроса</h2>
<p>Существует миф, что «CTE медленные». Он пришел из старых версий PostgreSQL (11 и раньше), которые всегда <em>материализовали</em> CTE — вычисляли полный результат табличного выражения и запоминали до конца запроса.</p>
<p>Обычно это хорошо: один раз вычислил результат, и дальше используешь его несколько раз по ходу основного запроса. Но иногда материализация мешала движку оптимизировать запрос:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">with</span> <span style="color:#000">cte</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">foo</span>)
<span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">cte</span> <span style="color:#a90d91">where</span> <span style="color:#000">id</span> <span style="color:#000">=</span> <span style="color:#1c01ce">500000</span>;
</code></pre></div><p>Здесь выбирается ровно одна запись по идентификатору, но материализация создает в памяти копию <em>всей таблицы</em> — из-за этого запрос отработает очень медленно.</p>
<p>PostgreSQL 12+ и другие современные СУБД поумнели и больше так не делают. Материализация применяется, когда от нее больше пользы, чем вреда. Плюс, многие СУБД позволяют явно управлять этим поведением через инструкции <code>MATERIALIZED</code> / <code>NOT MATERIALIZED</code>.</p>
<p>Так что CTE не медленнее подзапросов. А если сомневаетесь, всегда можно сделать два варианта — подзапрос и табличное выражение — и сравнить план и время выполнения.</p>
<p>Как понять, когда использовать подзапрос, а когда CTE? Я вывел для себя простое правило, которое пока ни разу не подвело:</p>
<blockquote class="big">
<p>Всегда использовать CTE</p>
</blockquote>
<p>Чего и вам желаю.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на канал <span class="nowrap"><i class="fas fa-database"></i> «<a href="https://t.me/sqliter">SQLite на практике</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Справочник адресов России</title>
      <link>https://antonz.ru/fias/</link>
      <pubDate>Sun, 24 Oct 2021 17:02:08 +0000</pubDate>
      
      <guid>https://antonz.ru/fias/</guid>
      <description>Который ведет налоговая.</description>
      <content:encoded><![CDATA[<p>Не все знают, что в России есть Великий Справочник Адресов, в который свято веруют все чиновники (да и не только они). Расскажу о нём немного. Без официальной нуднятины, только задорные факты из жизни.</p>
<p>Справочник адресов называется «ФИАС» (федеральная информационная адресная система) или «ГАР» (государственный адресный реестр) — это одно и то же. Раньше назывался «КЛАДР» (классификатор адресов). Технически поддерживает его налоговая, а данные о домах и улицах вносят местные чиновники по всей стране. У справочника даже есть сайт (не читайте его): <a href="https://fias.nalog.ru">fias.nalog.ru</a></p>
<p>Вот как видит нашу родину налоговая служба:</p>
<ul>
<li>86 регионов</li>
<li>3 тыс. городов</li>
<li>300 тыс. населённых пунктов</li>
<li>1 млн улиц</li>
<li>31 млн домов</li>
<li>52 млн квартир</li>
</ul>
<p>У каждого адреса есть тип и название. Скажем, тип = «город», название = «Самара». Или тип = «республика», название = «Бурятия». Но если вам повезло жить в республике Чувашия, то тип = «Чувашия», название = «Чувашская республика». Потому что пошёл ты нахер, вот почему.</p>
<p>ФИАС — истина в последней инстанции для всех гос. органов. Если вы живёте в Кабардино-Балкарии на Моздокской улице, а у налоговой она значится как «МосдоГская» (в честь знаменитых кабардино-балкарских догов, видимо), то ни одному чиновнику вы свою правоту не докажете.</p>
<figure>
  <img alt="Странные дома" src="fias-house-zero.png">
  <figcaption>Дурная фантазия чиновников безгранична</figcaption>
</figure>
<p>Или ещё был случай. В 2018 году питерским чиновникам стало скучно, и они домам приделали «литеру А». Был «Невский проспект, дом 41», а стал «дом 41 литер А». И так со всеми домами в городе. На табличках нормально написано, а в голове у чиновников — с литерами. Deal with it.</p>
<p>Справочник полон милых идиотизмов. Однажды перестали помещаться гаражи и садовые товарищества, и налоговая додумалась добавить новый «уровень» адреса для них. Загадочно назвали его «планировочная структура». Но забыли рассказать местным чиновникам, что это такое и зачем. Поэтому теперь в «планировочных структурах» лежит всё от жилых кварталов до районов городов и международных трасс. Бадум-тсс!</p>
<p>Ах да. Если вы думаете, что живёте в городе, то разочарую. На самом деле это не «город», а «городской округ». Это называется «муниципальное деление»: городские округа вместо городов, сельские поселения вместо сёл, и так далее. Ну, чтобы никто не догадался.</p>
<p>Налоговая любит внезапно менять справочник. То все дома в городе потеряет, то битых улиц насыпет, то просто два месяца не обновляет. Объяснений и анонсов, конечно же, никто не делает. Сами разберётесь, не маленькие.</p>
<p>Но. Хоть я и ворчу, ФИАС — большое благо! Это структурированный, регулярно обновляемый справочник адресов, доступный всем желающим. У большинства стран такого нет, так что пусть завидуют 👌</p>
<p><em>Подписывайтесь на <a href="https://twitter.com/nalgeon">@nalgeon</a> в твитере, чтобы не пропустить новые заметки</em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Вы являетесь дизайнеру в страшном сне</title>
      <link>https://antonz.ru/tinkoff-signin/</link>
      <pubDate>Thu, 07 Oct 2021 13:49:33 +0000</pubDate>
      
      <guid>https://antonz.ru/tinkoff-signin/</guid>
      <description>Помогаем Тинькову избавиться от косноязычия на форме входа.</description>
      <content:encoded><![CDATA[<p>Интернет-банк Тинькова при входе встречает многозначительной надписью:</p>
<figure>
  <img alt="Вы являетесь держателем" src="tinkoff-signin-1.png">
</figure>
<blockquote class="big">
Вы являетесь держателем продуктов Тинькофф Банка. При входе по номеру телефона, в целях безопасности, введите пароль.
</blockquote>
<p>Я, конечно, не UX-писатель, но это жуть какая кривая формулировка. Давайте попробуем улучшить.</p>
<h2 id="1-формулируем-по-человечески">1. Формулируем по-человечески</h2>
<p>Меняем суконный язык банковских безопасников на нормальную речь.</p>
<blockquote class="big">
Вы являетесь держателем продуктов Тинькофф Банка. При входе по номеру телефона, в целях безопасности, введите пароль.<br>↓
</blockquote>
<blockquote class="big">
Вы — клиент Тинькофф Банка. Введите пароль, чтобы войти.
</blockquote>
<h2 id="2-убираем-лишнее">2. Убираем лишнее</h2>
<p>Зачем писать человеку, что он клиент? Я и так это знаю, потому и пытаюсь войти в интернет-банк. Убираем.</p>
<blockquote class="big">
Вы — клиент Тинькофф Банка. Введите пароль, чтобы войти.<br>↓
</blockquote>
<blockquote class="big">Введите пароль, чтобы войти.</blockquote>
<h2 id="3-убираем-очевидное">3. Убираем очевидное</h2>
<p>На этой же форме огроменное поле ПАРОЛЬ и кнопка ВОЙТИ. Спорим, человек догадается, чего от него хотят?</p>
<blockquote class="big">Введите пароль, чтобы войти.<br>↓</blockquote>
<blockquote class="big">Ø</blockquote>
<p>Что осталось:</p>
<figure>
  <img alt="Больше не являетесь" src="tinkoff-signin-2.png">
</figure>
<h2 id="qa">Q&amp;A</h2>
<blockquote>
<p>А это не юридический затык? У Тинькофа вроде всё хорошо с ux-райтингом во всех других местах.</p>
</blockquote>
<p>У Тинькова есть некоторое количество сотрудников, которые умеют писать нормальный текст, и огромная армия тех, кто делать этого не умеет и не желает. Вторые иногда прорываются. Хотя первые в целом отлично справляются, да.</p>
<blockquote>
<p>Мне кажется, предполагать, что человек сразу поймет, куда он входит, слишком смело.</p>
</blockquote>
<p>Действительно, он зашел на сайт Тинькова, нажал на «Войти», указал номер телефона. Конечно, он понятия не имеет, что делает.</p>
<blockquote>
<p>А может это было сделано по требованиям accessibility? Чтобы читалка озвучила, например.</p>
</blockquote>
<p>Это делается иначе.</p>
<blockquote>
<p>Не уверен, что насчет этого можно сразу рассуждать предположениями. Как реально юзеры реагируют на такую форму можно понять только через исследования.</p>
</blockquote>
<p>Не надо проводить исследования, чтобы исправить очевидные проблемы. Исследования не заменяют головной мозг, пользуйтесь им.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>SQLite-песочница в браузере</title>
      <link>https://antonz.ru/sqlime/</link>
      <pubDate>Tue, 28 Sep 2021 21:13:03 +0000</pubDate>
      
      <guid>https://antonz.ru/sqlime/</guid>
      <description>Для отладки и шаринга запросов.</description>
      <content:encoded><![CDATA[<p>Чего мне всегда не хватало, так это аналога JSFiddle для SQLite. Онлайн-песочницы, в которой можно быстро проверить SQL-запрос и поделиться с другими.</p>
<p><a href="https://sqlime.org/"><img src="sqlime.png" alt="SQLime"></a></p>
<p>Вот чего хотелось:</p>
<ul>
<li>Возможность загрузить готовую базу, а не писать SQL для создания таблиц.</li>
<li>Подключать как локальные базы, так и удаленные (по url).</li>
<li>Сохранять базу и запросы в облаке.</li>
<li>Бесплатно и без регистрации.</li>
<li>Свежайшая версия SQLite.</li>
<li>Минимализм.</li>
</ul>
<p>В итоге сделал такую песочницу сам:</p>
<ul>
<li><a href="https://sqlime.org/">демка</a> с пустой базой;</li>
<li><a href="https://sqlime.org/#gist:e012594111ce51f91590c4737e41a046">пример</a> заполненной базы;</li>
<li><a href="https://github.com/nalgeon/sqlime">исходники</a>.</li>
</ul>
<p><a href="https://habr.com/ru/post/580240/">подробности на Хабре</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как хранят данные в браузере</title>
      <link>https://antonz.ru/browser-storage/</link>
      <pubDate>Sun, 26 Sep 2021 09:36:07 +0000</pubDate>
      
      <guid>https://antonz.ru/browser-storage/</guid>
      <description>От мохнатой древности до нашего времени.</description>
      <content:encoded><![CDATA[<p>Поговорим о том, как люди хранили данные в браузере, от мохнатой древности до нашего времени.</p>
<h2 id="1-куки">1. Куки</h2>
<p>Первые инженеры, едва переодевшись из шкур в неопрятные свитера, попытались использовать родной и привычный HTTP-протокол. Проблема в том, что он не хранит состояние (stateless) — пять запросов от Алисы выглядят точно так же, как пять запросов от пяти разных людей.</p>
<p>Что же делать? В любой непонятной ситуации придумывай костыль! Так появились <em>куки</em> (cookie). Это пары строк (ключ — значение), которые браузер гоняет на сервер с каждым запросом. Таким образом stateless протокол внезапно становится немножко stateful.</p>
<figure>
  <img alt="Куки" class="img-bordered-thin" src="storage-cookies.png">
</figure>
<p>Куки хороши тем, что доступны и на клиенте, и на сервере. Когда вы ходите по страницам интернет-магазина и складываете товары в корзину, браузер с каждым запросом передает в куках идентификатор сессии. По нему сервер магазина понимает, что товары относятся именно к вашей корзине.</p>
<p>Куку может установить не только тот сайт, на котором вы находитесь, но и вообще любой (так называемые third-party cookies). Этим немедленно воспользовались хитрозадые рекламодатели. Если на сайте магазина подключен фейсбук, а вы купили ботинки — теперь до конца жизни будете видеть рекламу ботинок на всех сайтах, подключенных к фейсбуку.</p>
<p>Third-party cookies можно отключить в настройках браузера, а в Сафари они даже отключены по умолчанию. Рекомендую это сделать. Правда, некоторые особенно кривые сайты при этом перестанут работать — но оно и к лучшему, как по мне.</p>
<p>Работа с куками в JS реализована традиционно для веба — максимально неудобно. <code>document.cookie</code> — это все куки, склеенные в одну строку через точку с запятой. Наслаждайтесь парсингом.</p>
<p>Вообще, о куках можно еще много плохого рассказать. Делать этого я, конечно, не буду.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies">Куки на MDN</a></p>
<h2 id="2-web-storage">2. Web Storage</h2>
<p>Постепенно разработчики поняли, что надо оставить HTTP в покое и сделать нормальное API хранения данных в браузере. Так появились <em>localStorage</em> и <em>sessionStorage</em> с очень простым интерфейсом:</p>
<ul>
<li>получить значение по ключу,</li>
<li>записать значение по ключу,</li>
<li>удалить значение по ключу.</li>
</ul>
<p>localStorage хранит данные вечно, а sessionStorage — только пока открыта вкладка браузера. local свой у каждого домена, чужие данные посмотреть не получится. А session отдельный у каждой вкладки. Максимальный размер базы — несколько мегабайт.</p>
<figure>
  <img alt="Web Storage" class="img-bordered-thin" src="storage-webstorage.png">
</figure>
<p>И ключи, и значения — только строки, так что числа, массивы и объекты приходится превращать в строку перед сохранением. И парсить из строки при выборке. Обычно не заморачиваются и используют <code>JSON.stringify</code> / <code>JSON.parse</code>.</p>
<p>sessionStorage редко используют, а вот localStorage весьма популярен. Простой, удобный, быстрый — что еще надо:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a90d91">let</span> <span style="color:#000">obj</span> <span style="color:#000">=</span> { <span style="color:#000">a</span><span style="color:#000">:</span> <span style="color:#1c01ce">42</span> };
<span style="color:#a90d91">let</span> <span style="color:#000">objStr</span> <span style="color:#000">=</span> <span style="color:#000">JSON</span>.<span style="color:#000">stringify</span>(<span style="color:#000">obj</span>);
<span style="color:#000">localStorage</span>.<span style="color:#000">setItem</span>(<span style="color:#c41a16">&#34;q&#34;</span>, <span style="color:#000">objStr</span>);

<span style="color:#a90d91">let</span> <span style="color:#000">objStr</span> <span style="color:#000">=</span> <span style="color:#000">localStorage</span>.<span style="color:#000">getItem</span>(<span style="color:#c41a16">&#34;q&#34;</span>);
<span style="color:#000">JSON</span>.<span style="color:#000">parse</span>(<span style="color:#000">objStr</span>);
<span style="color:#177500">// {a: 42}
</span></code></pre></div><p>Ребята из команды Chrome рекомендуют вместо Web Storage использовать более новый механизм — IndexedDB. Это, мягко говоря, странный совет — но о своеобразном подходе разработчиков браузеров мы еще поговорим.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API">Web Storage на MDN</a></p>
<h2 id="3-web-sql">3. Web SQL</h2>
<p>Постепенно разработчики дозрели до полноценной базы данных в браузере. Надо сказать, что абсолютно во всех браузерах — что мобильных, что десктопных — уже встроена отличная СУБД, которая реализует стандарт SQL-92 (и большой кусок более поздних стандартов) — <a href="https://sqlite.org/">SQLite</a>.</p>
<figure>
  <img alt="Web SQL" class="img-bordered-thin" src="storage-websql.png">
</figure>
<p>Казалось бы, придумай удобный интерфейс поверх SQLite, согласуй со всеми и вперед — что может быть логичнее? Собственно, в конце нулевых так и сделали — новый стандарт <em>Web SQL</em> поддержали Apple (Safari), Google (Chrome) и Opera (еще популярная тогда). А Mozilla (Firefox) — нет.</p>
<p>Замечательные люди из Мозиллы заявили, что:</p>
<ol>
<li>Использовать SQL в вебе некрасиво, у веба свой путь.</li>
<li>Где это видано, всем использовать SQLite, вместо того, чтобы каждый браузер напилил свой велосипед.</li>
</ol>
<p>Классные аргументы, да? Очень характерно для веба.</p>
<p>В результате Web SQL убили, использовать его сейчас нельзя. А элегантное решение, которое гении из Мозиллы породили ему на замену (IndexedDB), я вам скоро покажу.</p>
<div class="boxed" style="margin-bottom: .8em;">
<p><strong>🤔 SQL в браузере</strong></p>
<p>Если интересно, как может работать настоящий SQL в браузере — попробуйте онлайн-песочницу <strong><a href="https://sqlime.org/">sqlime</a></strong>. Там можно подключить любую SQLite-базу или создать новую с нуля и делать к ней запросы прямо из браузера.</p>
</div>
<p><a href="https://docs.tizen.org/application/web/guides/w3c/storage/websql/">Документация по Web SQL</a> (для полноты картины)</p>
<h2 id="4-indexed-database">4. Indexed Database</h2>
<p>Ну уж тут-то разработчики браузеров развернулись. <em>IndexedDB</em> — это настоящая NoSQL-база данных у вас в браузере. Можно сделать полноценное приложение, которое шустро ворочает сотнями мегабайт данных, не обращаясь к серверу. Прямо на вашем айфоне, мухаха.</p>
<p>Начнем с хорошего в IndexedDB:</p>
<ul>
<li>есть коллекции (аналог таблиц в реляционных БД), индексы и транзакции;</li>
<li>без проблем хранит массивы и объекты;</li>
<li>поддерживает версионирование схемы данных;</li>
<li>(условно) неограниченный размер базы;</li>
<li>работает асинхронно.</li>
</ul>
<figure>
  <img alt="Indexed Database" class="img-bordered-thin" src="storage-indexeddb.png">
</figure>
<p>А теперь о плохом:</p>
<blockquote class="big"><p>всё очень сложно</p></blockquote>
<p>Никаких вам get / set, будьте любезны освоить многочисленные концепции, приемы и особенности работы, чтобы записать свой несчастный объект в базу и получить его обратно. Уверен, вы просто мечтали освоить еще одну СУБД. Ваши мечты сбылись.</p>
<figure>
  <img alt="Код для IndexedDB" class="img-bordered-thin" src="storage-indexeddb-tutotial.png">
  <figcaption>Картинка из туториала по IndexedDB, для вдохновения. Пришлось уменьшить масштаб, а то на экран не влезала.</figcaption>
</figure>
<p>Ах, и еще. В вебе есть стандарт асинхронной работы — механизм промисов (promise) и async / await. Так вот, IndexedDB его не поддерживает. Потому что fuck you, that&rsquo;s why. Используйте костылики (<a href="https://github.com/jakearchibald/idb">idb</a>) — это ведь так элегантно.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API">IndexedDB на MDN</a></p>
<h2 id="5-cache-api">5. Cache API</h2>
<p>Допустим, у вас веб-приложение для заметок. Было бы здорово, чтобы оно работало даже когда нет сети, верно?</p>
<p>Сами заметки можно хранить в localStorage или IndexedDB. Но что делать, если человек обновит страницу, а сети нет? Тут и пригодится <em>Cache API</em>.</p>
<p>Cache API создан, чтобы хранить не данные приложения, а сетевые запросы и ответы. Обычно это файлы приложения — все ваши <code>*.html</code>, <code>*.css</code> и <code>*.js</code></p>
<p>Если сохранить файлы в кеш, то в офлайн-режиме можно перехватить запросы и вернуть их из кеша, когда человек обновит страницу. За перехват отвечает другой механизм — service worker, о нем не будем.</p>
<p>Cache API простой и асинхронный, одно удовольствие:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a90d91">const</span> <span style="color:#000">cache</span> <span style="color:#000">=</span> <span style="color:#a90d91">await</span> <span style="color:#000">caches</span>.<span style="color:#000">open</span>(<span style="color:#c41a16">&#34;app&#34;</span>);
<span style="color:#a90d91">await</span> <span style="color:#000">cache</span>.<span style="color:#000">add</span>(<span style="color:#c41a16">&#34;/app.js&#34;</span>);
<span style="color:#a90d91">const</span> <span style="color:#000">resp</span> <span style="color:#000">=</span> <span style="color:#a90d91">await</span> <span style="color:#000">cache</span>.<span style="color:#000">match</span>(<span style="color:#c41a16">&#34;/app.js&#34;</span>);
</code></pre></div><p><code>.add()</code> сам запросит указанный файл и сложит ответ в кеш, такой заботливый.</p>
<p>Возможно, вы ожидаете, что Cache API умеет очищать старые или редко используемые записи (на то он и кеш). Но нет! Это веб, так что решите вопрос как-нибудь самостоятельно.</p>
<p>На самом деле, никто не мешает использовать кеш и для данных приложения. Но так обычно не делают:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a90d91">const</span> <span style="color:#000">data</span> <span style="color:#000">=</span> { <span style="color:#000">a</span><span style="color:#000">:</span> <span style="color:#1c01ce">42</span> };
<span style="color:#a90d91">let</span> <span style="color:#000">resp</span> <span style="color:#000">=</span> <span style="color:#a90d91">new</span> <span style="color:#000">Response</span>(<span style="color:#000">JSON</span>.<span style="color:#000">stringify</span>(<span style="color:#000">data</span>));
<span style="color:#a90d91">await</span> <span style="color:#000">cache</span>.<span style="color:#000">put</span>(<span style="color:#c41a16">&#34;data.json&#34;</span>, <span style="color:#000">resp</span>);

<span style="color:#000">resp</span> <span style="color:#000">=</span> <span style="color:#a90d91">await</span> <span style="color:#000">cache</span>.<span style="color:#000">match</span>(<span style="color:#c41a16">&#34;data.json&#34;</span>);
<span style="color:#a90d91">await</span> <span style="color:#000">resp</span>.<span style="color:#000">json</span>();
<span style="color:#177500">// { a: 42 }
</span></code></pre></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Cache">Cache API на MDN</a></p>
<h2 id="6-storage-api">6. Storage API</h2>
<p><em>Storage API</em> на самом деле ничего не хранит (обожаю веб). Вместо этого оно сообщает, сколько места занято вашим барахлом и сколько всего доступно.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a90d91">const</span> {<span style="color:#000">usage</span>, <span style="color:#000">quota</span>} <span style="color:#000">=</span> <span style="color:#a90d91">await</span> <span style="color:#000">navigator</span>.<span style="color:#000">storage</span>.<span style="color:#000">estimate</span>();
</code></pre></div><p><code>usage</code> и <code>quota</code> считаются суммарно по всем видам хранилищ — Web Storage, IndexedDB и CacheAPI.</p>
<p>А ещё можно сообщить браузеру, что ваши данные ну очень ценные, и молча удалять их никак нельзя, только с разрешения человека:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#000">navigator</span>.<span style="color:#000">storage</span>.<span style="color:#000">persist</span>()
</code></pre></div><p>Storage API пока не работает в Safari. Увы.</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_API">Storage API на MDN</a></p>
<h2 id="7-file-whatever-api">7. File (whatever) API</h2>
<p>Пара замечательных API с интуитивно понятными названиями: <em>File System Access API</em> и <em>File and Directory Entries API</em>.</p>
<p>Когда-нибудь они позволят вам писать файлы прямо на устройство пользователя. Но пока совсем сырые, так что не будем на них останавливаться.</p>
<h2 id="очень-краткие-выводы">Очень краткие выводы</h2>
<ul>
<li>Web Storage для мелочевки</li>
<li>IndexedDB для серьезных данных</li>
<li>Cache API для файлов и запросов</li>
</ul>
<p>Куки оставьте Цукербергу, Web SQL погиб молодым, File * API ещё не родились, а Storage API считает место.</p>
<p><em>И подписывайтесь на <a href="https://twitter.com/nalgeon">@nalgeon</a> в твитере, чтобы не пропустить новые заметки</em> 🚀</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Признать проблему</title>
      <link>https://antonz.ru/acknowledge/</link>
      <pubDate>Thu, 09 Sep 2021 10:32:08 +0000</pubDate>
      
      <guid>https://antonz.ru/acknowledge/</guid>
      <description>Продукты работают хуже, потому что команда не признает проблемы.</description>
      <content:encoded><![CDATA[<p>Иногда продукты работают хуже, чем могли бы, потому что команда отказывается признавать проблемы. Давайте посмотрим, как это бывает.</p>
<h2 id="письма-озаказе">Письма о заказе</h2>
<p>Представьте ситуацию. Вы работаете в крупном маркетплейсе. Люди делают на маркетплейсе заказы, он доставляет. А по факту доставки <em>одного</em> заказа присылает <em>шесть</em> писем:</p>
<div class="row">
<div class="col-xs-12 col-sm-4">
<figure>
  <img alt="Письма о заказее" src="acknowledge-ozon.png" class="img-bordered-thin">
</figure>
</div>
<div class="col-xs-12 col-sm-8">
<ul>
  <li>Заказ доставлен</li>
  <li>Электронный чек по 1-й части заказа</li>
  <li>Электронный чек по 2-й части заказа</li>
  <li>Электронный чек по 3-й части заказа</li>
  <li>Электронный чек по 4-й части заказа</li>
  <li>Вы довольны доставкой?</li>
</ul>
</div>
</div>
<p>При этом маркетплейс сам разбивает заказ на части, покупатель никак этим не управляет. В примере выше все части доставлены в один день, в одно время, одним курьером.</p>
<p>Некоторые покупатели почему-то недовольны таким количеством писем и жалуются в саппорт.</p>
<p>Ваши коллеги разводят руками — в заказе было 4 части, значит должно быть четыре чека. Потом, надо же уведомить о доставке, а то вдруг человек не в курсе. И уточнить, всем ли покупатель доволен (мы же клиентоориентированная компания). Вот и получается шесть писем. Ничего не поделаешь.</p>
<h2 id="решение">Решение</h2>
<p>Я предложил эту задачку подписчикам «<a href="https://t.me/dangry">Интерфейсов без шелухи</a>». Вот что они ответили:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="ОПИСАНИЕ" src="acknowledge-solutions.png" class="img-bordered-thin">
  <figcaption>Нерешаемая инженерная проблема</figcaption>
</figure>
</div>
</div>
<p>Конечно, нормальное решение — присылать по факту доставки <em>одно</em> письмо, включив в него и чеки, и опрос, и все что еще важно. Никаким законам это не противоречит и технически реализуемо.</p>
<p>Маркетплейс не присылает четырех разных курьеров, чтобы доставить несчастный заказ — он понимает, что заказ один, и отправляет одного курьера. Аналогично можно объединить четыре письма с чеками в одно, а попотев еще немного — и оставшиеся два письма тоже свести в одно общее.</p>
<p>Но я хочу обратить внимание вот на что.</p>
<h2 id="признать-проблему">Признать проблему</h2>
<p>Самое плохое, что может сделать инженер (продакт, дизайнер, разработчик), столкнувшись с проблемой — отказаться ее признавать. Начать доказывать себе и другим, что все работает правильно и ничего менять нельзя.</p>
<p>Отказываясь признавать проблему, вы бесите потребителей, ослабляете продукт и становитесь хуже как специалист.</p>
<p>Всегда стоит руководствоваться здравым смыслом. Нет, это не нормально — присылать шесть писем об одном чертовом заказе! Это проблема. И важно это признать, хотя бы перед самим собой.</p>
<p>Признав проблему, можно оценить ее влияние, варианты решения и их стоимость. И потом уже думать — будете исправлять или нет.</p>
<p><em>Признав проблему, вы не обязаны ее решать</em>. Кажется, не все это понимают. Возможно, затраты на решение не окупят выгоды. Возможно, есть более критичные проблемы, на которых стоит сосредоточиться. Возможно, вы выберете дешевый обходной путь. Возможно, вообще не найдете решение. Всё это бывает, и в каждом продукте найдутся десятки проблем, которые сознательно не будут исправлены.</p>
<p>Но важно честно сказать себе, что да, это действительно проблема. А не закрывать глаза и убеждать всех вокруг, что ее не существует.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Почтовые адреса в интерфейсе</title>
      <link>https://antonz.ru/postal-address/</link>
      <pubDate>Mon, 06 Sep 2021 14:32:41 +0000</pubDate>
      
      <guid>https://antonz.ru/postal-address/</guid>
      <description>6 правил для работы с адресами.</description>
      <content:encoded><![CDATA[<p>Моя вынужденно-любимая тема! Поговорим о том, как работать с почтовыми адресами в интерфейсах. Вот что я об этом думаю (1–3 обязательно, 4–6 по необходимости и возможности):</p>
<h2 id="1-спрашивать-адрес-одним-полем">1. Спрашивать адрес одним полем</h2>
<p>Не мучайте людей, заставляя их вводить «регион», «город», «населенный пункт» и «улицу». Достаточно одного поля с автодополнением от Дадаты, Яндекса или хотя бы Гугла.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure><img alt="Подсказки адресов" src="suggestions-address.png"></figure></div>
</div>
<h2 id="2-автоматически-определять-индекс">2. Автоматически определять индекс</h2>
<p>У нас не США, люди часто не помнят свой почтовый индекс. Сделайте доброе дело и подставьте его самостоятельно.</p>
<h2 id="3-разрешать-вводить-адрес-вручную">3. Разрешать вводить адрес вручную</h2>
<p>Какой бы адресный справочник вы ни использовали, точно известно одно — жизнь все равно богаче. Запрещаете вводить неизвестные адреса → теряете часть заказов. Не делайте так.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure><img alt="Ошибка ввода адреса" src="suggestions-address-error.png" class="img-bordered-thin"></figure></div>
</div>
<h2 id="4-автоматически-определять-город">4. Автоматически определять город</h2>
<p>Если человек работает из мобильного приложения, вы знаете его координаты. Если из браузера — знаете айпи-адрес. В обоих случаях несложно определить город. Только оставьте возможность его изменить, конечно.</p>
<h2 id="5-показывать-почтовое-отделение">5. Показывать почтовое отделение</h2>
<p>Если человек будет получать товар на почте, сделайте доброе дело и напишите, где находится отделение и какие у него часы работы.</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure><img alt="Почтовое отделение" src="postal-address-5.png" class="img-bordered-thin"></figure></div>
</div>
<h2 id="6-определять-ближайшее-метро">6. Определять ближайшее метро</h2>
<p>Если товар доставит курьер, помогите ему и автоматически определите ближайшее к адресу метро.</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure><img alt="Ближайшее метро" src="postal-address-6.png" class="img-bordered-thin"></figure></div>
</div>
<p class="big">
<a href="https://dadata.ru/blog/basics/best-practises-address/">Подробности — в блоге «Дадаты»</a>
</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Что должно быть в письме о заказе</title>
      <link>https://antonz.ru/order-confirmation/</link>
      <pubDate>Thu, 15 Jul 2021 15:57:34 +0000</pubDate>
      
      <guid>https://antonz.ru/order-confirmation/</guid>
      <description>Номер, стоимость, время доставки.</description>
      <content:encoded><![CDATA[<p>Если продаете товары с доставкой курьером — наверняка отправляете клиентам емейл или смс после того, как заказ оформлен. Все так делают.</p>
<p>Но не у всех это письмо полезно клиенту.</p>
<h2 id="плохо">Плохо</h2>
<p>Например, «Деликатеска» присылает такую простыню:</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<figure>
  <img class="img-bordered-thin" alt="Деликатеска" src="order-confirmation-deli.png">
  <figcaption>Здравствуйте, вам нужно больше читать, поэтому вот</figcaption>
</figure>
</div>
</div>
<p>Тут и правила всего на свете, и мое имя и телефон (спасибо, а то вечно забываю), и бесконечный список заказанных товаров (на скриншоте я его обрезал), и даже призыв защитить природу в финале. Все, кроме самого главного — когда я получу заказ. Формально дата и время в письме есть, но так затейливо спрятаны, что заметить их малореально.</p>
<p>Или вот «Озон»:</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<figure>
  <img class="img-bordered-thin" alt="Озон" src="order-confirmation-ozon.png">
  <figcaption>Все скажу, дату-время доставки не скажу</figcaption>
</figure>
</div>
</div>
<p>Тут получше — хотя бы нет правил поведения при пожаре. Но главный вопрос остается — когда я получу заказ?</p>
<p>А вот «Яндекс-маркет». Почти хорошо, не считая вступления с кнопкой:</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<figure>
  <img class="img-bordered-thin" alt="Яндекс-маркет" src="order-confirmation-ym.png">
  <figcaption>Нам платят, когда вы жмакаете на кнопку «перейти к заказам», поэтому она превыше всего</figcaption>
</figure>
</div>
</div>
<h2 id="лучше">Лучше</h2>
<p>Если письмо бестолковое — человеку все равно придется идти в личный кабинет и искать информацию там. Не делайте так. Если хотите, чтобы письмо пригодилось, напишите вот что:</p>
<blockquote>
<p>Приняли заказ №12345, стоимость 5623 ₽, доставим в пятницу 16 июля с 10 до 14.</p>
</blockquote>
<p>Если ваши айти-системы в состоянии идентифицировать заказ без номера (по телефону, например) — можно номер не писать, станет еще лучше. Правда, может возникнуть путаница, если у клиента несколько заказов одним днем.</p>
<blockquote>
<p>Приняли заказ на 5623 ₽, доставим в пятницу 16 июля с 10 до 14.</p>
</blockquote>
<p>Добавьте телефон, чтобы человек не искал, как с вами связаться:</p>
<blockquote>
<p>Приняли заказ на 5623 ₽, доставим в пятницу 16 июля с 10 до 14. <u>8 800 223-23-23</u></p>
</blockquote>
<p>Если есть ограничения по оплате, тоже напишите:</p>
<blockquote>
<p>Оплата только наличными, у курьера нет сдачи.</p>
</blockquote>
<blockquote>
<p>Заказ оплачен, вот <u>чек</u>.</p>
</blockquote>
<p>Такой формат одинаково подходит для емейла и смс. В смс достаточно этим и ограничиться. В емейле можно дать больше подробностей:</p>
<ul>
<li>список товаров;</li>
<li>как изменить время или отменить заказ;</li>
<li>особенности (курьер звонит за час, доставка до двери и тому подобное).</li>
</ul>
<p>Адрес доставки имеет смысл указывать, если у клиента их несколько. ФИО, телефон, адрес эл. почты — если заказ для другого человека.</p>
<h2 id="итого">Итого</h2>
<p>Укажите в сообщении о заказе:</p>
<ul>
<li>номер (если без него никак);</li>
<li>стоимость,</li>
<li>дату и время доставки,</li>
<li>контактный телефон,</li>
<li>важные ограничения.</li>
</ul>
<blockquote>
<p>Приняли заказ № 12345, стоимость 5623 ₽, доставим в пятницу 16 июля с 10 до 14. Оплата только наличными. <u>8 800 223-23-23</u></p>
</blockquote>
<p>Такое сообщение действительно пригодится.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Дурная кровь</title>
      <link>https://antonz.ru/bad-blood/</link>
      <pubDate>Thu, 08 Jul 2021 15:06:18 +0000</pubDate>
      
      <guid>https://antonz.ru/bad-blood/</guid>
      <description>Захватывающая история бесконечной лжи.</description>
      <content:encoded><![CDATA[<div class="row">
<div class="col-xs-12 col-sm-8">
<p>Прочитал бестселлер о компании Theranos, которая обещала делать сотни анализов по одной капле крови из пальца, а на деле построила масштабнейшую мистификацию, равную которой современная экономика высоких технологий еще не видела.</p>
<p>До этого я читал немало увлекательных биографий людей и компаний, но «Дурная кровь» — нечто особенное. Это натуральный блокбастер, невозможно оторваться. И там чистый голливуд, как будто нарочно придумали захватывающую историю — вот только все это было на самом деле.</p>
</div>
<div class="col-xs-12 col-sm-4">
<figure>
  <a class="img-link" href="https://www.litres.ru/dzhon-karreyru/durnaya-krov/"><img alt="Дурная кровь" src="bad-blood.jpg"></a>
  <figcaption><a href="https://www.litres.ru/dzhon-karreyru/durnaya-krov/">Книга на Литресе</a></figcaption>
</figure>
</div>
</div>
<p>В 2013–2014 году, когда Theranos и основательница компании Элизабет Холмс стали известны на всю страну как спасители миллионов американцев, страдающих от забора крови из вены — компания уже напрочь погрязла во лжи. Theranos и Элизабет последовательно много лет врали сначала инвесторам, затем партнерам, затем регулятору — и наконец реальным живым пациентам.</p>
<p>Все, что Theranos подавала как факт, было ложью. Буквально все. За годы компания смогла сделать два прибора, один из которых тупо не работал, а второй давал погрешность 146% (не шучу, реальная цифра). Скрывая неудачи, компания взломала приборы Siemens, бодяжила кровь физраствором, и использовала эту нелегальную конструкцию с ужасным по качеству результатом.</p>
<p>Сотрудникам затыкали рот соглашением о неразглашении, а непокорные получали судебное разбирательство с перспективой банкротства в процессе — у Theranos были неограниченные финансы и одна из самых злых адвокатских контор в числе крупных акционеров.</p>
<p>У Холмс были отличные связи с высокопоставленными чиновниками, включая администрацию действующего президента. Акционерами компании выступали уважаемые и влиятельные люди.</p>
<p>Когда читаешь это все, постепенно понимаешь, что дело должно закончиться трагедией с сотнями, если не тысячами жертв тераносовских «анализов». По счастливой случайности, один въедливый журналист раскопал историю раньше, чем Theranos развернулись совсем уж широко.</p>
<p>Рекомендую.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Разбор текста по шаблону на Python</title>
      <link>https://antonz.ru/parse/</link>
      <pubDate>Sat, 19 Jun 2021 17:24:59 +0000</pubDate>
      
      <guid>https://antonz.ru/parse/</guid>
      <description>С помощью parse</description>
      <content:encoded><![CDATA[<p>Все знают, как в питоне форматировать текст по шаблону:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">datetime</span> <span style="color:#a90d91">as</span> <span style="color:#000">dt</span>

<span style="color:#000">date</span> <span style="color:#000">=</span> <span style="color:#000">dt</span><span style="color:#000">.</span><span style="color:#000">date</span>(<span style="color:#1c01ce">2020</span>, <span style="color:#1c01ce">11</span>, <span style="color:#1c01ce">20</span>)
<span style="color:#000">who</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#34;Френк&#34;</span>
<span style="color:#000">count</span> <span style="color:#000">=</span> <span style="color:#1c01ce">42</span>

<span style="color:#000">tmpl</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#34;{:%Y-%m-</span><span style="color:#c41a16">%d</span><span style="color:#c41a16">}: </span><span style="color:#c41a16">{}</span><span style="color:#c41a16"> и его </span><span style="color:#c41a16">{:d}</span><span style="color:#c41a16"> друга вылетели в Копенгаген&#34;</span>

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">tmpl</span><span style="color:#000">.</span><span style="color:#000">format</span>(<span style="color:#000">date</span>, <span style="color:#000">who</span>, <span style="color:#000">count</span>)
<span style="color:#c41a16">&#39;2020-11-20: Френк и его 42 друга вылетели в Копенгаген&#39;</span>
</code></pre></div><p>А благодаря библиотеке <a href="https://github.com/r1chardj0n3s/parse"><strong>parse</strong></a> от Ричарда Джонса, с такой же легкостью можно разбирать текст обратно по переменным:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">parse</span>

<span style="color:#000">tmpl</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#34;{:ti}: </span><span style="color:#c41a16">{}</span><span style="color:#c41a16"> и его </span><span style="color:#c41a16">{:d}</span><span style="color:#c41a16"> друга вылетели в Копенгаген&#34;</span>
<span style="color:#000">txt</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#34;2020-11-20: Френк и его 42 друга вылетели в Копенгаген&#34;</span>

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">date</span>, <span style="color:#000">who</span>, <span style="color:#000">count</span> <span style="color:#000">=</span> <span style="color:#000">parse</span><span style="color:#000">.</span><span style="color:#000">parse</span>(<span style="color:#000">tmpl</span>, <span style="color:#000">txt</span>)
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">date</span>
<span style="color:#000">datetime</span><span style="color:#000">.</span><span style="color:#000">datetime</span>(<span style="color:#1c01ce">2020</span>, <span style="color:#1c01ce">11</span>, <span style="color:#1c01ce">20</span>, <span style="color:#1c01ce">0</span>, <span style="color:#1c01ce">0</span>)
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">who</span>
<span style="color:#c41a16">&#39;Френк&#39;</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">count</span>
<span style="color:#1c01ce">42</span>
</code></pre></div><p>parse по большей части поддерживает стандартный питонячий <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language">мини-язык форматирования</a>, так что новый синтаксис учить не придется.</p>
<p>Внутри работает на регулярках. Ноль зависимостей, питон 2 и 3.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Современный HTTP-клиент для Python</title>
      <link>https://antonz.ru/httpx/</link>
      <pubDate>Sat, 12 Jun 2021 17:21:00 +0000</pubDate>
      
      <guid>https://antonz.ru/httpx/</guid>
      <description>requests → httpx</description>
      <content:encoded><![CDATA[<p>Мало у какого языка такая нажористая стандартная библиотека, как у питона. Но все равно для работы с HTTP люди пользуются сторонним пакетом requests.</p>
<p>А я вот отказался от него в пользу замечательного <a href="https://github.com/encode/httpx/"><strong>httpx</strong></a> от Тома Кристи. Синхронный и асинхронный интерфейсы, поддержка wsgi/asgi, плюс все фичи requests — и совместимость с ним!</p>
<p>Можно заменить requests → httpx, и все продолжит работать:</p>
<pre tabindex="0"><code>&gt;&gt;&gt; import httpx
&gt;&gt;&gt; r = httpx.get(&quot;http://httpbingo.org/json&quot;)

&gt;&gt;&gt; r.status_code
200

&gt;&gt;&gt; r.headers[&quot;content-type&quot;]
'application/json; encoding=utf-8'

&gt;&gt;&gt; r.json()[&quot;slideshow&quot;][&quot;title&quot;]
'Sample Slide Show'
</code></pre><p>Питон 3.6+</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Найти группы похожих объектов с помощью SQL</title>
      <link>https://antonz.ru/sql-groups/</link>
      <pubDate>Sun, 06 Jun 2021 14:47:53 +0000</pubDate>
      
      <guid>https://antonz.ru/sql-groups/</guid>
      <description>Ищем похожих людей, товары и все что угодно.</description>
      <content:encoded><![CDATA[<p>Бывает, есть множество объектов с разными свойствами, и хочется идентифицировать группы похожих:</p>
<ul>
<li>объединить людей с одинаковым ФИО и адресами-телефонами в клиентской базе;</li>
<li>сегментировать покупателей магазина по товарам, которые они приобрели;</li>
<li>определить персоны в зависимости от сценариев, по которым люди взаимодействуют с сервисом.</li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Группы похожих объектов" src="sql-groups.png">
</figure>
</div>
</div>
<p>Давайте посмотрим, как решить эту задачу на «голом» SQL.</p>
<h2 id="постановка-задачи">Постановка задачи</h2>
<p>Рассмотрим на конкретном примере. Есть таблица <code>attributes</code> с атрибутами пользователей:</p>
<pre tabindex="0"><code>┌─────────┬─────────┐
│ user_id │  attr   │
├─────────┼─────────┤
│ 1       │ alpha   │
│ 1       │ beta    │
│ 2       │ beta    │
│ 2       │ gamma   │
│ 3       │ delta   │
│ 3       │ epsilon │
│ 4       │ delta   │
│ 4       │ zeta    │
│ 5       │ alpha   │
│ 5       │ zeta    │
│ 6       │ iota    │
│ 7       │ iota    │
│ 7       │ kappa   │
│ 8       │ kappa   │
│ 8       │ lambda  │
└─────────┴─────────┘
</code></pre><p>Хотим объединить пользователей в группы. При этом действуют правила:</p>
<ul>
<li>Если пользователи A и B обладают общим свойством → они входят в одну группу.</li>
<li>Если A и B обладают общим свойством P1, B и C обладают общим свойством P2 → A, B, C входят в одну группу.</li>
<li>Идентификатором группы считается минимальный идентификатор из входящих в нее пользователей.</li>
</ul>
<p>Для каждой группы хотим еще определить список атрибутов ее пользователей.</p>
<p>В итоге должно получиться две группы:</p>
<pre tabindex="0"><code>┌──────────┬─────────┬─────────────────────────────────────┐
│ group_id │ user_id │                attrs                │
├──────────┼─────────┼─────────────────────────────────────┤
│ 1        │ 1       │ alpha,beta,gamma,delta,epsilon,zeta │
│ 1        │ 2       │ alpha,beta,gamma,delta,epsilon,zeta │
│ 1        │ 3       │ alpha,beta,gamma,delta,epsilon,zeta │
│ 1        │ 4       │ alpha,beta,gamma,delta,epsilon,zeta │
│ 1        │ 5       │ alpha,beta,gamma,delta,epsilon,zeta │
│ 6        │ 6       │ iota,kappa,lambda                   │
│ 6        │ 7       │ iota,kappa,lambda                   │
│ 6        │ 8       │ iota,kappa,lambda                   │
└──────────┴─────────┴─────────────────────────────────────┘
</code></pre><p>Как решить задачу на чистом SQL? Использовать процедурные расширения вроде pl/sql и pl/pgSQL — нельзя.</p>
<h2 id="0-какие-бывают-группы">0. Какие бывают группы</h2>
<p>Сначала договоримся о терминах.</p>
<p>Пользователи <code>A</code> и <code>B</code> <em>напрямую</em> похожи, если у них есть общее свойство <code>P</code>. В нашем примере пользователи 1 и 5 похожи напрямую:</p>
<div class="row">
<div class="col-xs-12 col-sm-4">
<figure>
  <img alt="Похожи напрямую" src="sql-groups-direct.png">
</figure>
</div>
</div>
<pre tabindex="0"><code>┌─────────┬─────────┐
│ user_id │  attr   │
├─────────┼─────────┤
│ 1       │ alpha   │
│ 5       │ alpha   │
└─────────┴─────────┘
</code></pre><p>Пользователи <code>A</code> и <code>C</code> <em>транзитивно</em> похожи, если у них нет общих свойств, но существует пользователь <code>B</code> такой, что у <code>A</code> и <code>B</code> есть общее свойство <code>P1</code>, а у <code>B</code> и <code>C</code> — общее свойство <code>P2</code>. В нашем примере пользователи 3 и 5 похожи транзитивно, через пользователя 4:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Похожи транзитивно" src="sql-groups-transitive.png">
</figure>
</div>
</div>
<pre tabindex="0"><code>┌─────────┬─────────┐
│ user_id │  attr   │
├─────────┼─────────┤
│ 3       │ delta   │
│ 4       │ delta   │
│ 4       │ zeta    │
│ 5       │ zeta    │
└─────────┴─────────┘
</code></pre><p>Вообще, когда слышишь задачу «найти группы» — первая мысль должна быть «сортировка». Например, найти группы напрямую похожих пользователей очень просто — достаточно отсортировать или сгруппировать по значению атрибута:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">attributes</span> <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">attr</span>;
</code></pre></div><pre tabindex="0"><code>┌─────────┬─────────┐
│ user_id │  attr   │
├─────────┼─────────┤
│ 1       │ alpha   │
│ 5       │ alpha   │
│ 1       │ beta    │
│ 2       │ beta    │
│ 3       │ delta   │
│ 4       │ delta   │
│ 3       │ epsilon │
│ 2       │ gamma   │
│ 6       │ iota    │
│ 7       │ iota    │
│ 7       │ kappa   │
│ 8       │ kappa   │
│ 8       │ lambda  │
│ 4       │ zeta    │
│ 5       │ zeta    │
└─────────┴─────────┘
</code></pre><div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">attr</span>,
  <span style="color:#000">group_concat</span>(<span style="color:#000">user_id</span>) <span style="color:#a90d91">as</span> <span style="color:#000">users</span>
<span style="color:#a90d91">from</span> <span style="color:#000">attributes</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">attr</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">attr</span>;
</code></pre></div><blockquote>
<p>Здесь я использую функцию <code>group_concat()</code>, чтобы объединить значения в строку. Так она называется в MySQL и SQLite, но в других СУБД тоже есть аналогичные. Например, <code>string_agg()</code> в PostgreSQL и <code>listagg()</code> в Oracle.</p>
</blockquote>
<pre tabindex="0"><code>┌─────────┬───────┐
│  attr   │ users │
├─────────┼───────┤
│ alpha   │ 1,5   │
│ beta    │ 1,2   │
│ delta   │ 3,4   │
│ epsilon │ 3     │
│ gamma   │ 2     │
│ iota    │ 6,7   │
│ kappa   │ 7,8   │
│ lambda  │ 8     │
│ zeta    │ 4,5   │
└─────────┴───────┘
</code></pre><p>Проблема в том, что по условиям задачи мы должны учитывать и транзитивную похожесть. Обычной сортировкой уже не обойдешься.</p>
<h2 id="1-находим-прямые-пары">1. Находим прямые пары</h2>
<p>Если подход с сортировкой не работает, следующая мысль должна быть «пары». Если мы найдем все пары похожих пользователей — сможем построить по ним и группы.</p>
<p>Для начала найдем пары с прямой похожестью:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">create</span> <span style="color:#a90d91">view</span> <span style="color:#000">pairs</span> <span style="color:#a90d91">as</span> 
<span style="color:#a90d91">select</span>
  <span style="color:#a90d91">min</span>(<span style="color:#000">a1</span>.<span style="color:#000">user_id</span>, <span style="color:#000">a2</span>.<span style="color:#000">user_id</span>) <span style="color:#a90d91">as</span> <span style="color:#000">uid1</span>,
  <span style="color:#a90d91">max</span>(<span style="color:#000">a1</span>.<span style="color:#000">user_id</span>, <span style="color:#000">a2</span>.<span style="color:#000">user_id</span>) <span style="color:#a90d91">as</span> <span style="color:#000">uid2</span>
<span style="color:#a90d91">from</span> <span style="color:#000">attributes</span> <span style="color:#a90d91">as</span> <span style="color:#000">a1</span>
  <span style="color:#a90d91">join</span> <span style="color:#000">attributes</span> <span style="color:#a90d91">as</span> <span style="color:#000">a2</span>
    <span style="color:#a90d91">on</span> <span style="color:#000">a1</span>.<span style="color:#000">attr</span> <span style="color:#000">=</span> <span style="color:#000">a2</span>.<span style="color:#000">attr</span> <span style="color:#a90d91">and</span> <span style="color:#000">a1</span>.<span style="color:#000">user_id</span> <span style="color:#000">&lt;&gt;</span> <span style="color:#000">a2</span>.<span style="color:#000">user_id</span>
;
</code></pre></div><pre tabindex="0"><code>┌──────┬──────┐
│ uid1 │ uid2 │
├──────┼──────┤
│ 1    │ 2    │
│ 1    │ 2    │
│ 1    │ 5    │
│ 1    │ 5    │
│ 3    │ 4    │
│ 3    │ 4    │
│ 4    │ 5    │
│ 4    │ 5    │
│ 6    │ 7    │
│ 6    │ 7    │
│ 7    │ 8    │
│ 7    │ 8    │
└──────┴──────┘
</code></pre><p>Здесь левый элемент пары — всегда меньший из двух идентификаторов, а правый — больший. Правило «левый меньший, правый больший» не обязательно, но поможет нам не плодить лишние пары на следующем шаге.</p>
<h2 id="2-находим-транзитивные-пары">2. Находим транзитивные пары</h2>
<p>Теперь добавим к прямым парам транзитивные. Это самый сложный шаг алгоритма: дело в том, что между транзитивно похожими пользователями X и Y может быть не одно промежуточное звено, а сколько угодно:</p>
<pre tabindex="0"><code>X → U1 → U2 → ... → Un → Y
</code></pre><p>Есть только один вид запроса, которой умеет размотать цепочку произвольной длины — <code>WITH RECURSIVE</code>. Подробно расскажу о нем в отдельной заметке, но общий принцип такой:</p>
<ol>
<li>Однократно выполнить запрос <code>Q0</code>.</li>
<li>Снова и снова выполнять запрос <code>Qi</code>, пока он возвращает результаты.</li>
<li>Объединить результаты всех шагов и вернуть итоговый.</li>
</ol>
<p>В нашем случае алгоритм такой:</p>
<ol>
<li>Выбрать все прямые пары.</li>
<li>Для очередной пары пользователей <code>(x, y)</code>:
2.1. Найти пользователей <code>(u1, ... un)</code>, напрямую похожих на <code>y</code>.
2.2. Добавить к результатам пары <code>(x, u1), (x, u2), ... (x, un)</code>.</li>
<li>Выполнить шаг 2 для следующей пары.</li>
</ol>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Находим транзитивнные пары" src="sql-groups-step.png">
</figure>
</div>
</div>
<p>На SQL:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">create</span> <span style="color:#a90d91">view</span> <span style="color:#000">allpairs</span> <span style="color:#a90d91">as</span>
<span style="color:#a90d91">with</span> <span style="color:#a90d91">recursive</span> <span style="color:#000">cte</span>(<span style="color:#000">uid1</span>, <span style="color:#000">uid2</span>) <span style="color:#a90d91">as</span> (
  <span style="color:#177500">-- Пары пользователей (uid1, uid2) с одинаковыми свойствами
</span><span style="color:#177500"></span>  <span style="color:#a90d91">select</span> <span style="color:#000">uid1</span>, <span style="color:#000">uid2</span>
  <span style="color:#a90d91">from</span> <span style="color:#000">pairs</span>
  
  <span style="color:#a90d91">union</span>
  
  <span style="color:#177500">-- Пары, в которых uid2 фигурирует слева
</span><span style="color:#177500"></span>  <span style="color:#177500">-- (они транзитивно похожи на uid1)
</span><span style="color:#177500"></span>  <span style="color:#a90d91">select</span> <span style="color:#000">cte</span>.<span style="color:#000">uid1</span>, <span style="color:#000">p</span>.<span style="color:#000">uid2</span>
  <span style="color:#a90d91">from</span> <span style="color:#000">pairs</span> <span style="color:#a90d91">as</span> <span style="color:#000">p</span>
    <span style="color:#a90d91">join</span> <span style="color:#000">cte</span> <span style="color:#a90d91">on</span> <span style="color:#000">cte</span>.<span style="color:#000">uid2</span> <span style="color:#000">=</span> <span style="color:#000">p</span>.<span style="color:#000">uid1</span>
  
  <span style="color:#a90d91">union</span>
  
  <span style="color:#177500">-- Пары, в которых uid2 фигурирует справа
</span><span style="color:#177500"></span>  <span style="color:#177500">-- (тоже транзитивно похожи на uid1)
</span><span style="color:#177500"></span>  <span style="color:#a90d91">select</span> <span style="color:#000">cte</span>.<span style="color:#000">uid1</span>, <span style="color:#000">p</span>.<span style="color:#000">uid1</span>
  <span style="color:#a90d91">from</span> <span style="color:#000">pairs</span> <span style="color:#a90d91">as</span> <span style="color:#000">p</span>
    <span style="color:#a90d91">join</span> <span style="color:#000">cte</span> <span style="color:#a90d91">on</span> <span style="color:#000">cte</span>.<span style="color:#000">uid2</span> <span style="color:#000">=</span> <span style="color:#000">p</span>.<span style="color:#000">uid2</span>
)
<span style="color:#a90d91">select</span> <span style="color:#000">*</span> <span style="color:#a90d91">from</span> <span style="color:#000">cte</span>;
</code></pre></div><pre tabindex="0"><code>┌──────┬──────┐
│ uid1 │ uid2 │
├──────┼──────┤
│ 1    │ 1    │
│ 1    │ 2    │
│ 1    │ 3    │
│ 1    │ 4    │
│ 1    │ 5    │
│ 3    │ 1    │
│ 3    │ 2    │
│ 3    │ 3    │
│ 3    │ 4    │
│ 3    │ 5    │
│ 4    │ 1    │
│ 4    │ 2    │
│ 4    │ 3    │
│ 4    │ 4    │
│ 4    │ 5    │
│ 6    │ 6    │
│ 6    │ 7    │
│ 6    │ 8    │
│ 7    │ 6    │
│ 7    │ 7    │
│ 7    │ 8    │
└──────┴──────┘
</code></pre><p>Теперь для каждого пользователя (столбец <code>uid1</code>) мы знаем всех похожих на него пользователей (столбец <code>uid2</code>) — как напрямую, так и транзитивно. Осталось из пар сформировать группы.</p>
<h2 id="3-объединяем-пары-вгруппы">3. Объединяем пары в группы</h2>
<p>Пары есть, можно объединить их в группы. Проблема только в том, что в <code>allpairs</code> группы дублируются:</p>
<pre tabindex="0"><code>┌──────┬──────┐
│ uid1 │ uid2 │
├──────┼──────┤
│ 1    │ 1    │
│ 1    │ 2    │
│ 1    │ 3    │
│ 1    │ 4    │
│ 1    │ 5    │
│ 3    │ 1    │
│ 3    │ 2    │
│ 3    │ 3    │
│ 3    │ 4    │
│ 3    │ 5    │
└──────┴──────┘
</code></pre><p>Формально здесь есть группа для <code>uid1 = 1</code> и группа для <code>uid1 = 3</code> — но по сути это одна и та же группа. Дубли нас не интересуют, так что выберем только уникальные группы:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">create</span> <span style="color:#a90d91">view</span> <span style="color:#000">groups</span> <span style="color:#a90d91">as</span>
<span style="color:#a90d91">select</span>
  <span style="color:#a90d91">min</span>(<span style="color:#000">uid1</span>) <span style="color:#a90d91">as</span> <span style="color:#000">group_id</span>,
  <span style="color:#000">uid2</span> <span style="color:#a90d91">as</span> <span style="color:#000">user_id</span>
<span style="color:#a90d91">from</span> <span style="color:#000">allpairs</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#000">uid2</span>;
</code></pre></div><p>Группировка по <code>uid2</code> гарантирует, что каждый пользователь входит только в одну группу. А выбор <code>min(uid1)</code> в качестве идентификатора группы — требование из постановки задачи.</p>
<pre tabindex="0"><code>┌──────────┬─────────┐
│ group_id │ user_id │
├──────────┼─────────┤
│ 1        │ 1       │
│ 1        │ 2       │
│ 1        │ 3       │
│ 1        │ 4       │
│ 1        │ 5       │
│ 6        │ 6       │
│ 6        │ 7       │
│ 6        │ 8       │
└──────────┴─────────┘
</code></pre><p>В целом, задача решена. Осталось только собрать список атрибутов для каждой группы.</p>
<h2 id="4-объединяем-атрибуты-групп">4. Объединяем атрибуты групп</h2>
<p>Тут все просто:</p>
<ol>
<li>Для каждой группы выбираем ее пользователей.</li>
<li>Для каждого пользователя выбираем его атрибуты.</li>
<li>Объединяем атрибуты в одну строку, отсеивая дубли.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">create</span> <span style="color:#a90d91">view</span> <span style="color:#000">group_attributes</span> <span style="color:#a90d91">as</span>
<span style="color:#a90d91">select</span>
  <span style="color:#a90d91">g</span>.<span style="color:#000">group_id</span>,
  <span style="color:#000">group_concat</span>(<span style="color:#a90d91">distinct</span> <span style="color:#000">a</span>.<span style="color:#000">attr</span>) <span style="color:#a90d91">as</span> <span style="color:#000">attrs</span>
<span style="color:#a90d91">from</span> <span style="color:#000">groups</span> <span style="color:#a90d91">as</span> <span style="color:#a90d91">g</span>
  <span style="color:#a90d91">join</span> <span style="color:#000">attributes</span> <span style="color:#a90d91">as</span> <span style="color:#000">a</span> <span style="color:#a90d91">on</span> <span style="color:#000">a</span>.<span style="color:#000">user_id</span> <span style="color:#000">=</span> <span style="color:#a90d91">g</span>.<span style="color:#000">user_id</span>
<span style="color:#a90d91">group</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">g</span>.<span style="color:#000">group_id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────────┬─────────────────────────────────────┐
│ group_id │                attrs                │
├──────────┼─────────────────────────────────────┤
│ 1        │ alpha,beta,gamma,delta,epsilon,zeta │
│ 6        │ iota,kappa,lambda                   │
└──────────┴─────────────────────────────────────┘
</code></pre><h2 id="5-собираем-все-вместе">5. Собираем все вместе</h2>
<p>Для каждого пользователя выбираем номер его группы и список атрибутов, которые в нее входят:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">g</span>.<span style="color:#000">group_id</span>,
  <span style="color:#a90d91">g</span>.<span style="color:#000">user_id</span>,
  <span style="color:#000">ga</span>.<span style="color:#000">attrs</span>
<span style="color:#a90d91">from</span> <span style="color:#000">groups</span> <span style="color:#a90d91">as</span> <span style="color:#a90d91">g</span>
  <span style="color:#a90d91">join</span> <span style="color:#000">group_attributes</span> <span style="color:#a90d91">as</span> <span style="color:#000">ga</span> <span style="color:#a90d91">on</span> <span style="color:#000">ga</span>.<span style="color:#000">group_id</span> <span style="color:#000">=</span> <span style="color:#a90d91">g</span>.<span style="color:#000">group_id</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">g</span>.<span style="color:#000">group_id</span>, <span style="color:#a90d91">g</span>.<span style="color:#000">user_id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────────┬─────────┬─────────────────────────────────────┐
│ group_id │ user_id │                attrs                │
├──────────┼─────────┼─────────────────────────────────────┤
│ 1        │ 1       │ alpha,beta,gamma,delta,epsilon,zeta │
│ 1        │ 2       │ alpha,beta,gamma,delta,epsilon,zeta │
│ 1        │ 3       │ alpha,beta,gamma,delta,epsilon,zeta │
│ 1        │ 4       │ alpha,beta,gamma,delta,epsilon,zeta │
│ 1        │ 5       │ alpha,beta,gamma,delta,epsilon,zeta │
│ 6        │ 6       │ iota,kappa,lambda                   │
│ 6        │ 7       │ iota,kappa,lambda                   │
│ 6        │ 8       │ iota,kappa,lambda                   │
└──────────┴─────────┴─────────────────────────────────────┘
</code></pre><p>Тадам! Задача решена.</p>
<p>Если угодно, можно обойтись <a href="#show-sql" onclick="return showSql();">без промежуточных вьюх</a>.</p>
<pre id="sql" style="display: none">
<code class="language-sql">with recursive

-- Уникальные пары пользователей с одинаковыми свойствами.
-- Если есть пара (1,2), то пары (2,1) уже не будет.
pairs as (
  select distinct
    -- Левый элемент пары - меньший из двух идентификаторов,
    min(a1.user_id, a2.user_id) as uid1,
    -- а правый - больший.
    -- Правило «левый меньший, правый больший» нужно,
    -- чтобы собрать транзитивные пары в allpairs ниже.
    max(a1.user_id, a2.user_id) as uid2
  from attributes as a1
    join attributes as a2
      on a1.attr = a2.attr and a1.user_id <> a2.user_id
),

-- Все пары похожих пользователей (в том числе транзитивно похожих).
-- Общий принцип: для каждой пары пользователей с одинаковыми свойствами
-- выбираем все пары, которые пересекаются с ними. Если выбрать все такие пары,
-- то для каждого пользователя получим полный набор пар, в которые он входит.
allpairs(uid1, uid2) as (
  -- Пары пользователей (uid1, uid2) с одинаковыми свойствами
  select uid1, uid2
  from pairs
  
  union
  
  -- Пары, в которых uid2 фигурирует слева
  -- (они транзитивно похожи на uid1)
  select ap.uid1, p.uid2
  from pairs as p
    join allpairs as ap on ap.uid2 = p.uid1
  
  union
  
  -- Пары, в которых uid2 фигурирует справа
  -- (тоже транзитивно похожи на uid1)
  select ap.uid1, p.uid1
  from pairs as p
    join allpairs as ap on ap.uid2 = p.uid2
),

-- Для каждого пользователя собираем группу похожих на него пользователей.
-- Каждый пользователь может входить только в одну группу:
-- если есть группа 1:[1,2,3], то группы 3:[1,2,3] уже не будет.
groups as (
  select
    -- id группы = минимальный user_id входящих в нее пользователей
    min(uid1) as group_id,
    -- пользователи, входящие в группу
    uid2 as user_id
  from allpairs
  -- группируем по пользователю, чтобы не было разных групп,
  -- в которые входит один и тот же пользователь
  group by uid2
),

-- Атрибуты пользователей для каждой группы (одной строкой)
group_attributes as (
  select
    g.group_id,
    group_concat(distinct a.attr) as attrs
  from groups as g
    join attributes as a on a.user_id = g.user_id
  group by g.group_id
)

-- Итог: для каждого пользователя номер его группы
-- и список атрибутов пользователей, входящих в группу
select
  g.group_id,
  g.user_id,
  ga.attrs
from groups as g
  join group_attributes as ga on ga.group_id = g.group_id
order by g.group_id, g.user_id;</code>
</pre>
<h2 id="итого">Итого</h2>
<p>Вот общий алгоритм решения задач типа «объединить элементы в группы»:</p>
<ol>
<li>Попытаться сформировать группы через обычную сортировку.</li>
<li>Если не получается — идентифицировать все пары элементов.</li>
<li>Объединить пары в группы.</li>
</ol>
<p>Далеко не всегда такие задачи стоит решать на SQL. Часто процедурный код будет понятнее и эффективнее.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на канал <span class="nowrap"><i class="fas fa-database"></i> «<a href="https://t.me/sqliter">SQLite на практике</a>»</span></em></p></div>
</div>
<script>
function showSql(e) {
  document.querySelector("#sql").style.display = "";
  return false;
}
</script>
]]></content:encoded>
    </item>
    
    <item>
      <title>Универсальные оповещения на Python</title>
      <link>https://antonz.ru/notifiers/</link>
      <pubDate>Sat, 05 Jun 2021 15:00:00 +0000</pubDate>
      
      <guid>https://antonz.ru/notifiers/</guid>
      <description>С помощью notifiers.</description>
      <content:encoded><![CDATA[<p>Есть куча способов отправлять уведомления — от проверенного SMTP и удобного Telegram до смс и специальных приложений для мобилок вроде Pushover.</p>
<p>Обычно для этого используют 3rd-party библиотеку соответствующего провайдера. Но есть более удобный способ — пакет <a href="https://github.com/liiight/notifiers"><strong>notifiers</strong></a> от Ора Карми. Он предоставляет простой универсальный интерфейс для отправки сообщений через любой сервис.</p>
<p>Например, через телеграм:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">notifiers</span>

<span style="color:#000">token</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#34;bot_token&#34;</span>
<span style="color:#000">chat_id</span> <span style="color:#000">=</span> <span style="color:#1c01ce">1234</span>
<span style="color:#000">tg</span> <span style="color:#000">=</span> <span style="color:#000">notifiers</span><span style="color:#000">.</span><span style="color:#000">get_notifier</span>(<span style="color:#c41a16">&#34;telegram&#34;</span>)
<span style="color:#000">tg</span><span style="color:#000">.</span><span style="color:#000">notify</span>(<span style="color:#000">message</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;Привет!&#34;</span>, <span style="color:#000">token</span><span style="color:#000">=</span><span style="color:#000">token</span>, <span style="color:#000">chat_id</span><span style="color:#000">=</span><span style="color:#000">chat_id</span>)
</code></pre></div><p>Поддерживается аж 16 провайдеров, а интерфейс один — метод <code>.notify()</code>. И никаких дополнительных 3rd-party библиотек. Удобно!</p>
<p>Питон 3.6+</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Главный критерий хорошего кода</title>
      <link>https://antonz.ru/good-code/</link>
      <pubDate>Wed, 02 Jun 2021 07:27:39 +0000</pubDate>
      
      <guid>https://antonz.ru/good-code/</guid>
      <description>Оптимизируйте T, следите за R.</description>
      <content:encoded><![CDATA[<p>Хороший код — понятный и непрожорливый до ресурсов. Давайте поговорим об этом.</p>
<h2 id="время-напонимание">Время на понимание</h2>
<p>Главный критерий хорошего кода — это время T, которое требуется не-автору, чтобы разобраться в коде. Причем разобраться не на уровне «вроде понятно», а достаточно хорошо, чтобы внести изменения и ничего не сломать.</p>
<p>Чем меньше T, тем лучше код.</p>
<p>Допустим, Нина и Витя реализовали одну и ту же фичу, а вы хотите ее доработать. Если разберетесь в коде Нины за 10 минут, а в коде Вити за 30 минут — код Нины лучше. Неважно, насколько у Вити чистая архитектура, функциональный подход, современный фреймворк и всякое такое.</p>
<p>T-метрика для начинающего и опытного программиста отличается. Поэтому имеет смысл ориентироваться на средний уровень коллег, которые будут работать с кодом. Если у вас в коллективе люди трудятся 10+ лет, и каждый написал по компилятору — даже очень сложный код будет иметь низкое T. Если у вас огромная текучка, а нанимают вчерашних студентов — код должен быть совершенно дубовым, чтобы T не зашкаливало.</p>
<p>Напрямую T не очень-то померяешь, поэтому часто отслеживают вторичные метрики, которые влияют на T:</p>
<ul>
<li>соответствие код-стайлу (<code>black</code> для питона),</li>
<li>«запашки» в коде (<code>pylint</code>, <code>flake8</code>),</li>
<li>цикломатическую сложность (<code>mccabe</code>),</li>
<li>зависимости между модулями (<code>import-linter</code>).</li>
</ul>
<p>Плюс код-ревью.</p>
<h2 id="количество-ресурсов">Количество ресурсов</h2>
<p>Второй критерий хорошего кода — количество ресурсов R, которое он потребляет (времени, процессора, памяти, диска). Чем меньше R, тем лучше код.</p>
<p>Если Нина и Витя реализовали фичу с одинаковым T, но код Нины работает за O(n), а код Вити за O(n²) (при одинаковом потреблении прочих ресурсов) — код Нины лучше.</p>
<p>Насчет ситуации «пожертвовать понятностью ради скорости». Для каждой задачи есть порог потребления ресурсов R0, в который должно уложиться решение. Если R &lt; R0, не надо ухудшать T ради дальнейшего сокращения R.</p>
<p>Если некритичный сервис обрабатывает запрос за 50мс — не надо переписывать его с питона на C, чтобы сократить время до 5мс. И так достаточно быстро.</p>
<!-- Если у кода высокое T при низком R — в большинстве случаев можно сократить T, сохранив R < R0. -->
<p>Иногда, если ресурсы ограничены, или исходные данные большие — не получается достичь R &lt; R0 без ухудшения T. Тогда действительно приходится жертвовать понятностью. Но:</p>
<ol>
<li>Это последний вариант, когда все прочие уже испробованы.</li>
<li>Участки кода, где T↑ ради R↓, должны быть хорошо изолированы.</li>
<li>Таких участков должно быть мало.</li>
<li>Они должны быть подробно документированы.</li>
</ol>
<h2 id="итого">Итого</h2>
<p>Мнемоника хорошего кода:</p>
<pre class="big">
T↓ R&lt;R0
</pre>
<p>Оптимизируйте T, следите за R. Коллеги скажут вам спасибо.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Счетчик для огромных коллекций на Python</title>
      <link>https://antonz.ru/bounter/</link>
      <pubDate>Sun, 30 May 2021 08:34:00 +0000</pubDate>
      
      <guid>https://antonz.ru/bounter/</guid>
      <description>С помощью bounter.</description>
      <content:encoded><![CDATA[<p>В стандартной библиотеке есть класс Counter. Он отлично подходит, чтобы считать <a href="/collections-counter/">количество объектов разных типов</a>. Но что делать, если объектов миллиарды, и счетчик просто не помещается в оперативную память?</p>
<p>Поможет <a href="https://github.com/RaRe-Technologies/bounter"><strong>bounter</strong></a> — это счетчик, который предоставляет схожий интерфейс, но внутри построен на вероятностных структурах данных. За счет этого он занимает в 30–250 раз меньше памяти, но может (слегка) привирать.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">bounter</span> <span style="color:#a90d91">import</span> <span style="color:#000">bounter</span>
<span style="color:#000">counts</span> <span style="color:#000">=</span> <span style="color:#000">bounter</span>(<span style="color:#000">size_mb</span><span style="color:#000">=</span><span style="color:#1c01ce">128</span>)
<span style="color:#000">counts</span><span style="color:#000">.</span><span style="color:#000">update</span>([<span style="color:#c41a16">&#34;a&#34;</span>, <span style="color:#c41a16">&#34;b&#34;</span>, <span style="color:#c41a16">&#34;c&#34;</span>, <span style="color:#c41a16">&#34;a&#34;</span>, <span style="color:#c41a16">&#34;b&#34;</span>])

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">counts</span><span style="color:#000">.</span><span style="color:#000">total</span>()
<span style="color:#1c01ce">5</span>

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">counts</span>[<span style="color:#c41a16">&#34;a&#34;</span>]
<span style="color:#1c01ce">2</span>
</code></pre></div><p>Ноль зависимостей, питон 3.3+</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Поэлементно сравнить коллекции в Python</title>
      <link>https://antonz.ru/compare-sets/</link>
      <pubDate>Tue, 25 May 2021 21:16:27 +0000</pubDate>
      
      <guid>https://antonz.ru/compare-sets/</guid>
      <description>С помощью множества (set).</description>
      <content:encoded><![CDATA[<p>Однажды мы уже смотрели, как множества помогают быстро проверить, <a href="/element-in-collection/">входит ли элемент в коллекцию</a>.</p>
<p>Конечно, это не единственная возможность. Множества в питоне идеально подходят, чтобы поэлементно сравнивать коллекции.</p>
<p>Допустим, мы ведем учет посетителей:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">jan</span> <span style="color:#000">=</span> [<span style="color:#c41a16">&#34;Питер&#34;</span>, <span style="color:#c41a16">&#34;Клер&#34;</span>, <span style="color:#c41a16">&#34;Френк&#34;</span>]
<span style="color:#000">feb</span> <span style="color:#000">=</span> [<span style="color:#c41a16">&#34;Френк&#34;</span>, <span style="color:#c41a16">&#34;Зоя&#34;</span>, <span style="color:#c41a16">&#34;Дуглас&#34;</span>]
<span style="color:#000">mar</span> <span style="color:#000">=</span> [<span style="color:#c41a16">&#34;Клер&#34;</span>, <span style="color:#c41a16">&#34;Питер&#34;</span>, <span style="color:#c41a16">&#34;Зоя&#34;</span>]
</code></pre></div><p>И хотим узнать, кто приходил в январе и феврале. Нет ни малейшего желания писать вложенный цикл с перебором <code>jan</code> и <code>feb</code>. Намного приятнее (и быстрее) использовать множества.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">jan</span> <span style="color:#000">=</span> {<span style="color:#c41a16">&#34;Питер&#34;</span>, <span style="color:#c41a16">&#34;Клер&#34;</span>, <span style="color:#c41a16">&#34;Френк&#34;</span>}
<span style="color:#000">feb</span> <span style="color:#000">=</span> {<span style="color:#c41a16">&#34;Френк&#34;</span>, <span style="color:#c41a16">&#34;Зоя&#34;</span>, <span style="color:#c41a16">&#34;Дуглас&#34;</span>}
<span style="color:#000">mar</span> <span style="color:#000">=</span> {<span style="color:#c41a16">&#34;Клер&#34;</span>, <span style="color:#c41a16">&#34;Питер&#34;</span>, <span style="color:#c41a16">&#34;Зоя&#34;</span>}
</code></pre></div><p>Были в январе и феврале:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">jan</span> <span style="color:#000">&amp;</span> <span style="color:#000">feb</span>
{<span style="color:#c41a16">&#39;Френк&#39;</span>}
</code></pre></div><p>В январе или марте:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">jan</span> <span style="color:#000">|</span> <span style="color:#000">mar</span>
{<span style="color:#c41a16">&#39;Питер&#39;</span>, <span style="color:#c41a16">&#39;Клер&#39;</span>, <span style="color:#c41a16">&#39;Зоя&#39;</span>, <span style="color:#c41a16">&#39;Френк&#39;</span>}
</code></pre></div><p>В феврале, но не в марте:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">feb</span> <span style="color:#000">-</span> <span style="color:#000">mar</span>
{<span style="color:#c41a16">&#39;Френк&#39;</span>, <span style="color:#c41a16">&#39;Дуглас&#39;</span>}
</code></pre></div><p>В январе или феврале, но не в оба месяца:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">jan</span> <span style="color:#000">^</span> <span style="color:#000">feb</span>
{<span style="color:#c41a16">&#39;Питер&#39;</span>, <span style="color:#c41a16">&#39;Клер&#39;</span>, <span style="color:#c41a16">&#39;Зоя&#39;</span>, <span style="color:#c41a16">&#39;Дуглас&#39;</span>}
</code></pre></div><p>Вернулись ли зимние посетители в марте?</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> (<span style="color:#000">jan</span> <span style="color:#000">&amp;</span> <span style="color:#000">feb</span>) <span style="color:#000">&lt;=</span> <span style="color:#000">mar</span>
<span style="color:#a90d91">False</span>
</code></pre></div><p>Все эти операции выполняются за линейное время <code>O(n)</code> вместо квадратичного <code>O(n²)</code>, как было бы на списках.</p>
<p>Кроме обычных множеств бывают замороженные (их нельзя менять):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">visitors</span> <span style="color:#000">=</span> <span style="color:#a90d91">frozenset</span> ()<span style="color:#000">.</span><span style="color:#000">union</span> (<span style="color:#000">jan</span>, <span style="color:#000">feb</span>, <span style="color:#000">mar</span>)
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">visitors</span>
<span style="color:#a90d91">frozenset</span> ({<span style="color:#c41a16">&#39;Питер&#39;</span>, <span style="color:#c41a16">&#39;Клер&#39;</span>, <span style="color:#c41a16">&#39;Зоя&#39;</span>, <span style="color:#c41a16">&#39;Френк&#39;</span>, <span style="color:#c41a16">&#39;Дуглас&#39;</span>})
</code></pre></div><p>Множество можно слепить из любого iterable-типа. Например, из строки:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">frozenset</span> (<span style="color:#c41a16">&#39;abcde&#39;</span>)
<span style="color:#a90d91">frozenset</span> ({<span style="color:#c41a16">&#39;b&#39;</span>, <span style="color:#c41a16">&#39;d&#39;</span>, <span style="color:#c41a16">&#39;e&#39;</span>, <span style="color:#c41a16">&#39;c&#39;</span>, <span style="color:#c41a16">&#39;a&#39;</span>})
</code></pre></div><p>Или даже из диапазона:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">set</span> (<span style="color:#a90d91">range</span> (<span style="color:#1c01ce">1</span>, <span style="color:#1c01ce">10</span>))
{<span style="color:#1c01ce">1</span>, <span style="color:#1c01ce">2</span>, <span style="color:#1c01ce">3</span>, <span style="color:#1c01ce">4</span>, <span style="color:#1c01ce">5</span>, <span style="color:#1c01ce">6</span>, <span style="color:#1c01ce">7</span>, <span style="color:#1c01ce">8</span>, <span style="color:#1c01ce">9</span>}
</code></pre></div><p>Ключи словаря тоже работают как множество:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">stats</span> <span style="color:#000">=</span> { <span style="color:#c41a16">&#34;Френк&#34;</span>: <span style="color:#1c01ce">99</span>, <span style="color:#c41a16">&#34;Клер&#34;</span>: <span style="color:#1c01ce">50</span> }
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">stats</span><span style="color:#000">.</span><span style="color:#000">keys</span>() <span style="color:#000">&amp;</span> <span style="color:#000">jan</span>
{<span style="color:#c41a16">&#39;Клер&#39;</span>, <span style="color:#c41a16">&#39;Френк&#39;</span>}
</code></pre></div><p>В общем, полезная штука.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Планировщик задач на Python</title>
      <link>https://antonz.ru/schedule/</link>
      <pubDate>Sat, 22 May 2021 08:31:00 +0000</pubDate>
      
      <guid>https://antonz.ru/schedule/</guid>
      <description>С помощью schedule.</description>
      <content:encoded><![CDATA[<p>В стандартной библотеке есть встроенный планировщик задач (а чего вообще в ней нет?). Подробно расскажу в другой раз, но в целом он, скажем так, не слишком юзер-френдли.</p>
<p>Поэтому Дэн Бэйдер сделал <a href="https://github.com/dbader/schedule/"><strong>schedule</strong></a> — «планировщик для людей». Смотрите, какой милый:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">schedule</span>
<span style="color:#a90d91">import</span> <span style="color:#000">time</span>

<span style="color:#a90d91">def</span> <span style="color:#000">job</span>():
  <span style="color:#a90d91">print</span>(<span style="color:#c41a16">&#34;I&#39;m working...&#34;</span>)

<span style="color:#000">schedule</span><span style="color:#000">.</span><span style="color:#000">every</span>()<span style="color:#000">.</span><span style="color:#000">hour</span><span style="color:#000">.</span><span style="color:#000">do</span>(<span style="color:#000">job</span>)
<span style="color:#000">schedule</span><span style="color:#000">.</span><span style="color:#000">every</span>(<span style="color:#1c01ce">5</span>)<span style="color:#000">.</span><span style="color:#000">to</span>(<span style="color:#1c01ce">10</span>)<span style="color:#000">.</span><span style="color:#000">minutes</span><span style="color:#000">.</span><span style="color:#000">do</span>(<span style="color:#000">job</span>)
<span style="color:#000">schedule</span><span style="color:#000">.</span><span style="color:#000">every</span>()<span style="color:#000">.</span><span style="color:#000">day</span><span style="color:#000">.</span><span style="color:#000">at</span>(<span style="color:#c41a16">&#34;10:30&#34;</span>)<span style="color:#000">.</span><span style="color:#000">do</span>(<span style="color:#000">job</span>)

<span style="color:#a90d91">while</span> <span style="color:#a90d91">True</span>:
  <span style="color:#000">schedule</span><span style="color:#000">.</span><span style="color:#000">run_pending</span>()
  <span style="color:#000">time</span><span style="color:#000">.</span><span style="color:#000">sleep</span>(<span style="color:#1c01ce">1</span>)
</code></pre></div><p>Ноль зависимостей, чистый и великолепно документированный код, примеры на все случаи жизни.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>«Отнаследовать» функцию от существующей в Python</title>
      <link>https://antonz.ru/functools-partial/</link>
      <pubDate>Tue, 18 May 2021 09:33:53 +0000</pubDate>
      
      <guid>https://antonz.ru/functools-partial/</guid>
      <description>С помощью functool.partial()</description>
      <content:encoded><![CDATA[<p>Допустим, у нас есть список важных гостей. Он в легком беспорядке:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">data</span> <span style="color:#000">=</span> [
  <span style="color:#c41a16">&#34;4 - Дуглас&#34;</span>,
  <span style="color:#c41a16">&#34;2 - Клер&#34;</span>,
  <span style="color:#c41a16">&#34;11 - Зоя&#34;</span>,
  <span style="color:#c41a16">&#34;1 - Френк&#34;</span>,
  <span style="color:#c41a16">&#34;31 - Питер&#34;</span>,
]
</code></pre></div><p>Отсортируем:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">sorted</span>(<span style="color:#000">data</span>)
[<span style="color:#c41a16">&#39;1 - Френк&#39;</span>, <span style="color:#c41a16">&#39;11 - Зоя&#39;</span>, <span style="color:#c41a16">&#39;2 - Клер&#39;</span>, <span style="color:#c41a16">&#39;31 - Питер&#39;</span>, <span style="color:#c41a16">&#39;4 - Дуглас&#39;</span>]
</code></pre></div><p>Порядка не прибавилось — <code>sorted()</code> не знает, что здесь нужна числовая сортировка, а не алфавитная. Поможем ему:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">_key</span>(<span style="color:#000">src</span>):
    <span style="color:#000">parts</span> <span style="color:#000">=</span> <span style="color:#000">src</span><span style="color:#000">.</span><span style="color:#000">partition</span>(<span style="color:#c41a16">&#34; - &#34;</span>)
    <span style="color:#a90d91">return</span> <span style="color:#a90d91">int</span>(<span style="color:#000">parts</span>[<span style="color:#1c01ce">0</span>])

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">sorted</span>(<span style="color:#000">data</span>, <span style="color:#000">key</span><span style="color:#000">=</span><span style="color:#000">_key</span>)
[<span style="color:#c41a16">&#39;1 - Френк&#39;</span>, <span style="color:#c41a16">&#39;2 - Клер&#39;</span>, <span style="color:#c41a16">&#39;4 - Дуглас&#39;</span>, <span style="color:#c41a16">&#39;11 - Зоя&#39;</span>, <span style="color:#c41a16">&#39;31 - Питер&#39;</span>]
</code></pre></div><p>Так хорошо! А чтобы добавить семантичности и не таскать везде дополнительный параметр <code>key</code>, создадим собственную функцию на основе <code>sorted()</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">natsorted</span>(<span style="color:#000">iterable</span>, <span style="color:#000">reverse</span><span style="color:#000">=</span><span style="color:#a90d91">False</span>):
    <span style="color:#a90d91">return</span> <span style="color:#a90d91">sorted</span>(<span style="color:#000">iterable</span>, <span style="color:#000">key</span><span style="color:#000">=</span><span style="color:#000">_key</span>, <span style="color:#000">reverse</span><span style="color:#000">=</span><span style="color:#000">reverse</span>)

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">natsorted</span>(<span style="color:#000">data</span>)
[<span style="color:#c41a16">&#39;1 - Френк&#39;</span>, <span style="color:#c41a16">&#39;2 - Клер&#39;</span>, <span style="color:#c41a16">&#39;4 - Дуглас&#39;</span>, <span style="color:#c41a16">&#39;11 - Зоя&#39;</span>, <span style="color:#c41a16">&#39;31 - Питер&#39;</span>]
</code></pre></div><p>Есть и более лакончиный способ сделать это — через <code>functools.partial()</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">functools</span>
<span style="color:#000">natsorted</span> <span style="color:#000">=</span> <span style="color:#000">functools</span><span style="color:#000">.</span><span style="color:#000">partial</span>(<span style="color:#a90d91">sorted</span>, <span style="color:#000">key</span><span style="color:#000">=</span><span style="color:#000">_key</span>)
</code></pre></div><p><code>partial()</code> создает новую <abbr title="Строго говоря, не функцию, а вызываемый объект, у которого определен дандер call — его можно вызывать, как будто это функция">функцию</abbr> на основе существующей. При этом можно «зафиксировать» один или несколько параметров (мы зафиксировали <code>key</code>), разрешив менять остальные (<code>iterable</code> и <code>reverse</code> в нашем случае).</p>
<p>Таким образом, <code>partial()</code> помогает создавать узкоспециализированные функции на базе более универсальных.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Естественная сортировка на Python</title>
      <link>https://antonz.ru/natsort/</link>
      <pubDate>Sat, 15 May 2021 08:28:00 +0000</pubDate>
      
      <guid>https://antonz.ru/natsort/</guid>
      <description>С помощью natsort.</description>
      <content:encoded><![CDATA[<p><em>Это <a href="/tag/package">#пакетик</a> — еженедельная рубрика о полезных и интересных пакетах на Python.</em></p>
<p>Мой сегодняшний выбор — пакет Сета Мортона <a href="https://github.com/SethMMorton/natsort"><strong>natsort</strong></a>, который сортирует строки привычным для человека образом.</p>
<p>Допустим, у нас есть список важных гостей. Он в легком беспорядке:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">data</span> <span style="color:#000">=</span> [
  <span style="color:#c41a16">&#34;4 - Дуглас&#34;</span>,
  <span style="color:#c41a16">&#34;2 - Клер&#34;</span>,
  <span style="color:#c41a16">&#34;11 - Зоя&#34;</span>,
  <span style="color:#c41a16">&#34;1 - Френк&#34;</span>,
  <span style="color:#c41a16">&#34;31 - Питер&#34;</span>,
]
</code></pre></div><p>Отсортируем:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">sorted</span>(<span style="color:#000">data</span>)
[<span style="color:#c41a16">&#39;1 - Френк&#39;</span>, <span style="color:#c41a16">&#39;11 - Зоя&#39;</span>, <span style="color:#c41a16">&#39;2 - Клер&#39;</span>, <span style="color:#c41a16">&#39;31 - Питер&#39;</span>, <span style="color:#c41a16">&#39;4 - Дуглас&#39;</span>]
</code></pre></div><p>Порядка не прибавилось ツ А вот как будет с <code>natsort</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">import</span> <span style="color:#000">natsort</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">natsort</span><span style="color:#000">.</span><span style="color:#000">natsorted</span>(<span style="color:#000">data</span>)
[<span style="color:#c41a16">&#39;1 - Френк&#39;</span>, <span style="color:#c41a16">&#39;2 - Клер&#39;</span>, <span style="color:#c41a16">&#39;4 - Дуглас&#39;</span>, <span style="color:#c41a16">&#39;11 - Зоя&#39;</span>, <span style="color:#c41a16">&#39;31 - Питер&#39;</span>]
</code></pre></div><p>Другое дело!</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Оконные функции: скользящие агрегаты</title>
      <link>https://antonz.ru/window-rolling/</link>
      <pubDate>Thu, 13 May 2021 14:06:22 +0000</pubDate>
      
      <guid>https://antonz.ru/window-rolling/</guid>
      <description>Скользящее среднее и кумулятивная сумма.</description>
      <content:encoded><![CDATA[<p><em>Это пятая, заключительная статья из серии <a href="/window-functions">Оконные функции в картинках</a>. Рекомендую не просто читать, а <a href="https://stepik.org/z/95367">проходить курс</a> — с ним знания превратятся в навыки.</em></p>
<p>Скользящие агрегаты — это те же сумма и среднее. Только рассчитывают их не по всем элементам набора, а более хитрым способом.</p>
<p>Разберемся на примерах. Здесь возьмем другую табличку — <code>expenses</code>. Она показывает доходы и расходы одного из сотрудников (пусть это будет Марина) за 9 месяцев 2020 года:</p>
<pre tabindex="0"><code>┌──────┬───────┬────────┬─────────┐
│ year │ month │ income │ expense │
├──────┼───────┼────────┼─────────┤
│ 2020 │ 1     │ 94     │ 82      │
│ 2020 │ 2     │ 94     │ 75      │
│ 2020 │ 3     │ 94     │ 104     │
│ 2020 │ 4     │ 100    │ 94      │
│ 2020 │ 5     │ 100    │ 99      │
│ 2020 │ 6     │ 100    │ 105     │
│ 2020 │ 7     │ 100    │ 95      │
│ 2020 │ 8     │ 100    │ 110     │
│ 2020 │ 9     │ 104    │ 104     │
└──────┴───────┴────────┴─────────┘
</code></pre><ul>
    <li><a href="#rolling-avg">скользящее среднее</a>,</li>
    <li><a href="#frame">фрейм</a>,</li>
    <li><a href="#cumulative-sum">нарастающий итог</a>,</li>
    <li><a href="#functions">функции</a>.</li>
</ul>
<p>Все запросы можно повторять <a href="https://antonz.org/sqliter/sandbox/#window.db">в песочнице</a>.</p>
<h2 id="rolling-avg">Скользящее среднее по расходам</h2>
<p>Судя по данным, доходы у Марины растут: 94К ₽ в январе → 104К ₽ в сентябре. А вот растут ли расходы? Сходу сложно сказать, месяц на месяц не приходится. Чтобы сгладить эти скачки, используют «скользящее среднее» — для каждого месяца рассчитывают средний расход с учетом предыдущего и следующего месяца. Например:</p>
<ul>
<li>скользящее среднее за февраль = (январь + февраль + март) / 3;</li>
<li>за март = (февраль + март + апрель) / 3;</li>
<li>за апрель = (март + апрель + май) / 3;</li>
<li>и так далее.</li>
</ul>
<p>Рассчитаем скользящее среднее по всем месяцам:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <strong>Было</strong>
    <figure><img alt="Таблица расходов" src="window-expenses.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    <strong>Стало</strong>
    <figure><img alt="Скользящее среднее" src="window-rolling-avg.png"></figure>
</div>
</div>
<p>Столбец <code>roll_avg</code> показывает скользящее среднее по расходам за три месяца (текущий, предыдущий и следующий). Теперь хорошо видно, что расходы стабильно растут.</p>
<p>Как перейти от «было» к «стало»?</p>
<p>Отсортируем таблицу по месяцам:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">expense</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">roll_avg</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><pre tabindex="0"><code>┌──────┬───────┬─────────┬──────────┐
│ year │ month │ expense │ roll_avg │
├──────┼───────┼─────────┼──────────┤
│ 2020 │ 1     │ 82      │          │
│ 2020 │ 2     │ 75      │          │
│ 2020 │ 3     │ 104     │          │
│ 2020 │ 4     │ 94      │          │
│ 2020 │ 5     │ 99      │          │
│ 2020 │ 6     │ 105     │          │
│ 2020 │ 7     │ 95      │          │
│ 2020 │ 8     │ 110     │          │
│ 2020 │ 9     │ 104     │          │
└──────┴───────┴─────────┴──────────┘
</code></pre><p>Теперь пройдем от первой строчки до последней. На каждом шаге будем считать среднее по предыдущему, текущему и следующему значению из столбца <code>expense</code>:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    1️⃣
    <figure><img alt="Шаг 1" src="rolling-avg-03.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    2️⃣
    <figure><img alt="Шаг 2" src="rolling-avg-04.png"></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
    3️⃣
    <figure><img alt="Шаг 3" src="rolling-avg-05.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    4️⃣
    <figure><img alt="Шаг 4" src="rolling-avg-06.png"></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
    5️⃣
    <figure><img alt="Шаг 5" src="rolling-avg-07.png"></figure>
</div>
<div class="col-xs-12 col-sm-6 flex" style="align-items:center">
    <p>и так далее...</p>
</div>
</div>
<p>Одной гифкой:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Агрегация: скользящее среднее" src="rolling-avg.gif">
</figure>
</div>
</div>
<p>Окно на каждом шаге сдвигается вниз, скользит — так и получается скользящее среднее. Чтобы описать на SQL, придется вспомнить концепцию фреймов, с которой мы познакомились в <a href="/window-offset/">статье о смещении</a>:</p>
<ol>
<li>Окно состоит из одной или нескольких секций (в нашем случае секция одна — все записи <code>expenses</code>).</li>
<li>Внутри секции записи упорядочены по конкретным столбцам (<code>order by year, month</code>).</li>
<li>У каждой записи свой фрейм.</li>
</ol>
<p>Фрейм на каждом шаге охватывает три записи — текущую, предыдущую и следующую:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <figure><img alt="Фрейм 1" src="rolling-1.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    <figure><img alt="Фрейм 2" src="rolling-2.png"></figure>
</div>
</div>
<p>Вот как записать это на SQL:</p>
<pre tabindex="0"><code>window w as (
  order by year, month
  rows between 1 preceding and 1 following
)
</code></pre><p>С <code>order by</code> все понятно, а вторая строчка — это как раз определение фрейма: «выбрать строки от 1 предыдущей до 1 следующей». На следующем шаге разберемся с фреймами подробно, а пока закончим с нашим запросом.</p>
<p>Считаем среднее по расходам — это функция <code>avg()</code>:</p>
<pre tabindex="0"><code>avg(expense) over w
</code></pre><p>Добавим округление и сведем все вместе:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">expense</span>,
  <span style="color:#000">round</span>(<span style="color:#a90d91">avg</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>) <span style="color:#a90d91">as</span> <span style="color:#000">roll_avg</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>
  <span style="color:#a90d91">rows</span> <span style="color:#a90d91">between</span> <span style="color:#1c01ce">1</span> <span style="color:#000">preceding</span> <span style="color:#a90d91">and</span> <span style="color:#1c01ce">1</span> <span style="color:#000">following</span>
)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><pre tabindex="0"><code>┌──────┬───────┬─────────┬──────────┐
│ year │ month │ expense │ roll_avg │
├──────┼───────┼─────────┼──────────┤
│ 2020 │ 1     │ 82      │ 79.0     │
│ 2020 │ 2     │ 75      │ 87.0     │
│ 2020 │ 3     │ 104     │ 91.0     │
│ 2020 │ 4     │ 94      │ 99.0     │
│ 2020 │ 5     │ 99      │ 99.0     │
│ 2020 │ 6     │ 105     │ 100.0    │
│ 2020 │ 7     │ 95      │ 103.0    │
│ 2020 │ 8     │ 110     │ 103.0    │
│ 2020 │ 9     │ 104     │ 107.0    │
└──────┴───────┴─────────┴──────────┘
</code></pre><p>Скользящее среднее по расходам готово!</p>
<h2 id="frame">Фрейм</h2>
<p>В общем случае определение фрейма выглядит так:</p>
<pre tabindex="0"><code>rows between X preceding and Y following
</code></pre><p>Где <code>X</code> — количество строк перед текущей, а <code>Y</code> — количество строк после текущей:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <figure><img alt="Фрейм 1" src="frame-11.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    <figure><img alt="Фрейм 2" src="frame-12.png"></figure>
</div>
</div>
<p>Если указать вместо <code>X</code> или <code>Y</code> значение <code>unbounded</code> — это значит «граница секции»:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <figure><img alt="Фрейм 3" src="frame-31.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    <figure><img alt="Фрейм 4" src="frame-32.png"></figure>
</div>
</div>
<p>Если указать вместо <code>X preceding</code> или <code>Y following</code> значение <code>current row</code> — это значит «текущая запись»:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <figure><img alt="Фрейм 5" src="frame-21.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    <figure><img alt="Фрейм 6" src="frame-22.png"></figure>
</div>
</div>
<p>Фрейм никогда не выходит за границы секции, если столкнулся с ней — обрезается:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <figure><img alt="Фрейм 7" src="frame-41.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    <figure><img alt="Фрейм 8" src="frame-42.png"></figure>
</div>
</div>
<p>Вообще, у фреймов намного больше возможностей, но мы ограничимся этими. Подробности разберем на курсе.</p>
<h2 id="cumulative-sum">Прибыль нарастающим итогом</h2>
<p>Благодаря скользящему среднему, мы выяснили, что в <code>expenses</code> растут и доходы, и расходы. А как они соотносятся друг с другом? Хочется понять, находится ли человек «в плюсе» или «в минусе» с учетом всех заработанных и потраченных денег.</p>
<p>Причем важно понимать не на конец года, а на каждый месяц. Потому что если по итогам года у Марины все ОК, а в июне ушла в минус — это потенциальная проблема (у компаний такую ситуацию называют «кассовым разрывом»).</p>
<p>Поэтому посчитаем доходы и расходы по месяцам нарастающим итогом (кумулятивно):</p>
<ul>
<li>кумулятивный доход за январь = январь;</li>
<li>за февраль = январь + февраль;</li>
<li>за март = январь + февраль + март;</li>
<li>за апрель = январь + февраль + март + апрель;</li>
<li>и так далее.</li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-8">
    <figure><img alt="Прибыль нарастающим итогом" src="window-cumulative-sum.png"></figure>
</div>
</div>
<p><code>t_income</code> показывает доходы нарастающим итогом, <code>t_expense</code> — расходы, а <code>t_profit</code> — прибыль.</p>
<pre tabindex="0"><code>t_profit = t_income - t_expense
</code></pre><p>Как рассчитать кумулятивные показатели?</p>
<p>Отсортируем таблицу по месяцам:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">income</span>, <span style="color:#000">expense</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">t_income</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">t_expense</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">t_profit</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><pre tabindex="0"><code>┌──────┬───────┬────────┬─────────┬──────────┬───────────┬──────────┐
│ year │ month │ income │ expense │ t_income │ t_expense │ t_profit │
├──────┼───────┼────────┼─────────┼──────────┼───────────┼──────────┤
│ 2020 │ 1     │ 94     │ 82      │          │           │          │
│ 2020 │ 2     │ 94     │ 75      │          │           │          │
│ 2020 │ 3     │ 94     │ 104     │          │           │          │
│ 2020 │ 4     │ 100    │ 94      │          │           │          │
│ 2020 │ 5     │ 100    │ 99      │          │           │          │
│ 2020 │ 6     │ 100    │ 105     │          │           │          │
│ 2020 │ 7     │ 100    │ 95      │          │           │          │
│ 2020 │ 8     │ 100    │ 110     │          │           │          │
│ 2020 │ 9     │ 104    │ 104     │          │           │          │
└──────┴───────┴────────┴─────────┴──────────┴───────────┴──────────┘
</code></pre><p>Теперь пройдем от первой строчки до последней. На каждом шаге будем считать суммарные показатели от начала таблицы до текущей строки:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    1️⃣
    <figure><img alt="Шаг 1" src="cumulative-sum-03.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    2️⃣
    <figure><img alt="Шаг 2" src="cumulative-sum-04.png"></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
    3️⃣
    <figure><img alt="Шаг 3" src="cumulative-sum-05.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    4️⃣
    <figure><img alt="Шаг 4" src="cumulative-sum-06.png"></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
    5️⃣
    <figure><img alt="Шаг 5" src="cumulative-sum-07.png"></figure>
</div>
<div class="col-xs-12 col-sm-6 flex" style="align-items:center">
    <p>и так далее...</p>
</div>
</div>
<p>Одной гифкой:</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Агрегация: сумма нарастающим итогом" src="cumulative-sum.gif">
</figure>
</div>
</div>
<p>Окно на каждом шаге охватывает строки от начала таблицы до текущей записи. Мы уже значем, как сформулировать подходящий фрейм:</p>
<pre tabindex="0"><code>window w as (
  order by year, month
  rows between unbounded preceding and current row
)
</code></pre><p>Считаем сумму по доходам и расходам — это функция <code>sum()</code>:</p>
<pre tabindex="0"><code>sum(income) over w as t_income,
sum(expense) over w as t_expense,
</code></pre><p>Прибыль считаем как разницу между доходами и расходами:</p>
<pre tabindex="0"><code>(sum(income) over w) - (sum(expense) over w) as t_profit
</code></pre><p>Все вместе:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>, <span style="color:#000">income</span>, <span style="color:#000">expense</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">income</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">t_income</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">t_expense</span>,
  (<span style="color:#a90d91">sum</span>(<span style="color:#000">income</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>) <span style="color:#000">-</span> (<span style="color:#a90d91">sum</span>(<span style="color:#000">expense</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>) <span style="color:#a90d91">as</span> <span style="color:#000">t_profit</span>
<span style="color:#a90d91">from</span> <span style="color:#000">expenses</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>
  <span style="color:#a90d91">rows</span> <span style="color:#a90d91">between</span> <span style="color:#000">unbounded</span> <span style="color:#000">preceding</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">current</span> <span style="color:#a90d91">row</span>
)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#a90d91">year</span>, <span style="color:#a90d91">month</span>;
</code></pre></div><pre tabindex="0"><code>┌──────┬───────┬────────┬─────────┬──────────┬───────────┬──────────┐
│ year │ month │ income │ expense │ t_income │ t_expense │ t_profit │
├──────┼───────┼────────┼─────────┼──────────┼───────────┼──────────┤
│ 2020 │ 1     │ 94     │ 82      │ 94       │ 82        │ 12       │
│ 2020 │ 2     │ 94     │ 75      │ 188      │ 157       │ 31       │
│ 2020 │ 3     │ 94     │ 104     │ 282      │ 261       │ 21       │
│ 2020 │ 4     │ 100    │ 94      │ 382      │ 355       │ 27       │
│ 2020 │ 5     │ 100    │ 99      │ 482      │ 454       │ 28       │
│ 2020 │ 6     │ 100    │ 105     │ 582      │ 559       │ 23       │
│ 2020 │ 7     │ 100    │ 95      │ 682      │ 654       │ 28       │
│ 2020 │ 8     │ 100    │ 110     │ 782      │ 764       │ 18       │
│ 2020 │ 9     │ 104    │ 104     │ 886      │ 868       │ 18       │
└──────┴───────┴────────┴─────────┴──────────┴───────────┴──────────┘
</code></pre><p>По <code>t_profit</code> видно, что дела у Марины идут неплохо. В некоторых месяцах расходы превышают доходы, но благодаря накопленной «денежной подушке» кассового разрыва не происходит.</p>
<h2 id="functions">Функции агрегации</h2>
<p>Скользящие агрегаты используют те же самые функции, что и агрегаты обычные:</p>
<ul>
<li><code>min()</code> и <code>max()</code></li>
<li><code>count()</code>, <code>avg()</code> и <code>sum()</code></li>
</ul>
<p>Разница только в наличии фрейма у скользящих агрегатов.</p>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>Мы рассмотрели четыре класса задач, которые решаются с помощью оконных функций в SQL:</p>
<ul>
<li>Ранжирование (всевозможные рейтинги).</li>
<li>Сравнение со смещением (соседние элементы и границы).</li>
<li>Агрегация (количество, сумма и среднее).</li>
<li>Скользящие агрегаты (сумма и среднее в динамике).</li>
</ul>
<p>Теперь попробуйте применить «окошки» на практике!</p>
<p>Чтобы узнать больше об оконных функциях или потренироваться — <a href="https://stepik.org/z/95367"><strong>записывайтесь на курс</strong></a> 🚀</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Второй язык для питониста</title>
      <link>https://antonz.ru/python-plus-one/</link>
      <pubDate>Sun, 09 May 2021 12:15:13 +0000</pubDate>
      
      <guid>https://antonz.ru/python-plus-one/</guid>
      <description>Кто из популярных языков компенсирует недостатки питона?</description>
      <content:encoded><![CDATA[<p>Если вы давно и хорошо знаете питон, некоторые моменты в нем могут напрягать. Например, необходимость начинать каждый новый проект с создания виртуального окружения и установки пачки тулов вроде black, pylint и pytest. Или отсутствующий рефакторинг и частые ошибки из-за динамической типизации. Или убоговатая асинхронность и костыль в виде GIL.</p>
<p>Если у вас так — возможно, пора освоить второй язык. Логично выбрать вариант без питонячих недостатков: статически типизированный, с готовым тулингом, продуманной асинхронностью и параллелизмом.</p>
<p>Давайте посмотрим, кто из топа StackOverflow подходят на роль второго языка.</p>
<p><strong>JavaScript</strong>. Динамический язык, который во всем хуже питона. Единственный плюс — только с ним нативно работают браузеры. Если мечтаете о фронтенде — хороший выбор, если нет — с негодованием отметаем.</p>
<p><strong>Bash/Shell/PowerShell</strong>. Моя любимая тройка write-only языков! Легко написать что угодно, уже через неделю невозможно понять, что написал. Нет.</p>
<p><strong>C#</strong>. Интересный вариант. Новее питона, отличная стандартная библиотека, статически типизирован, все в порядке с асинхронностью. Начинался как очень простой, но за 20 лет превратился в один из самых фичастых языков. Кросс-платформенный, несмотря на виндовые корни.</p>
<p><strong>PHP</strong>. Динамический язык с тяжелым наследием, который в свежих версиях решили превратить в Java образца 2005 года. Я даже не знаю, что может быть хуже.</p>
<p><strong>TypeScript</strong>. А это JavaScript, который решили превратить в современную Java. Классическая дырявая абстракция, джаваскрипт протекает из всех щелей. Статически типизирован, куча наворотов. Стандартная библиотека отсутствует. Фронтендеры на него молятся, но у питониста вряд ли вызовет что-то помимо отвращения.</p>
<p><strong>C++</strong>. В рейтинге мозговыносящих языков точно занял бы первое место. Старый язык, в который запихнули все что только можно. Гарантирую, писать на C++ вам будет физически больно.</p>
<p><strong>C</strong>. Самый старый, но относительно простой язык. Статические типы, очень низкоуровневый, скудная стандартная библиотека. В 1991 году был бы хорошим выбором. Зато быстрый, да.</p>
<p><strong>Go</strong>. Интересный вариант. Новый, отличная стандартная библиотека, статически типизирован, классная асинхронность. Одним из основных принципов считает простоту, так что не превратился в фича-монстра, в отличие от C#. Можно делать как низкоуровневые штуки, так и бизнес-приложения.</p>
<p><strong>Kotlin</strong>. Интересный вариант. Котлин — это Java, если бы ее изобрели в 2010 году. Статический, много фич. Работает поверх JVM (виртуальная машина джавы), можно использовать любые джава-либы.</p>
<p>И несколько нишевых языков с преданным сообществом:</p>
<p><strong>Rust</strong>. Современная альтернатива C++. Отличный вариант для низкоуровневых штук, плохо подходит для остального. Много фич, тяжело освоить. Хорошая стандартная библиотека.</p>
<p><strong>Clojure</strong>. Современный LISP. Язык, в котором простота возведена в абсолют — всё есть данные. Акцент на неизменяемых данных, продуманная стандартная библиотека. Работает поверх JVM.</p>
<p>Итого, из топ-10 мне кажутся интересными C#, Go и Kotlin. Лично я выбрал Go, потому что устал от фичастых языков и наслоений абстракций. Хочу простоты.</p>
<p>Если вам тоже интересно попробовать — присоединяйтесь ко мне на бесплатном курсе:</p>
<p class="big">
<a href="https://stepik.org/96832">Go на практике</a>
</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на канал <span class="nowrap"><i class="fab fa-telegram-plane"></i> «<a href="https://t.me/thank_go">Thank Go!</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Видение, эмпатия, смелость</title>
      <link>https://antonz.ru/thoughts-on-flash/</link>
      <pubDate>Thu, 06 May 2021 16:19:04 +0000</pubDate>
      
      <guid>https://antonz.ru/thoughts-on-flash/</guid>
      <description>RIP веб 2010–2020.</description>
      <content:encoded><![CDATA[<p>Одиннадцать лет назад, весной 2010 года, Adobe Flash был на пике популярности. Adobe построил вокруг этого поделия аж целую платформу, с прицелом на мобильные устройства и встраиваемое ПО.</p>
<p>Флеш был так успешен, что Microsoft еще в 2007 году выкатила конкурента — аналогичную хреновину под названием Silverlight. Борьба намечалась нешуточная.</p>
<p>Apple, владея стремительно набирающей популярность iOS, не могла остаться в стороне. И анонсировала собственную альтернативу флешу — iSlate. Аналогичный шаг сделал и Google. В следующие 10 лет развернулась кровавая битва флешеподобных плагинов, а обычный веб (HTML и JS) остались совсем не у дел.</p>
<p>А, нет. Вычеркните последний абзац. Ничего этого не было, и вот почему.</p>
<p>29 апреля 2010 года Стив Джобс опубликовал открытое письмо под названием «Thoughts on Flash», в котором разгромил флеш и поддержал HTML5. В течение двух следующих лет Adobe Flash и Microsoft Silverlight были уничтожены. Технически они продолжали существовать еще довольно долго, но и разработчики, и сами производители признали, что это тупик.</p>
<p>HTML5, CSS и JS получили такой мощный пинок, что до сих пор не могут остановиться (вот кому мы обязаны мириадами глючных фич веба и армией js-фреймворков). При всех недостатках, веб действительно оказался лучшим выбором, потому что не принадлежал одному монополисту.</p>
<p>Заботился ли Джобс о процветании Apple, когда писал свое письмо? Конечно. Он честно сказал, что благодаря отмиранию флеша Apple продаст больше устройств. Но он также думал и о разработчиках, и о пользователях. Джобс понимал, что ждет нас всех, если индустрия пойдет по пути конкурирующих плагинов вместо развития общей платформы — веба.</p>
<p>Джобс не был ангелом, это уж точно. Но у него было видение, и эмпатия, и смелость. Не будь этого письма в 2010 году — не было бы веба, каким мы его знаем сегодня.</p>
<p>В 2020 году Apple тихо удалила открытое письмо Джобса с сайта компании. Конечно, зачем эти слова про открытый веб — у нынешнего Apple совсем другие приоритеты. Да и у других техногигантов тоже. Очень жаль.</p>
<p class="big"><a href="https://telegra.ph/Thoughts-on-Flash-05-06">Thoughts on Flash</a></p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Оконные функции: агрегация</title>
      <link>https://antonz.ru/window-aggregate/</link>
      <pubDate>Thu, 29 Apr 2021 14:44:36 +0000</pubDate>
      
      <guid>https://antonz.ru/window-aggregate/</guid>
      <description>Считаем суммарные показатели.</description>
      <content:encoded><![CDATA[<p><em>Это четвертая статья из серии <a href="/window-functions">Оконные функции в картинках</a>. Рекомендую не просто читать, а <a href="https://stepik.org/z/95367">проходить курс</a> — с ним знания превратятся в навыки.</em></p>
<p>Агрегация — это когда мы считаем суммарные или средние показатели. Например, среднюю зарплату по каждому региону или количество золотых медалей у каждой страны в зачете Олимпийских игр.</p>
<p>Мы будем агрегировать данные по сотрудникам из таблички <code>employees</code>:</p>
<pre tabindex="0"><code>┌────┬──────────┬────────┬────────────┬────────┐
│ id │   name   │  city  │ department │ salary │
├────┼──────────┼────────┼────────────┼────────┤
│ 11 │ Дарья    │ Самара │ hr         │ 70     │
│ 12 │ Борис    │ Самара │ hr         │ 78     │
│ 21 │ Елена    │ Самара │ it         │ 84     │
│ 22 │ Ксения   │ Москва │ it         │ 90     │
│ 23 │ Леонид   │ Самара │ it         │ 104    │
│ 24 │ Марина   │ Москва │ it         │ 104    │
│ 25 │ Иван     │ Москва │ it         │ 120    │
│ 31 │ Вероника │ Москва │ sales      │ 96     │
│ 32 │ Григорий │ Самара │ sales      │ 96     │
│ 33 │ Анна     │ Москва │ sales      │ 100    │
└────┴──────────┴────────┴────────────┴────────┘
</code></pre><ul>
    <li><a href="#partition-sum">сумма по секции</a>,</li>
    <li><a href="#filtering">фильтрация</a>,</li>
    <li><a href="#window-description">описание окна</a>,</li>
    <li><a href="#functions">функции агрегации</a>.</li>
</ul>
<p>Все запросы можно повторять <a href="https://antonz.org/sqliter/sandbox/#window.db">в песочнице</a>.</p>
<h2 id="partition-sum">Сравнение с фондом оплаты труда</h2>
<p>У каждого департамента есть фонд оплаты труда — денежная сумма, которая ежемесячно уходит на выплату зарплат сотрудникам. Посмотрим, какой процент от этого фонда составляет зарплата каждого сотрудника:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <strong>Было</strong>
    <figure><img alt="Таблица сотрудников" src="window-employees.png" style="max-height: 255px;"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    <strong>Стало</strong>
    <figure><img alt="Разница с предыдущим" src="window-aggregate-sum.png"></figure>
</div>
</div>
<p>Столбец <code>fund</code> показывает фонд оплаты труда отдела, а <code>perc</code> — долю зарплаты сотрудника от этого фонда. Видно, что в HR и продажах все более-менее ровно, а у айтишников есть заметный разброс зарплат.</p>
<p>Как перейти от «было» к «стало»?</p>
<p>Отсортируем таблицу по департаментам:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">perc</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────────┬────────────┬────────┬──────┬──────┐
│   name   │ department │ salary │ fund │ perc │
├──────────┼────────────┼────────┼──────┼──────┤
│ Дарья    │ hr         │ 70     │      │      │
│ Борис    │ hr         │ 78     │      │      │
│ Елена    │ it         │ 84     │      │      │
│ Ксения   │ it         │ 90     │      │      │
│ Леонид   │ it         │ 104    │      │      │
│ Марина   │ it         │ 104    │      │      │
│ Иван     │ it         │ 120    │      │      │
│ Вероника │ sales      │ 96     │      │      │
│ Григорий │ sales      │ 96     │      │      │
│ Анна     │ sales      │ 100    │      │      │
└──────────┴────────────┴────────┴──────┴──────┘
</code></pre><p>Для удобства я добавил сортировку по зарплате и идентификатору. Но, как вы увидите дальше, в данном случае можно обойтись и без них.</p>
<p>Теперь пройдем от первой строчки до последней. На каждом шаге будем считать:</p>
<ul>
<li><code>fund</code> — сумму зарплат по департаменту в целом (она одинакова для всех сотрудников департамента);</li>
<li><code>perc</code> — долю зарплаты сотрудника от этой суммы.</li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-6">
    1️⃣
    <figure><img alt="Шаг 1" src="aggregate-sum-03.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    2️⃣
    <figure><img alt="Шаг 2" src="aggregate-sum-04.png"></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
    3️⃣
    <figure><img alt="Шаг 3" src="aggregate-sum-05.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    4️⃣
    <figure><img alt="Шаг 4" src="aggregate-sum-06.png"></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
    5️⃣
    <figure><img alt="Шаг 5" src="aggregate-sum-07.png"></figure>
</div>
<div class="col-xs-12 col-sm-6 flex" style="align-items:center">
    <p>и так далее...</p>
</div>
</div>
<p>Одной гифкой:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Агрегация: сумма по секции" src="aggregate-sum.gif">
</figure>
</div>
</div>
<p>Окно состоит из секций по департаментам. При этом порядок записей в секции неважен: мы считаем сумму значений <code>salary</code>, а она не зависит от порядка.</p>
<pre tabindex="0"><code>window w as (
  partition by department
)
</code></pre><p>Для расчета <code>fund</code> подойдет обычная функция <code>sum()</code> — ее можно использовать поверх окна. А <code>perc</code> посчитаем как <code>salary / fund</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>,
  <span style="color:#000">round</span>(<span style="color:#000">salary</span> <span style="color:#000">*</span> <span style="color:#1c01ce">100</span>.<span style="color:#1c01ce">0</span> <span style="color:#000">/</span> <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>) <span style="color:#a90d91">as</span> <span style="color:#000">perc</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────────┬────────────┬────────┬──────┬──────┐
│   name   │ department │ salary │ fund │ perc │
├──────────┼────────────┼────────┼──────┼──────┤
│ Дарья    │ hr         │ 70     │ 148  │ 47.0 │
│ Борис    │ hr         │ 78     │ 148  │ 53.0 │
├──────────┼────────────┼────────┼──────┼──────┤
│ Елена    │ it         │ 84     │ 502  │ 17.0 │
│ Ксения   │ it         │ 90     │ 502  │ 18.0 │
│ Леонид   │ it         │ 104    │ 502  │ 21.0 │
│ Марина   │ it         │ 104    │ 502  │ 21.0 │
│ Иван     │ it         │ 120    │ 502  │ 24.0 │
├──────────┼────────────┼────────┼──────┼──────┤
│ Вероника │ sales      │ 96     │ 292  │ 33.0 │
│ Григорий │ sales      │ 96     │ 292  │ 33.0 │
│ Анна     │ sales      │ 100    │ 292  │ 34.0 │
└──────────┴────────────┴────────┴──────┴──────┘
</code></pre><p>Функция <code>sum()</code> работает без неожиданностей — считает сумму значений по всей секции, которой принадлежит текущая строка.</p>
<h2 id="filtering">Фильтрация и порядок выполнения</h2>
<p>Вернемся к запросу, который считал фонд оплаты труда по департаменту:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────────┬────────────┬────────┬──────┐
│   name   │ department │ salary │ fund │
├──────────┼────────────┼────────┼──────┤
│ Дарья    │ hr         │ 70     │ 148  │
│ Борис    │ hr         │ 78     │ 148  │
│ Елена    │ it         │ 84     │ 502  │
│ Ксения   │ it         │ 90     │ 502  │
│ Леонид   │ it         │ 104    │ 502  │
│ Марина   │ it         │ 104    │ 502  │
│ Иван     │ it         │ 120    │ 502  │
│ Вероника │ sales      │ 96     │ 292  │
│ Григорий │ sales      │ 96     │ 292  │
│ Анна     │ sales      │ 100    │ 292  │
└──────────┴────────────┴────────┴──────┘
</code></pre><p>Допустим, мы хотим оставить в отчете только самарских сотрудников. Добавим фильтр:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">where</span> <span style="color:#000">city</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;Самара&#39;</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────────┬────────┬──────┐
│   name   │ salary │ fund │
├──────────┼────────┼──────┤
│ Дарья    │ 70     │ 148  │
│ Борис    │ 78     │ 148  │
│ Елена    │ 84     │ 188  │
│ Леонид   │ 104    │ 188  │
│ Григорий │ 96     │ 96   │
└──────────┴────────┴──────┘
</code></pre><p>Фильтр сработал. Вот только значения <code>fund</code> отличаются от ожидаемых:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <strong>Ожидание</strong>
    <pre><code>┌──────────┬────────┬──────┐
│   name   │ salary │ fund │
├──────────┼────────┼──────┤
│ Дарья    │ 70     │ 148  │
│ Борис    │ 78     │ 148  │
│ Елена    │ 84     │ 502  │
│ Леонид   │ 104    │ 502  │
│ Григорий │ 96     │ 292  │
└──────────┴────────┴──────┘</code></pre>
</div>
<div class="col-xs-12 col-sm-6">
    <strong>Реальность</strong>
    <pre><code>┌──────────┬────────┬──────┐
│   name   │ salary │ fund │
├──────────┼────────┼──────┤
│ Дарья    │ 70     │ 148  │
│ Борис    │ 78     │ 148  │
│ Елена    │ 84     │ 188  │
│ Леонид   │ 104    │ 188  │
│ Григорий │ 96     │ 96   │
└──────────┴────────┴──────┘</code></pre>
</div>
</div>
<p>Все дело в порядке выполнения операций. Вот в какой последовательности действует движок, когда выполняет запрос:</p>
<ol>
<li>Взять нужные таблицы (<code>from</code>) и соединить их при необходимости (<code>join</code>).</li>
<li>Отфильтровать строки (<code>where</code>).</li>
<li>Сгруппировать строки (<code>group by</code>).</li>
<li>Отфильтровать результат группировки (<code>having</code>).</li>
<li>Взять конкретные столбцы из результата (<code>select</code>).</li>
<li><strong>Рассчитать значения оконных функций</strong> (<code>function() over window</code>).</li>
<li>Отсортировать то, что получилось (<code>order by</code>).</li>
</ol>
<p>Таким образом, окна отрабатывают предпоследним шагом, уже после фильтрации и группировки результатов. Поэтому в нашем запросе <code>fund</code> отражает не сумму всех зарплат по департаменту, а сумму только по самарским сотрудникам.</p>
<p>Решение — использовать подзапрос с окном и фильтровать его в основном запросе:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">with</span> <span style="color:#000">emp</span> <span style="color:#a90d91">as</span> (
  <span style="color:#a90d91">select</span>
    <span style="color:#000">name</span>, <span style="color:#000">city</span>, <span style="color:#000">salary</span>,
    <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
  <span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
  <span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>)
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>
)
<span style="color:#a90d91">select</span> <span style="color:#000">name</span>, <span style="color:#000">salary</span>, <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">emp</span>
<span style="color:#a90d91">where</span> <span style="color:#000">city</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;Самара&#39;</span>;
</code></pre></div><pre tabindex="0"><code>┌──────────┬────────┬──────┐
│   name   │ salary │ fund │
├──────────┼────────┼──────┤
│ Дарья    │ 70     │ 148  │
│ Борис    │ 78     │ 148  │
│ Елена    │ 84     │ 502  │
│ Леонид   │ 104    │ 502  │
│ Григорий │ 96     │ 292  │
└──────────┴────────┴──────┘
</code></pre><h2 id="window-description">Описание окна</h2>
<p>До сих пор мы описывали окно в блоке <code>window</code> и ссылались на него в выражении <code>over</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">emp_count</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────────┬────────────┬────────┬───────────┬──────┐
│   name   │ department │ salary │ emp_count │ fund │
├──────────┼────────────┼────────┼───────────┼──────┤
│ Дарья    │ hr         │ 70     │ 2         │ 148  │
│ Борис    │ hr         │ 78     │ 2         │ 148  │
│ Елена    │ it         │ 84     │ 5         │ 502  │
│ Ксения   │ it         │ 90     │ 5         │ 502  │
│ Леонид   │ it         │ 104    │ 5         │ 502  │
│ Марина   │ it         │ 104    │ 5         │ 502  │
│ Иван     │ it         │ 120    │ 5         │ 502  │
│ Вероника │ sales      │ 96     │ 3         │ 292  │
│ Григорий │ sales      │ 96     │ 3         │ 292  │
│ Анна     │ sales      │ 100    │ 3         │ 292  │
└──────────┴────────────┴────────┴───────────┴──────┘
</code></pre><p>Это не единственный способ. SQL разрешает вообще не использовать <code>window</code> и описывать окно прямо внутри <code>over</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#000">over</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>) <span style="color:#a90d91">as</span> <span style="color:#000">emp_count</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> (<span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>) <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Мне больше нравится вариант с <code>window</code> — его легче читать, и можно явно переиспользовать окно. Но в документации часто встречается определение окна внутри <code>over</code>, поэтому не удивляйтесь, когда увидите его.</p>
<p>Кстати, определение окна может быть пустым:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">count</span>(<span style="color:#000">*</span>) <span style="color:#000">over</span> () <span style="color:#a90d91">as</span> <span style="color:#000">emp_count</span>,
  <span style="color:#a90d91">sum</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> () <span style="color:#a90d91">as</span> <span style="color:#000">fund</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><p>Такое окно включает все строки, так что <code>emp_count</code> покажет общее количество сотрудников, а <code>fund</code> — общий фонд оплаты труда по всем записям <code>employees</code>.</p>
<h2 id="functions">Функции агрегации</h2>
<table>
    <tbody>
        <tr>
            <td class="nowrap"><code>min(value)</code></td>
            <td>минимальное <code>value</code> среди строк, входящих в окно</td>
        </tr>
        <tr>
            <td class="nowrap"><code>max(value)</code></td>
            <td>максимальное <code>value</code></td>
        </tr>
        <tr>
            <td class="nowrap"><code>count(value)</code></td>
            <td>количество <code>value</code>, не равных <code>null</code></td>
        </tr>
        <tr>
            <td class="nowrap"><code>avg(value)</code></td>
            <td>среднее значение по всем <code>value</code></td>
        </tr>
        <tr>
            <td class="nowrap"><code>sum(value)</code></td>
            <td>сумма значений <code>value</code></td>
        </tr>
        <tr>
            <td class="nowrap"><code>group_concat(value, separator)</code></td>
            <td>строка, которая соединяет значения <code>value</code> через разделитель <code>separator</code></td>
        </tr>
    </tbody>
</table>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>Мы разобрались, как считать фиксированные агрегаты в окнах. В <a href="/window-rolling/">следующей части</a> займемся скользящими агрегатами!</p>
<p>Чтобы закрепить знания на практике — <a href="https://stepik.org/z/95367"><strong>записывайтесь на курс</strong></a> 🚀</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>​Шпаргалки как альтернатива man</title>
      <link>https://antonz.ru/cheat-sh/</link>
      <pubDate>Fri, 23 Apr 2021 10:46:01 +0000</pubDate>
      
      <guid>https://antonz.ru/cheat-sh/</guid>
      <description>Конкретные примеры вызова линуксовых утилит вместо портянки с документацией.</description>
      <content:encoded><![CDATA[<p>Я вечно забываю синтаксис линуксовых утилит вроде <code>grep</code>, <code>sed</code> и <code>find</code>. Есть команда <code>man</code>, которая показывает документацию по утилите, но для меня она совершенно бесполезна — никогда не получается найти то, что нужно (возможно, это только я такой тупой).</p>
<p>Поэтому был бесконечно счастлив, когда на днях нашел приятную альтернативу от Игоря Чубина — «шпаргалки» с конкретными примерами. Чтобы их включить, достаточно добавить такую функцию в <code>.bashrc</code>:</p>
<pre tabindex="0"><code>function cht() { curl &quot;cht.sh/$1&quot;; }
</code></pre><p>И вызвать шпаргалку по конкретной команде:</p>
<pre tabindex="0"><code>$ cht grep
$ cht sed
$ cht tr
</code></pre><p><img src="cheat.sh.png" alt="cheat.sh"></p>
<p>Есть консольный клиент и много всяких наворотов, подробности <a href="https://github.com/chubin/cheat.sh">в репозитории автора</a>.</p>
<p><em>Подписывайтесь на <a href="https://twitter.com/nalgeon">@nalgeon</a> в твитере, чтобы не пропустить новые заметки 🚀</em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Оконные функции: смещение</title>
      <link>https://antonz.ru/window-offset/</link>
      <pubDate>Mon, 19 Apr 2021 09:49:43 +0000</pubDate>
      
      <guid>https://antonz.ru/window-offset/</guid>
      <description>Сравниваем соседние значения и границы диапазона.</description>
      <content:encoded><![CDATA[<p><em>Это третья статья из серии <a href="/window-functions">Оконные функции в картинках</a>. Рекомендую не просто читать, а <a href="https://stepik.org/z/95367">проходить курс</a> — с ним знания превратятся в навыки.</em></p>
<p>Сравнение со смещением — это когда мы смотрим, в чем разница между соседними значениями. Например, сравниваем страны, которые занимают 5 и 6 место в мировом рейтинге ВВП — сильно ли отличаются? А если сравнить 1 и 6 место?</p>
<p>Сюда же попадают задачи, в которых мы сравниваем значение из набора с границами набора. Например, есть 100 лучших теннисисток мира. Мария Саккари занимает в рейтинге 20 место. Как ее показатели соотносятся с Эшли Бартли, которая занимает 1 место? А с Лин Чжоу, которая занимает 100 место?</p>
<p>Мы будем сравнить сотрудников из таблички <code>employees</code>:</p>
<pre tabindex="0"><code>┌────┬──────────┬────────┬────────────┬────────┐
│ id │   name   │  city  │ department │ salary │
├────┼──────────┼────────┼────────────┼────────┤
│ 11 │ Дарья    │ Самара │ hr         │ 70     │
│ 12 │ Борис    │ Самара │ hr         │ 78     │
│ 21 │ Елена    │ Самара │ it         │ 84     │
│ 22 │ Ксения   │ Москва │ it         │ 90     │
│ 23 │ Леонид   │ Самара │ it         │ 104    │
│ 24 │ Марина   │ Москва │ it         │ 104    │
│ 25 │ Иван     │ Москва │ it         │ 120    │
│ 31 │ Вероника │ Москва │ sales      │ 96     │
│ 32 │ Григорий │ Самара │ sales      │ 96     │
│ 33 │ Анна     │ Москва │ sales      │ 100    │
└────┴──────────┴────────┴────────────┴────────┘
</code></pre><ul>
    <li><a href="#lag">сравнение с предыдущим</a>,</li>
    <li><a href="#nth">диапазон</a>,</li>
    <li><a href="#frame">окно, секция и фрейм</a>,</li>
    <li><a href="#functions">функции смещения</a>.</li>
</ul>
<p>Все запросы можно повторять <a href="https://antonz.org/sqliter/sandbox/#window.db">в песочнице</a>.</p>
<h2 id="lag">Разница по зарплате с предыдущим</h2>
<p>Упорядочим сотрудников по возрастанию зарплаты и проверим, велик ли разрыв между соседями:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <strong>Было</strong>
    <figure><img alt="Таблица сотрудников" src="window-employees.png" style="max-height: 269px"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    <strong>Стало</strong>
    <figure><img alt="Разница с предыдущим" src="window-offset-lag.png"></figure>
</div>
</div>
<p>Столбец <code>diff</code> показывает, на сколько процентов зарплата сотрудника отличается от предыдущего коллеги. Видно, что больших разрывов нет. Самые крупные — между Дарьей и Борисом (10%) и Мариной и Иваном (13%).</p>
<p>Как перейти от «было» к «стало»?</p>
<p>Сначала отсортируем таблицу по возрастанию зарплаты:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">prev</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────────┬────────────┬────────┬──────┐
│   name   │ department │ salary │ prev │
├──────────┼────────────┼────────┼──────┤
│ Дарья    │ hr         │ 70     │      │
│ Борис    │ hr         │ 78     │      │
│ Елена    │ it         │ 84     │      │
│ Ксения   │ it         │ 90     │      │
│ Вероника │ sales      │ 96     │      │
│ Григорий │ sales      │ 96     │      │
│ Анна     │ sales      │ 100    │      │
│ Леонид   │ it         │ 104    │      │
│ Марина   │ it         │ 104    │      │
│ Иван     │ it         │ 120    │      │
└──────────┴────────────┴────────┴──────┘
</code></pre><p>Теперь пройдем от первой строчки до последней, на каждом шаге «подтягивая» зарплату предыдущего сотрудника:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    1️⃣
    <figure><img alt="Шаг 1" src="offset-lag-03.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    2️⃣
    <figure><img alt="Шаг 2" src="offset-lag-04.png"></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
    3️⃣
    <figure><img alt="Шаг 3" src="offset-lag-05.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    4️⃣
    <figure><img alt="Шаг 4" src="offset-lag-06.png"></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
    5️⃣
    <figure><img alt="Шаг 5" src="offset-lag-07.png"></figure>
</div>
<div class="col-xs-12 col-sm-6 flex" style="align-items:center">
    <p>и так далее...</p>
</div>
</div>
<p>Одной гифкой:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Смещение: сравнение с предыдущим" src="offset-lag.gif">
</figure>
</div>
</div>
<p>Видно, что окно в данном случае охватывает текущую и предыдущую запись. Оно сдвигается вниз на каждом шаге, скользит. Это логичная трактовка происходящего, и задать скользящее окно в SQL можно. Но у таких окон более сложный синтаксис, поэтому отложим их до статьи о скользящих агрегатах.</p>
<p>Вместо этого возьмем более простое и знакомое нам окно — все записи, упорядоченные по возрастанию <code>salary</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>)
</code></pre></div><div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Окно по всем записям" src="offset-lag-window.png">
</figure>
</div>
</div>
<p>А чтобы на каждом шаге подтягивать зарплату предыдущего сотрудника, будем использовать оконную функцию <code>lag()</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#000">lag</span>(<span style="color:#000">salary</span>, <span style="color:#1c01ce">1</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>
</code></pre></div><p>Функция <code>lag()</code> возвращает значение из указанного столбца, отстоящее от текущего на указанное количество записей назад. В нашем случае — <code>salary</code> от предыдущей записи.</p>
<p>Добавим окно и оконную функцию в исходный запрос:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#000">lag</span>(<span style="color:#000">salary</span>, <span style="color:#1c01ce">1</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">prev</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌────┬──────────┬────────────┬────────┬──────┐
│ id │   name   │ department │ salary │ prev │
├────┼──────────┼────────────┼────────┼──────┤
│ 11 │ Дарья    │ hr         │ 70     │      │
│ 12 │ Борис    │ hr         │ 78     │ 70   │
│ 21 │ Елена    │ it         │ 84     │ 78   │
│ 22 │ Ксения   │ it         │ 90     │ 84   │
│ 31 │ Вероника │ sales      │ 96     │ 90   │
│ 32 │ Григорий │ sales      │ 96     │ 96   │
│ 33 │ Анна     │ sales      │ 100    │ 96   │
│ 23 │ Леонид   │ it         │ 104    │ 100  │
│ 24 │ Марина   │ it         │ 104    │ 104  │
│ 25 │ Иван     │ it         │ 120    │ 104  │
└────┴──────────┴────────────┴────────┴──────┘
</code></pre><p>Столбец <code>prev</code> показывает зарплату предыдущего сотрудника. Осталось посчитать разницу между <code>prev</code> и <code>salary</code> в процентах:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#000">round</span>(
    (<span style="color:#000">salary</span> <span style="color:#000">-</span> <span style="color:#000">lag</span>(<span style="color:#000">salary</span>, <span style="color:#1c01ce">1</span>) <span style="color:#000">over</span> <span style="color:#000">w</span>)<span style="color:#000">*</span><span style="color:#1c01ce">100</span>.<span style="color:#1c01ce">0</span> <span style="color:#000">/</span> <span style="color:#000">salary</span>
  ) <span style="color:#a90d91">as</span> <span style="color:#000">diff</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────────┬────────────┬────────┬──────┐
│   name   │ department │ salary │ diff │
├──────────┼────────────┼────────┼──────┤
│ Дарья    │ hr         │ 70     │      │
│ Борис    │ hr         │ 78     │ 10.0 │
│ Елена    │ it         │ 84     │ 7.0  │
│ Ксения   │ it         │ 90     │ 7.0  │
│ Вероника │ sales      │ 96     │ 6.0  │
│ Григорий │ sales      │ 96     │ 0.0  │
│ Анна     │ sales      │ 100    │ 4.0  │
│ Леонид   │ it         │ 104    │ 4.0  │
│ Марина   │ it         │ 104    │ 0.0  │
│ Иван     │ it         │ 120    │ 13.0 │
└──────────┴────────────┴────────┴──────┘
</code></pre><p>Здесь мы заменили <code>prev</code> → <code>lag(salary, 1) over w</code>. Конструкцию вида <code>function_name(...) over window_name</code> движок заменяет на конкретное значение, которое вернула функция. Так что оконную функцию можно вызывать прямо внутри вычислений, и вы не раз встретите такие запросы в документации и примерах.</p>
<h2 id="nth">Диапазон зарплат в департаменте</h2>
<p>Посмотрим, как зарплата сотрудника соотносится с минимальной и максимальной зарплатой в его департаменте:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    <strong>Было</strong>
    <figure><img alt="Таблица сотрудников" src="window-employees.png"></figure>
</div>
<div class="col-xs-12 col-sm-7">
    <strong>Стало</strong>
    <figure><img alt="Диапазон зарплат в департаменте" src="window-offset-first-last.png" style="max-height: 241px"></figure>
</div>
</div>
<p>Для каждого сотрудника столбец <code>low</code> показывает минимальную зарплату родного департамента, а столбец <code>high</code> — максимальную.</p>
<p>Как перейти от «было» к «стало»?</p>
<p>Сначала отсортируем таблицу по департаментам, а внутри департамента — по возрастанию зарплаты:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">low</span>,
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">high</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────────┬────────────┬────────┬─────┬──────┐
│   name   │ department │ salary │ low │ high │
├──────────┼────────────┼────────┼─────┼──────┤
│ Дарья    │ hr         │ 70     │     │      │
│ Борис    │ hr         │ 78     │     │      │
│ Елена    │ it         │ 84     │     │      │
│ Ксения   │ it         │ 90     │     │      │
│ Леонид   │ it         │ 104    │     │      │
│ Марина   │ it         │ 104    │     │      │
│ Иван     │ it         │ 120    │     │      │
│ Вероника │ sales      │ 96     │     │      │
│ Григорий │ sales      │ 96     │     │      │
│ Анна     │ sales      │ 100    │     │      │
└──────────┴────────────┴────────┴─────┴──────┘
</code></pre><p>Теперь пройдем от первой строчки до последней, на каждом шаге «подтягивая» наименьшую и наибольшую зарплаты в отделе:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    1️⃣
    <figure><img alt="Шаг 1" src="offset-nth-03.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    2️⃣
    <figure><img alt="Шаг 2" src="offset-nth-04.png"></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
    3️⃣
    <figure><img alt="Шаг 3" src="offset-nth-05.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    4️⃣
    <figure><img alt="Шаг 4" src="offset-nth-06.png"></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
    5️⃣
    <figure><img alt="Шаг 5" src="offset-nth-07.png"></figure>
</div>
<div class="col-xs-12 col-sm-6 flex" style="align-items:center">
    <p>и так далее...</p>
</div>
</div>
<p>Одной гифкой:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Смещение: границы секции" src="offset-nth.gif">
</figure>
</div>
</div>
<p>Окно состоит из трех секций. Секция на каждом шаге охватывает весь департамент сотрудника. Записи при этом упорядочены по возрастанию зарплаты внутри департамента, чтобы минимальная и максимальная зарплаты всегда находились на границах секции:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>
)
</code></pre></div><p>Хотелось бы воспользоваться функциями <code>lag()</code> и <code>lead()</code>, чтобы получить диапазон зарплат в отделе. Но они заглядывают на фиксированное количество записей назад или вперед. Нам же требуется нечто другое:</p>
<ul>
<li><code>low</code> — зарплата первого сотрудника, входящего в секцию окна;</li>
<li><code>high</code> — зарплата последнего сотрудника, входящего в секцию.</li>
</ul>
<p>К счастью, есть оконные функции ровно для этого:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#000">first_value</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">low</span>,
<span style="color:#000">last_value</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">high</span>
</code></pre></div><p>Добавим окно и оконную функцию в исходный запрос:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#000">first_value</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">low</span>,
  <span style="color:#000">last_value</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">high</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>
)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────────┬────────────┬────────┬─────┬──────┐
│   name   │ department │ salary │ low │ high │
├──────────┼────────────┼────────┼─────┼──────┤
│ Дарья    │ hr         │ 70     │ 70  │ 70   │
│ Борис    │ hr         │ 78     │ 70  │ 78   │
├──────────┼────────────┼────────┼─────┼──────┤
│ Елена    │ it         │ 84     │ 84  │ 84   │
│ Ксения   │ it         │ 90     │ 84  │ 90   │
│ Леонид   │ it         │ 104    │ 84  │ 104  │
│ Марина   │ it         │ 104    │ 84  │ 104  │
│ Иван     │ it         │ 120    │ 84  │ 120  │
├──────────┼────────────┼────────┼─────┼──────┤
│ Вероника │ sales      │ 96     │ 96  │ 96   │
│ Григорий │ sales      │ 96     │ 96  │ 96   │
│ Анна     │ sales      │ 100    │ 96  │ 100  │
└──────────┴────────────┴────────┴─────┴──────┘
</code></pre><p><code>low</code> рассчитался корректно, а вот с <code>high</code> какая-то ерунда. Вместо того, чтобы равняться максимальной зарплате департамента, он меняется от сотрудника к сотруднику. Что ж, давайте разбираться.</p>
<h2 id="frame">Окно, секция, фрейм</h2>
<p>До сих пор все было логично:</p>
<ul>
<li>есть окно, которое состоит из одной или нескольких секций;</li>
<li>внутри секции записи упорядочены по конкретному столбцу.</li>
</ul>
<p>На предыдущем шаге мы разделили окно на три секции — по департаментам, и упорядочили записи внутри секций по зарплате:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>
)
</code></pre></div><p>Допустим, движок выполняет запрос, и текущая запись — Леонид из it-отдела. Мы ожидаем, что <code>first_value()</code> вернет первую запись it-секции (<code>salary = 84</code>), а <code>last_value()</code> — последнюю (<code>salary = 120</code>):</p>
<p>Вместо этого <code>last_value()</code> возвращает <code>salary = 104</code>:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <strong>Ожидание</strong>
    <figure><img alt="Ожидаемый last_value" src="window-fl-expected.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    <strong>Реальность</strong>
    <figure><img alt="Реальный last_value" src="window-fl-actual.png"></figure>
</div>
</div>
<p>Дело в том, что функции <code>first_value()</code> и <code>last_value()</code> работают не просто с секцией окна. Они работают с <em>фреймом</em> внутри секции:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <figure><img alt="Фрейм внутри секции" src="window-frame.png"></figure>
</div>
</div>
<p>Фрейм находится в той же секции, где текущая запись (Леонид):</p>
<ul>
<li>начало фрейма = начало секции (Елена);</li>
<li>конец фрейма = последняя запись со значением <code>salary</code>, равным текущей записи (Марина).</li>
</ul>
<p>Секция фиксирована, фрейм же зависит от текущей записи и постоянно меняется:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <strong>Секция</strong>
    <figure><img alt="Секция" src="offset-partition.gif"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    <strong>Фрейм</strong>
    <figure><img alt="Фрейм" src="offset-frame-1.gif"></figure>
</div>
</div>
<p><code>first_value()</code> возвращает первую строчку фрейма, а не секции. Но поскольку начало фрейма совпадает с началом секции, функция отрабатывает как мы ожидали.</p>
<p><code>last_value()</code> возвращает последнюю строчку фрейма, а не секции. Именно поэтому в нашем запросе она вернула не максимальную зарплату для каждого отдела, а какую-то ерунду.</p>
<p>Чтобы <code>last_value()</code> работала как мы ожидаем, придется «прибить» границы фрейма к границам секции. Тогда для каждой секции фрейм будет в точности совпадать с ней:</p>
<div class="row">
<div class="col-xs-12">
    <figure><img alt="Фрейм совпадает с секцией" src="window-partition-frame.png"></figure>
</div>
</div>
<p><strong>Зачем так сложно-то?</strong> 🤦 <em>Если возникла такая реакция — прекрасно вас понимаю. От фреймов есть польза, но зачем авторы стандарта SQL сделали такое неочевидное поведение по умолчанию — я не знаю. Остается только понять и простить.</em></p>
<p>Подытожим принцип, по которому работают <code>first_value()</code> и <code>last_value()</code>:</p>
<ol>
<li>Есть <em>окно</em>, которое состоит из одной или нескольких <em>секций</em> (<code>partition by department</code>).</li>
<li>Внутри секции записи упорядочены по конкретному столбцу (<code>order by salary</code>).</li>
<li>У каждой записи в секции свой <em>фрейм</em>. По умолчанию начало фрейма совпадает с началом секции, а конец для каждой записи свой.</li>
<li>Конец фрейма можно приклеить к концу секции, чтобы фрейм в точности совпадал с секцией.</li>
<li>Функция <code>first_value()</code> возвращает значение из первой строки фрейма.</li>
<li>Функция <code>last_value()</code> возвращает значение из последней строки фрейма.</li>
</ol>
<p>Теперь разберемся, как прибить фрейм к окну — и закончим с запросом по диапазону зарплат в департаментах.</p>
<h2 id="nth-continued">Диапазон зарплат в департаменте, окончание</h2>
<p>Возьмем наше окно:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>
)
</code></pre></div><p>И настроим его, чтобы фрейм в точности совпадал с секцией (департаментом):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>
  <span style="color:#a90d91">rows</span> <span style="color:#a90d91">between</span> <span style="color:#000">unbounded</span> <span style="color:#000">preceding</span> <span style="color:#a90d91">and</span> <span style="color:#000">unbounded</span> <span style="color:#000">following</span>
)
</code></pre></div><p>Не будем сейчас разбирать конструкцию <code>rows between</code> — ее время придет в статье про скользящие агрегаты. Важно, что благодаря ей фрейм совпадает с секцией, а значит <code>last_value()</code> вернет максимальную зарплату по департаменту:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>,
  <span style="color:#000">first_value</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">low</span>,
  <span style="color:#000">last_value</span>(<span style="color:#000">salary</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">high</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span>
  <span style="color:#a90d91">rows</span> <span style="color:#a90d91">between</span> <span style="color:#000">unbounded</span> <span style="color:#000">preceding</span> <span style="color:#a90d91">and</span> <span style="color:#000">unbounded</span> <span style="color:#000">following</span>
)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────────┬────────────┬────────┬─────┬──────┐
│   name   │ department │ salary │ low │ high │
├──────────┼────────────┼────────┼─────┼──────┤
│ Дарья    │ hr         │ 70     │ 70  │ 78   │
│ Борис    │ hr         │ 78     │ 70  │ 78   │
├──────────┼────────────┼────────┼─────┼──────┤
│ Елена    │ it         │ 84     │ 84  │ 120  │
│ Ксения   │ it         │ 90     │ 84  │ 120  │
│ Леонид   │ it         │ 104    │ 84  │ 120  │
│ Марина   │ it         │ 104    │ 84  │ 120  │
│ Иван     │ it         │ 120    │ 84  │ 120  │
├──────────┼────────────┼────────┼─────┼──────┤
│ Вероника │ sales      │ 96     │ 96  │ 100  │
│ Григорий │ sales      │ 96     │ 96  │ 100  │
│ Анна     │ sales      │ 100    │ 96  │ 100  │
└──────────┴────────────┴────────┴─────┴──────┘
</code></pre><p>Теперь движок заполняет <code>low</code> и <code>high</code> так же, как мы делали это вручную.</p>
<h2 id="functions">Функции смещения</h2>
<table>
    <tbody>
        <tr>
            <td class="nowrap"><code>lag(value, offset)</code></td>
            <td>значение <code>value</code> из строки, отстоящей на <code>offset</code> строк назад от текущей</td>
        </tr>
        <tr>
            <td class="nowrap"><code>lead(value, offset)</code></td>
            <td>значение <code>value</code> из строки, отстоящей на <code>offset</code> строк вперед от текущей</td>
        </tr>
        <tr>
            <td class="nowrap"><code>first_value(value)</code></td>
            <td>значение <code>value</code> из первой строки фрейма</td>
        </tr>
        <tr>
            <td class="nowrap"><code>last_value(value)</code></td>
            <td>значение <code>value</code> из последней строки фрейма</td>
        </tr>
        <tr>
            <td class="nowrap"><code>nth_value(value, n)</code></td>
            <td>значение <code>value</code> из <code>n</code>-й строки фрейма</td>
        </tr>
    </tbody>
</table>
<p><code>lag()</code> и <code>lead()</code> действуют относительно текущей строки, заглядывая вперед или назад на указанное количество строк.</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="lag и lead" src="window-lag-lead.png">
</figure>
</div>
</div>
<p><code>first_value()</code>, <code>last_value()</code> и <code>nth_value()</code> действуют относительно границ фрейма, выбирая указанную строку в пределах фрейма.</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <figure><img alt="first_value и last_value" src="window-first-last.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    <figure><img alt="nth_value" src="window-nth.png"></figure>
</div>
</div>
<p>Чтобы границы фрейма совпадали с границами секции (или всего окна, если секция одна) — используют конструкцию <code>rows between unbounded preceding and unbounded following</code> в определении окна.</p>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>Мы разобрались, как сравнивать строки с соседями и границами окна. В <a href="/window-aggregate/">следующей части</a> займемся агрегацией данных!</p>
<p>Чтобы закрепить знания на практике — <a href="https://stepik.org/z/95367"><strong>записывайтесь на курс</strong></a> 🚀</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Книга по визуализации данных</title>
      <link>https://antonz.ru/dataviz-guide/</link>
      <pubDate>Sun, 11 Apr 2021 08:37:39 +0000</pubDate>
      
      <guid>https://antonz.ru/dataviz-guide/</guid>
      <description>Для презентаций, отчетов и дашбордов.</description>
      <content:encoded><![CDATA[<p>На днях я наткнулся на идеальное руководство по инфографике и визуализации данных:</p>
<ul>
<li>основано на работах Эдварда Тафти и Стивена Фью;</li>
<li>подробное, но не слишком многословное (150 страниц);</li>
<li>практичное и с кучей примеров (197 иллюстраций).</li>
</ul>
<p>Книга рассказывает, как строить понятные отчеты и дашборды, на основе которых люди смогут принимать решения:</p>
<ol>
<li>Как сформулировать и донести сообщение.</li>
<li>Как выбрать подходящую диаграмму.</li>
<li>Как должен выглядеть каждый элемент диаграммы.</li>
<li>Как избежать визуального мусора и повысить информационную плотность.</li>
<li>Как не ввести никого в заблуждение и облегчить восприятие информации.</li>
</ol>
<p><img alt="Пример отчета из книги" src="dataviz-guide-sample.png" class="img-bordered-thin"></p>
<p>Хотя само руководство отличное, его авторы — IBCS Association — приняли несколько странных решений:</p>
<ol>
<li>Назвали книгу максимально непонятно и далеко от настоящей темы — «International Business Communication Standards».</li>
<li>Разместили <a href="https://www.ibcs.com/standards/">на сайте</a> в таком виде, что нормально читать невозможно.</li>
</ol>
<p>К счастью, IBCS опубликовали руководство под открытой лицензий Creative Commons. Так что с помощью пригоршни питона и такой-то матери я подготовил нормальную <a href="https://github.com/nalgeon/dataviz">веб-версию</a>, <a href="https://github.com/nalgeon/dataviz/releases/download/1.1/data-visualization-guide.epub">EPUB</a> and <a href="https://github.com/nalgeon/dataviz/releases/download/1.1/data-visualization-guide.pdf">PDF</a>.</p>
<p>Авторы вложили в руководство много труда, а результат мне очень понравился. Так что предлагаю вам тоже оценить!</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Всем SQL</title>
      <link>https://antonz.ru/lets-sql/</link>
      <pubDate>Tue, 06 Apr 2021 10:58:56 +0000</pubDate>
      
      <guid>https://antonz.ru/lets-sql/</guid>
      <description>Лучший язык для работы с данными.</description>
      <content:encoded><![CDATA[<p>Помню, лет десять назад американские СМИ захватила идея, что «каждый должен научиться программировать». Повсеместно открывались буткампы из серии «от нуля до сеньор-разработчика за 10 дней», и даже президент США делал вид, что учится писать на джаваскрипте.</p>
<p>Я не уверен, что программирование нужно прямо так уж всем. И точно не стоит всем бросаться учить джаваскрипт: для автоматизации повседневной работы есть более подходящие языки.</p>
<p>А вот что имеет смысл освоить — так это прикладной анализ данных. Данные лежат в основе всего, что мы делаем. Данные — основа принятия решений в продуктовом управлении, аналитике, дизайне, разработке, тестировании и эксплуатации.</p>
<p>Если вы согласны, и чувствуете, что навыки работы с данными стоило бы подтянуть — дальше я расскажу про три курса и один инструмент. Инструментом я пользуюсь каждый день, а курсы проходил лично (один даже сделал сам). Авторы не платили за рекомендации. Хотя, естественно, если вы выберете мой курс — я на этом заработаю.</p>
<p>SQL — это «родной» язык работы с данными. В принципе, можно прожить и без него: в базовом варианте достаточно понимать основы статистики и знать Excel на более глубоком уровне, чем «рисую таблички в рамочке». В этом поможет курс Алексея Куличевского «<a href="https://smysl.io/courses/data-1/">Данные для бизнеса</a>». Хотя небольшой порции SQL и там не избежать.</p>
<p>Если интересна продуктовая аналитика — курс Анатолия Макаревича <a href="https://www.sqlhabit.com/">SQL Habit</a>. Типа GoPractice, только бодрее и на голом SQL, без Amplitude. Проводит от самых основ до серьезной работы.</p>
<p>Если уже знаете основы SQL и хотите научиться применять его в повседневных задачах — мой курс «<a href="/sqlite-course/">SQLite для аналитики</a>». Научитесь загружать и выгружать данные, «чистить» проблемы, находить связи и анализировать показатели, применять аналитические функции и работать с JSON.</p>
<p>А инструмент — <a href="https://redash.io/">Redash</a>. Это веб-интерфейс к любым базам данных, в нем строят отчеты и собирают дашборды. Простая и дешевая замена замороченным BI-инструментам. Из этой же серии есть Metabase и Superset — их многие хвалят, но я не пробовал.</p>
<p>В любом случае — освойте SQL. С ним вы перестанете зависеть от специально обученных людей, к которым ходите на поклон за очередным отчетом. Сможете принимать решения быстрее и увереннее. Да и в целом станете автономнее и ценнее как специалист. Всем SQL!</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на канал <span class="nowrap"><i class="fas fa-database"></i> «<a href="https://t.me/sqliter">SQLite на практике</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Оконные функции: ранжирование</title>
      <link>https://antonz.ru/window-ranking/</link>
      <pubDate>Mon, 05 Apr 2021 08:48:00 +0000</pubDate>
      
      <guid>https://antonz.ru/window-ranking/</guid>
      <description>Составляем рейтинги и разбиваем на группы.</description>
      <content:encoded><![CDATA[<p><em>Это вторая статья из серии <a href="/window-functions">Оконные функции в картинках</a>. Рекомендую не просто читать, а <a href="https://stepik.org/z/95367">проходить курс</a> — с ним знания превратятся в навыки.</em></p>
<p>В этой части будем решать задачу ранжирования. Ранжирование — это всевозможные рейтинги, начиная от призеров чемпионата мира по плаванию и заканчивая Forbes 500. Мы же будем ранжировать сотрудников компании.</p>
<p>Будем работать с игрушечной таблицей <code>employees</code>, вот такой:</p>
<pre tabindex="0"><code>┌────┬──────────┬────────┬────────────┬────────┐
│ id │   name   │  city  │ department │ salary │
├────┼──────────┼────────┼────────────┼────────┤
│ 11 │ Дарья    │ Самара │ hr         │ 70     │
│ 12 │ Борис    │ Самара │ hr         │ 78     │
│ 21 │ Елена    │ Самара │ it         │ 84     │
│ 22 │ Ксения   │ Москва │ it         │ 90     │
│ 23 │ Леонид   │ Самара │ it         │ 104    │
│ 24 │ Марина   │ Москва │ it         │ 104    │
│ 25 │ Иван     │ Москва │ it         │ 120    │
│ 31 │ Вероника │ Москва │ sales      │ 96     │
│ 32 │ Григорий │ Самара │ sales      │ 96     │
│ 33 │ Анна     │ Москва │ sales      │ 100    │
└────┴──────────┴────────┴────────────┴────────┘
</code></pre><ul>
    <li><a href="#rank">рейтинг зарплат</a>,</li>
    <li><a href="#partition">рейтинг зарплат по департаментам</a>,</li>
    <li><a href="#ntile">группы по зарплате</a>,</li>
    <li><a href="#functions">функции ранжирования</a>.</li>
</ul>
<p>Все запросы можно повторять <a href="https://antonz.org/sqliter/sandbox/#window.db">в песочнице</a>.</p>
<h2 id="rank">Рейтинг зарплат</h2>
<p>Составим рейтинг сотрудников по размеру заработной платы:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <strong>Было</strong>
    <figure><img alt="Таблица сотрудников" src="window-employees.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    <strong>Стало</strong>
    <figure><img alt="Рейтинг зарплат" src="window-rank.png"></figure>
</div>
</div>
<p>Обратите внимание — сотрудники с одинаковой зарплатой получили один и тот же ранг (Леонид и Марина, Вероника и Григорий).</p>
<p>Как перейти от «было» к «стало»?</p>
<p>Сначала отсортируем таблицу по убыванию зарплаты:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">rank</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────┬──────────┬────────────┬────────┐
│ rank │   name   │ department │ salary │
├──────┼──────────┼────────────┼────────┤
│      │ Иван     │ it         │ 120    │
│      │ Леонид   │ it         │ 104    │
│      │ Марина   │ it         │ 104    │
│      │ Анна     │ sales      │ 100    │
│      │ Вероника │ sales      │ 96     │
│      │ Григорий │ sales      │ 96     │
│      │ Ксения   │ it         │ 90     │
│      │ Елена    │ it         │ 84     │
│      │ Борис    │ hr         │ 78     │
│      │ Дарья    │ hr         │ 70     │
└──────┴──────────┴────────────┴────────┘
</code></pre><p>Теперь пройдем от первой строчки до последней и проставим ранг каждой записи. Начнем с 1 и будем увеличивать ранг каждый раз, когда значение salary меньше, чем у предыдущей записи:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    1️⃣
    <figure><img alt="Шаг 1" src="03.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    2️⃣
    <figure><img alt="Шаг 2" src="04.png"></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
    3️⃣
    <figure><img alt="Шаг 3" src="05.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    4️⃣
    <figure><img alt="Шаг 4" src="06.png"></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
    5️⃣
    <figure><img alt="Шг 5" src="07.png"></figure>
</div>
<div class="col-xs-12 col-sm-6 flex" style="align-items:center">
    <p>и так далее...</p>
</div>
</div>
<p>Чтобы проставить ранг, достаточно на каждом шаге смотреть только на значения из столбца <code>salary</code>, выделенные синей рамкой. Назовем эти значения окном.</p>
<p>Попробуем описать содержимое окна словами:</p>
<ul>
<li>Это значения столбца <code>salary</code>.</li>
<li>Они упорядочены от большего значения к меньшему.</li>
</ul>
<p>Сформулируем то же самое на SQL:</p>
<pre tabindex="0"><code>window w as (order by salary desc)
</code></pre><ul>
<li><code>window</code> — ключевое слово, которое показывает, что дальше будет определение окна;</li>
<li><code>w</code> — название окна (может быть любым);</li>
<li><code>(order by salary desc)</code> — описание окна («значения столбца <code>salary</code>, упорядоченные по убыванию»).</li>
</ul>
<p>Задача — посчитать ранг по окну <code>w</code>. На SQL это записывается как <code>dense_rank() over w</code>.</p>
<p><code>dense_rank()</code> — это оконная функция, которая считает ранг по указанному окну. Логика <code>dense_rank()</code> такая же, как была у нас при ручном подсчете — начать с 1 и увеличивать ранг каждый раз, когда очередное значение из окна отличается от предыдущего.</p>
<p>Добавим окно и оконную функцию в исходный запрос:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">dense_rank</span>() <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">rank</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">rank</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────┬──────────┬────────────┬────────┐
│ rank │   name   │ department │ salary │
├──────┼──────────┼────────────┼────────┤
│ 1    │ Иван     │ it         │ 120    │
│ 2    │ Леонид   │ it         │ 104    │
│ 2    │ Марина   │ it         │ 104    │
│ 3    │ Анна     │ sales      │ 100    │
│ 4    │ Вероника │ sales      │ 96     │
│ 4    │ Григорий │ sales      │ 96     │
│ 5    │ Ксения   │ it         │ 90     │
│ 6    │ Елена    │ it         │ 84     │
│ 7    │ Борис    │ hr         │ 78     │
│ 8    │ Дарья    │ hr         │ 70     │
└──────┴──────────┴────────────┴────────┘
</code></pre><p>Вот как движок выполняет такой запрос:</p>
<ol>
<li>Берет таблицу, указанную в <code>from</code>.</li>
<li>Выбирает из нее все записи.</li>
<li>Для каждой записи рассчитывает значение <code>dense_rank()</code> с помощью окна <code>w</code>.</li>
<li>Сортирует результат как указано в <code>order by</code>.</li>
</ol>
<p>Вот как отрабатывает шаг 3, на котором назначается ранг:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Ранжирование: ранг" src="rank.gif">
</figure>
</div>
</div>
<h2 id="partition">Рейтинг зарплат по департаментам</h2>
<p>Теперь составим рейтинг сотрудников по размеру заработной платы независимо по каждому департаменту:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <strong>Было</strong>
    <figure><img alt="Таблица сотрудников" src="window-employees.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    <strong>Стало</strong>
    <figure><img alt="Рейтинг зарплат по департаментам" src="window-rank-department.png"></figure>
</div>
</div>
<p>Как перейти от «было» к «стало»?</p>
<p>Сначала отсортируем таблицу по департаментам, а внутри департамента — по убыванию зарплаты:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">rank</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────┬──────────┬────────────┬────────┐
│ rank │   name   │ department │ salary │
├──────┼──────────┼────────────┼────────┤
│      │ Борис    │ hr         │ 78     │
│      │ Дарья    │ hr         │ 70     │
│      │ Иван     │ it         │ 120    │
│      │ Леонид   │ it         │ 104    │
│      │ Марина   │ it         │ 104    │
│      │ Ксения   │ it         │ 90     │
│      │ Елена    │ it         │ 84     │
│      │ Анна     │ sales      │ 100    │
│      │ Вероника │ sales      │ 96     │
│      │ Григорий │ sales      │ 96     │
└──────┴──────────┴────────────┴────────┘
</code></pre><p>Теперь пройдем от первой строчки до последней и проставим ранг каждой записи. Начнем с 1 и будем увеличивать ранг каждый раз, когда значение <code>salary</code> меньше, чем у предыдущей записи. При переходе от департамента к департаменту будем сбрасывать ранг обратно на 1:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    1️⃣
    <figure><img alt="Шаг 1" src="rank-department-03.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    2️⃣
    <figure><img alt="Шаг 2" src="rank-department-04.png"></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
    3️⃣
    <figure><img alt="Шаг 3" src="rank-department-05.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    4️⃣
    <figure><img alt="Шаг 4" src="rank-department-06.png"></figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
    5️⃣
    <figure><img alt="Шг 5" src="rank-department-07.png"></figure>
</div>
<div class="col-xs-12 col-sm-6 flex" style="align-items:center">
    <p>и так далее...</p>
</div>
</div>
<p>Чтобы проставить ранг, достаточно на каждом шаге смотреть только на значения из столбца <code>salary</code>, выделенные синей рамкой. Это и есть окно в данном случае.</p>
<p>Видно, что окно меняется в зависимости от того, к какому департаменту относится текущая запись. Опишем словами:</p>
<ul>
<li>Окно разбито на несколько независимых секций — по одной на департамент.</li>
<li>Внутри секции записи упорядочены по убыванию зарплаты.</li>
</ul>
<p>Сформулируем то же самое на SQL:</p>
<pre tabindex="0"><code>window w as (
  partition by department
  order by salary desc
)
</code></pre><ul>
<li><code>partition by department</code> указывает, как следует разбить окно на секции;</li>
<li><code>order by salary</code> desc задает сортировку внутри секции.</li>
</ul>
<p>Функция расчета ранга остается прежней — <code>dense_rank()</code>.</p>
<p>Добавим окно и оконную функцию в исходный запрос:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">dense_rank</span>() <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">rank</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (
  <span style="color:#000">partition</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>
  <span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>
)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">department</span>, <span style="color:#000">rank</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────┬──────────┬────────────┬────────┐
│ rank │   name   │ department │ salary │
├──────┼──────────┼────────────┼────────┤
│ 1    │ Борис    │ hr         │ 78     │
│ 2    │ Дарья    │ hr         │ 70     │
├──────┼──────────┼────────────┼────────┤
│ 1    │ Иван     │ it         │ 120    │
│ 2    │ Леонид   │ it         │ 104    │
│ 2    │ Марина   │ it         │ 104    │
│ 3    │ Ксения   │ it         │ 90     │
│ 4    │ Елена    │ it         │ 84     │
├──────┼──────────┼────────────┼────────┤
│ 1    │ Анна     │ sales      │ 100    │
│ 2    │ Вероника │ sales      │ 96     │
│ 2    │ Григорий │ sales      │ 96     │
└──────┴──────────┴────────────┴────────┘
</code></pre><p>Вот как движок рассчитывает ранг для каждой записи:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Ранжирование: ранг по секциям" src="rank-department.gif">
</figure>
</div>
</div>
<h2 id="ntile">Группы по зарплате</h2>
<p>Разобьем сотрудников на три группы в зависимости от размера зарплаты:</p>
<ul>
<li>высокооплачиваемые,</li>
<li>средние,</li>
<li>низкооплачиваемые.</li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <strong>Было</strong>
    <figure><img alt="Таблица сотрудников" src="window-employees.png"></figure>
</div>
<div class="col-xs-12 col-sm-6">
    <strong>Стало</strong>
    <figure><img alt="Группы по зарплате" src="window-rank-bucket.png"></figure>
</div>
</div>
<p>Как перейти от «было» к «стало»?</p>
<p>Сначала отсортируем таблицу по убыванию зарплаты:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#a90d91">null</span> <span style="color:#a90d91">as</span> <span style="color:#000">tile</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────┬──────────┬────────────┬────────┐
│ tile │   name   │ department │ salary │
├──────┼──────────┼────────────┼────────┤
│      │ Иван     │ it         │ 120    │
│      │ Леонид   │ it         │ 104    │
│      │ Марина   │ it         │ 104    │
│      │ Анна     │ sales      │ 100    │
│      │ Вероника │ sales      │ 96     │
│      │ Григорий │ sales      │ 96     │
│      │ Ксения   │ it         │ 90     │
│      │ Елена    │ it         │ 84     │
│      │ Борис    │ hr         │ 78     │
│      │ Дарья    │ hr         │ 70     │
└──────┴──────────┴────────────┴────────┘
</code></pre><p>Всего 10 записей, 3 группы — значит, две группы по 3 записи и одна 4 записи. Например, так:</p>
<pre tabindex="0"><code>┌──────┬──────────┬────────────┬────────┐
│ tile │   name   │ department │ salary │
├──────┼──────────┼────────────┼────────┤
│      │ Иван     │ it         │ 120    │
│      │ Леонид   │ it         │ 104    │
│      │ Марина   │ it         │ 104    │
│      │ Анна     │ sales      │ 100    │
├──────┼──────────┼────────────┼────────┤
│      │ Вероника │ sales      │ 96     │
│      │ Григорий │ sales      │ 96     │
│      │ Ксения   │ it         │ 90     │
├──────┼──────────┼────────────┼────────┤
│      │ Елена    │ it         │ 84     │
│      │ Борис    │ hr         │ 78     │
│      │ Дарья    │ hr         │ 70     │
└──────┴──────────┴────────────┴────────┘
</code></pre><p>Чтобы провести границы между группами, придется анализировать все зарплаты, отсортированные по убыванию. Поэтому окно будет таким:</p>
<pre tabindex="0"><code>window w as (order by salary desc)
</code></pre><p>А вот функция потребуется другая — <code>ntile(n)</code>, где <code>n</code> — количество групп. В нашем случае:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">ntile</span>(<span style="color:#1c01ce">3</span>) <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">tile</span>,
  <span style="color:#000">name</span>, <span style="color:#000">department</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>, <span style="color:#000">id</span>;
</code></pre></div><pre tabindex="0"><code>┌──────┬──────────┬────────────┬────────┐
│ tile │   name   │ department │ salary │
├──────┼──────────┼────────────┼────────┤
│ 1    │ Иван     │ it         │ 120    │
│ 1    │ Леонид   │ it         │ 104    │
│ 1    │ Марина   │ it         │ 104    │
│ 1    │ Анна     │ sales      │ 100    │
├──────┼──────────┼────────────┼────────┤
│ 2    │ Вероника │ sales      │ 96     │
│ 2    │ Григорий │ sales      │ 96     │
│ 2    │ Ксения   │ it         │ 90     │
├──────┼──────────┼────────────┼────────┤
│ 3    │ Елена    │ it         │ 84     │
│ 3    │ Борис    │ hr         │ 78     │
│ 3    │ Дарья    │ hr         │ 70     │
└──────┴──────────┴────────────┴────────┘
</code></pre><p><code>ntile(n)</code> разбивает все записи на n групп и возвращает номер группы для каждой записи. Если общее количество записей (10 в нашем случае) не делится на размер группы (3), то первые группы будут крупнее последних.</p>
<h2 id="functions">Функции ранжирования</h2>
<table>
    <tbody>
        <tr>
            <td><code>row_number()</code></td>
            <td>порядковый номер строки</td>
        </tr>
        <tr>
            <td><code>dense_rank()</code></td>
            <td>ранг строки</td>
        </tr>
        <tr>
            <td><code>rank()</code></td>
            <td>тоже ранг, но с пропусками</td>
        </tr>
        <tr>
            <td><code>ntile(n)</code></td>
            <td>разбивает все строки на <code>n</code> групп и возвращает номер группы, в которую попала строка</td>
        </tr>
    </tbody>
</table>
<p><code>dense_rank()</code> и <code>ntile()</code> мы уже разобрали.</p>
<p><code>row_number()</code> нумерует строки в порядке, указанном в <code>order by</code>. Никаких неожиданностей.</p>
<p><code>rank()</code> похож на <code>dense_rank()</code>, a разницу проще всего показать на примере.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">select</span>
  <span style="color:#000">•••</span> <span style="color:#000">over</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> <span style="color:#000">rank</span>,
  <span style="color:#000">name</span>, <span style="color:#000">salary</span>
<span style="color:#a90d91">from</span> <span style="color:#000">employees</span>
<span style="color:#000">window</span> <span style="color:#000">w</span> <span style="color:#a90d91">as</span> (<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">salary</span> <span style="color:#a90d91">desc</span>)
<span style="color:#a90d91">order</span> <span style="color:#a90d91">by</span> <span style="color:#000">rank</span>, <span style="color:#000">id</span>;
</code></pre></div><p>В одном случае вместо <code>•••</code> укажем <code>dense_rank()</code>, а в другом — <code>rank()</code>:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <strong>dense_rank()</strong>
    <pre><code>┌──────┬──────────┬────────┐
│ rank │   name   │ salary │
├──────┼──────────┼────────┤
│ 1    │ Иван     │ 120    │
│ 2    │ Леонид   │ 104    │
│ 2    │ Марина   │ 104    │
│ 3    │ Анна     │ 100    │
│ 4    │ Вероника │ 96     │
│ 4    │ Григорий │ 96     │
│ 5    │ Ксения   │ 90     │
│ 6    │ Елена    │ 84     │
│ 7    │ Борис    │ 78     │
│ 8    │ Дарья    │ 70     │
└──────┴──────────┴────────┘</code></pre>
</div>
<div class="col-xs-12 col-sm-6">
    <strong>rank()</strong>
    <pre><code>┌──────┬──────────┬────────┐
│ rank │   name   │ salary │
├──────┼──────────┼────────┤
│ 1    │ Иван     │ 120    │
│ 2    │ Леонид   │ 104    │
│ 2    │ Марина   │ 104    │
│ 4    │ Анна     │ 100    │
│ 5    │ Вероника │ 96     │
│ 5    │ Григорий │ 96     │
│ 7    │ Ксения   │ 90     │
│ 8    │ Елена    │ 84     │
│ 9    │ Борис    │ 78     │
│ 10   │ Дарья    │ 70     │
└──────┴──────────┴────────┘</code></pre>
</div>
</div>
<p><code>dense_rank()</code> назначает Анне третье место, а <code>rank()</code> — четвертое, потому что второе-третье уже заняты Леонидом и Мариной. Аналогично с Ксенией после Вероники и Григория. Вот и вся разница.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Мы разобрались, что такое «окно», «оконная функция», и как использовать их для ранжирования данных. В <a href="/window-offset/">следующей части</a> займемся оконными сравнениями!</p>
<p>Чтобы закрепить знания на практике — <a href="https://stepik.org/z/95367"><strong>записывайтесь на курс</strong></a> 🚀</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://antonz.ru/episode-7/</link>
      <pubDate>Sun, 04 Apr 2021 22:47:00 +0000</pubDate>
      
      <guid>https://antonz.ru/episode-7/</guid>
      <description>Об уникальной нереляционной in-memory базе, написанной одним из самых талантливых разработчиков современности.</description>
      <content:encoded><![CDATA[<p>Об уникальной нереляционной in-memory базе, написанной одним из самых талантливых разработчиков современности.</p>
<iframe src="https://anchor.fm/nalgeon/embed/episodes/Redis-eu7p0c" height="102px" width="360px" frameborder="0" scrolling="no"></iframe>
<p><a href="https://redis.io/topics/introduction">Introduction to Redis</a></p>
<p><a href="https://redis.io/topics/data-types-intro">Data types</a>, <a href="https://redis.io/topics/pubsub">Pub/Sub</a>, <a href="https://redis.io/topics/streams-intro">Streams</a></p>
<p><a href="https://github.com/redis/redis">Исходники</a></p>
<p><a href="http://antirez.com/">Блог Сальваторе</a></p>
<p><a href="https://www.patreon.com/nalgeon">Поддержать подкаст + бонусы</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>GitHub Actions</title>
      <link>https://antonz.ru/episode-6/</link>
      <pubDate>Fri, 26 Mar 2021 16:44:06 +0000</pubDate>
      
      <guid>https://antonz.ru/episode-6/</guid>
      <description>О невероятно мощном бесплатном сервисе автоматизации любых задач от Гитхаба.</description>
      <content:encoded><![CDATA[<p>О невероятно мощном бесплатном сервисе автоматизации любых задач от Гитхаба.</p>
<iframe src="https://anchor.fm/nalgeon/embed/episodes/GitHub-Actions-etiqb7" height="102px" width="360px" frameborder="0" scrolling="no"></iframe>
<p><a href="/github-actions/">Кросс-платформенная сборка с GitHub Actions</a></p>
<p><a href="/github-actions-scraping/">Собираем открытые данные с GitHub Actions</a></p>
<p><a href="https://docs.github.com/en/actions/learn-github-actions/introduction-to-github-actions">Introduction to GitHub Actions</a></p>
<p><a href="https://www.patreon.com/nalgeon">Поддержать подкаст + бонусы</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>awsm.css</title>
      <link>https://antonz.ru/episode-5/</link>
      <pubDate>Fri, 19 Mar 2021 10:08:55 +0000</pubDate>
      
      <guid>https://antonz.ru/episode-5/</guid>
      <description>О замечательной библиотеке для всех, кто не фанатеет от html-верстки.</description>
      <content:encoded><![CDATA[<p>О замечательной библиотеке для всех, кто не фанатеет от html-верстки.</p>
<iframe src="https://anchor.fm/nalgeon/embed/episodes/awsm-css-et01n6" height="102px" width="360px" frameborder="0" scrolling="no"></iframe>
<p><a href="https://github.com/igoradamenko/awsm.css">awsm.css</a> на гитхабе</p>
<p><a href="https://igoradamenko.github.io/awsm.css/">Описание и примеры</a></p>
<p><a href="https://www.patreon.com/nalgeon">Поддержать подкаст + бонусы</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Начни с примера</title>
      <link>https://antonz.ru/start-with-example/</link>
      <pubDate>Mon, 15 Mar 2021 14:37:23 +0000</pubDate>
      
      <guid>https://antonz.ru/start-with-example/</guid>
      <description>Главное правило для всех, кто пишет обучающие статьи, курсы и вообще что угодно для начинающих.</description>
      <content:encoded><![CDATA[<p>Главное правило для всех, кто пишет обучающие статьи, курсы и вообще что угодно для начинающих:</p>
<blockquote class="big">
Начинайте с примеров, черт возьми
</blockquote>
<p>Например, вы решили учить людей SQL. И первым делом подсовываете им такую замечательную схему SQL-запроса:</p>
<p><img src="examples-sql.png" alt="Схема SQL-запроса"></p>
<p>Не, ну, а чо. Пусть сразу системному подходу учатся, правда?</p>
<p>Нет.</p>
<p>Начните с простых примерчиков. Расскажите про большую эксельку, которую можно фильтровать и сортировать. Покажите примитивные запросы на табличке из 10 записей. Нарисуйте элементарные картинки или сделайте гифку.</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Табличка" src="examples-table.png">
  <figcaption><code>select * from employees</code></figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Условие WHERE" src="examples-where.png">
  <figcaption><code>where department = 'it'</code></figcaption>
</figure>
</div>
</div>
<p>Не нужен начинающим «системный подход». Потом сами к нему придут.</p>
<p>Интересно, что на примере с базовым SQL почти все это понимают. Но стоит взять чуть более сложную тему — и привет. Начинают с многотомной классификации, зубодробительных схем внутреннего устройства и прочей жести. А примеры типа на потом оставим, когда «целостная картина» будет.</p>
<p>Не будет у людей целостной картины. Никакой картины не будет. Пока вы не начнете объяснять на примерах.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Оконные функции в картинках</title>
      <link>https://antonz.ru/window-functions/</link>
      <pubDate>Mon, 15 Mar 2021 09:20:42 +0000</pubDate>
      
      <guid>https://antonz.ru/window-functions/</guid>
      <description>Понятное введение в «окошки» для всех, кто анализирует данные в SQL.</description>
      <content:encoded><![CDATA[<p>Нет более обманчивого раздела SQL, чем «оконные функции». Когда слышишь эти слова, думаешь «наверно, просто придумали какие-то дополнительные функции».</p>
<p>Если вкратце — оконные функции помогают делать классные аналитические отчеты без участия «экселя». Хотите посчитать процент продаж по месяцам от общих продаж за год? Оконные функции. Разделить маркетинговые каналы на эффективные и неэффективные? Оконные функции. Выбрать топ-10 клиентов по каждому сегменту? Тоже они.</p>
<p>Я прочитал несколько десятков статей «для начинающих», которые объясняли, что такое оконные функции. Все они страдали от одной из двух проблем:</p>
<ol>
<li>Все понятно, но описан 1% возможностей «окошек».</li>
<li>Написано так сложно, что если бы я уже не знал предмет обсуждения — ничего бы не понял.</li>
</ol>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Сложна" src="window-wtf.png">
  <figcaption>Если не разобраться в запросах с «окошками»,
выглядят они как-то так</figcaption>
</figure>
</div>
</div>
<p>Хочу исправить ситуацию и написать понятное и наглядное введение в оконные функции. Понятное, потому что я умею доходчиво писать о сложных темах. Наглядное — потому что подготовил несколько десятков картинок и гифок, которые помогут понять базовые принципы «окошек».</p>
<p>План такой:</p>
<ol>
<li>Зачем нужны оконные функции (эта статья).</li>
<li><a href="/window-ranking/">Ранжирование</a></li>
<li><a href="/window-offset/">Смещение</a></span></li>
<li><a href="/window-aggregate/">Агрегация</a></span></li>
<li><a href="/window-rolling/">Скользящие агрегаты</a></span></li>
</ol>
<p>Я рекомендую не просто читать статьи, а сразу <a href="https://stepik.org/z/95367"><strong>проходить курс</strong></a>. В нем много практических задачек, а только с ними абстрактные знания превратятся в навыки.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Итак, зачем нужны оконные функции? Проще всего объяснять на конкретных примерах. Будем работать с игрушечной таблицей сотрудников, вот такой:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure><img alt="Таблица сотрудников" src="window-employees.png"></figure>
</div>
</div>
<p>Рассмотрим некоторые задачи, которые удобно решать с помощью «окошек» в SQL. Как именно их решать — разберемся в следующей части. Пока просто оценим возможности.</p>
<h2 id="1-ранжирование">1. Ранжирование</h2>
<p>Ранжирование — это всевозможные рейтинги, начиная от призеров чемпионата мира по плаванию и заканчивая Forbes 500.</p>
<p>На примере нашей таблички сотрудников:</p>
<p><strong>Общий рейтинг зарплат</strong></p>
<p>Составим рейтинг сотрудников по размеру заработной платы:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure><img alt="Общий рейтинг зарплат" src="window-rank.png"></figure>
</div>
</div>
<p>Видно, что у некоторых коллег одинаковая зарплата (Леонид и Марина, Вероника и Григорий) — поэтому они получили один и тот же ранг.</p>
<p><strong>Рейтинг зарплат по департаментам</strong></p>
<p>Тот же рейтинг, только не для всей компании, а по каждому департаменту в отдельности:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure><img alt="Рейтинг зарплат по департаментам" src="window-rank-department.png"></figure>
</div>
</div>
<p><strong>Группы по зарплате</strong></p>
<p>Разобьем сотрудников на три группы в зависимости от размера зарплаты:</p>
<ul>
<li>высокооплачиваемые,</li>
<li>средние,</li>
<li>низкооплачиваемые.</li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure><img alt="Группы по зарплате" src="window-rank-bucket.png"></figure>
</div>
</div>
<p><strong>Самые «дорогие» коллеги</strong></p>
<p>Найдем самых высокооплачиваемых людей по каждому департаменту:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure><img alt="Самые «дорогие» коллеги" src="window-rank-top.png"></figure>
</div>
</div>
<p>Что ж, этим зарплату больше не повышать! (или наоборот, повысить? 🤔)</p>
<h2 id="2-сравнение-сосмещением">2. Сравнение со смещением</h2>
<p>Сравнение со смещением — это когда мы смотрим, в чем разница между соседними значениями. Например, сравниваем страны, которые занимают 5 и 6 место в мировом рейтинге ВВП — сильно ли отличаются? А если сравнить 1 и 6 место?</p>
<p>Сюда же попадают задачи, в которых мы сравниваем значение из набора с границами набора. Например, есть 100 лучших теннисисток мира. Мария Саккари занимает в рейтинге 20 место. Как ее показатели соотносятся с Эшли Бартли, которая занимает 1 место? А с Лин Чжоу, которая занимает 100 место?</p>
<p>На примере нашей таблички сотрудников:</p>
<p><strong>Разница по зарплате с предыдущим</strong></p>
<p>Упорядочим сотрудников по возрастанию зарплаты и проверим, велик ли разрыв между соседями:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure><img alt="Разница по зарплате с предыдущим" src="window-offset-lag.png"></figure>
</div>
</div>
<p>Столбец <code>diff</code> показывает, на сколько процентов зарплата сотрудника отличается от предыдущего коллеги. Видно, что больших разрывов нет. Самые крупные — между Дарьей и Борисом (10%) и Мариной и Иваном (13%).</p>
<p><strong>Диапазон зарплат в департаменте</strong></p>
<p>Посмотрим, как зарплата сотрудника соотносится с минимальной и максимальной зарплатой в его департаменте:</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure><img alt="Диапазон зарплат в департаменте" src="window-offset-first-last.png"></figure>
</div>
</div>
<p>Для каждого сотрудника столбец <code>low</code> показывает минимальную зарплату родного департамента, а столбец <code>high</code> — максимальную. Видно, что разброс значений в HR и продажах невелик, а у айтишников — значительный.</p>
<h2 id="3-агрегация">3. Агрегация</h2>
<p>Агрегация — это когда мы считаем суммарные или средние показатели. Например, среднюю зарплату по каждому региону или количество золотых медалей у каждой страны в зачете Олимпийских игр.</p>
<p>На примере нашей таблички сотрудников:</p>
<p><strong>Сравнение с фондом оплаты труда</strong></p>
<p>У каждого департамента есть фонд оплаты труда — денежная сумма, которая ежемесячно уходит на выплату зарплат сотрудникам. Посмотрим, какой процент от этого фонда составляет зарплата каждого сотрудника:</p>
<div class="row">
<div class="col-xs-12 col-sm-7">
<figure><img alt="Сравнение с фондом оплаты труда" src="window-aggregate-sum.png"></figure>
</div>
</div>
<p>Столбец <code>fund</code> показывает фонд оплаты труда отдела, а <code>perc</code> — долю зарплаты сотрудника от этого фонда. Видно, что в HR и продажах все более-менее ровно, а у айтишников есть заметный разброс зарплат.</p>
<p><strong>Сравнение со средней зарплатой</strong></p>
<p>Интересно, велик ли разброс зарплат в департаментах. Проверим: посчитаем отклонение зарплаты каждого сотрудника от средней по департаменту:</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure><img alt="Сравнение со средней зарплатой" src="window-aggregate-diff.png"></figure>
</div>
</div>
<p>Результат подтверждает предыдущие наблюдения: у айтишников зарплаты колеблются от -16% до +20% от среднего, а у остальных департаментов отклонение в пределах 5%.</p>
<h2 id="4-скользящие-агрегаты">4. Скользящие агрегаты</h2>
<p>Скользящие агрегаты — это те же сумма и среднее. Только рассчитывают их не по всем элементам набора, а более хитрым способом.</p>
<p>Поясню на примере. Здесь возьмем другую табличку — с доходами и расходами одного из сотрудников (пусть это будет Марина) за 9 месяцев 2020 года:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure><img alt="Таблица расходов" src="window-expenses.png"></figure>
</div>
</div>
<p><strong>Скользящее среднее по расходам</strong></p>
<p>Судя по данным, доходы у Марины растут: 94К ₽ в январе → 104К ₽ в сентябре. А вот растут ли расходы? Сходу сложно сказать, месяц на месяц не приходится. Чтобы сгладить эти скачки, используют «скользящее среднее» — для каждого месяца рассчитывают средний расход с учетом предыдущего и следующего месяца. Например:</p>
<ul>
<li>скользящее среднее за февраль = (январь + февраль + март) / 3;</li>
<li>за март = (февраль + март + апрель) / 3;</li>
<li>за апрель = (март + апрель + май) / 3;</li>
<li>и так далее.</li>
</ul>
<p>Рассчитаем скользящее среднее по всем месяцам:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure><img alt="Скользящее среднее по расходам" src="window-rolling-avg.png"></figure>
</div>
</div>
<p>Теперь хорошо видно, что расходы стабильно растут.</p>
<p><strong>Прибыль нарастающим итогом</strong></p>
<p>Мы выяснили, что растут и доходы, и расходы. А как они соотносятся друг с другом? Хочется понять, находится ли человек «в плюсе» или «в минусе» с учетом всех заработанных и потраченных денег.</p>
<p>Причем важно понимать не на конец года, а на каждый месяц. Потому что если по итогам года у Марины все ОК, а в июне ушла в минус — это потенциальная проблема (у компаний такую ситуацию называют «кассовым разрывом»).</p>
<p>Поэтому посчитаем доходы и расходы по месяцам нарастающим итогом (кумулятивно):</p>
<ul>
<li>кумулятивный доход за январь = январь;</li>
<li>за февраль = январь + февраль;</li>
<li>за март = январь + февраль + март;</li>
<li>за апрель = январь + февраль + март + апрель;</li>
<li>и так далее.</li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-10">
<figure><img alt="Прибыль нарастающим итогом" src="window-cumulative-sum.png"></figure>
</div>
</div>
<p>Теперь видно, что дела у Марины идут неплохо. В некоторых месяцах расходы превышают доходы, но благодаря накопленной «денежной подушке» кассового разрыва не происходит.</p>
<h2 id="резюме">Резюме</h2>
<p>Вот задачи, которые непринужденно решаются с помощью оконных функций в SQL:</p>
<ol>
<li>Ранжирование (всевозможные рейтинги).</li>
<li>Сравнение со смещением (соседние элементы и границы).</li>
<li>Агрегация (сумма и среднее).</li>
<li>Скользящие агрегаты (сумма и среднее в динамике).</li>
</ol>
<p>Конечно, это не исчерпывающий список. Но, надеюсь, теперь понятно, как пригодятся оконные функции в аналитике данных. В <a href="/window-ranking/">следующей части</a> разберемся, что такое «окно» и как работает оконная функция.</p>
<p>Чтобы закрепить знания на практике — <a href="https://stepik.org/z/95367"><strong>записывайтесь на курс</strong></a> 🚀</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Ошибки в API</title>
      <link>https://antonz.ru/episode-4/</link>
      <pubDate>Sun, 14 Mar 2021 14:07:02 +0000</pubDate>
      
      <guid>https://antonz.ru/episode-4/</guid>
      <description>Как лучше всего возвращать информацию об ошибках в API.</description>
      <content:encoded><![CDATA[<p>Как лучше всего возвращать информацию об ошибках в API.</p>
<iframe src="https://anchor.fm/nalgeon/embed/episodes/API-eshe7e" height="102px" width="360px" frameborder="0" scrolling="no"></iframe>
<p><a href="https://httptoolkit.tech/blog/http-api-problem-details/">How do you know what's gone wrong when your API request fails?</a></p>
<p><a href="https://tools.ietf.org/html/rfc7807">RFC 7807. Problem Details for HTTP APIs</a></p>
<p><a href="https://httptoolkit.tech/blog/http-api-problem-details/#how-do-i-start-using-this">Библиотеки для разных языков</a></p>
<p><a href="https://httpstatuses.com/">HTTP Status Codes</a></p>
<p><a href="https://www.patreon.com/nalgeon">Поддержать подкаст + бонусы</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Собираем открытые данные с GitHub Actions</title>
      <link>https://antonz.ru/github-actions-scraping/</link>
      <pubDate>Fri, 12 Mar 2021 14:12:59 +0000</pubDate>
      
      <guid>https://antonz.ru/github-actions-scraping/</guid>
      <description>Как собрать данные из API, опубликовать датасет на гитхабе и автоматически актуализировать.</description>
      <content:encoded><![CDATA[<p>GitHub Actions чаще всего используют для сборки и тестов, но вообще сервис подходит для любой автоматизации.</p>
<p>В этой заметке я расскажу:</p>
<ul>
<li>как собрать данные из API,</li>
<li>опубликовать датасет на гитхабе,</li>
<li>и автоматически актуализировать.</li>
</ul>
<p>В результате получится идеальный инструмент для сбора и публикации открытых данных.</p>
<p>Будем работать с API станций метро, которое предоставляет <a href="https://github.com/hhru/api">HeadHunter</a>. Я буду приводить фрагменты конфига для GitHub Actions, а в конце дам ссылку на готовый репозиторий. Поехали!</p>
<h2 id="1-собрать-данные-изapi">1. Собрать данные из API</h2>
<p>Получаем сырой JSON от API, красиво форматируем, сохраняем в файл:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#000">name</span>: <span style="color:#1c01ce">Fetch latest data</span>
  <span style="color:#000">run</span>: |-<span style="color:#c41a16">
</span><span style="color:#c41a16">      </span>      <span style="color:#1c01ce">curl https://api.hh.ru/metro | jq --indent 4 . &gt; data/metro.json</span>
</code></pre></div><h2 id="2-опубликовать-датасет-нагитхабе">2. Опубликовать датасет на гитхабе</h2>
<p>Коммитим от имени специального пользователя <code>actions@users.noreply.github.com</code> — его можно использовать в сценариях GitHub Actions:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#000">name</span>: <span style="color:#1c01ce">Commit and push if changed</span>
  <span style="color:#000">run</span>: |-<span style="color:#c41a16">
</span><span style="color:#c41a16">      git config user.name &#34;Automated&#34;
</span><span style="color:#c41a16">      git config user.email &#34;actions@users.noreply.github.com&#34;
</span><span style="color:#c41a16">      git add -A
</span><span style="color:#c41a16">      timestamp=$(date --rfc-3339=seconds --utc)
</span><span style="color:#c41a16">      git commit -m &#34;Latest data: ${timestamp}&#34; || exit 0
</span><span style="color:#c41a16">      git push</span>      
</code></pre></div><p>Бонусом получаем автоматическую проверку, изменились ли данные с предыдущего запуска. Если не изменились, команда <code>git add -A</code> ничего не добавит, и коммит не произойдет. Таким образом, новая версия датасета опубликуется, только если есть изменения.</p>
<h2 id="3-автоматически-актуализировать">3. Автоматически актуализировать</h2>
<p>Сценарий запускается по расписанию, как указано в cron-выражении. Здесь — в 23:00 UTC каждый день:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#000">on</span>:
    <span style="color:#000">push</span>:
    <span style="color:#000">workflow_dispatch</span>:
    <span style="color:#000">schedule</span>:
        - <span style="color:#000">cron</span>: <span style="color:#c41a16">&#34;00 23 * * *&#34;</span>
</code></pre></div><h2 id="4-бонус-json--csv">4. Бонус: JSON → CSV</h2>
<p>JSON — это замечательно, но неплохо бы публиковать датасет еще и в CSV. В этом поможет SQLite, который умеет нативно работать с JSON.</p>
<p>Создаем таблицу:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">create</span> <span style="color:#a90d91">table</span> <span style="color:#000">city</span> (
    <span style="color:#000">id</span> <span style="color:#a90d91">text</span>,
    <span style="color:#000">name</span> <span style="color:#a90d91">text</span>,
    <span style="color:#000">url</span> <span style="color:#a90d91">text</span>,
    <span style="color:#000">fullkey</span>
);
</code></pre></div><p>Загружаем данные из JSON:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">insert</span> <span style="color:#a90d91">into</span> <span style="color:#000">city</span> (<span style="color:#000">id</span>, <span style="color:#000">name</span>, <span style="color:#000">url</span>, <span style="color:#000">fullkey</span>)
<span style="color:#a90d91">select</span>
   <span style="color:#000">json_extract</span>(<span style="color:#000">value</span>, <span style="color:#c41a16">&#39;$.id&#39;</span>) <span style="color:#a90d91">as</span> <span style="color:#000">id</span>,
   <span style="color:#000">json_extract</span>(<span style="color:#000">value</span>, <span style="color:#c41a16">&#39;$.name&#39;</span>) <span style="color:#a90d91">as</span> <span style="color:#000">name</span>,
   <span style="color:#000">json_extract</span>(<span style="color:#000">value</span>, <span style="color:#c41a16">&#39;$.url&#39;</span>) <span style="color:#a90d91">as</span> <span style="color:#000">url</span>,
   <span style="color:#000">fullkey</span>
<span style="color:#a90d91">from</span> <span style="color:#000">json_tree</span>(<span style="color:#000">readfile</span>(<span style="color:#c41a16">&#39;data/metro.json&#39;</span>))
<span style="color:#a90d91">where</span> <span style="color:#000">path</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;$&#39;</span> <span style="color:#a90d91">and</span> <span style="color:#a90d91">type</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#39;object&#39;</span>;
</code></pre></div><p>Выгружаем в CSV:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql">.<span style="color:#a90d91">mode</span> <span style="color:#000">csv</span>
.<span style="color:#000">headers</span> <span style="color:#a90d91">on</span>
.<span style="color:#000">once</span> <span style="color:#a90d91">data</span><span style="color:#000">/</span><span style="color:#000">city</span>.<span style="color:#000">csv</span>
<span style="color:#a90d91">select</span> <span style="color:#000">id</span>, <span style="color:#000">name</span> <span style="color:#a90d91">from</span> <span style="color:#000">city</span>;
</code></pre></div><p>Сохраняем команды в файл и запускаем в сценарии:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#000">name</span>: <span style="color:#1c01ce">Convert json to csv</span>
  <span style="color:#000">run</span>: |-<span style="color:#c41a16">
</span><span style="color:#c41a16">      </span>      <span style="color:#1c01ce">sqlite3 -batch data/metro.db &lt; json-to-csv.sql</span>
</code></pre></div><p class="text-centered">⌘ ⌘ ⌘</p>
<p>Набор данных в трех форматах (JSON, CSV, SQLite) — готов! А теперь попробуйте на своем датасете ツ</p>
<p><a href="https://github.com/nalgeon/metro/blob/main/.github/workflows/scrape.yaml">Полный сценарий</a></p>
<p><a href="https://github.com/nalgeon/metro">Репозиторий с данными</a></p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на канал <span class="nowrap"><i class="fas fa-database"></i> «<a href="https://t.me/sqliter">SQLite на практике</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>JSON:API</title>
      <link>https://antonz.ru/episode-3/</link>
      <pubDate>Fri, 05 Mar 2021 07:18:00 +0000</pubDate>
      
      <guid>https://antonz.ru/episode-3/</guid>
      <description>Сегодня поговорим об API. Не просто о REST &#43; JSON, а о спецификации JSON:API для сложных и долгоживущих систем.</description>
      <content:encoded><![CDATA[<p>Сегодня поговорим об API. Не просто о REST + JSON, а о спецификации JSON:API для сложных и долгоживущих систем.</p>
<iframe src="https://anchor.fm/nalgeon/embed/episodes/JSONAPI-ermqot" height="102px" width="360px" frameborder="0" scrolling="no"></iframe>
<p><a href="https://jsonapi.org/format/">Спецификация JSON:API 1.0</a></p>
<p><a href="https://habr.com/ru/company/oleg-bunin/blog/433322/">JSON API — работаем по спецификации</a></p>
<p><a href="https://dri.es/headless-cms-rest-vs-jsonapi-vs-graphql">REST vs JSON:API vs GraphQL</a></p>
<p><a href="https://www.patreon.com/nalgeon">Поддержать подкаст + бонусы</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Что нового в SQLite 3.35</title>
      <link>https://antonz.ru/sqlite-3-35/</link>
      <pubDate>Wed, 03 Mar 2021 13:09:26 +0000</pubDate>
      
      <guid>https://antonz.ru/sqlite-3-35/</guid>
      <description>Математические функции, удаление столбцов и материализованные CTE.</description>
      <content:encoded><![CDATA[<p>В новых релизах разработчики SQLite часто перебирают движок так и сяк, а для внешнего наблюдателя ничего особо не меняется. 2020 год стал приятным исключением — добавили кучу приятных фич для пользователей, вроде вычисляемых столбцов, <code>UPDATE FROM</code> и великолепного <code>.mode box</code> в консоли.</p>
<p>Есть все шансы, что 2021 год продолжит традицию. Вот что сделали в релизе 3.35 (вышел 12 марта):</p>
<ol>
<li>Математические функции ‼️</li>
<li>Удаление столбцов ❗</li>
<li>Возврат обработанных строк для <code>DELETE</code>, <code>INSERT</code> и <code>UPDATE</code> (выражение RETURNING).</li>
<li>Материализованные CTE.</li>
</ol>
<p>Чуть подробнее о каждой фиче:</p>
<h2 id="математические-функции">Математические функции</h2>
<p>Много лет авторов SQLite буквально умоляли добавить базовые функции вроде <code>sqrt()</code>, <code>log()</code> и <code>pow()</code>. Ответ всегда был примерно одинаковый:</p>
<blockquote>
<p>SQLite не просто так называется «lite». Нужны вам функции — добавьте сами.</p>
</blockquote>
<p>В целом понятная позиция. Но не добавлять квадратный корень? И при этом реализовать аналитические функции, рекурсивные запросы и прочую продвинутую SQL-магию? Серьезно?</p>
<p>Я подозреваю, что дело в другом, и разработчики SQLite делают те фичи, за которые готовы платить крупные клиенты. Так или иначе, спустя 20 лет у нас появились математические функции!</p>
<p>Вот полный список:</p>
<pre tabindex="0"><code>acos(X)
acosh(X)
asin(X)
asinh(X)
atan(X)
atan2(X,Y)
ceil(X)
ceiling(X)
cos(X)
cosh(X)
degrees(X)
exp(X)
floor(X)
ln(X)
log(B,X)
log(X)
log10(X)
log2(X)
mod(X,Y)
pi()
pow(X,Y)
power(X,Y)
radians(X)
sin(X)
sinh(X)
sqrt(X)
tan(X)
tanh(X)
trunc(X)
</code></pre><h2 id="удаление-столбцов">Удаление столбцов</h2>
<p>Наверно, второй по популярности источник страданий разработчиков. Невероятно бесит, что можно насоздавать сколько угодно столбцов в таблице, а удалить нельзя. Хочешь удалить столбец — делай копию таблицы без него, а старую удаляй.</p>
<p>Теперь эта боль тоже уйдет! <code>ALTER TABLE DROP COLUMN</code>, как долго мы тебя ждали.</p>
<p>Чтобы удалить столбец, SQLite придется полностью перезаписать таблицу — так что операция это небыстрая. Но все равно приятно.</p>
<h2 id="returning">RETURNING</h2>
<p>Из запросов <code>DELETE</code>, <code>INSERT</code> и <code>UPDATE</code> теперь можно возвращать строчки, которые они удалили, добавили или изменили.</p>
<p>Например, можно вернуть идентификатор новой записи:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">create</span> <span style="color:#a90d91">table</span> <span style="color:#000">users</span> (
  <span style="color:#000">id</span> <span style="color:#a90d91">integer</span> <span style="color:#a90d91">primary</span> <span style="color:#a90d91">key</span>,
  <span style="color:#000">first_name</span> <span style="color:#a90d91">text</span>,
  <span style="color:#000">last_name</span> <span style="color:#a90d91">text</span>
);

<span style="color:#a90d91">insert</span> <span style="color:#a90d91">into</span> <span style="color:#000">users</span> (<span style="color:#000">first_name</span>, <span style="color:#000">last_name</span>)
<span style="color:#a90d91">values</span> (<span style="color:#c41a16">&#39;Нина&#39;</span>, <span style="color:#c41a16">&#39;Жукова&#39;</span>)
<span style="color:#000">returning</span> <span style="color:#000">id</span>;
</code></pre></div><p>Или вернуть товары, которым повысили цену:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#a90d91">update</span> <span style="color:#000">products</span> <span style="color:#a90d91">set</span> <span style="color:#000">price</span> <span style="color:#000">=</span> <span style="color:#000">price</span> <span style="color:#000">*</span> <span style="color:#1c01ce">1</span>.<span style="color:#1c01ce">10</span>
<span style="color:#a90d91">where</span> <span style="color:#000">price</span> <span style="color:#000">&lt;=</span> <span style="color:#1c01ce">99</span>.<span style="color:#1c01ce">99</span>
<span style="color:#000">returning</span> <span style="color:#000">name</span>, <span style="color:#000">price</span> <span style="color:#a90d91">as</span> <span style="color:#000">new_price</span>;
</code></pre></div><h2 id="материализованные-cte">Материализованные CTE</h2>
<p>CTE, или Common Table Expression — отличный способ сделать запрос короче и выразительнее. Например, посчитать количество городов, основанных в каждом столетии:</p>
<pre tabindex="0"><code>create table city(
  city text,
  timezone text,
  geo_lat real,
  geo_lon real,
  population integer,
  foundation_year integer
);

-- insert data ...

with history as (
  select
    city,
    (foundation_year/100)+1 as century
  from city
)
select
  century || '-й век' as dates,
  count(*) as city_count
from history
group by century
order by century desc;
</code></pre><p>Если одно и то же CTE встречается в запросе несколько раз, SQLite каждый раз его вычисляет. Для больших таблиц это может быть небыстро.</p>
<p>С материализованным CTE SQLite выполнит запрос один раз, запомнит результат, и не будет его пересчитывать (в пределах запроса):</p>
<pre tabindex="0"><code>with history as materialized (
  select ...
)
select ... from history where ...
except
select ... from history where ...
;
</code></pre><p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>И все это в одном релизе! Невероятно ツ</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на канал <span class="nowrap"><i class="fas fa-database"></i> «<a href="https://t.me/sqliter">SQLite на практике</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Моментальный поиск</title>
      <link>https://antonz.ru/episode-2/</link>
      <pubDate>Wed, 03 Mar 2021 07:15:00 +0000</pubDate>
      
      <guid>https://antonz.ru/episode-2/</guid>
      <description>Что такое индекс в базе данных и как он работает. Никакой магии!</description>
      <content:encoded><![CDATA[<p>Что такое индекс в базе данных и как он работает. Никакой магии!</p>
<iframe src="https://anchor.fm/nalgeon/embed/episodes/ep-er9i8l" height="102px" width="360px" frameborder="0" scrolling="no"></iframe>
<p><a href="https://use-the-index-luke.com/sql/anatomy">Анатомия индекса</a></p>
<p><a href="https://www.patreon.com/nalgeon">Поддержать подкаст + бонусы</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Слишком простое решение</title>
      <link>https://antonz.ru/too-simple/</link>
      <pubDate>Tue, 02 Mar 2021 14:19:02 +0000</pubDate>
      
      <guid>https://antonz.ru/too-simple/</guid>
      <description>Все любят простые решения. Но иногда можно сделать даже проще, чем думаешь.</description>
      <content:encoded><![CDATA[<p>Хорошие продакты, дизайнеры и инженеры любят простые решения — при условии, что они подходят пользователям. Но иногда можно сделать даже проще, чем думаешь.</p>
<p>Пример из жизни. Мы в «<a href="https://dadata.ru/">Дадате</a>» в основном работаем с юрлицами, а эти ребята умеют платить только по счету.</p>
<p>Мне в свое время категорически не хотелось тратить время на модуль выставления счетов, поэтому прошерстил весь рунет в поисках подходящего сервиса. Нашел миллион сайтов с конструкторами счетов, но только один с API — «Финолог». Он простой, подключились, пользовались, советовали другим.</p>
<p>Шло время, и «Финолог» начал барахлить. В целом, нужные фичи было легко повторить в «Дадате». Кроме одной — преобразования счета в PDF. А на мой взгляд, это было обязательно — что бухгалтеру делать со счетом, если его не скачать в пдф?</p>
<p>Однажды утром счета в «Финологе» тихо умерли. Техподдержка невозмутимо сообщила, что они решили навсегда отключить сервис счетов — вот так, одним днем и без объявления войны.</p>
<p>Ну ОК. Тут уж было не до изысков, так что за пару часов я сделал «выставление счетов» в виде одной статической странички. Параметры счета передавались прямо через строку запроса:
<a href="https://nalgeon.github.io/invoice/invoice.html?number=1234&amp;company=%D0%9E%D0%9E%D0%9E+%C2%AB%D0%9C%D0%B0%D0%B3%D0%B0%D0%B7%D0%B8%D0%BD%D1%87%D0%B8%D0%BA%C2%BB&amp;item=%D0%9F%D0%BE%D0%B4%D0%BF%D0%B8%D1%81%D0%BA%D0%B0+%D0%BD%D0%B0+%D0%B3%D0%BE%D0%B4&amp;price=5000">invoice.html?number=1234&amp;price=5000</a> (ссылка рабочая, можете перейти и полюбоваться результатом).</p>
<p><img src="too-simple-invoice.png" alt="Ну очень простой генератор счетов"></p>
<p>И никакого PDF. Я подумал — отправить на принтер можно прямо из браузера, а если так уж нужен пдф, так современные браузеры умеют в него распечатывать.</p>
<p>И знаете что? За полгода только один человек не разобрался в новом интерфейсе. PDF-фича, которую я так ценил в «Финологе», оказалась никому не нужна. Заодно «Дадата» избавилась от лишней зависимости, что для облачного сервиса всегда плюс.</p>
<p>Такие дела. Иногда стоит взять и без того простую фичу, упростить еще и проверить — может, станет только лучше.</p>
<p>Ну а если вам вдруг очень срочно понадобится приделать счета на сайт — форкните <a href="https://github.com/nalgeon/invoice">репозиторий</a>, укажите реквизиты своей компании, и пользуйтесь. Дубовый вариант, но быстрый и рабочий.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Комментарии в блоге через GitHub</title>
      <link>https://antonz.ru/comments-via-github/</link>
      <pubDate>Mon, 01 Mar 2021 10:54:35 +0000</pubDate>
      
      <guid>https://antonz.ru/comments-via-github/</guid>
      <description>Восхитительно гиковский способ приделать комментарии к блогу.</description>
      <content:encoded><![CDATA[<p>Если к блогу подключают комментарии — обычно используют мерзкий Disqus, тормозной и увешенный трекерами. Есть и более легкие варианты, вроде HyperComments или anycomment. Но Джереми Данье сделал <em>идеальный</em> вариант для гиков — плагин <a href="https://utteranc.es/">utterances</a> с комментариями через GitHub Issues.</p>
<p>Читатели комментируют на сайте как обычно, а комментарии хранятся прямо в гитхабе. На каждую страницу сайта автоматом заводится отдельная задачка в репозитории. Чтобы комментировать, требуется авторизоваться через гитхаб — так что никакого спама. Просто, красиво, бесплатно и с открытым кодом.</p>
<p>Как подключить:</p>
<ol>
<li>Создать отдельный публичный репозиторий на гитхабе (например, comments.antonz.ru).</li>
<li>Включить приложение <a href="https://github.com/apps/utterances">utterances</a> только для этого репозитория (для всех включать не стоит).</li>
<li>Инициализировать плагин в шаблоне блога:</li>
</ol>
<pre tabindex="0"><code>&lt;script src=&quot;https://utteranc.es/client.js&quot;
  repo=&quot;username/repo&quot;
  issue-term=&quot;pathname&quot;
  theme=&quot;github-light&quot;
  crossorigin=&quot;anonymous&quot;
  async&gt;
&lt;/script&gt;
</code></pre><p>Вместо <code>username/repo</code> подставьте свое имя пользователя на гитхабе и название репозитория (например, <code>nalgeon/comments.antonz.ru</code>). Готово!</p>
<p>Это первая система комментариев, которую мне захотелось приделать к блогу (что незамедлительно и сделал). Знаю, что никто ничего в блогах не комментирует, но все равно — уж больно клевая штука ツ</p>
<div class="row">
<div class="col-xs-12 col-sm-10"><p><em>И подписывайтесь на рассылку+подкаст <span class="nowrap"><i class="far fa-dot-circle"></i> «<a href="https://www.patreon.com/nalgeon">Сегодня я узнал</a>»</span> о программировании и сервисах</em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Используй индекс, Люк!</title>
      <link>https://antonz.ru/episode-1/</link>
      <pubDate>Sun, 28 Feb 2021 07:12:00 +0000</pubDate>
      
      <guid>https://antonz.ru/episode-1/</guid>
      <description>О лучшей книге для тех, кто уже знает SQL и хочет понять, как заставить запросы работать быстро.</description>
      <content:encoded><![CDATA[<p>О лучшей книге для тех, кто уже знает SQL и хочет понять, как заставить запросы работать быстро.</p>
<iframe src="https://anchor.fm/nalgeon/embed/episodes/ep-er7biv" height="102px" width="360px" frameborder="0" scrolling="no"></iframe>
<p><a href="https://use-the-index-luke.com/">Бесплатная книга онлайн</a></p>
<p><a href="https://www.amazon.com/dp/3950307826/">Книга на Амазоне</a></p>
<p><a href="https://www.patreon.com/nalgeon">Поддержать подкаст + бонусы</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Сегодня я узнал</title>
      <link>https://antonz.ru/podcast/</link>
      <pubDate>Sun, 28 Feb 2021 07:02:00 +0000</pubDate>
      
      <guid>https://antonz.ru/podcast/</guid>
      <description>Компактный практический подкаст о программировании и продуктах.</description>
      <content:encoded><![CDATA[<p>Запустил подкаст о программировании и продуктах. Главные принципы:</p>
<ul>
<li>Никакой пустой болтовни. Никаких рассуждений об очередном айфоне, цене биткойна или что там Маск написал в твитере.</li>
<li>Только практические штуки. В каждом выпуске — одна тема, которую можно взять и сразу применять на работе или в жизни.</li>
<li>Очень короткие эпизоды — пять минут или около того. Не хочу долго занимать эфир, да и вообще длинных подкастов уже достаточно.</li>
</ul>
<p>Выходит раз в неделю или чаще. Подписывайтесь!</p>
<style>
.podcast-button {
    display: block;
    padding: 0.75rem 1rem;
    border: 1px solid #a8aaae !important;
    border-radius: 8px;
    text-align: center;
    font-size: 1rem;
}
</style>
<div class="row">
<div class="col-xs-10 col-sm-3">
    <p><a class="img-link" href="https://podcasts.apple.com/podcast/id1556171504"><img alt="Слушать на Apple Podcasts" src="listen-on-apple-podcasts.png"></a></p>
</div>
<div class="col-xs-10 col-sm-3">
    <p><a class="img-link" href="https://www.google.com/podcasts?feed=aHR0cHM6Ly9hbmNob3IuZm0vcy8zOGZhMTU4L3BvZGNhc3QvcnNz"><img alt="Слушать на Google Podcasts" src="listen-on-google-podcasts.png"></a></p>
</div>
<!--<div class="col-xs-10 col-sm-3">
    <p><a class="img-link" href="https://music.yandex.ru/album/14301894"><img alt="Слушать на Яндекс.Музыке" src="https://antonz.rulisten-on-yandex-music.svg"></a></p>
</div>-->
<div class="col-xs-10 col-sm-3">
    <p><a class="podcast-button" href="/tag/podcast/">все эпизоды</a></p>
</div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Простое против легкого</title>
      <link>https://antonz.ru/simple-made-easy/</link>
      <pubDate>Fri, 26 Feb 2021 12:55:15 +0000</pubDate>
      
      <guid>https://antonz.ru/simple-made-easy/</guid>
      <description>Стремление к простым программам  — самый важный, наверное, принцип разработки</description>
      <content:encoded><![CDATA[<p>9 лет назад в докладе «<a href="https://www.infoq.com/presentations/Simple-Made-Easy/">Simple Made Easy</a>» Рич Хикки рассказал о разнице между простым (<em>simple</em>) и легким (<em>easy</em>) в разработке софта. Стремление к простым программам (в противоположность легким) — самый важный, наверное, принцип разработки. И при этом совершенно непопулярный.</p>
<ul>
<li><em>Simple</em> — это о внутреннем устройстве программы, ее архитектуре. У простых программ мало внутренних зависимостей, движущихся частей, настроек. Антипод простой программы — сложная. Простая программа или сложная — это объективная характеристика.</li>
<li><em>Easy</em> — это о том, насколько человеку легко работать с программой. Это субъективная характеристика: что мне легко, другому сложно, и наоборот. Антипод легкой программы — тяжелая.</li>
</ul>
<p>Например, SQLite — легкая, но не простая. Внутри там ад, особенно в системе типов и взаимовлиянии многочисленных параметров. А Redis — простой. Но для многих не такой легкий, как SQLite, потому что непривычный. Docker — «легкий», но сложный. Kubernetes — тяжелый и адово сложный.</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
<figure>
  <img alt="Простое" src="simlpe-made-easy-1.png" style="max-height: 268px;">
  <figcaption>Простое — про внутреннее устройство</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-5 col-sm-offset-1">
<figure>
  <img alt="Легкое" src="simlpe-made-easy-2.png" style="max-height: 268px;">
  <figcaption>Легкое — про восприятие</figcaption>
</figure>
</div>
</div>
<p>«Си» начинался как простой язык, но из-за стремления бесконечно сохранять обратную совместимость превратился в сложный. C++ сразу начинался как сложный, а из-за фичеризма авторов превратился в ночной кошмар.</p>
<p>JavaScript — легкий, но очень сложно устроен. Python — тоже легкий и непростой, хотя и попроще джаваскрипта. Go — простой.</p>
<p>Модули стандартной библиотеки Python <a href="https://github.com/python/cpython/blob/3.9/Lib/bisect.py"><code>bisect</code></a> и <a href="https://github.com/python/cpython/blob/3.9/Lib/heapq.py"><code>heapq</code></a> — простые. Но не легкие, если вы не знаете алгоритмов, которые они реализуют. <a href="https://github.com/python/cpython/blob/3.9/Lib/dataclasses.py"><code>dataclasses</code></a> и <a href="https://github.com/python/cpython/blob/3.9/Lib/collections/__init__.py#L336"><code>namedtuple</code></a> созданы, чтобы быть легкими, но при этом очень сложны.</p>
<p>Простые программы в долгой перспективе лучше легких. В простой программе оказывается легче разобраться, легче использовать на реальных сценариях, легче менять и дорабатывать. Легкую (но при этом сложно устроенную) программу можно быстро начать использовать, но дальше ждет стена.</p>
<p>Разработчики предпочитают писать «легкие» программы, а не простые — потому что простые делать тяжело. Придется продумывать архитектуру, работать с ограничениями, много раз переписывать. Намного легче слепить из палочек и веточек, а сверху приделать «легкий» интерфейс.</p>
<p>Очень хочу, чтобы в мире софта появлялось больше простых, а не «легких» программ и библиотек.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Кросс-платформенная сборка с GitHub Actions</title>
      <link>https://antonz.ru/github-actions/</link>
      <pubDate>Thu, 11 Feb 2021 13:34:09 +0000</pubDate>
      
      <guid>https://antonz.ru/github-actions/</guid>
      <description>Если проект живет на GitHub, настройте за 10 минут авто-сборку под Windows, Linux и macOS.</description>
      <content:encoded><![CDATA[<p>Если проект живет на GitHub, можно за десять минут настроить авто-сборку под основные операционные системы — Windows, Linux и macOS.</p>
<p>Раньше для сборки почти всегда использовали <a href="https://travis-ci.org/">Travis CI</a>, многие по инерции и сейчас так делают. Но есть способ лучше — <a href="https://github.com/features/actions">GitHub Actions</a>.</p>
<p>GitHub Actions — невероятно мощный бесплатный сервис автоматизации любых задач. Грубо говоря, вы выполняете свой код на серверах Гитхаба и делаете там все, что заблагорассудится. Звучит диковато, но открывает бездну возможностей. В том числе — автоматическую сборку проекта под все ОС. Особенно приятно, что можно собирать под Windows.</p>
<p>Вот как это работает:</p>
<ol>
<li>Создаете файл конфигурации.</li>
</ol>
<pre tabindex="0"><code>mkdir -p .github/workflows
touch .github/workflows/build.yml
</code></pre><ol start="2">
<li>Указываете условия запуска сборки.</li>
</ol>
<p>Например, собирать при каждом коммите:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#000">on</span>: <span style="color:#1c01ce">push</span>
</code></pre></div><p>Или только из новых тегов:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#000">on</span>:
  <span style="color:#000">push</span>:
    <span style="color:#000">tags</span>:
      - <span style="color:#c41a16">&#34;*&#34;</span>
</code></pre></div><ol start="3">
<li>Перечисляете операционные системы.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#000">runs-on</span>: <span style="color:#1c01ce">${{ matrix.os }}</span>
<span style="color:#000">strategy</span>:
  <span style="color:#000">matrix</span>:
    <span style="color:#000">include</span>:
      - <span style="color:#000">os</span>: <span style="color:#1c01ce">ubuntu-latest</span>
      - <span style="color:#000">os</span>: <span style="color:#1c01ce">windows-latest</span>
      - <span style="color:#000">os</span>: <span style="color:#1c01ce">macos-latest</span>
</code></pre></div><ol start="4">
<li>Указываете шаги сборки.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#000">uses</span>: <span style="color:#1c01ce">actions/checkout@v2</span>

- <span style="color:#000">name</span>: <span style="color:#1c01ce">Build for Linux</span>
  <span style="color:#000">if</span>: <span style="color:#1c01ce">matrix.os == &#39;ubuntu-latest&#39;</span>
  <span style="color:#000">run</span>: <span style="color:#1c01ce">gcc -fPIC -lm -shared src/stats.c -o dist/sqlite3-stats.so</span>

- <span style="color:#000">name</span>: <span style="color:#1c01ce">Build for Windows</span>
  <span style="color:#000">if</span>: <span style="color:#1c01ce">matrix.os == &#39;windows-latest&#39;</span>
  <span style="color:#000">run</span>: <span style="color:#1c01ce">gcc -fPIC -lm -shared src/stats.c -o dist/sqlite3-stats.dll</span>

- <span style="color:#000">name</span>: <span style="color:#1c01ce">Build for macOS</span>
  <span style="color:#000">if</span>: <span style="color:#1c01ce">matrix.os == &#39;macos-latest&#39;</span>
  <span style="color:#000">run</span>: <span style="color:#1c01ce">gcc -fno-common -dynamiclib src/stats.c -o dist/sqlite3-stats.dylib</span>
</code></pre></div><p>Действие <code>actions/checkout</code> скачивает исходники, а на остальных шагах выполняются те команды, что указаны по тексту. В примере это сборка исходного кода на C с помощью <code>gcc</code>, но у вашего проекта может быть <code>npm run</code> для JS или <code>tox</code> для Python — то, что обычно используете для сборки.</p>
<p>Если для вашего языка есть стандартный репозиторий пакетов вроде <code>npm</code> или <code>pypi</code> — здесь же можно опубликовать сборку. Если репозитория нет, можно опубликовать прямо на гитхабе с помощью действия <code>svenstaro/upload-release-action</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#000">name</span>: <span style="color:#1c01ce">Upload binaries to release</span>
  <span style="color:#000">uses</span>: <span style="color:#1c01ce">svenstaro/upload-release-action@v2</span>
  <span style="color:#000">with</span>:
    <span style="color:#000">repo_token</span>: <span style="color:#1c01ce">${{ secrets.GITHUB_TOKEN }}</span>
    <span style="color:#000">file</span>: <span style="color:#1c01ce">dist/${{ matrix.artifact_name }}</span>
    <span style="color:#000">asset_name</span>: <span style="color:#1c01ce">${{ matrix.asset_name }}</span>
    <span style="color:#000">tag</span>: <span style="color:#1c01ce">${{ github.ref }}</span>
</code></pre></div><ul>
<li><a href="https://github.com/nalgeon/sqlite-stats/blob/main/.github/workflows/build.yml">Полный пример конфигурации</a></li>
</ul>
<ol start="5">
<li>Коммитите изменения, пушите и наблюдаете результат на вкладке <em>Actions</em> репозитория на Гитхабе.</li>
</ol>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Готово! Теперь Гитхаб трудится, а вы отдыхаете.</p>
<p>Еще почитать:</p>
<ul>
<li><a href="https://docs.github.com/en/actions">Документация по GitHub Actions</a></li>
<li><a href="https://docs.github.com/en/actions">Как сделать все что угодно вообще с GitHub Actions</a></li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на канал <span class="nowrap"><i class="fas fa-database"></i> «<a href="https://t.me/sqliter">SQLite на практике</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Медиана вместо среднего</title>
      <link>https://antonz.ru/median/</link>
      <pubDate>Mon, 08 Feb 2021 17:26:26 +0000</pubDate>
      
      <guid>https://antonz.ru/median/</guid>
      <description>Медиана — бро, среднее — не бро. Четыре картинки на тему.</description>
      <content:encoded><![CDATA[<p>Данные часто описывают с помощью среднего значения:</p>
<ul>
<li>средний рост человка,</li>
<li>средняя оценка фильма,</li>
<li>среднегодовой курс $.</li>
</ul>
<p>И часто вместо среднего лучше подходит медиана и процентили. Только никто их не любит.</p>
<p>Сделал в честь этих ребят картинки:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p><img alt="Среднее врет" src="median-1.png"></p>
</div>
<div class="col-xs-12 col-sm-6">
<p><img alt="Медиана не врет" src="median-2.png"></p>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p><img alt="Процентиль про большинство" src="median-3.png"></p>
</div>
<div class="col-xs-12 col-sm-6">
<p><img alt="Медиана и процентиль" src="median-4.png"></p>
</div>
</div>
<p>Если хотите узнать больше о медиане, процентилях и 1% матстатистики, которого достаточно в 90% случаев — записывайтесь на курс:</p>
<p class="big">
<a href="/sqlite-course/">SQLite для аналитики</a>
</p>
<p>Курс расскажет, как использовать SQLite для прикладного анализа данных. Без воды, куча примеров, применяйте в работе с первого дня.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на канал <span class="nowrap"><i class="fas fa-database"></i> «<a href="https://t.me/sqliter">SQLite на практике</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как сделать нормальный поиск</title>
      <link>https://antonz.ru/search-as-a-service/</link>
      <pubDate>Fri, 29 Jan 2021 09:26:42 +0000</pubDate>
      
      <guid>https://antonz.ru/search-as-a-service/</guid>
      <description>Включить FTS в БД или воткнуть Эластик — недостаточно.</description>
      <content:encoded><![CDATA[<p>У магазинов, госсайтов, СМИ и даже жирных блогов часто есть поиск. Качество его обычно варьируется от «ужасно» (когда напилили сами) до «на троечку» (когда используют встроенный в CMS).</p>
<p>Проблема в том, что поиск — это сложно. Не, включить механизм полнотекстового поиска в БД или прикрутить Elasticsearch — как раз легко. А вот сделать нормальный релевантный поиск — непросто. Релевантный — это когда на первых местах в выдаче именно то, что имел в виду человек, а не фигня какая-то.</p>
<p>Как обычно бывает со сложными штуками, есть ребята, которые специализируются исключительно на поиске. Вот их и стоит использовать.</p>
<p>Если нет ни времени, ни бюджета, я бы взял <a href="https://site.yandex.ru/">Поиск для сайта</a> от Яндекса. Встраивается за полчаса, ищет неплохо, выглядит нормально:</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<figure>
  <img alt="Поиск на этом сайте" src="cloud-search.png">
  <figcaption class="text-centered">Именно через «Яндекс» сделан поиск на моем сайте</figcaption>
</figure>
</div>
</div>
<p>Если есть деньги и желание сделать классно — <a href="https://multisearch.io/">Multisearch</a> (или <a href="https://www.algolia.com/">Algolia</a> для англоязычного контента).</p>
<p>В качестве опенсорсной алтернативы Алголии рекомендуют <a href="https://github.com/typesense/typesense">Typesense</a>. Я с ним не работал, но по описанию выглядит интересно.</p>
<p>А пилить свой поиск — почти всегда плохая идея.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как создать таблицу на 1М записей одним запросом</title>
      <link>https://antonz.ru/random-table/</link>
      <pubDate>Tue, 26 Jan 2021 10:44:34 +0000</pubDate>
      
      <guid>https://antonz.ru/random-table/</guid>
      <description>С помощью рекурсивного селекта WITH RECURSIVE.</description>
      <content:encoded><![CDATA[<p>Допустим, вы хотите проверить, как поведет себя запрос на большой таблице — но такой таблицы под рукой нет. Если СУБД умеет в рекурсию, это не проблема: кучу данных можно нагенерить одним запросом. Поможет в этом конструкция <code>WITH RECURSIVE</code>.</p>
<p>Я буду использовать SQLite, но похожие запросы сработают в PostgreSQL и других СУБД. <code>WITH RECURSIVE</code> поддерживается в MariaDB 10.2+, MySQL 8.0+, PostgreSQL 8.4+ и SQLite 3.8+. Oracle 11.2+ и SQL Server 2005+ поддерживают рекурсивные запросы, но без ключевого слова <code>RECURSIVE</code>.</p>
<h2 id="случайные-числа">Случайные числа</h2>
<p>Создадим таблицу на 1 млн случайных чисел:</p>
<pre tabindex="0"><code>create table random_data as
with recursive tmp(x) as (
    select random()
    union all
    select random() from tmp
    limit 1000000
)
select * from tmp;
</code></pre><p>Или, если ваша база поддерживает <code>generate_series()</code> (и не поддерживает <code>limit</code> в рекурсивных запросах, как PostgreSQL):</p>
<pre tabindex="0"><code>create table random_data as
select random() as x
from generate_series(1, 1000000);
</code></pre><p>Проверим:</p>
<pre tabindex="0"><code>sqlite&gt; select count(*) from random_data;
1000000

sqlite&gt; select avg(x) from random_data;
1.000501737529e+16
</code></pre><h2 id="числовая-последовательность">Числовая последовательность</h2>
<p>Вместо случайных чисел заполним таблицу числами от единицы до миллиона:</p>
<pre tabindex="0"><code>create table seq_data as
with recursive tmp(x) as (
    select 1
    union all
    select x+1 from tmp
    limit 1000000
)
select * from tmp;
</code></pre><p>Или через <code>generate_series()</code>:</p>
<pre tabindex="0"><code>create table seq_data as
select value as x
from generate_series(1, 1000000);
</code></pre><p>Проверим:</p>
<pre tabindex="0"><code>sqlite&gt; select count(*) from seq_data;
1000000

sqlite&gt; select avg(x) from seq_data;
500000.5

sqlite&gt; select min(x) from seq_data;
1

sqlite&gt; select max(x) from seq_data;
1000000
</code></pre><h2 id="рандомизированные-данные">Рандомизированные данные</h2>
<p>Числа — это хорошо, но что, если нужна большая табличка с данными о клиентах? Запросто!</p>
<p>Договоримся о правилах:</p>
<ul>
<li>у клиента есть идентификатор, имя и возраст;</li>
<li>идентификатор заполняем последовательно от 1 до 1000000;</li>
<li>имя случайным образом выбираем из фиксированного списка;</li>
<li>возраст берем случайный от 1 до 80.</li>
</ul>
<p>Создадим таблицу с именами:</p>
<pre tabindex="0"><code>create table names (
    id integer primary key,
    name text
);

insert into names(id, name)
values
(1, 'Анна'),
(2, 'Борис'),
(3, 'Вера'),
(4, 'Галина'),
(5, 'Денис');
</code></pre><p>И нагенерим клиентов:</p>
<pre tabindex="0"><code>create table person_data as
with recursive tmp(id, idx, name, age) as (
    select 1, 1, 'Анна', 20
    union all
    select
        tmp.id + 1 as id,
        abs(random() % 5) + 1 as idx,
        (select name from names where id = idx) as name,
        abs(random() % 80) + 1 as age
    from tmp
    limit 1000000
)
select id, name, age from tmp;
</code></pre><p>Или через <code>generate_series()</code>:</p>
<pre tabindex="0"><code>create table person_data as
with tmp as (
    select
        value as id,
        abs(random() % 5) + 1 as idx,
        abs(random() % 80) + 1 as age
    from generate_series(1, 1000000)
)
select
    id,
    (select name from names where id = idx) as name,
    age
from tmp;
</code></pre><p>Здесь все по правилам:</p>
<ul>
<li>идентификатор рассчитывается как предыдущее значение + 1;</li>
<li>поле <code>idx</code> содержит случайное число от 1 до 5;</li>
<li>имя выбирается из таблицы <code>names</code> по значению <code>idx</code>;</li>
<li>возраст рассчитывается как случайное число от 1 до 80.</li>
</ul>
<p>Проверим:</p>
<pre tabindex="0"><code>sqlite&gt; select count(*) from person_data;
1000000

sqlite&gt; select * from person_data limit 10;
┌────┬───────┬─────┐
│ id │ name  │ age │
├────┼───────┼─────┤
│ 1  │ Анна  │ 20  │
│ 2  │ Анна  │ 76  │
│ 3  │ Борис │ 25  │
│ 4  │ Борис │ 19  │
│ 5  │ Борис │ 11  │
│ 6  │ Вера  │ 72  │
│ 7  │ Анна  │ 41  │
│ 8  │ Денис │ 9   │
│ 9  │ Денис │ 38  │
│ 10 │ Вера  │ 41  │
└────┴───────┴─────┘
</code></pre><p>Миллион клиентов одним запросом, неплохо! Вот бы в продажах так ツ</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Если хотите узнать больше о рекурсивных SQL-запросах, прикладном анализе данных и SQLite — записывайтесь на курс:</p>
<p class="big">
<a href="/sqlite-course/">SQLite для аналитики</a>
</p>
<p>Курс расскажет, как использовать SQLite для повседневной работы с данными. Без воды, куча примеров, применяйте в работе с первого дня.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на канал <span class="nowrap"><i class="fas fa-database"></i> «<a href="https://t.me/sqliter">SQLite на практике</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Дизайн интерфейсов для нормальных людей</title>
      <link>https://antonz.ru/good-ui/</link>
      <pubDate>Tue, 26 Jan 2021 06:15:22 +0000</pubDate>
      
      <guid>https://antonz.ru/good-ui/</guid>
      <description>В интернетах много пишут о кнопках и чекбоксах и мало — как спроектировать удобный интерфейс. Исправим это.</description>
      <content:encoded><![CDATA[<div class="article article--big">
<div class="row">
<div class="col-xs-12 col-sm-10">
<p>В интернетах много пишут о кнопках и чекбоксах и мало — как спроектировать удобный интерфейс. Поэтому я собрал цикл статей о базовых (практических!) принципах хорошего UI.</p>
<p>Лучше всего читать по порядку.</p>
<h2 id="1-законы-робототехники-винтерфейсеlaws">1. <a href="/laws/">Законы робототехники в интерфейсе</a></h2>
<p>Три главных принципа: не навредить, не выносить мозг, общаться по-человечески.</p>
<h2 id="2-что-делает-интерфейс-простымsimple-ui">2. <a href="/simple-ui/">Что делает интерфейс простым</a></h2>
<p>У человека в голове есть представление о том, как устроена ваша программа — ментальная модель. «Стихийная» модель не получится хорошей, поэтому лучше спроектируйте её.</p>
<h2 id="3-как-человек-решает-задачи-винтерфейсеuser-actions">3. <a href="/user-actions/">Как человек решает задачи в интерфейсе</a></h2>
<p>Человек взаимодействует с интерфейсом, чтобы решить конкретную задачу. Происходит это в три шага: сформулировать задачу, выполнить действие, оценить результат. Если все три шага проходят гладко — интерфейс своё дело сделал.</p>
<h2 id="4-ошибки-ичеловеческий-факторhuman-factor">4. <a href="/human-factor/">Ошибки и человеческий фактор</a></h2>
<p>Когда случается авария из-за ошибки человека, говорят «человеческий фактор». А правильнее сказать — «фактор системы» или «фактор интерфейса».</p>
<h2 id="5-выборchoice">5. <a href="/choice/">Выбор</a></h2>
<p>Каждый раз, когда вы просите пользователя сделать выбор — заставляете принимать решение. Это не всегда плохо. Но точно плохо, если выбор не относится к задаче, которую решает человек.</p>
<h2 id="6-как-организовать-информациюno-more-latch">6. <a href="/no-more-latch/">Как организовать информацию</a></h2>
<p>Когда в следующий раз будете проектировать экран с множеством однотипных объектов, не выбирайте вариант организации «по умолчанию» — абы как или по алфавиту. Есть варианты лучше.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
</div>
</div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Более быстрая лошадь</title>
      <link>https://antonz.ru/faster-horse/</link>
      <pubDate>Thu, 21 Jan 2021 12:08:37 +0000</pubDate>
      
      <guid>https://antonz.ru/faster-horse/</guid>
      <description>Если бы я спросил у людей, чего они хотят, у меня бы отвалилась жопа.</description>
      <content:encoded><![CDATA[<p>Продуктоводы любят цитировать Генри Форда:</p>
<blockquote>
<p>Если бы я спросил у людей, чего они хотят, они бы попросили более быструю лошадь [а не автомобиль]</p>
</blockquote>
<p>Вывод делается такой, что пользователи, мол, сами не знают, чего им надо.</p>
<p>Кажется, в этой байке очень мало хорошего:</p>
<ol>
<li>«Если бы спросил, они бы попросили». Да откуда ты знаешь? Спроси сначала — мало ли, вдруг ответы тебя удивят.</li>
<li>Допустим, реально ответили, что нужна «более быстрая лошадь». Это весьма полезная информация, только надо сфокусироваться на «быстрая», а не «лошадь». Почему важна именно быстрота, а не выносливость, комфорт или там стоимость владения? Что смогут они такого делать, чего раньше не могли? Сразу возникают вопросы, которые помогут увидеть правильное направление.</li>
<li>Некоторые пользователи не то что про лошадь не станут рассказать, они сразу затребуют гоночный болид или вообще космический корабль для межзвездных путешествий. Это тоже ценная информация, особенно если за странными желаниями вскроется реальная потребность.</li>
<li>Средний продуктовод — далеко не Генри Форд (сорян). Не грех и спросить, корона не свалится.</li>
</ol>
<p>В общем, я за другую цитату Форда:</p>
<blockquote>
<p>Мой секрет успеха заключается в умении понять точку зрения другого человека и смотреть на вещи и с его, и со своей точек зрения.</p>
</blockquote>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Сила комментария</title>
      <link>https://antonz.ru/comments/</link>
      <pubDate>Mon, 18 Jan 2021 11:30:06 +0000</pubDate>
      
      <guid>https://antonz.ru/comments/</guid>
      <description>Комментарий — это хаос, но с ним система устойчивее.</description>
      <content:encoded><![CDATA[<p>Комментарий в интерфейсе — это необязательное текстовое поле. В комментарии человек указывает любую дополнительную информацию, которая кажется ему важной:</p>
<ul>
<li>На карточке клиента: за что предоставили скидку 20%</li>
<li>На форме заказа: что в дверь звонить не надо</li>
<li>В тикете техподдержки: ссылка на обсуждение в багтрекинге</li>
</ul>
<p>Комментарии в интерфейсах недооценены. Аналитики, дизайнеры, программисты — все мы любим и умеем систематизировать информацию. Поэтому любой объект в интерфейсе представляем как набор полей с конкретным назначением: наименование, почтовый индекс, стоимость.</p>
<p>Но жизнь всегда богаче моделек. И когда люди используют софт, часто получается, что важная информация есть, а записать ее некуда. Тут и приходит на помощь комментарий.</p>
<p>Например, на «Дадате» мы используем систему защиты от сетевых атак. У нее есть интерфейс, где можно заблокировать конкретный IP-адрес. Указываешь IP, жмешь «добавить в черный список», злодей получает бан. Что может быть проще?</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<p><img alt="Заблокировать IP" src="blacklist.png" class="img-bordered"></p>
</div>
</div>
<p>Проблема в том, что непонятно, кто заблокировал IP и почему. В большинстве случаев это и неважно, но иногда пригодилось бы для разбора. Решить проблему элементарно — добавить поле «комментарий».</p>
<p>Но постойте, можно же сделать нормальные поля «сотрудник» и «причина блокировки»? Да, можно, но непонятно:</p>
<ul>
<li>точно ли нужны именно эти поля?</li>
<li>действительно ли они нужны?</li>
</ul>
<p>Добавлять поля просто «чтобы были» — так себе идея. А выяснить реальные сценарии как раз и поможет поле «комментарий». Потом, если что, можно заменить его на поля с конкретным назначением.</p>
<p>Комментарий — элемент хаоса. Но с ним система устойчивее.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>SQLite для аналитики</title>
      <link>https://antonz.ru/sqlite-course/</link>
      <pubDate>Tue, 12 Jan 2021 11:45:44 +0000</pubDate>
      
      <guid>https://antonz.ru/sqlite-course/</guid>
      <description>Как работать с данными без экселя и pandas.</description>
      <content:encoded><![CDATA[<p><em>Я сделал интерактивный курс по прикладному анализу данных в SQLite. В этой заметке расскажу о нем и покажу, что внутри.</em></p>
<p>Аналитики, разработчики и тестировщики часто работают с наборами данных. Посчитать статистику продаж в разных измерениях, преобразовать и «почистить» JSON неудобной структуры, найти проблемы в 500-мегабайтном логе nginx — похожие задачи приходится решать постоянно.</p>
<p>Чтобы проанализировать или преобразовать данные, часто используют Excel или библиотеки вроде pandas. Это неплохие инструменты: Excel удобен для самых простых задач, а pandas отлично подойдёт, как только вы посвятите ему первые 1000 часов.</p>
<p>Но есть ещё один инструмент. Намного мощнее Excel, проще и выразительнее pandas. Это SQLite — полноценная СУБД, которая не требует настройки и администрирования. SQLite использует SQL — язык, специально созданный для обработки данных — и добавляет к нему кучу приятных возможностей.</p>
<ul>
<li><a href="#about">о чем курс</a></li>
<li><a href="#syllabus">содержание</a></li>
<li><a href="#inside">что внутри</a></li>
<li><a href="#lessons">как проходят занятия</a></li>
<li><a href="#pricing">стоимость</a></li>
</ul>
<h2 id="about">О чем и для кого</h2>
<p>Курс расскажет, как использовать SQLite для повседневной работы с данными:</p>
<ul>
<li>Быстро проанализировать большой набор данных и найти неочевидные закономерности.</li>
<li>Построить сводный отчет из нескольких источников, с группировками и аналитическими функциями.</li>
<li>Загрузить, преобразовать и выгрузить данные в нужном формате.</li>
<li>Удобно работать с JSON-документами.</li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="SQLite на практике" src="sqlite-promo.png">
</figure>
</div>
</div>
<p>Курс для вас, если:</p>
<ul>
<li>✔️ Вы устали от возни с экселем или не хотите запоминать тысячу и одну команду pandas.</li>
<li>✔️ Уже знаете SQL и не хотите учить ещё один язык или библиотеку, чтобы решать повседневные задачи.</li>
<li>✔️ Хотите раз и навсегда освоить универсальный инструмент работы с данными.</li>
<li>✔️ Думаете, что SQLite — «игрушечная» СУБД, не пригодная для реальных задач.</li>
</ul>
<p>Курс не подойдет, если:</p>
<ul>
<li>❌ Вы совсем не знаете SQL.</li>
<li>❌ Не готовы работать с командной строкой.</li>
</ul>
<p>Курс исключительно практический. Мы не будем разбирать пять вариантов конструкции FOREIGN KEY ON DELETE, уровни изоляции транзакций или разницу между нормальными формами. Вместо этого сфокусируемся на конкретных задачах — так вы сразу сможете применять знания в работе.</p>
<p>Вы сможете использовать SQLite на практике уже после первого модуля. А если пройдете курс до конца — SQLite превратится для вас в универсальный инструмент, которые подходит почти для любых задач.</p>
<p>Курс интерактивный. Упражнения можно выполнять прямо в браузере, не нужно ничего скачивать или устанавливать. Когда немного освоитесь — повторите их в консоли.</p>
<p>Навыки программирования не требуются.</p>
<h2 id="syllabus">Содержание</h2>
<ol>
<li><strong>Основы SQLite</strong>. Загружаем датасет, вспоминаем SQL, выгружаем в CSV.</li>
<li><strong>Очистка данных</strong>. «Причесываем» проблемные данные и разбираемся с типами.</li>
<li><strong>Связи в данных</strong>. Соединяем, объединяем и пересекаем таблицы в наборе данных.</li>
<li><strong>Данные → знания</strong>. Считаем среднее, процентили, распределение и корреляцию. Анализируем текст.</li>
<li><strong>JSON</strong>. Нативно работаем с JSON-документами и нереляционными структурами данных.</li>
<li><strong>Большие наборы</strong>. Эффективно работаем с увесистыми таблицами.</li>
<li><strong>Оконные функции</strong>. Осваиваем продвинутые аналитические функции для классных отчетов.</li>
</ol>
<h2 id="inside">Что внутри</h2>
<p>Вот несколько инсайдов:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <a href="sqlite-lesson.png" class="img-link" target="_blank"><img alt="Чистим данные" src="sqlite-lesson.png"></a>
  <figcaption class="text-centered">Учимся приводить данные в порядок</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
  <a href="sqlite-question.png" class="img-link" target="_blank"><img alt="Задачка" src="sqlite-question.png"></a>
  <figcaption class="text-centered">Задачка на агрегацию данных</figcaption>
</figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <a href="sqlite-playground.png" class="img-link" target="_blank"><img alt="Песочница" src="sqlite-playground.png"></a>
  <figcaption class="text-centered">Интерактивная песочница в браузере</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
  <a href="sqlite-types.png" class="img-link" target="_blank"><img alt="Типы данных" src="sqlite-types.png"></a>
  <figcaption class="text-centered">Шпаргалка по типам данных</figcaption>
</figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Связи в данных" src="sqlite-icons.png">
  <figcaption class="text-centered">Уроки одного из модулей</figcaption>
</figure>
</div>
</div>
<h2 id="lessons">Как проходят занятия</h2>
<p>Курс проходит на «Степике» — это лучшая образовательная платформа в рунете. Собран из модулей, каждый модуль — отдельная большая тема: например, «JSON» или «оконные функции». Модуль состоит из 5–6 уроков. Урок состоит из лекции и нескольких практических заданий.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<img alt="Курс состоит из модулей" src="sqlite-modules.png">
</div>
</div>
<p>Практические задания участники выполняют в интерактивной песочнице. Ответы проверяются автоматически, ждать не придется. Если что-то не получается — участники задают вопросы в комментариях к заданию, я отвечаю.</p>
<div class="row">
<div class="col-xs-12 col-sm-4">
<img alt="Урок состоит из шагов" src="sqlite-steps.png">
</div>
</div>
<p>Лекции письменные, видео нет. Я умею понятно объяснять сложные вещи, так что читать их приятно. Много примеров и картинок, нет сухой теории. В конце каждого модуля идет краткое резюме.</p>
<p>Прохождение модуля занимает 2–4 часа, зависит от вашей подготовки. Весь курс займет 15–30 часов.</p>
<h2 id="reviews">Отзывы</h2>
<p>Прямо сейчас курс проходят 130 человек, 20 уже закончили и получили сертификат. Вот некоторые отзывы:</p>
<blockquote>
<p>Искал для себя способ быстро освоить sqlite, чтобы научиться часть обработки данных переводить из Python на уровень СУБД. Курс идеально соответствует цели.</p>
</blockquote>
<br>
<blockquote>
<p>Курс оправдал все ожидания и даже больше. Вся информация - с большим уважением к слушателю и огромной любовью к предмету изучения, разложена по полочкам. При этом, чтобы до них дотянуться, нужно все-таки поработать.</p>
</blockquote>
<br>
<blockquote>
<p>Это точно курс не для совсем начинающих (о чём автор вовремя предупреждает), но это отличный материал для тех кто «как-то умеет в sql, но бессистемно».</p>
</blockquote>
<br>
<blockquote>
<p>Можно порекомендовать любому, кому приходится анализировать больше пары табличек, и есть базовые знания SQL.</p>
</blockquote>
<h2 id="pricing">Стоимость и участие</h2>
<p>Курс состоит из семи модулей и экзамена. Это 47 уроков и 130 практических заданий. Если наберете 80% баллов — получите сертификат, 90% баллов — сертификат с отличием.</p>
<p>Стоимость — <strong>3000</strong> ₽. Первый модуль доступен бесплатно.</p>
<p><a class="button" href="https://stepik.org/z/90778">Перейти к курсу</a></p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на канал <span class="nowrap"><i class="fas fa-database"></i> «<a href="https://t.me/sqliter">SQLite на практике</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Аптайм на статус-странице</title>
      <link>https://antonz.ru/status-page/</link>
      <pubDate>Fri, 08 Jan 2021 15:06:47 +0000</pubDate>
      
      <guid>https://antonz.ru/status-page/</guid>
      <description>Покажите уже надежность вашего сервиса</description>
      <content:encoded><![CDATA[<p>Есть такая штука у облачных сервисов — «статус-страница». Это отдельный, независимый от основного сайт, на котором написано, работает основной сервис или нет.</p>
<p>Статус-страница полезна, когда основной сервис свалился под ддос-атакой или от веселого пятничного обновления. Так пользователям есть куда пойти, чтобы понять масштаб проблемы и ход решения.</p>
<p>У большинства сервисов статус-страница сделана по такому шаблону:</p>
<ol>
<li>Общий статус (работает / нет)</li>
<li>Статус отдельных сервисов (сайт, мобильное приложение, API, &hellip;)</li>
<li>Список инцидентов.</li>
</ol>
<figure>
  <img alt="Статус-страница Dropbox" src="status-dropbox.png">
  <figcaption>Пример <a href="https://status.dropbox.com/">Dropbox</a></figcaption>
</figure>
<p>Неплохая структура, отвечает на важный вопрос — «что-то сломалось?» Но не отвечает на второй важный вопрос — «насколько вы вообще надежные?».</p>
<p>Удивительно, но сервисы редко раскрывают общие показатели доступности. Хорошо, если покажут за 90 дней, за год — почти никогда.</p>
<p>Я думаю, нормальный подход — показывать доступность за день, неделю, месяц и год.</p>
<figure>
  <img alt="Статус-страница «Дадаты»" src="status-dadata.png">
  <figcaption>На «<a href="https://status.dadata.ru/">Дадате</a>» мы так и сделали</figcaption>
</figure>
<p>В любом случае, даже плохая статус-страница лучше, чем никакой. Тем более, что подключить ее несложно — есть куча готовых инструментов. Даже бесплатные, вроде <a href="https://uptimerobot.com/">UptimeRobot</a> или <a href="https://upptime.js.org/">Upptime</a>.</p>
<p>Рекомендую!</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>2021</title>
      <link>https://antonz.ru/2021/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://antonz.ru/2021/</guid>
      <description></description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
    <item>
      <title>Мой личный бойкот</title>
      <link>https://antonz.ru/boycott/</link>
      <pubDate>Thu, 24 Dec 2020 14:02:48 +0000</pubDate>
      
      <guid>https://antonz.ru/boycott/</guid>
      <description>Господину, который сломал интернет и сделал вид, что так и было</description>
      <content:encoded><![CDATA[<p>Я стараюсь не участвовать в массовых кампаниях осуждения, которые полюбили СМИ и соцсети в последние пять лет. Слишком часто бывает, что в моменте, в пылу обвинений теряются важные детали, которые меняют суть дела. Да и в целом жить без хейта полезнее для здоровья.</p>
<p>Из этого правила есть исключение: господин, который долгое время возглавлял федеральную службу по огораживанию интернета. Время от времени встречаю его упоминания в СМИ (сейчас господин уже на новом месте работы), и каждый раз меня бомбит.</p>
<p>Этот господин лично отвечает за самую масштабную атаку на рунет, когда произвольно были заблокированы десятки миллионов айпи-адресов, «встали» сотни сервисов и тысячи сайтов. Безумная «война» продолжалась несколько месяцев — такое и не снилась самым злобным хакерам, ддосерам и кому бы то ни было.</p>
<p>Этот господин лично отвечает за то, что чудовищную ошибку никто не признал, ответственность не понес, выводов не сделал и компенсаций не предоставил. Как будто это нормально, как будто ничего не произошло.</p>
<p>Я считаю, что бойкот для этого господина был бы очень полезен. Бойкот любой организации, которую он возглавляет или будет возглавлять. Бойкот на любые совместные проекты. Отказ работать на него в любом формате. Полное игнорирование в СМИ.</p>
<p>У соцсетей короткая память. У меня нет. Мой личный бойкот этому господину — бессрочный.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Задачка об итераторе на Python</title>
      <link>https://antonz.ru/iter-with-sentinel/</link>
      <pubDate>Mon, 10 Aug 2020 11:11:02 +0000</pubDate>
      
      <guid>https://antonz.ru/iter-with-sentinel/</guid>
      <description>Как подобрать коллектив единомышленников с помощью random и iter</description>
      <content:encoded><![CDATA[<p><em>На днях я предложил читателям телеграм-канала <a href="https://t.me/ohmypy">Oh My Py</a> задачку об итераторе с ограничениями. Давайте её разберём.</em></p>
<h2 id="условия-задачи">Условия задачи</h2>
<p>Допустим, вы основали модный HR-стартап, который подбирает идеальные коллективы сотрудников. Дело это нелёгкое, так что начали с простой эвристики:</p>
<blockquote>
<p>Любой коллектив идеален, пока в нём не появляется Френк</p>
</blockquote>
<p>Подготовили интеллектуальный алгоритм, который предлагает сотрудника:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">random</span>
<span style="color:#000">names</span> <span style="color:#000">=</span> [<span style="color:#c41a16">&#34;Френк&#34;</span>, <span style="color:#c41a16">&#34;Клер&#34;</span>, <span style="color:#c41a16">&#34;Зоя&#34;</span>, <span style="color:#c41a16">&#34;Питер&#34;</span>, <span style="color:#c41a16">&#34;Лукас&#34;</span>]

<span style="color:#a90d91">def</span> <span style="color:#000">employee</span>():
  <span style="color:#000">name</span> <span style="color:#000">=</span> <span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">choice</span>(<span style="color:#000">names</span>)
  <span style="color:#a90d91">return</span> <span style="color:#000">name</span>
</code></pre></div><p>Остался последний шаг — разработать нечто под названием <code>employeficator()</code>, что и будет подбирать дружный коллектив. Использоваться будет так:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> [<span style="color:#000">name</span> <span style="color:#a90d91">for</span> <span style="color:#000">name</span> <span style="color:#000">in</span> <span style="color:#000">employeficator</span>()]
[<span style="color:#c41a16">&#39;Зоя&#39;</span>, <span style="color:#c41a16">&#39;Зоя&#39;</span>, <span style="color:#c41a16">&#39;Питер&#39;</span>]
<span style="color:#000">&gt;&gt;&gt;</span> [<span style="color:#000">name</span> <span style="color:#a90d91">for</span> <span style="color:#000">name</span> <span style="color:#000">in</span> <span style="color:#000">employeficator</span>()]
[<span style="color:#c41a16">&#39;Лукас&#39;</span>, <span style="color:#c41a16">&#39;Зоя&#39;</span>, <span style="color:#c41a16">&#39;Питер&#39;</span>]
</code></pre></div><p>Ваша задача — реализовать <code>employeficator()</code> максимально идиоматично.</p>
<p>Для затравки начну заведомо неудачным вариантом:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">employeficator</span>():
  <span style="color:#000">employees</span> <span style="color:#000">=</span> []
  <span style="color:#000">name</span> <span style="color:#000">=</span> <span style="color:#000">employee</span>()
  <span style="color:#a90d91">while</span> <span style="color:#000">name</span> <span style="color:#000">!=</span> <span style="color:#c41a16">&#34;Френк&#34;</span>:
    <span style="color:#000">employees</span><span style="color:#000">.</span><span style="color:#000">append</span>(<span style="color:#000">name</span>)
    <span style="color:#000">name</span> <span style="color:#000">=</span> <span style="color:#000">employee</span>()
  <span style="color:#a90d91">return</span> <span style="color:#000">employees</span>
</code></pre></div><h2 id="решение-победитель">Решение-победитель</h2>
<p>Для начала, что такое «идиоматично». Идиоматичный код использует «родные» конструкции языка и стандартной библиотеки, не нарушая при этом питонячий дзен (simple is better than complex, readability counts, вот это всё).</p>
<p>Месиво из вложенных циклов с break и continue вряд ли можно назвать идиоматичным. Точно также не будет идиоматичной «функциональная» колбаса из вызовов functools и itertools. Абсолютных критериев тут нет, но общий смысл, надеюсь, понятен.</p>
<p>Теперь к решению. Задача была с небольшим подвохом: искомый <code>employeficator()</code> уже есть в стандартной библиотеке. Больше того, не просто в стандартной библиотеке, а в самом её сердце, в built-in функциях! Вот он:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">[<span style="color:#000">name</span> <span style="color:#a90d91">for</span> <span style="color:#000">name</span> <span style="color:#000">in</span> <span style="color:#a90d91">iter</span>(<span style="color:#000">employee</span>, <span style="color:#c41a16">&#34;Френк&#34;</span>)]
</code></pre></div><p>Да, это функция <code>iter()</code>. Обычно её вызывают с одним аргументом — коллекцией:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">seq</span> <span style="color:#000">=</span> [<span style="color:#1c01ce">1</span>, <span style="color:#1c01ce">2</span>, <span style="color:#1c01ce">3</span>]
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">it</span> <span style="color:#000">=</span> <span style="color:#a90d91">iter</span>(<span style="color:#000">seq</span>)
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">next</span>(<span style="color:#000">it</span>)
<span style="color:#1c01ce">1</span>
</code></pre></div><p>Но в варианте с двумя аргументами <code>iter()</code> работает иначе:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">iter</span>(<span style="color:#000">callable</span>, <span style="color:#000">sentinel</span>)
</code></pre></div><p>Первый аргумент — функция или что-нибудь вызываемое (callable), второй — контрольное значение (sentinel). Каждое обращение к итератору вызывает <code>callable()</code> и возвращает результат его выполнения. А как только <code>callable()</code> возвращает значение <code>sentinel</code>, итератор прекращает работу.</p>
<p>Это ровно то поведение, что требовалось в задаче — вызывать <code>employee()</code>, пока очередной вызов не вернёт <code>&quot;Френк&quot;</code>.</p>
<p>Так что <code>iter()</code> здесь — идеальное решение. Поздравляю всех, кто его предложил!</p>
<h2 id="хорошие-решения">Хорошие решения</h2>
<p>Удачное решение — использовать генератор. Благо, в питоне 3.8 появилась короткая форма записи для инициализации переменной внутри выражения («моржовый» оператор):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">employeficator</span>():
    <span style="color:#a90d91">while</span> (<span style="color:#000">name</span> <span style="color:#000">:=</span> <span style="color:#000">employee</span>()) <span style="color:#000">!=</span> <span style="color:#c41a16">&#34;Френк&#34;</span>:
        <span style="color:#a90d91">yield</span> <span style="color:#000">name</span>
</code></pre></div><p>«Морж» вызвал большое недовольство в питонячьем мире, так что если он вам не по душе, то можно и так:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">employeficator</span>():
    <span style="color:#000">name</span> <span style="color:#000">=</span> <span style="color:#000">employee</span>()
    <span style="color:#a90d91">while</span> <span style="color:#000">name</span> <span style="color:#000">!=</span> <span style="color:#c41a16">&#34;Френк&#34;</span>:
        <span style="color:#a90d91">yield</span> <span style="color:#000">name</span>
        <span style="color:#000">name</span> <span style="color:#000">=</span> <span style="color:#000">employee</span>()
</code></pre></div><h2 id="неудачные-решения">Неудачные решения</h2>
<p>Часто предлагали такой вариант:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">employeficator</span>():
    <span style="color:#a90d91">while</span> <span style="color:#a90d91">True</span>:
        <span style="color:#000">name</span> <span style="color:#000">=</span> <span style="color:#000">employee</span>()
        <span style="color:#a90d91">if</span> <span style="color:#000">name</span> <span style="color:#000">==</span> <span style="color:#c41a16">&#34;Френк&#34;</span>:
            <span style="color:#a90d91">break</span>
        <span style="color:#a90d91">yield</span> <span style="color:#000">name</span>
</code></pre></div><p>Ничего плохого в нём нет, но если есть возможность обойтись без break, не усложняя код — лучше это сделать (см. решение из предыдущего раздела).</p>
<p>Бывает, людям хочется применить «функциональщину»:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">itertools</span> <span style="color:#a90d91">import</span> <span style="color:#000">takewhile</span>, <span style="color:#000">count</span>

<span style="color:#a90d91">def</span> <span style="color:#000">employeficator</span>():
    <span style="color:#a90d91">return</span> <span style="color:#000">takewhile</span>(
        <span style="color:#a90d91">lambda</span> <span style="color:#000">name</span>: <span style="color:#000">name</span> <span style="color:#000">!=</span> <span style="color:#c41a16">&#39;Френк&#39;</span>, (<span style="color:#000">employee</span>() <span style="color:#a90d91">for</span> <span style="color:#000">_</span> <span style="color:#000">in</span> <span style="color:#000">count</span>())
    )
</code></pre></div><div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">itertools</span> <span style="color:#a90d91">import</span> <span style="color:#000">takewhile</span>, <span style="color:#000">starmap</span>, <span style="color:#000">repeat</span>

<span style="color:#a90d91">def</span> <span style="color:#000">employeficator</span>():
    <span style="color:#a90d91">return</span> <span style="color:#000">takewhile</span>(
        <span style="color:#a90d91">lambda</span> <span style="color:#000">name</span>: <span style="color:#000">name</span> <span style="color:#000">!=</span> <span style="color:#c41a16">&#34;Френк&#34;</span>, <span style="color:#000">starmap</span>(<span style="color:#000">employee</span>, <span style="color:#000">repeat</span>(()))
    )
</code></pre></div><p>Тоже не беда. Но на мой вкус, когнитивная стоимость таких решений высоковата. Неохота скрипеть мозгом каждый раз, когда читаешь код.</p>
<p>Некоторые участники решили, что коллектив обязательно должен состоять из 3 сотрудников или не может включать нескольких сотрудников с одинаковыми именами. Но таких ограничений в условиях не было, поэтому эти решения я не буду рассматривать, как бы хороши они не были.</p>
<p>Хотя нет, одно всё же покажу:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">employeficator</span>():
    <span style="color:#000">team_size</span> <span style="color:#000">=</span> <span style="color:#a90d91">range</span>(<span style="color:#1c01ce">0</span>, <span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">randint</span>(<span style="color:#1c01ce">1</span>, <span style="color:#a90d91">len</span>(<span style="color:#000">names</span>) <span style="color:#000">+</span> <span style="color:#1c01ce">1</span>))
    <span style="color:#a90d91">return</span> <span style="color:#a90d91">iter</span>(<span style="color:#a90d91">set</span>(<span style="color:#000">name</span> <span style="color:#a90d91">if</span> <span style="color:#000">name</span> <span style="color:#000">!=</span> <span style="color:#c41a16">&#39;Френк&#39;</span> <span style="color:#a90d91">else</span>
               <span style="color:#a90d91">next</span>(<span style="color:#000">employeficator</span>()) <span style="color:#a90d91">for</span> <span style="color:#000">name</span> <span style="color:#000">in</span>
               (<span style="color:#000">employee</span>() <span style="color:#a90d91">for</span> <span style="color:#000">_</span> <span style="color:#000">in</span> <span style="color:#000">team_size</span>)))
</code></pre></div><p>Пожалуйста, никогда не пишите так продакшен-код. Пожалейте коллег и себя.</p>
<p>И подписывайтесь на <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>», конечно!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Грамотно работать с любым диапазоном</title>
      <link>https://antonz.ru/range/</link>
      <pubDate>Fri, 07 Aug 2020 12:50:42 +0000</pubDate>
      
      <guid>https://antonz.ru/range/</guid>
      <description>С помощью range() и его неожиданных возможностей.</description>
      <content:encoded><![CDATA[<p>Все знают, что <code>range()</code> в питоне используется, когда нужно что-то сделать сколько-то раз:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">for</span> <span style="color:#000">i</span> <span style="color:#000">in</span> <span style="color:#a90d91">range</span>(<span style="color:#1c01ce">3</span>, <span style="color:#1c01ce">0</span>, <span style="color:#000">-</span><span style="color:#1c01ce">1</span>):
<span style="color:#000">...</span>   <span style="color:#a90d91">print</span>(<span style="color:#000">i</span>)

<span style="color:#1c01ce">3</span>
<span style="color:#1c01ce">2</span>
<span style="color:#1c01ce">1</span>
</code></pre></div><p>Но не все знают, что <code>range</code> — это коллекция (что? да!), вполне себе полноценная:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">seq</span> <span style="color:#000">=</span> <span style="color:#a90d91">range</span>(<span style="color:#1c01ce">10</span>, <span style="color:#1c01ce">100</span>)
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">len</span>(<span style="color:#000">seq</span>)
<span style="color:#1c01ce">90</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#1c01ce">52</span> <span style="color:#000">in</span> <span style="color:#000">seq</span>
<span style="color:#a90d91">True</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">seq</span>[<span style="color:#1c01ce">10</span>]
<span style="color:#1c01ce">20</span>
</code></pre></div><p>И даже так:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">max</span>(<span style="color:#000">seq</span>)
<span style="color:#1c01ce">99</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">seq</span><span style="color:#000">.</span><span style="color:#000">index</span>(<span style="color:#1c01ce">31</span>)
<span style="color:#1c01ce">21</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">seq</span><span style="color:#000">.</span><span style="color:#000">count</span>(<span style="color:#1c01ce">42</span>)
<span style="color:#1c01ce">1</span>
</code></pre></div><p>И так тоже:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">s1</span> <span style="color:#000">=</span> <span style="color:#a90d91">range</span>(<span style="color:#1c01ce">0</span>, <span style="color:#1c01ce">10</span>, <span style="color:#1c01ce">3</span>)
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">s2</span> <span style="color:#000">=</span> <span style="color:#a90d91">range</span>(<span style="color:#1c01ce">0</span>, <span style="color:#1c01ce">11</span>, <span style="color:#1c01ce">3</span>)
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">s1</span> <span style="color:#000">==</span> <span style="color:#000">s2</span>
<span style="color:#a90d91">True</span>
</code></pre></div><p>При этом <code>range</code>, в отличие от всех прочих коллекций, занимает мизерное место в памяти (48 байт), вне зависимости от того, сколько элементов в него попадают. Это потому, что хранит он только 3 атрибута: <code>start</code>, <code>stop</code>, <code>step</code></p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">from</span> <span style="color:#000">pympler</span> <span style="color:#a90d91">import</span> <span style="color:#000">asizeof</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">seq</span> <span style="color:#000">=</span> <span style="color:#a90d91">range</span>(<span style="color:#1c01ce">0</span>, <span style="color:#1c01ce">100</span>)
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">asizeof</span><span style="color:#000">.</span><span style="color:#000">asizeof</span>(<span style="color:#000">seq</span>)
<span style="color:#1c01ce">48</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">seq</span> <span style="color:#000">=</span> <span style="color:#a90d91">range</span>(<span style="color:#1c01ce">0</span>, <span style="color:#1c01ce">100_000</span>)
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">asizeof</span><span style="color:#000">.</span><span style="color:#000">asizeof</span>(<span style="color:#000">seq</span>)
<span style="color:#1c01ce">48</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">seq</span> <span style="color:#000">=</span> <span style="color:#a90d91">range</span>(<span style="color:#1c01ce">0</span>, <span style="color:#1c01ce">100_000_000</span>)
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">asizeof</span><span style="color:#000">.</span><span style="color:#000">asizeof</span>(<span style="color:#000">seq</span>)
<span style="color:#1c01ce">48</span>
</code></pre></div><p>И при этом идеальное время выполнения операций: <code>len()</code>, <code>[idx]</code>, <code>in</code>, <code>.index()</code>, <code>.count()</code> — всё за <em>O(1)</em>.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Кто-то на этом месте скажет «погодите, откуда <em>O(1)</em>? у списка ведь <code>in</code>, <code>.index()</code>, <code>.count()</code> выполняются за <em>O(n)</em>, почему у диапазона иначе?»</p>
<p>Рассмотрим на примере <code>in</code>. Действительно: чтобы проверить, есть ли элемент в списке, придётся обходить элементы списка, пока не найдём искомый — это сложность <em>O(n)</em>. Но в случае с диапазоном мы точно знаем первый элемент, последний элемент и шаг. Поэтому разработчики стандартной библиотеки пошли на хитрость.</p>
<p>Допустим, есть выражение <code>x in range(start, stop, step)</code>. Для положительного step можно обойтись без перебора всех элементов, вот так:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">contains</span>(<span style="color:#000">range_</span>, <span style="color:#000">x</span>):
    <span style="color:#a90d91">if</span> <span style="color:#000">x</span> <span style="color:#000">&lt;</span> <span style="color:#000">range_</span><span style="color:#000">.</span><span style="color:#000">start</span>:
        <span style="color:#a90d91">return</span> <span style="color:#a90d91">False</span>
    <span style="color:#a90d91">if</span> <span style="color:#000">x</span> <span style="color:#000">&gt;=</span> <span style="color:#000">range_</span><span style="color:#000">.</span><span style="color:#000">stop</span>:
        <span style="color:#a90d91">return</span> <span style="color:#a90d91">False</span>
    <span style="color:#a90d91">return</span> (<span style="color:#000">x</span> <span style="color:#000">-</span> <span style="color:#000">range_</span><span style="color:#000">.</span><span style="color:#000">start</span>) <span style="color:#000">%</span> <span style="color:#000">range_</span><span style="color:#000">.</span><span style="color:#000">step</span> <span style="color:#000">==</span> <span style="color:#1c01ce">0</span>

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">r</span> <span style="color:#000">=</span> <span style="color:#a90d91">range</span>(<span style="color:#1c01ce">1000</span>, <span style="color:#1c01ce">10000</span>, <span style="color:#1c01ce">3</span>)
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">contains</span>(<span style="color:#000">r</span>, <span style="color:#1c01ce">2068</span>)
<span style="color:#a90d91">True</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">contains</span>(<span style="color:#000">r</span>, <span style="color:#1c01ce">2070</span>)
<span style="color:#a90d91">False</span>
</code></pre></div><p>Проверили границы, посчитали остаток от деления, бумс, готово. Для <code>.index()</code> и <code>.count()</code> сделано аналогично, если интересно как — посмотрите исходники (осторожно, код на <code>C</code>):</p>
<ul>
<li><a href="https://github.com/python/cpython/blob/384621c42f9102e31ba2c47feba144af09c989e5/Objects/rangeobject.c#L368">range_contains_long</a></li>
<li><a href="https://github.com/python/cpython/blob/384621c42f9102e31ba2c47feba144af09c989e5/Objects/rangeobject.c#L562">range_index</a></li>
<li><a href="https://github.com/python/cpython/blob/384621c42f9102e31ba2c47feba144af09c989e5/Objects/rangeobject.c#L544">range_count</a></li>
</ul>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Итого, получили структуру данных постоянного размера, с константным временем выполнения операций. Ну разве он не чудо, этот <code>range</code>?</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Проверить, входит ли элемент в коллекцию</title>
      <link>https://antonz.ru/element-in-collection/</link>
      <pubDate>Thu, 30 Jul 2020 16:05:51 +0000</pubDate>
      
      <guid>https://antonz.ru/element-in-collection/</guid>
      <description>С помощью списка, множества и фильтра Блума.</description>
      <content:encoded><![CDATA[<p>Предположим, вы ведёте реестр монет. В нём записаны монетки всех времён, стран и достоинств. На вашем сайте любой может проверить, есть ли та или иная монета в реестре, и если нет — добавить её.</p>
<p>Как проверить, есть ли монета в реестре?</p>
<h2 id="список-очень-очень-медленно">Список: очень, очень медленно</h2>
<p>Можно так:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">coins</span> <span style="color:#000">=</span> [<span style="color:#c41a16">&#34;1 aud&#34;</span>, <span style="color:#c41a16">&#34;5 ars&#34;</span>, <span style="color:#c41a16">&#34;1 byn&#34;</span>, <span style="color:#c41a16">&#34;10 ghs&#34;</span>]

<span style="color:#a90d91">def</span> <span style="color:#000">has</span>(<span style="color:#000">coin</span>):
    <span style="color:#a90d91">return</span> <span style="color:#000">coin</span> <span style="color:#000">in</span> <span style="color:#000">coins</span>

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">has</span>(<span style="color:#c41a16">&#34;1 byn&#34;</span>)
<span style="color:#a90d91">True</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">has</span>(<span style="color:#c41a16">&#34;20 cny&#34;</span>)
<span style="color:#a90d91">False</span>
</code></pre></div><p>Конечно, так делать нехорошо. Операция <code>element in list</code> последовательно проверяет каждый элемент списка, то есть её сложность <code>O(n)</code>. Незаметно на маленьких списках, но если у вас в реестре 1 млн монет, а с сайта приходит по тысяче запросов в секунду — начнёт тормозить:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">import</span> <span style="color:#000">random</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">import</span> <span style="color:#000">timeit</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">list_</span> <span style="color:#000">=</span> [<span style="color:#a90d91">str</span>(<span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">random</span>()) <span style="color:#a90d91">for</span> <span style="color:#000">_</span> <span style="color:#000">in</span> <span style="color:#a90d91">range</span>(<span style="color:#1c01ce">1_000_000</span>)]
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">elem</span> <span style="color:#000">=</span> <span style="color:#a90d91">str</span>(<span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">random</span>())
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">timeit</span><span style="color:#000">.</span><span style="color:#000">timeit</span>(<span style="color:#a90d91">lambda</span>: <span style="color:#000">elem</span> <span style="color:#000">in</span> <span style="color:#000">list_</span>, <span style="color:#000">number</span><span style="color:#000">=</span><span style="color:#1c01ce">1000</span>)
<span style="color:#1c01ce">11.2</span>
</code></pre></div><p>10 секунд на проверку тысячи элементов, пффф. Решение — использовать множества.</p>
<h2 id="множество-очень-быстро-тяжеловесно">Множество: очень быстро, тяжеловесно</h2>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">set_</span> <span style="color:#000">=</span> <span style="color:#a90d91">set</span>(<span style="color:#a90d91">str</span>(<span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">random</span>()) <span style="color:#a90d91">for</span> <span style="color:#000">_</span> <span style="color:#000">in</span> <span style="color:#a90d91">range</span>(<span style="color:#1c01ce">1_000_000</span>))
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">elem</span> <span style="color:#000">=</span> <span style="color:#a90d91">str</span>(<span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">random</span>())
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">timeit</span><span style="color:#000">.</span><span style="color:#000">timeit</span>(<span style="color:#a90d91">lambda</span>: <span style="color:#000">elem</span> <span style="color:#000">in</span> <span style="color:#000">set_</span>, <span style="color:#000">number</span><span style="color:#000">=</span><span style="color:#1c01ce">1000</span>)
<span style="color:#1c01ce">0.00014</span>
</code></pre></div><p>Операция <code>element in set</code> выполняется за <code>O(1)</code>. На множестве проверка отработала в несколько десятков тысяч раз быстрее, чем на списке.</p>
<p>А что с памятью? Проверим:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">pympler</span> <span style="color:#a90d91">import</span> <span style="color:#000">asizeof</span>

<span style="color:#a90d91">def</span> <span style="color:#000">size_mb</span>(<span style="color:#000">obj</span>):
    <span style="color:#a90d91">return</span> <span style="color:#a90d91">round</span>(<span style="color:#000">asizeof</span><span style="color:#000">.</span><span style="color:#000">asizeof</span>(<span style="color:#000">obj</span>) <span style="color:#000">/</span> <span style="color:#1c01ce">1024</span><span style="color:#000">**</span><span style="color:#1c01ce">2</span>)

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">size_mb</span>(<span style="color:#000">list_</span>)
<span style="color:#1c01ce">77</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">size_mb</span>(<span style="color:#000">set_</span>)
<span style="color:#1c01ce">101</span>
</code></pre></div><p>Множество оказалось в 1.3 раза тяжелее списка. Ничего, для миллиона монеток хватит. Но что делать, если в коллекции один миллиард объектов, тоже всё в память запихивать?</p>
<h2 id="фильтр-блума-быстро-легко-неуверенно">Фильтр Блума: быстро, легко, неуверенно</h2>
<p>Для множества на 1 млн элементов получилось 140 микросекунд на 1000 проверок, 101 Мб в памяти.</p>
<p>Что если элементов будет 1 млрд? Это уже около 100 Гб, не хотелось бы держать их в памяти. Устроил бы компромиссный вариант, который работает медленнее, но занимает меньше места.</p>
<p>И он существует! Это фильтр Блума — специальная вероятностная структура данных. Она отвечает на вопрос «есть ли элемент в коллекции?» одним из двух вариантов:</p>
<ul>
<li>точно нет;</li>
<li>возможно есть.</li>
</ul>
<p>Вот как это работает:</p>
<pre tabindex="0"><code>&gt;&gt;&gt; from bloom_filter import BloomFilter
&gt;&gt;&gt; bloom = BloomFilter(max_elements=1_000_000, error_rate=0.001)
&gt;&gt;&gt; for el in set_:
...   bloom.add(el)
&gt;&gt;&gt; size_mb(bloom)
3
</code></pre><p>Фильтр Блума на 1 млн элементов с вероятностью ложно-положительного ответа 0.1% занимает всего 3 Мб (вместо 100 Мб «честного» множества). А что со скоростью?</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">timeit</span><span style="color:#000">.</span><span style="color:#000">timeit</span>(<span style="color:#a90d91">lambda</span>: <span style="color:#000">elem</span> <span style="color:#000">in</span> <span style="color:#000">bloom</span>, <span style="color:#000">number</span><span style="color:#000">=</span><span style="color:#1c01ce">1000</span>)
<span style="color:#1c01ce">0.015</span>
</code></pre></div><p>15 миллисекунд — в 100 раз медленнее, чем проверка по множеству, но всё ещё достаточно быстро (например, в сотни раз быстрее проверки по списку).</p>
<p>Проверим на 1 млрд:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">bloom</span> <span style="color:#000">=</span> <span style="color:#000">BloomFilter</span>(<span style="color:#000">max_elements</span><span style="color:#000">=</span><span style="color:#1c01ce">1_000_000_000</span>, <span style="color:#000">error_rate</span><span style="color:#000">=</span><span style="color:#1c01ce">0.001</span>)
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">size_mb</span>(<span style="color:#000">bloom</span>)
<span style="color:#1c01ce">3428</span>
</code></pre></div><p>Три с лишним гигабайта, рост линейный. Чудес не бывает, но выигрыш по памяти в 30 раз при сохранении приемлемой скорости иногда может вам пригодиться.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Плохая и хорошая документация языка</title>
      <link>https://antonz.ru/language-doc/</link>
      <pubDate>Mon, 06 Jul 2020 09:08:48 +0000</pubDate>
      
      <guid>https://antonz.ru/language-doc/</guid>
      <description>На примере Go и топ-10 языков программирования.</description>
      <content:encoded><![CDATA[<p>Язык Go не отличается красотой. Кто-то называет его «намеренно простым», кто-то уродливым. Но с чем у Go действительно всё классно — так это с документацией. Там много хорошего, но вот главное, на мой взгляд:</p>
<ol>
<li><a href="https://tour.golang.org/">A Tour of Go</a> — интерактивное введение в язык.</li>
<li><a href="https://golang.org/doc/effective_go.html">Effective Go</a> — книга о том, как писать идиоматичный код на Go.</li>
<li>Ссылки из документации на исходники каждой функции стандартной библиотеки (например, <a href="https://golang.org/src/math/dim.go?s=816:846#L25">Max</a>).</li>
</ol>
<p>Для сравнения я взял топ-10 языков из <a href="https://insights.stackoverflow.com/survey/2020#most-popular-technologies">StackOverflow Developer Survey</a> и посмотрел, как у них дела с этими тремя пунктами.</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<figure>
  <img alt="Топ-10 языков" src="language-top.png">
  <figcaption>Рейтинг популярных языков по версии StackOverflow</figcaption>
</figure>
</div>
</div>
<h2 id="1-javascript">1. JavaScript</h2>
<p>У языка даже своего сайта нет ツ Есть миллион обучалок, но единого авторитетного источника — нет. Документация по языку есть только благодаря <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects">Мозилле</a>. Ссылок на исходники нет, конечно. Зато по каждой функции есть <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">интерактивный пример</a>, это отлично.</p>
<h2 id="2-sql">2. SQL</h2>
<p>Всё как у JS, только хуже — в мире SQL не нашлось своей Мозиллы, которая бы сделала документацию с примерами. Где свой SQL получали, там и ищите.</p>
<div class="boxed" style="margin-bottom: .8em;">
<p>Кстати, если вы уже знаете основы SQL и хотите прокачать понимание индексов, оптимизацию запросов и всякое такое — посмотрите онлайн-книгу <a href="https://use-the-index-luke.com/">Use The Index, Luke</a>, она хороша.</p>
</div>
<h2 id="3-python">3. Python</h2>
<p>Первый язык в топе с собственным сайтом. Есть ссылка <em>Get Started</em>, но дальше разбегаются глаза — что выбрать? Вместо рекомендованной авторами базовой обучалки вываливают на новичка <a href="https://wiki.python.org/moin/BeginnersGuide/Programmers">простыню ссылок</a>. <a href="https://docs.python.org/3/tutorial/index.html">Официальный туториал</a> найти можно только каким-то нетривиальным способом. Интерактива нет. Незачёт.</p>
<p>Исходников отдельных функций нет, исходники модулей — только если они написаны на Python (например, для <a href="https://docs.python.org/3/library/heapq.html">heapq</a> исходники есть, а для <a href="https://docs.python.org/3/library/itertools.html">itertools</a> — нет).</p>
<h2 id="4-java">4. Java</h2>
<p>Язык принадлежит компании Оракл, этим всё сказано. Заходите на официальный сайт <a href="https://www.java.com/ru/">посмеяться</a>.</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<figure>
  <img alt="Сайт Java" src="language-java.png">
  <figcaption>Это весь сайт. Вот прям совсем весь. Учитесь!</figcaption>
</figure>
</div>
</div>
<p>Если пройтись по ссылкам дальше, попадаешь на страницу Learn Java Skills, где Оракл любезно предложит прикупить семинар. Если ну очень постараться, можно набрести на документацию по языку, даже <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/package-summary.html">с примерами</a>. Странно, что за доступ не надо платить или хотя бы регистрироваться в Oracle Developer Network — надеюсь, эту недоработку скоро исправят.</p>
<h2 id="5-bash">5. Bash</h2>
<p>Не ожидал, но у него есть <a href="https://www.gnu.org/software/bash/">сайт</a> и <a href="https://www.gnu.org/software/bash/manual/bash.html">документация</a>. Спасибо и на том.</p>
<h2 id="6-с">6. С#</h2>
<p>Первый язык родом из нового тысячелетия в списке. Есть <a href="https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/intro-to-csharp/hello-world">интерактивный туториал</a>, <a href="https://docs.microsoft.com/en-us/dotnet/csharp/tour-of-csharp/">тур по языку</a> и <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/">руководство разработчика</a>. Неплохо! В документации есть интерактивные примеры, а вот ссылок на исходники нет.</p>
<h2 id="7-php">7. PHP</h2>
<p>Первое, что встречает на официальном сайте — <em>Please DO NOT use this version in production, it is an early test version</em>. Спасибо, да. Я бы вообще сделал <em>DO NOT use this in production</em> официальным слоганом языка. Кхм, пардон, отвлёкся. Есть неинтерактивная <a href="https://www.php.net/manual/en/tutorial.php">обучалка</a>, неплохая документация со статическими примерами и комментариями сообщества, и, неожиданно — аж целая книга <a href="https://www.php.net/manual/en/internals2.php">PHP at the Core: A Hacker&rsquo;s Guide</a>.</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<figure>
  <img alt="Сайт Java" src="language-php.png">
  <figcaption>Some leaks are unavoidable, объясняют нам знатоки PHP.</figcaption>
</figure>
</div>
</div>
<h2 id="8-typescript">8. TypeScript</h2>
<p>Новейший язык, 2012 года выпуска. Несколько <a href="https://www.typescriptlang.org/docs/handbook/typescript-from-scratch.html">введений</a>, местами интерактивные. Подробный <a href="https://www.typescriptlang.org/docs/handbook/intro.html">учебник</a>, который начинается как интерактивный, но быстро превращается в статический (как так?). Ссылок на исходники нет, но они особо и не нужны — у тайп-скрипта нет собственной стандартной библиотеки.</p>
<h2 id="9-c">9. C++</h2>
<p>Есть интерактивный тур по языку! Шучу, конечно. Тур выложен <a href="https://isocpp.org/images/uploads/2-Tour-Basics.pdf">в PDF</a>, что тут скажешь. Зато есть <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines">Core Guidelines</a> о том, как писать правильный код.</p>
<h2 id="10-c">10. C</h2>
<p>Сайта нет, ничего нет, населена роботами.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Счёт 10-0 в пользу Go.</p>
<p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fab fa-telegram-plane"></i> «<a href="https://t.me/thank_go">Thank Go</a>»</span></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Зачем читать исходники стандартной библиотеки</title>
      <link>https://antonz.ru/checkcache/</link>
      <pubDate>Tue, 30 Jun 2020 16:27:34 +0000</pubDate>
      
      <guid>https://antonz.ru/checkcache/</guid>
      <description>Чтобы не остаться в продакшене с пустым кешем посреди рабочего дня.</description>
      <content:encoded><![CDATA[<p>Я как-то писал, что в документацию питона добавили ссылки на <a href="/python-sources/">исходники модулей</a>. Читать их не только увлекательно, но и полезно.</p>
<p>Помните <code>linecache.getline()</code> из прошлого поста, который выбирает строчку файла <a href="/linecache/">по номеру</a>?</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">linecache</span><span style="color:#000">.</span><span style="color:#000">getline</span>(<span style="color:#c41a16">&#34;answers.txt&#34;</span>, <span style="color:#1c01ce">3</span>)
<span style="color:#c41a16">&#39;Проверили, проблема на вашей стороне&#39;</span>
</code></pre></div><p>Модуль не случайно называется <code>linecache</code>. При первом обращении к файлу <code>linecache</code> записывает его содержимое в кеш (в глобальную переменную <code>cache</code>). Именно из кеша <code>getline()</code> и выбирает строку по номеру. Благодаря кешу второй и следующие вызовы уже не читают файл и отрабатывают моментально.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#177500"># lines - список строк файла</span>
<span style="color:#000">cache</span>[<span style="color:#000">filename</span>] <span style="color:#000">=</span> <span style="color:#000">size</span>, <span style="color:#000">mtime</span>, <span style="color:#000">lines</span>, <span style="color:#000">fullname</span>
</code></pre></div><p>И есть в модуле функция <code>linecache.checkcache()</code>. Вот её документация:</p>
<blockquote>
<p>Check the cache for validity. Use this function if files in the cache may have changed on disk, and you require the updated version.</p>
</blockquote>
<p>Вроде понятно, проверяет и актуализирует кеш. А вот как выглядит исходник функции:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">checkcache</span>(<span style="color:#000">filename</span><span style="color:#000">=</span><span style="color:#a90d91">None</span>):
    <span style="color:#177500"># проверка, обновился ли файл</span>
    <span style="color:#177500"># по сравнению с кешем</span>
    <span style="color:#177500"># и если обновился, то:</span>
    <span style="color:#000">cache</span><span style="color:#000">.</span><span style="color:#000">pop</span>(<span style="color:#000">filename</span>)
</code></pre></div><p>Оказывается, <code>checkcache()</code> не актуализирует, а очищает кеш! Из-за этого следующий вызов <code>getline()</code> отработает заметно медленнее: придётся заново начитывать весь файл.</p>
<p>В случае с <code>linecache</code> это вряд ли станет большой проблемой, но представьте, какой был бы неприятный сюрприз, если бы речь шла о продакшен-кеше вашего приложения ツ</p>
<p>В любой непонятной ситуации читай исходники, как говорил Урбан Мюллер, автор языка Brainfuck.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Прочитать произвольную строку из файла</title>
      <link>https://antonz.ru/linecache/</link>
      <pubDate>Wed, 17 Jun 2020 12:57:43 +0000</pubDate>
      
      <guid>https://antonz.ru/linecache/</guid>
      <description>С помощью linecache.getline()</description>
      <content:encoded><![CDATA[<p>Предположим, вы решили разработать продвинутого саппорт-бота. В нём будет машин лёнинга до самых краёв, так что человек почти не понадобится. К сожалению, неотложные дела отвлекли ваше внимание, и вы делегировали задачу Френку.</p>
<p>Прямо скажем, это было не лучшее решение. Тупая и ленивая скотина придумала, что достаточно заготовить файл с универсальными ответами на все случаи жизни, и на каждый вопрос отвечать случайной фразой:</p>
<pre tabindex="0"><code># answers.txt
Перезагрузите ваше устройство, пожалуйста
Проверили, проблема на вашей стороне
Спасибо, займёмся этим позже
Наши технические возможности исчерпаны
</code></pre><p>Простой, надёжный алгоритм. Осталось воплотить в питоне. Здесь Френку поможет <code>linecache.getline()</code>:</p>
<pre tabindex="0"><code>import linecache
import random

def get_answer():
    line_num = random.randint(1, 4)
    answer = linecache.getline(&quot;answers.txt&quot;, line_num)
    return answer.strip()
</code></pre><pre tabindex="0"><code>&gt;&gt;&gt; get_answer()
'Проверили, проблема на вашей стороне'
</code></pre><p>Ничего себе! Это едва ли не короче, чем hello world. К тому же, функция <code>getline()</code> кеширует все строчки файла в списке, так что следующие вызовы <code>get_answer()</code> отработают моментально.</p>
<p>Бот готов, Френк возвращается к своим семечкам.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="tg://resolve?domain=ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Отрезать строке голову и хвост</title>
      <link>https://antonz.ru/removeprefix/</link>
      <pubDate>Tue, 09 Jun 2020 11:47:38 +0000</pubDate>
      
      <guid>https://antonz.ru/removeprefix/</guid>
      <description>С помощью removeprefix() и removesuffix()</description>
      <content:encoded><![CDATA[<p>В Python 3.9 строке добавили методы, которые удаляют префикс и суффикс:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#c41a16">&#34;Френк и семечки&#34;</span><span style="color:#000">.</span><span style="color:#000">removeprefix</span>(<span style="color:#c41a16">&#34;Френк и &#34;</span>)
<span style="color:#c41a16">&#39;семечки&#39;</span>

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#c41a16">&#34;Френк и семечки&#34;</span><span style="color:#000">.</span><span style="color:#000">removesuffix</span>(<span style="color:#c41a16">&#34; и семечки&#34;</span>)
<span style="color:#c41a16">&#39;Френк&#39;</span>
</code></pre></div><p>Во время обсуждения PEP разгорелся нешуточный спор. Сначала автор предложил названия <code>cutprefix()</code> и <code>cutsuffix()</code>, но сообществу не понравился глагол <code>cut</code>. Альтернативой предложили <code>strip</code>, <code>trim</code> и <code>remove</code>, долго и мучительно обсуждали, наконец остановились на <code>remove</code>.</p>
<p>Конечно, именование переменных и методов — первая неразрешимая проблема программирования (вторая, как вы знаете — устаревание кеша). Но решение странное, на мой взгляд.</p>
<p>До сих пор в языке <code>remove</code> использовался в смысле «удалить элемент коллекции»:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">deque</span><span style="color:#000">.</span><span style="color:#000">remove</span>()
<span style="color:#000">array</span><span style="color:#000">.</span><span style="color:#000">remove</span>()
<span style="color:#000">os</span><span style="color:#000">.</span><span style="color:#000">remove</span>()
</code></pre></div><p>А в строках для обрезки части — <code>strip</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">str</span><span style="color:#000">.</span><span style="color:#000">strip</span>()
<span style="color:#a90d91">str</span><span style="color:#000">.</span><span style="color:#000">lstrip</span>()
<span style="color:#a90d91">str</span><span style="color:#000">.</span><span style="color:#000">rstrip</span>()
</code></pre></div><p>Да, само по себе <code>strip</code> — не слишком удачное название (в других языках чаще используют <code>trim</code>). Но оно давно прижилось, так что логично его и использовать дальше.</p>
<p>Так или иначе, строка обзавелась двумя новыми методами. Всего их теперь 47 (!), не считая дандеров.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="tg://resolve?domain=ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Красавица и чудовище. Обработка ошибок в Go</title>
      <link>https://antonz.ru/go-errors/</link>
      <pubDate>Thu, 04 Jun 2020 14:11:07 +0000</pubDate>
      
      <guid>https://antonz.ru/go-errors/</guid>
      <description>Ошибки в го особенно уродливы, но это неспроста.</description>
      <content:encoded><![CDATA[<p>Роб Пайк сказал об ошибках в го:</p>
<blockquote>
<p>Explicit error checking forces the programmer to think about errors — and deal with them — when they arise.</p>
</blockquote>
<p>Это правда. Но не вся.</p>
<p>Допустим, я хочу прочитать список целых чисел из текстового файла. Вот как можно сделать это на питоне:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">read_numbers</span>(<span style="color:#000">filename</span>):
    <span style="color:#a90d91">return</span> [<span style="color:#a90d91">int</span>(<span style="color:#000">line</span><span style="color:#000">.</span><span style="color:#000">strip</span>()) <span style="color:#a90d91">for</span> <span style="color:#000">line</span> <span style="color:#000">in</span> <span style="color:#a90d91">open</span>(<span style="color:#000">filename</span>)]
</code></pre></div><p>Или, в более процедурном стиле:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">read_numbers</span>(<span style="color:#000">filename</span>):
    <span style="color:#000">numbers</span> <span style="color:#000">=</span> []
    <span style="color:#a90d91">for</span> <span style="color:#000">line</span> <span style="color:#000">in</span> <span style="color:#a90d91">open</span>(<span style="color:#000">filename</span>):
        <span style="color:#000">num</span> <span style="color:#000">=</span> <span style="color:#a90d91">int</span>(<span style="color:#000">line</span><span style="color:#000">.</span><span style="color:#000">strip</span>())
        <span style="color:#000">numbers</span><span style="color:#000">.</span><span style="color:#000">append</span>(<span style="color:#000">num</span>)
    <span style="color:#a90d91">return</span> <span style="color:#000">numbers</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">read_numbers</span>(<span style="color:#c41a16">&#34;numbers.txt&#34;</span>)
[<span style="color:#1c01ce">11</span>, <span style="color:#1c01ce">33</span>, <span style="color:#1c01ce">71</span>]
</code></pre></div><p>Какой прекрасный, лаконичный, понятный код, не правда ли? Сделаем то же самое в го:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a90d91">func</span> <span style="color:#000">readNumbers</span>(<span style="color:#000">filename</span> <span style="color:#a90d91">string</span>) ([]<span style="color:#a90d91">int</span>, <span style="color:#a90d91">error</span>) {
	<span style="color:#000">file</span>, <span style="color:#000">err</span> <span style="color:#000">:=</span> <span style="color:#000">os</span>.<span style="color:#000">Open</span>(<span style="color:#000">filename</span>)
	<span style="color:#a90d91">if</span> <span style="color:#000">err</span> <span style="color:#000">!=</span> <span style="color:#a90d91">nil</span> {
		<span style="color:#a90d91">return</span> <span style="color:#a90d91">nil</span>, <span style="color:#000">err</span>
	}
	<span style="color:#a90d91">defer</span> <span style="color:#000">file</span>.<span style="color:#000">Close</span>()

	<span style="color:#a90d91">var</span> <span style="color:#000">numbers</span> []<span style="color:#a90d91">int</span>
	<span style="color:#000">scanner</span> <span style="color:#000">:=</span> <span style="color:#000">bufio</span>.<span style="color:#000">NewScanner</span>(<span style="color:#000">file</span>)
	<span style="color:#a90d91">for</span> <span style="color:#000">scanner</span>.<span style="color:#000">Scan</span>() {
		<span style="color:#000">number</span>, <span style="color:#000">err</span> <span style="color:#000">:=</span> <span style="color:#000">strconv</span>.<span style="color:#000">Atoi</span>(<span style="color:#000">scanner</span>.<span style="color:#000">Text</span>())
		<span style="color:#a90d91">if</span> <span style="color:#000">err</span> <span style="color:#000">!=</span> <span style="color:#a90d91">nil</span> {
			<span style="color:#a90d91">return</span> <span style="color:#a90d91">nil</span>, <span style="color:#000">err</span>
		}
		<span style="color:#000">numbers</span> = <span style="color:#a90d91">append</span>(<span style="color:#000">numbers</span>, <span style="color:#000">number</span>)
	}

	<span style="color:#a90d91">if</span> <span style="color:#000">err</span> <span style="color:#000">:=</span> <span style="color:#000">scanner</span>.<span style="color:#000">Err</span>(); <span style="color:#000">err</span> <span style="color:#000">!=</span> <span style="color:#a90d91">nil</span> {
		<span style="color:#a90d91">return</span> <span style="color:#a90d91">nil</span>, <span style="color:#000">err</span>
	}

	<span style="color:#a90d91">if</span> <span style="color:#000">err</span> <span style="color:#000">:=</span> <span style="color:#000">file</span>.<span style="color:#000">Close</span>(); <span style="color:#000">err</span> <span style="color:#000">!=</span> <span style="color:#a90d91">nil</span> {
		<span style="color:#a90d91">return</span> <span style="color:#a90d91">nil</span>, <span style="color:#000">err</span>
	}

	<span style="color:#a90d91">return</span> <span style="color:#000">numbers</span>, <span style="color:#a90d91">nil</span>
}
</code></pre></div><h2 id="плохо--хорошо">Плохо / хорошо</h2>
<p>Что плохо в этом коде? (помимо того, что он прямо умоляет разбить на несколько функций вместо одной жирной)</p>
<ol>
<li>Он уродливый.</li>
<li>Тяжело понять происходящее, потому что обработка ошибок перемешана с основной логикой.</li>
</ol>
<p>А вот что хорошо:</p>
<ol>
<li>Видны все ситуации, в которых что-то может пойти не так.</li>
<li>Пока пишешь код, го заставляет решить, что делать с каждой ошибкой.</li>
</ol>
<p>Серьёзный плюс, на самом деле. Необработанные ошибки создают огромное количество багов в программах на других языках. Го же тычет программисту в лицо ошибками и требует явно указать, что с ними делать.</p>
<p>Но всегда ли это плюс? Обычно обработка ошибки происходит не там, где ошибка выброшена, а на более высоком уровне. Часто — на значительно более высоком. В го это приводит к постоянным «пробросам» ошибок наверх:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a90d91">if</span> <span style="color:#000">err</span> <span style="color:#000">!=</span> <span style="color:#a90d91">nil</span> {
    <span style="color:#a90d91">return</span> <span style="color:#000">err</span>
}
</code></pre></div><p>Такой конструкцией переполнена любая программа на го. Ценность её нулевая, потому что это чисто техническая передача ошибки выше, выше и выше — до момента, когда она будет обработана.</p>
<p>В языках с конструкцией <code>try-catch</code> такой костыль не нужен — достаточно поставить <code>catch</code> на том уровне, где ошибка будет обработана. При этом на более низких уровнях можно писать код так, как будто никаких ошибок нет — это делает программу проще для понимания и модификации.</p>
<p>На питоне я могу сделать так:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">try</span>:
    <span style="color:#000">numbers</span> <span style="color:#000">=</span> <span style="color:#000">read_numbers</span>(<span style="color:#c41a16">&#34;numbers.txt&#34;</span>)
<span style="color:#a90d91">except</span> <span style="color:#000">Exception</span> <span style="color:#a90d91">as</span> <span style="color:#000">exc</span>:
    <span style="color:#a90d91">print</span>(<span style="color:#c41a16">f</span><span style="color:#c41a16">&#34;Failed to read numbers: </span><span style="color:#c41a16">{</span><span style="color:#000">exc</span><span style="color:#c41a16">}</span><span style="color:#c41a16">&#34;</span>)
</code></pre></div><p>И не заботиться внутри <code>read_numbers()</code> об обработке ошибок. Если конкретная причина ошибки не важна, это нормальный подход.</p>
<p>Го же вынуждает программиста возиться с каждой ошибкой — даже когда не надо. Роб Пайк сделал выбор за вас, живите с этим.</p>
<h2 id="что-дальше">Что дальше</h2>
<p>Думаю, авторы языка понимали лукавство утверждений о великолепии обработки ошибок в го. Именно этим можно объяснить их предложение добавить в Go 1.14 <a href="https://github.com/golang/go/issues/32437">функцию try</a>.</p>
<p>Вместо:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">f</span>, <span style="color:#000">err</span> <span style="color:#000">:=</span> <span style="color:#000">os</span>.<span style="color:#000">Open</span>(<span style="color:#000">filename</span>)
<span style="color:#a90d91">if</span> <span style="color:#000">err</span> <span style="color:#000">!=</span> <span style="color:#a90d91">nil</span> {
	<span style="color:#a90d91">return</span> <span style="color:#000">...</span>, <span style="color:#000">err</span>
}
</code></pre></div><p>Можно было бы писать так:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#000">f</span> <span style="color:#000">:=</span> <span style="color:#000">try</span>(<span style="color:#000">os</span>.<span style="color:#000">Open</span>(<span style="color:#000">filename</span>))
</code></pre></div><p>Сложно представить себе более ужасное решение. Оно несколько повышает читабельность кода, но полностью убивает то единственное, что есть хорошего в работе с ошибками в го — тот самый «explicit error checking», который «forces the programmer to think about errors».</p>
<p>К счастью, волна недоумения от сообщества заставила авторов передумать:</p>
<blockquote>
<p>We still believe that error handling in Go is not perfect and can be meaningfully improved, but it is clear that we as a community need to talk more about what specific aspects of error handling are problems that we should address.</p>
</blockquote>
<p>Аминь.</p>
<p>P.S. Результаты голосования:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <a href="tg://resolve?domain=thank_go&post=20"><img alt="Что думаете о работе с ошибками в Go?" src="go-errors-poll.png"></a>
  <figcaption>Надо ли всё переписать на PHP 🤔</figcaption>
</figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fab fa-telegram-plane"></i> «<a href="tg://resolve?domain=thank_go">Thank Go</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как человек решает задачи в интерфейсе</title>
      <link>https://antonz.ru/user-actions/</link>
      <pubDate>Tue, 19 May 2020 08:10:30 +0000</pubDate>
      
      <guid>https://antonz.ru/user-actions/</guid>
      <description>Психология действий пользователя: три шага, три проблемы.</description>
      <content:encoded><![CDATA[<p><em>Это третья часть цикла статей о проектировании интерфейсов для не-дизайнеров. Предыдущая: <a href="/simple-ui/">Что делает интерфейс простым</a></em></p>
<p>Человек взаимодействует с интерфейсом, чтобы решить конкретную задачу. Происходит это в три шага:</p>
<ol>
<li><em>Сформулировать задачу</em>. Я подписан на один канал в Телеграме. Он хороший, но надоел оповещениями. Хочу их отключить.</li>
<li><em>Выполнить действие</em>. Полагаю, это делается где-то в самом канале. Захожу в ленту, тыкаю на канал. Вижу внизу большую кнопку <em>Mute</em>. Ага, это наверняка она. Нажимаю.</li>
<li><em>Оценить результат</em>. Кнопка изменилась: <em>Mute</em> → <em>Unmute</em>. Рядом с названием канала появилась иконка с перечёркнутым динамиком. Полагаю, оповещения выключены.</li>
</ol>
<p>На каждом шаге интерфейс может помогать, а может вставлять палки в колёса. Посмотрим, как это бывает.</p>
<h2 id="1-сформулировать-задачу">1. Сформулировать задачу</h2>
<p>Обычно при работе с продуктом человек знает, что хочет сделать:</p>
<ul>
<li>Купить новый айфон на сайте Эпла.</li>
<li>Подписаться на интересный подкаст о технологиях в приложении Pocket Casts.</li>
<li>Перевести деньги с карты на карту в интернет-банке.</li>
</ul>
<p>Исключение — когда пользователь слабо знаком с продуктом или фичей и не может «приземлить» высокоуровневую цель на конкретную задачу.</p>
<blockquote>
<p>Менеджеру продукта ставят цель — добавить на сайт компании чат службы поддержки. Менеджер знает, что сайт использует специальный «облачный» сервис для базы знаний. По слухам, в нём есть и чат, но менеджер понятия не имеет, что конкретно входит в эту фичу и насколько она подходит под требования компании.</p>
<p>Поэтому он не пытается понять, как включить чат в настройках, а идёт в документацию разбираться с возможностями, ценой и ограничениями.</p>
</blockquote>
<h2 id="2-выполнить-действие">2. Выполнить действие</h2>
<p>Человек формулирует последовательность действий (<em>нажать на Mute, чтобы отключить оповещения</em>) и выполняет их в интерфейсе (<em>жму на Mute</em>).</p>
<p>Главная проблема этого шага: из интерфейса непонятно, какие действия выполнить, чтобы решить задачу. Чаще всего — человек не видит подходящих элементов управления.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Я пользуюсь специальной программой (RSS-ридером), чтобы получать обновления с интересных сайтов. Решил подписаться на нового автора:</p>
<div class="row">
<div class="col-xs-12 col-sm-4">
<figure>
  <img alt="Добавить сайт" src="user-actions-01.png">
  <figcaption>1. Вбил адрес сайта и нажал «найти».</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-4">
<figure>
  <img alt="Сайт найден" src="user-actions-02.png">
  <figcaption>2. Жму на кнопку «подписаться» в правом нижнем углу.</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-4">
<figure>
  <img alt="А как добавить?" src="user-actions-03.png">
  <figcaption>3. Эээ. Ничего не изменилось.</figcaption>
</figure>
</div>
</div>
<p>Приглядываюсь и понимаю, что кнопки «подписаться»-то и нет. В правом нижнем углу всё та же кнопка «найти». А как тогда подписаться? Задача провалена.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Бывает, что подходящий элемент управления вроде есть, но какой-то странный:</p>
<div class="row">
<div class="col-xs-12 col-sm-4">
<img alt="Чужой компьютер" src="user-actions-04.png">
</div>
<div class="col-xs-12 col-sm-4">
<p class="figcaption">Что такое «чужой компьютер»? Обычно на этом месте пишут «запомнить» (или вовсе ничего не пишут и автоматически запоминают логин-пароль), а тут что-то странное.</p>
</div>
</div>
<p>Бывает, что подходящих элементов управления несколько (хрестоматийные кнопки «Отменить» и «Отмена» в модальном окне Андроида). Или один, но недоступен (кнопка отправки заказа в интернет-магазине заблокирована по одному программисту ведомым причинам). Это тоже озадачивает.</p>
<p>Корневая причина одна — <em class="text-highlight">пользователь не понимает, как решить задачу</em> с помощью интерфейса. Лучшая защита от таких проблем — тестирование.</p>
<p>Не обязательно устраивать полномасштабные юзабилити-тесты: достаточно изловить коллегу, попросить его выполнить типичную пользовательскую задачу, и обратить внимание на затруднения и вопросы. Главное — не подсказывать и не объяснять, что к чему: к каждому пользователю ведь не подсадишь консультанта. Просто наблюдать и записывать.</p>
<p>Такие тесты можно делать прямо на макетах или прототипах, не обязательно дожидаться реализации.</p>
<h2 id="3-оценить-результат">3. Оценить результат</h2>
<p>Человек выполнил действие и пытается понять — решило оно задачу или нет. Хорошо, если интерфейс явно даёт понять — «получилось!». Проще всего показать результат действия:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Результат поиска в Яндексе" src="user-actions-05.png" class="img-bordered-thin">
  <figcaption>Яндекс подсказывает, что я правильно запомнил название книги Нормана</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Новый пост в Фейсбуке" src="user-actions-06.png" class="img-bordered-thin">
  <figcaption>Фейсбук показывает только что опубликованный пост</figcaption>
</figure>
</div>
</div>
<p>Если результат — изменение внутреннего состояния системы, об этом тоже лучше сообщить:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Автосохранение" src="user-actions-07.png">
  <figcaption>Дописал фамилию в личном кабинете и понял, что кнопку «Сохранить» искать не надо — сохраняется автоматически.</figcaption>
</figure>
</div>
</div>
<p>А вот типичные интерфейсные проблемы, которые мешают оценить результат:</p>
<h2 id="проблема-результата-вовсе-нет">Проблема: результата вовсе нет</h2>
<p>Пользователь не понимает, восприняла программа его действия или нет.</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p><small><strong>Плохо</strong></small><br>
Нажал на кнопку «Вызвать такси», появился индикатор загрузки. Крутится, крутится. Что происходит? Такси приедет?</p>
</div>
<div class="col-xs-12 col-sm-6">
<p><small><strong>Как исправить</strong></small><br>
Добавить явный статус: «отправляю заказ», «ищу такси», «все машины заняты», «нет интернета».</p>
</div>
</div>
<p>Бывает, что формально результат есть, но человек его не видит:</p>
<figure>
  <img alt="Результат в противоположном углу от действия" src="user-actions-08.png">
  <figcaption>Интерфейс публикации статей в блоге. Кнопка «Опубликовать» — в верхнем правом углу, а сообщение «опубликовано» — в левом нижнем.</figcaption>
</figure>
<p>Если человек сосредоточен на задаче, поле зрения сужается до узкой области интерфейса. Поэтому, чтобы результат был заметен, лучше показывать его по месту действия, а не чёрти где на экране.</p>
<h2 id="проблема-непонятный-результат">Проблема: непонятный результат</h2>
<p>Результат определённо есть, но пользователь не понимает, удалось решить задачу или нет.</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p><small><strong>Плохо</strong></small><br>
Сотрудник поддержки заметил ошибку в уже закрытом тикете. Исправил, нажал на «Сохранить», получил ответ: «Переход из состояния Разрешен в состояние Разрешен не разрешен»</p>
</div>
<div class="col-xs-12 col-sm-6">
<p><small><strong>Как исправить</strong></small><br>
Сказать по-человечески:</p>
<p>«Закрытые заявки редактировать нельзя. <u>Открыть заявку</u>?»</p>
</div>
</div>
<h2 id="проблема-непонятно-что-дальше">Проблема: непонятно, что дальше</h2>
<p>Понятно, что задача решена. Но нет «мостика» для перехода к следующей задаче или непонятно, как результат вписывается в общий контекст.</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p><small><strong>Плохо</strong></small><br>
Создал в онлайн-календаре встречу, добавил участников, нажал «Сохранить», получаю: «Событие успешно создано».</p>
<p>Результат есть, но чего ожидать дальше? Участники получат приглашения автоматически? Я должен что-то сделать, чтобы разослать их вручную? Приглашения в принципе нельзя отправить?</p>
</div>
<div class="col-xs-12 col-sm-6">
<p><small><strong>Как исправить</strong></small><br>
Рассматривать сценарий в целом, а не частную задачу:</p>
<p>«Встреча назначена, приглашения отправлены участникам»</p>
</div>
</div>
<h2 id="запомнить">Запомнить</h2>
<p>Человек взаимодействует с интерфейсом, чтобы решить конкретную задачу. Происходит это в три шага: сформулировать задачу, выполнить действие, оценить результат. Если все три шага проходят гладко — интерфейс своё дело сделал.</p>
<p>Основная проблема на шаге «выполнить действие»: пользователь не понимает, как решить задачу с помощью интерфейса. Лучшая защита от таких проблем — коридорное тестирование.</p>
<p>Основные проблемы на шаге «оценить результат»:</p>
<ul>
<li>Нет результата или он не виден. Защита: явно писать статус, показывать результат по месту действия.</li>
<li>Результат непонятен. Защита: сказать по-человечески.</li>
<li>Непонятно, что дальше. Защита: показать место задачи в пользовательском сценарии.</li>
</ul>
<p><em>Спасибо <a href="http://cat-in-cap.ru">Ольге Коноваловой</a> за помощь в подготовке статьи.</em></p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Специально для <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсов без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Не законы, а говно</title>
      <link>https://antonz.ru/legislation/</link>
      <pubDate>Sat, 16 May 2020 14:45:35 +0000</pubDate>
      
      <guid>https://antonz.ru/legislation/</guid>
      <description>Живём в 21 веке, а законы пишем, как в Древнем Риме.</description>
      <content:encoded><![CDATA[<p>Законодательство — огромная запутанная система, которая с годами только усложняется: принимаются новые законы, в старые вносят поправки, забывают убрать устаревшие нормы. В некоторых странах это добро наслаивается уже столетиями. Законы превратились в пифий, которых нормальные люди вообще не понимают. Существует целый штат жрецов-юристов, которые поясняют простым смертным, что к чему.</p>
<p>Можно было бы считать, что это нормально. Если бы у человечества не было другой области сравнимой сложности — программной инженерии. Умные ребята давно придумали, как бороться со сложностью программных систем. Почему эти же методы не применяют в законотворчестве?</p>
<p>Закон — это <em>спецификация</em>. Главное требование к спецификации — она должна быть понятна целевой аудитории (министерствам и отрасли, которую регулирует закон). Законы же пишут так, что даже юристы не могут сойтись во мнениях, что имелось в виду. А потом выпускают многотомные комментарии, обзоры судебной практики и решения Верховного суда.</p>
<p>Закон должен быть написан, как хорошая спецификация. С описанием решаемой проблемы. С типичными сценариями использования. С обзором исключительных ситуаций. С иллюстрациями и схемами взаимодействия. Простым языком без канцеляризмов и предложений à la Лев Николаевич Толстой на полстраницы.</p>
<p>Закон должен следовать другим принципам программных систем:</p>
<ol>
<li>Спецификация <em>проходит ревью</em>. Это в законах есть (правительство и отраслевые ассоциации пишут отзывы), но выполняется формально, а иногда вовсе не выполняется.</li>
<li>По спецификации <em>пишут тесты</em>. Берём выборку случаев из регулируемой отрасли, «примеряем» на них закон, прописываем ожидаемый результат. Берём выборку случаев из смежных отраслей и тоже примеряем, чтобы убедиться, что закон ничего не сломал. Берём другие законы и проводим кросс-проверку — нет ли конфликтов.</li>
<li>В спецификации указывают <em>критерии приёмки</em>. Как изменится ситуация после принятия закона? Какие показатели изменятся и как? Как их измерить? Как понять, что закон не работает или работает плохо? Всё прописываем.</li>
<li>Серьёзные изменения <em>внедряются постепенно</em>. Закон проходит «обкатку» на одном регионе. Собираем обратную связь от всех заинтересованных лиц. Проверяем результаты на соответствие «тестам» из пункта 2. Корректируем закон, только после этого «раскатываем» на всю страну.</li>
<li>Предусмотрены механизмы <em>диагностики и отладки</em> — журналы, мониторинг, дебаг. Это вроде как есть — все случаи применения закона «журналируются» регулирующими органами и судами. Но не хватает системного процесса анализа «логов» и выводов по ним.</li>
</ol>
<p>Законы — это спецификации. А пишут их, как будто до сих пор в древнем Риме живём.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Ссылки на телеграм в вебе</title>
      <link>https://antonz.ru/telegram-links/</link>
      <pubDate>Fri, 15 May 2020 11:17:43 +0000</pubDate>
      
      <guid>https://antonz.ru/telegram-links/</guid>
      <description>Без рекламы и Росогорода.</description>
      <content:encoded><![CDATA[<p><em>Телеграм разблокировали в июне 2020 года, так что теперь можно ставить обычные ссылки и не заморачиваться. Но если что — вы знаете, что делать.</em></p>
<p>В рунете заблокирован домен t.me, через который работают ссылки на телеграм. Сервисы-заменители (t-do.ru и прочие) напичканы рекламой и в любой момент могут перестать работать. Используйте лучше нативные ссылки — они гарантированно работают на любом устройстве, где установлен телеграм. И никакой Роскомнадзор ничего с этим не сделает.</p>
<p>Вот как это работает:</p>
<h2 id="канал">Канал</h2>
<pre tabindex="0"><code>https://t.me/название
→ tg://resolve?domain=название
</code></pre><p>пример: <a href="tg://resolve?domain=dangry">интерфейсы без шелухи</a></p>
<h2 id="заметка-вканале">Заметка в канале</h2>
<pre tabindex="0"><code>https://t.me/название/номер
→ tg://resolve?domain=название&amp;post=номер
</code></pre><p>пример: <a href="tg://resolve?domain=dangry&amp;post=256">всё о транслитерации</a></p>
<h2 id="группа-поприглашениям">Группа по приглашениям</h2>
<pre tabindex="0"><code>https://t.me/joinchat/идентификатор
→ tg://join?invite=идентификатор
</code></pre><p>пример: <a href="tg://join?invite=CxZg5goGc6rlWGjcvOYrpA">датавиз-чат</a></p>
<h2 id="стикер-пак">Стикер-пак</h2>
<pre tabindex="0"><code>https://t.me/addstickers/название
→ tg://addstickers?set=название
</code></pre><p>пример: <a href="tg://addstickers?set=HideThePainHarold">Гарольд скрывает боль</a></p>
<h2 id="поделиться-ссылкой-втелеграме">Поделиться ссылкой в телеграме</h2>
<pre tabindex="0"><code>https://t.me/share/url?url=ссылка&amp;text=описание
→ tg://msg_url?url=ссылка&amp;text=описание
</code></pre><p>пример: <a href="tg://msg_url?url=antonz.ru&amp;text=%D0%9E%D1%82%D0%BB%D0%B8%D1%87%D0%BD%D1%8B%D0%B9+%D0%B1%D0%BB%D0%BE%D0%B3+%D0%BE+%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B5+%D0%BF%D1%80%D0%BE%D0%B4%D1%83%D0%BA%D1%82%D0%BE%D0%B2">antonz.ru</a></p>
<h2 id="нюансы">Нюансы</h2>
<p>Если телеграм на устройстве не установлен, то ссылки не откроются. Но если вы ставите ссылки на телеграм, а у читателя его нет — скорее всего, он не ваша целевая аудитория. Так что невелика потеря.</p>
<p>Нативные ссылки не работают в соцсетях (твитер, фейсбук), так что в них придётся использовать t.me.</p>
<h2 id="генератор-нативных-ссылок-изобычных">Генератор нативных ссылок из обычных</h2>
<p>Введите «обычную» ссылку (с t.me) и получите «нативную», которая открывается вне зависимости от блокировок Телеграма:</p>
<style>
#source {
  display: block;
  width: 100%;
  padding: 0.25rem 0.5rem;
  font-size: 1rem;
}
</style>
<div class="row">
<div class="col-xs-12 col-sm-8">
    <div style="margin-bottom: 0.8em;">
        <input id="source" placeholder="https://t.me/...">
    </div>
    <div>
        Нативная ссылка: <a id="native" href="#"></a>
    </div>
</div>
</div>
<script>
var txtSource = document.getElementById("source");
var lnkNative = document.getElementById("native");
txtSource.addEventListener("change", onSourceChange);

var re = /(?:(?:https?:\/\/)?t(?:elegram)?\.me\/)?(.+)/;

function onSourceChange(event) {
  var source = event.target.value;
  var target = telefy(source);
  lnkNative.innerHTML = target;
  lnkNative.setAttribute("href", target);
}

function telefy(source) {
  var matches = re.exec(source);
  if (matches.length < 2) {
    return "";
  }
  var parts = matches[1].split("/");
  var target = "";
  switch (parts[0]) {
    case "joinchat":
      target = joinchat(parts[1]);
      break;
    case "addstickers":
      target = addstickers(parts[1]);
      break;
    case "share":
      target = share(parts[1]);
      break;
    default:
      target = resolve(parts[0], parts[1]);
  }
  return "tg://" + target;
}

function resolve(name, post) {
  if (post) {
    return "resolve?domain=" + name + "&post=" + post;
  }
  return "resolve?domain=" + name;
}

function joinchat(name) {
  return "join?invite=" + name;
}

function addstickers(name) {
  return "addstickers?set=" + name;
}

function share(qs) {
  qs = qs.split("?")[1];
  return "msg_url?" + qs;
}
</script>
<br>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Идеального способа ставить ссылки на телеграм в России не существует:</p>
<ul>
<li>ссылки через t.me не откроются без VPN,</li>
<li>ссылки через прокси-сайты ненадёжны,</li>
<li>нативные ссылки не работают в соцсетях.</li>
</ul>
<p>Но пока Росогород блокирует телеграм — я за нативные ссылки везде, где это работает.</p>
<p><em>И подписывайтесь на <a href="https://twitter.com/nalgeon">@nalgeon</a> в твитере, чтобы не пропустить новые заметки 🚀</em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как сделать классный Python-пакет</title>
      <link>https://antonz.ru/packaging/</link>
      <pubDate>Fri, 15 May 2020 07:58:16 +0000</pubDate>
      
      <guid>https://antonz.ru/packaging/</guid>
      <description>Такой, чтоб не стыдно было показать коллегам.</description>
      <content:encoded><![CDATA[<p><em>Версия от апреля 2021 года</em></p>
<p>Бывает, напишешь какую-нибудь полезную утилиту на питоне, и хочется поделиться ей с коллегами. Лучший способ для этого — сделать пакет (package): он устанавливается одной командой и спасает от копипасты.</p>
<p>Если вы, как и я раньше, думаете, что создание пакетов в питоне — большая головная боль, то знайте, что это не так. Чтобы не быть голословным, я сделал это пошаговое руководство. Три основных шага и несколько вспомогательных, со ссылками на гитхаб. Убедитесь сами:</p>
<h2 id="1-заглушка">1. Заглушка</h2>
<p>Будем делать <code>podsearch</code> — утилиту, которая ищет подкасты в айтюнсе. Создадим каталог и виртуальное окружение:</p>
<pre tabindex="0"><code>$ mkdir podsearch
$ cd podsearch
$ python3 -m venv env
$ . env/bin/activate
</code></pre><p>Создадим минимальную структуру пакета:</p>
<pre tabindex="0"><code>.
├── .gitignore
└── podsearch
    └── __init__.py
</code></pre><div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#c41a16">&#34;&#34;&#34;Let&#39;s find some podcasts!&#34;&#34;&#34;</span>

 <span style="color:#000">__version__</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#34;0.1.0&#34;</span>


 <span style="color:#a90d91">def</span> <span style="color:#000">search</span>(<span style="color:#000">name</span>, <span style="color:#000">count</span><span style="color:#000">=</span><span style="color:#1c01ce">5</span>):
     <span style="color:#c41a16">&#34;&#34;&#34;Search podcast by name.&#34;&#34;&#34;</span>
     <span style="color:#a90d91">raise</span> <span style="color:#000">NotImplementedError</span>()
</code></pre></div><h2 id="2-тестовый-пакет">2. Тестовый пакет</h2>
<p>Исторически создание пакета в питоне — дело хлопотное. К счастью, есть отличная маленькая утилита <a href="https://flit.readthedocs.io/en/latest/">flit</a>, которая упрощает его до предела. Установим её:</p>
<pre tabindex="0"><code>pip install flit
</code></pre><p>И создадим описание пакета:</p>
<pre tabindex="0"><code>$ flit init
Module name [podsearch]: 
Author [Anton Zhiyanov]: 
Author email [m@antonz.org]: 
Home page [https://github.com/nalgeon/podsearch-py]:                                     
Choose a license (see http://choosealicense.com/ for more info)
1. MIT - simple and permissive
2. Apache - explicitly grants patent rights
3. GPL - ensures that code based on this is shared with the same terms
4. Skip - choose a license later
Enter 1-4 [1]: 1

Written pyproject.toml; edit that file to add optional extra info.
</code></pre><p><a href="https://github.com/nalgeon/podsearch-py/blob/main/pyproject.toml">pyproject.toml</a></p>
<p>Flit создал файл с метаданными проекта <code>pyproject.toml</code>. В нём уже есть всё необходимое для публикации пакета в публичном репозитории — PyPi.</p>
<p>Зарегистрируемся на <a href="https://test.pypi.org/">TestPyPi</a> (тестовый репозиторий) и <a href="https://pypi.org/">PyPi</a> (основной). Они полностью независимы, так что потребуются две учётные записи.</p>
<p>Настроим доступ к репозиториям в файле <code>~/.pypirc</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ini" data-lang="ini"><span style="color:#a90d91">[distutils]</span>
<span style="color:#836c28">index-servers</span> <span style="color:#000">=</span><span style="color:#c41a16">
</span><span style="color:#c41a16">  pypi
</span><span style="color:#c41a16">  pypitest</span>

<span style="color:#a90d91">[pypi]</span>
<span style="color:#836c28">username: nalgeon  # replace with your PyPI username</span>

<span style="color:#a90d91">[pypitest]</span>
<span style="color:#836c28">repository: https://test.pypi.org/legacy/</span>
<span style="color:#836c28">username: nalgeon  # replace with your TestPyPI username</span>
</code></pre></div><p>И опубликуем наш пакет в тестовом репозитории:</p>
<pre tabindex="0"><code>$ flit publish --repository pypitest
Found 4 files tracked in git
...
Package is at https://test.pypi.org/project/podsearch/
</code></pre><p>Готово, пакет доступен на <a href="https://test.pypi.org/project/podsearch/">TestPyPi</a>.</p>
<h2 id="3-публичный-пакет">3. Публичный пакет</h2>
<p>Доработаем утилиту, чтобы она реально искала подкасты:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#177500"># ...</span>

<span style="color:#000">SEARCH_URL</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#34;https://itunes.apple.com/search&#34;</span>

<span style="color:#000">@dataclass</span>
<span style="color:#a90d91">class</span> <span style="color:#3f6e75">Podcast</span>:
    <span style="color:#c41a16">&#34;&#34;&#34;Podcast metadata.&#34;&#34;&#34;</span>

    <span style="color:#a90d91">id</span>: <span style="color:#a90d91">str</span>
    <span style="color:#000">name</span>: <span style="color:#a90d91">str</span>
    <span style="color:#000">author</span>: <span style="color:#a90d91">str</span>
    <span style="color:#000">url</span>: <span style="color:#a90d91">str</span>
    <span style="color:#000">feed</span>: <span style="color:#000">Optional</span>[<span style="color:#a90d91">str</span>] <span style="color:#000">=</span> <span style="color:#a90d91">None</span>
    <span style="color:#000">category</span>: <span style="color:#000">Optional</span>[<span style="color:#a90d91">str</span>] <span style="color:#000">=</span> <span style="color:#a90d91">None</span>
    <span style="color:#000">image</span>: <span style="color:#000">Optional</span>[<span style="color:#a90d91">str</span>] <span style="color:#000">=</span> <span style="color:#a90d91">None</span>


<span style="color:#a90d91">def</span> <span style="color:#000">search</span>(<span style="color:#000">name</span>: <span style="color:#a90d91">str</span>, <span style="color:#000">limit</span>: <span style="color:#a90d91">int</span> <span style="color:#000">=</span> <span style="color:#1c01ce">5</span>) <span style="color:#000">-&gt;</span> <span style="color:#000">List</span>[<span style="color:#000">Podcast</span>]:
    <span style="color:#c41a16">&#34;&#34;&#34;Search podcast by name.&#34;&#34;&#34;</span>
    <span style="color:#000">params</span> <span style="color:#000">=</span> {<span style="color:#c41a16">&#34;term&#34;</span>: <span style="color:#000">name</span>, <span style="color:#c41a16">&#34;limit&#34;</span>: <span style="color:#000">limit</span>, <span style="color:#c41a16">&#34;media&#34;</span>: <span style="color:#c41a16">&#34;podcast&#34;</span>}
    <span style="color:#000">response</span> <span style="color:#000">=</span> <span style="color:#000">_get</span>(<span style="color:#000">url</span><span style="color:#000">=</span><span style="color:#000">SEARCH_URL</span>, <span style="color:#000">params</span><span style="color:#000">=</span><span style="color:#000">params</span>)
    <span style="color:#a90d91">return</span> <span style="color:#000">_parse</span>(<span style="color:#000">response</span>)
</code></pre></div><p>И опубликуем в основном репозитории — PyPi. Выполняйте этот шаг только после того, как у вашего пакета готов рабочий код, который делает что-то полезное. Не стоит публиковать нерабочие пакеты и пакеты-заглушки.</p>
<pre tabindex="0"><code>flit publish
</code></pre><p>Готово! Можно <a href="https://pypi.org/project/podsearch/">делиться с коллегами</a>.</p>
<p>А чтобы пакетом было приятно пользоваться, рекомендую выполнить ещё несколько шагов.</p>
<h2 id="а-ридми-иченжлог">А. Ридми и ченжлог</h2>
<p>Никто не любит писать документацию. Но без неё вряд ли люди захотят устанавливать ваш пакет, так что добавим <code>README.md</code> и <code>CHANGELOG.md</code>.</p>
<ul>
<li><a href="https://github.com/nalgeon/podsearch-py/blob/main/README.md">README.md</a></li>
<li><a href="https://github.com/nalgeon/podsearch-py/blob/main/CHANGELOG.md">CHANGELOG.md</a></li>
</ul>
<p>Заодно в <code>pyproject.toml</code> настроим, чтобы ридми показывался на странице пакета в PyPi:</p>
<pre tabindex="0"><code>description-file = &quot;README.md&quot;
</code></pre><p>И укажем минимальную версию питона, с которой работает утилита:</p>
<pre tabindex="0"><code>requires-python = &quot;&gt;=3.7&quot;
</code></pre><p>Обновим версию в <code>__init__.py</code> и опубликуем пакет через <code>flit publish</code>. Красота:</p>
<figure>
  <img src="packaging-pypi.jpg">
  <figcaption class="text-centered">Страница пакета на PyPi</figcaption>
</figure>
<h2 id="б-линтеры-итесты">Б. Линтеры и тесты</h2>
<p>Позаботимся о форматировании (<code>black</code>), тестовом покрытии (<code>coverage</code>), качестве кода (<code>flake8</code>, <code>pylint</code>, <code>mccabe</code>) и статическом анализе (<code>mypy</code>). Будем выполнять это всё через <code>tox</code>.</p>
<pre tabindex="0"><code>$ pip install black coverage flake8 mccabe mypy pylint pytest tox
</code></pre><p>Создадим конфигурацию для <code>tox</code> в <code>tox.ini</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ini" data-lang="ini"><span style="color:#a90d91">[tox]</span>
<span style="color:#836c28">isolated_build</span> <span style="color:#000">=</span> <span style="color:#c41a16">True</span>
<span style="color:#836c28">envlist</span> <span style="color:#000">=</span> <span style="color:#c41a16">py37,py38,py39</span>

<span style="color:#a90d91">[testenv]</span>
<span style="color:#836c28">deps</span> <span style="color:#000">=</span><span style="color:#c41a16">
</span><span style="color:#c41a16">    black
</span><span style="color:#c41a16">    coverage
</span><span style="color:#c41a16">    flake8
</span><span style="color:#c41a16">    mccabe
</span><span style="color:#c41a16">    mypy
</span><span style="color:#c41a16">    pylint
</span><span style="color:#c41a16">    pytest</span>
<span style="color:#836c28">commands</span> <span style="color:#000">=</span><span style="color:#c41a16">
</span><span style="color:#c41a16">    black podsearch
</span><span style="color:#c41a16">    flake8 podsearch
</span><span style="color:#c41a16">    pylint podsearch
</span><span style="color:#c41a16">    mypy podsearch
</span><span style="color:#c41a16">    coverage erase
</span><span style="color:#c41a16">    coverage run --include=podsearch/* -m pytest -ra
</span><span style="color:#c41a16">    coverage report -m</span>
</code></pre></div><p><a href="https://github.com/nalgeon/podsearch-py/blob/main/tox.ini">tox.ini</a></p>
<p>И выполним все проверки:</p>
<pre tabindex="0"><code>$ tox -e py39
...
py39 run-test: commands[0] | black podsearch
All done! ✨ 🍰 ✨
...
py39 run-test: commands[2] | pylint podsearch
Your code has been rated at 10.00/10 (previous run: 10.00/10, +0.00)
...
py39 run-test: commands[6] | coverage report -m
TOTAL 100%
...
py39: commands succeeded
congratulations :)
</code></pre><p>Красота! Линтеры довольны, тесты прошли, покрытие 100%.</p>
<h2 id="в-сборка-воблаке">В. Сборка в облаке</h2>
<p>Уважающие себя opensource-проекты прогоняют тесты в «облаке» после каждого коммита. К тому же это позволяет развесить красивые бирки в ридми ツ</p>
<p>Будем собирать через <a href="https://github.com/features/actions">GitHub Actions</a>, мерить покрытие через <a href="https://about.codecov.io/">Codecov</a>, а качество — через <a href="https://codeclimate.com/">Code Climate</a>.</p>
<p>В Codecov и Code Climate придётся зарегистрироваться (работает вход через гитахаб) и включить в настройках гитхаб-репозиторий, в котором живёт код библиотеки.</p>
<p>После этого добавим конфиг для GitHub Actions в <code>.github/workflows/build.yml</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#000">jobs</span>:
    <span style="color:#000">build</span>:
        <span style="color:#000">runs-on</span>: <span style="color:#1c01ce">ubuntu-latest</span>
        <span style="color:#000">strategy</span>:
            <span style="color:#000">matrix</span>:
                <span style="color:#000">python-version</span>: [<span style="color:#1c01ce">3.7</span>, <span style="color:#1c01ce">3.8</span>, <span style="color:#1c01ce">3.9</span>]
        
        <span style="color:#000">env</span>:
            <span style="color:#000">USING_COVERAGE</span>: <span style="color:#c41a16">&#34;3.9&#34;</span>

        <span style="color:#000">steps</span>:
            - <span style="color:#000">name</span>: <span style="color:#1c01ce">Checkout sources</span>
              <span style="color:#000">uses</span>: <span style="color:#1c01ce">actions/checkout@v2</span>

            - <span style="color:#000">name</span>: <span style="color:#1c01ce">Set up Python</span>
              <span style="color:#000">uses</span>: <span style="color:#1c01ce">actions/setup-python@v2</span>
              <span style="color:#000">with</span>:
                  <span style="color:#000">python-version</span>: <span style="color:#1c01ce">${{ matrix.python-version }}</span>

            - <span style="color:#000">name</span>: <span style="color:#1c01ce">Install dependencies</span>
              <span style="color:#000">run</span>: |<span style="color:#c41a16">
</span><span style="color:#c41a16">                  python -m pip install --upgrade pip
</span><span style="color:#c41a16">                  python -m pip install black coverage flake8 flit mccabe mypy pylint pytest tox tox-gh-actions</span>                  

            - <span style="color:#000">name</span>: <span style="color:#1c01ce">Run tox</span>
              <span style="color:#000">run</span>: |<span style="color:#c41a16">
</span><span style="color:#c41a16">                  </span>                  <span style="color:#1c01ce">python -m tox</span>

            - <span style="color:#000">name</span>: <span style="color:#1c01ce">Upload coverage to Codecov</span>
              <span style="color:#000">uses</span>: <span style="color:#1c01ce">codecov/codecov-action@v1</span>
              <span style="color:#000">if</span>: <span style="color:#1c01ce">contains(env.USING_COVERAGE, matrix.python-version)</span>
              <span style="color:#000">with</span>:
                  <span style="color:#000">fail_ci_if_error</span>: <span style="color:#a90d91">true</span>

</code></pre></div><p><a href="https://github.com/nalgeon/podsearch-py/blob/main/.github/workflows/build.yml">build.yml</a></p>
<p>Тесты на гитхабе гоняются как и локально — через <code>tox</code>. Пакет <code>tox-gh-actions</code> и настройка <code>USING_COVERAGE</code> запускают <code>tox</code> на той версии Python, которая указана в матрице сборки (<code>strategy.matrix</code>).</p>
<p>Последний шаг отправляет тестовое покрытие в Codecov. А для Code Climate отдельный шаг не нужен — он сам отслеживает изменения на гитхабе.</p>
<p>Теперь коммитим, пушим, и через минуту наслаждаемся результатом. А чтобы насладились все, добавим бирки в <code>README.md</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-markdown" data-lang="markdown">[![PyPI Version][pypi-image]][pypi-url]
[![Build Status][build-image]][build-url]
[![Code Coverage][coverage-image]][coverage-url]
[![Code Quality][quality-image]][quality-url]

...

<span style="color:#177500">&lt;!-- Badges --&gt;</span>

[pypi-image]: https://img.shields.io/pypi/v/podsearch
[pypi-url]: https://pypi.org/project/podsearch/
[build-image]: https://github.com/nalgeon/podsearch-py/actions/workflows/build.yml/badge.svg
[build-url]: https://github.com/nalgeon/podsearch-py/actions/workflows/build.yml
[coverage-image]: https://codecov.io/gh/nalgeon/podsearch-py/branch/main/graph/badge.svg
[coverage-url]: https://codecov.io/gh/nalgeon/podsearch-py
[quality-image]: https://api.codeclimate.com/v1/badges/3130fa0ba3b7993fbf0a/maintainability
[quality-url]: https://codeclimate.com/github/nalgeon/podsearch-py
</code></pre></div><p>Смотрите, как хорошо:</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Бирки в описании проекта" src="packaging-badges.png" class="img-bordered">
  <figcaption>С бирками на ридми приятно посмотреть</figcaption>
</figure>
</div>
</div>
<h2 id="г-автоматизация-задач">Г. Автоматизация задач</h2>
<p>Всё хорошо, но неудобно во время разработки гонять линтеры и мерить покрытие. Постоянно запускать <code>tox</code> слишком долго, а писать каждый раз в консоли <code>pylint</code>, <code>coverage</code>, и тому подобное — утомительно.</p>
<p>Сделаем задачи для частых действий. В этом нам поможет <a href="/makefile/">мейкфайл</a>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Makefile" data-lang="Makefile"><span style="color:#000">.DEFAULT_GOAL</span> <span style="color:#000">:=</span> <span style="color:#a90d91">help</span>
<span style="color:#000">.PHONY</span><span style="color:#000">:</span> <span style="color:#000">coverage</span> <span style="color:#000">deps</span> <span style="color:#000">help</span> <span style="color:#000">lint</span> <span style="color:#000">push</span> <span style="color:#000">test</span>

<span style="color:#000">coverage</span><span style="color:#000">:</span>  <span style="color:#177500">## Run tests with coverage
</span><span style="color:#177500"></span>	coverage erase
	coverage run --include<span style="color:#000">=</span>podsearch/* -m pytest -ra
	coverage report -m

<span style="color:#000">deps</span><span style="color:#000">:</span>  <span style="color:#177500">## Install dependencies
</span><span style="color:#177500"></span>	pip install black coverage flake8 mccabe mypy pylint pytest tox

<span style="color:#000">lint</span><span style="color:#000">:</span>  <span style="color:#177500">## Lint and static-check
</span><span style="color:#177500"></span>	flake8 podsearch
	pylint podsearch
	mypy podsearch

<span style="color:#000">push</span><span style="color:#000">:</span>  <span style="color:#177500">## Push code with tags
</span><span style="color:#177500"></span>	git push <span style="color:#000">&amp;&amp;</span> git push --tags

<span style="color:#000">test</span><span style="color:#000">:</span>  <span style="color:#177500">## Run tests
</span><span style="color:#177500"></span>	pytest -ra
</code></pre></div><p><a href="https://github.com/nalgeon/podsearch-py/blob/main/Makefile">Makefile</a></p>
<p>Список наших задач:</p>
<pre tabindex="0"><code>$ make help
Usage: make [task]

task                 help
------               ----
coverage             Run tests with coverage
deps                 Install dependencies
lint                 Lint and static-check
push                 Push code with tags
test                 Run tests
help                 Show help message
</code></pre><p>Шаги в <code>build.yml</code> заменим на вызов <code>make</code>, чтобы не дублировать код:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#000">name</span>: <span style="color:#1c01ce">Install dependencies</span>
  <span style="color:#000">run</span>: |<span style="color:#c41a16">
</span><span style="color:#c41a16">      </span>      <span style="color:#1c01ce">make deps</span>

- <span style="color:#000">name</span>: <span style="color:#1c01ce">Run tox</span>
  <span style="color:#000">run</span>: |<span style="color:#c41a16">
</span><span style="color:#c41a16">      </span>      <span style="color:#1c01ce">make tox</span>
</code></pre></div><h2 id="д-публикация-пакета">Д. Публикация пакета</h2>
<p>Чтобы не публиковать пакет вручную через вызов <code>flit publish</code>, поручим это Гитхабу. Создадим отдельный сценарий:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#000">name</span>: <span style="color:#1c01ce">publish</span>

<span style="color:#000">on</span>:
    <span style="color:#000">release</span>:
        <span style="color:#000">types</span>: [<span style="color:#1c01ce">created]</span>

<span style="color:#000">jobs</span>:
    <span style="color:#000">publish</span>:
        <span style="color:#000">runs-on</span>: <span style="color:#1c01ce">ubuntu-latest</span>
        <span style="color:#000">steps</span>:
            - <span style="color:#000">name</span>: <span style="color:#1c01ce">Checkout sources</span>
              <span style="color:#000">uses</span>: <span style="color:#1c01ce">actions/checkout@v2</span>

            - <span style="color:#000">name</span>: <span style="color:#1c01ce">Set up Python</span>
              <span style="color:#000">uses</span>: <span style="color:#1c01ce">actions/setup-python@v2</span>
              <span style="color:#000">with</span>:
                  <span style="color:#000">python-version</span>: <span style="color:#c41a16">&#34;3.9&#34;</span>

            - <span style="color:#000">name</span>: <span style="color:#1c01ce">Install dependencies</span>
              <span style="color:#000">run</span>: |<span style="color:#c41a16">
</span><span style="color:#c41a16">                  </span>                  <span style="color:#1c01ce">make deps</span>

            - <span style="color:#000">name</span>: <span style="color:#1c01ce">Publish to PyPi</span>
              <span style="color:#000">env</span>:
                  <span style="color:#000">FLIT_USERNAME</span>: <span style="color:#1c01ce">${{ secrets.PYPI_USERNAME }}</span>
                  <span style="color:#000">FLIT_PASSWORD</span>: <span style="color:#1c01ce">${{ secrets.PYPI_PASSWORD }}</span>
              <span style="color:#000">run</span>: |<span style="color:#c41a16">
</span><span style="color:#c41a16">                  </span>                  <span style="color:#1c01ce">make publish</span>

</code></pre></div><p><a href="https://github.com/nalgeon/podsearch-py/blob/main/.github/workflows/publish.yml">publish.yml</a></p>
<p><code>PYPI_USERNAME</code> и <code>PYPI_PASSWORD</code> задаются в настройках репозитория (Settings &gt; Secrets &gt; New repository secret). В качестве значений можно указать логин и пароль на PyPi, а еще лучше — <a href="https://pypi.org/manage/account/token/">API-ключ</a>.</p>
<p>Теперь гитхаб автоматически опубликует пакет, как только вы выпустите новый релиз. Удобно!</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Ваш идеальный пакет готов! У него есть всё: чистый код, понятная документация, тесты и автосборка. Самое время рассказать коллегам и единомышленникам.</p>
<p>Все настройки:</p>
<ul>
<li><a href="https://github.com/nalgeon/podsearch-py/blob/main/pyproject.toml">pyproject.toml</a></li>
<li><a href="https://github.com/nalgeon/podsearch-py/blob/main/tox.ini">tox.ini</a></li>
<li><a href="https://github.com/nalgeon/podsearch-py/blob/main/Makefile">Makefile</a></li>
<li><a href="https://github.com/nalgeon/podsearch-py/blob/main/.github/workflows/build.yml">build.yml</a></li>
<li><a href="https://github.com/nalgeon/podsearch-py/blob/main/.github/workflows/publish.yml">publish.yml</a></li>
</ul>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="tg://resolve?domain=ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Что делает интерфейс простым</title>
      <link>https://antonz.ru/simple-ui/</link>
      <pubDate>Tue, 12 May 2020 08:46:38 +0000</pubDate>
      
      <guid>https://antonz.ru/simple-ui/</guid>
      <description>Как залезть человеку в голову и не обмануть его ожиданий.</description>
      <content:encoded><![CDATA[<p><em>Это вторая часть цикла статей о проектировании интерфейсов для <span class="nowrap">не-дизайнеров</span>. Предыдущая: <a href="/laws/">Законы робототехники в интерфейсе</a></em></p>
<p>Дизайнеры, программисты, маркетологи — все, кто причастен к разработке продукта — считают, что пользователь работает с программой сосредоточенно, вдумчиво и аккуратно. Досадное заблуждение.</p>
<p>На самом деле, за внимание человека конкурирует целая куча отвлекалок:</p>
<ul>
<li>Окружение: коллеги на работе, дети дома, машины и пешеходы на улице.</li>
<li>Насущные дела: отчёт должен быть готов через 10 минут, от сковороды уже воняет гарью, мерзко пиликает напоминалка о встрече.</li>
<li>Программы-конкуренты: пуш-оповещения от мессенджеров и других приложений.</li>
</ul>
<p>Хорошо, если в этом аду человек уделит 30% внимания вашей программе. Но не надолго — всё равно будет постоянно отвлекаться.</p>
<p>Даже в таких неприятных условиях программа может оставаться удобной. Для этого она должна:</p>
<ul>
<li>быть простой,</li>
<li>не нагружать мозг,</li>
<li>прощать ошибки.</li>
</ul>
<p>Про «не нагружать мозг» и «прощать ошибки» поговорим в другой раз, а пока остановимся на «быть простой».</p>
<h2 id="модель-программы">Модель программы</h2>
<p>Ещё до того, как пользователь в первый раз запустил программу, у него в голове уже сложилось представление, как она работает.</p>
<blockquote>
<p>Так, это заказ такси. Значит, я выбираю откуда-куда и тариф, приезжает машина, везёт по адресу, деньги списывает с карты.</p>
</blockquote>
<blockquote>
<p>Так, это CRM. Значит, там я веду сделки и историю общения по каждому клиенту, а она мне строит воронку продаж и всякие разные отчёты.</p>
</blockquote>
<blockquote>
<p>Так, это интернет-магазин. Сейчас я найду хорошие беспроводные наушники, закажу, а завтра-послезавтра их привезёт курьер.</p>
</blockquote>
<p>Это представление о том, как всё устроено — модель программы в голове человека. Сначала человек берёт её из предыдущего опыта общения с аналогичными программами, затем, по мере взаимодействия с вашим софтом — уточняет и дополняет.</p>
<p>Пользовательская модель программы — это то, как человек воспринимает её логику и устройство. Она может не совпадать (и наверняка не совпадает) с тем, как программу воспринимают:</p>
<ul>
<li>продакт-менеджер,</li>
<li>дизайнер,</li>
<li>программист,</li>
<li>тестировщик.</li>
</ul>
<p>У этих ребят модели намного более полные, целостные и логичные. Но их невозможно вложить человеку в голову. Поэтому самая главная — пользовательская модель.</p>
<figure>
  <img alt="Модель пользователя и модель дизайнера" src="simple-ui-01.jpg">
  <figcaption>Пользовательская модель проще, но фокусируется на главном</figcaption>
</figure>
<p>Это плохая новость. Хорошая новость — пользовательскую модель тоже можно спроектировать. Для этого достаточно представить, как ваш софт будет воспринимать обычный человек, не питающий к программе особо тёплых чувств, зато обременённый нехваткой внимания и времени.</p>
<p>Ключевое свойство хорошей пользовательской модели — простота. Если модель у вас с кучей шагов, нюансов, возможностей, с навороченной логикой взаимодействия, с необходимыми пояснениями — это плохая модель. Если вы рассказали о программе трём посторонним людям, спросили «как это по-твоему работает?» и ни один не угадал — это плохая модель. Если для описания модели приходится рисовать блок-схему — это очень, очень плохая модель.</p>
<h2 id="здоровая-модель-имодель-курильщика">Здоровая модель и модель курильщика</h2>
<p>Вот модель, которая осталась у меня от работы с довольно известным сервисом:</p>
<div class="boxed">
<strong>♞ Сервис № 1 по вызову мастера для мелкого бытового ремонта</strong>
<p>Я оформляю заявку: пишу, что сломалось, указываю стоимость, адрес и телефон.</p>
<p>Выбираю, буду ли подбирать мастера самостоятельно или с помощью администратора.</p>
<p>Если я выбрал «самостоятельно», сервис подбирает мастеров, которые потенциально подходят для этой работы. Не знаю, почему это называется «самостоятельно», если подбирает сервис, а не я.</p>
<p>Если я выбрал «с помощью администратора», то мастеров подбирает администратор. Но это не точно, я не проверял.</p>
<p>Даже при «самостоятельном» варианте некоторых мастеров всё равно почему-то подбирает администратор. Автоматически и вручную подобранные мастера показываются по-разному, потому что чёрт его знает почему.</p>
<p>...</p>
<p>Если мастер онлайн, он откликается и присылает мне встречную заявку (такое ощущение, что я государственная корпорация и провожу тендер на много миллионов рублей). Я принимаю заявку и назначаю мастера на заказ.</p>
<p>Если у мастера есть вопросы, он задаёт их в чате. Чат с каждым мастером отдельный, и «чужие» чаты мастерам не видны. Если вопросы повторяются, я копирую ответы из чата в чат.</p>
<p>Ещё иногда мастер может быть оффлайн, но это ничего. Я всё равно могу отправить ему приглашение. Мастер получит его по СМС и откликнется. Но это не точно, я не проверял.</p>
<p>… (пропустим остаток для краткости)</p>
</div>
<p>Если бы меня заранее спросили «как работает сервис вызова мастера по ремонту», я бы <em>никогда</em> не предложил такую модель. Я бы ответил примерно так:</p>
<div class="boxed">
<strong>♞ Сервис № 2 по вызову мастера для мелкого бытового ремонта</strong>
<p>Я оформляю заявку: пишу, что сломалось, указываю стоимость, адрес и телефон.</p>
<p>Мастера видят мою заявку и откликаются на неё.</p>
<p>Я вижу отклики. Выбираю подходящего мастера по цене, рейтингу, фотографии и общей адекватности (за адекватностью загляну в профиль).</p>
<p>Если мастер задаёт уточняющие вопросы, я отвечаю. Ответы видят все, чтобы мне не повторяться.</p>
</div>
<p>Где во второй модели шаги вроде «выбрать самому или с помощью администратора», «мастер отправляет встречную заявку на мою заявку» и разделение между «онлайн» и «офлайн» мастерами? Их нет. Наверняка, для разработчиков они выглядят логично и обоснованно — но не для нормального человека. Я не буду больше пользоваться сервисом № 1 — он сделал мою жизнь сложнее, а не проще.</p></p>
<figure>
  <img alt="Дизайнер говорит на языке пользователя" src="simple-ui-02.jpg" class="img-bordered">
  <figcaption>Хорошо, когда дизайнер описывает продукт в терминах пользователя</figcaption>
</figure>
<h2 id="внутренняя-сложность">Внутренняя сложность</h2>
<p>Простота ментальной модели не означает, что логика программы должна быть примитивной.</p>
<ul>
<li>Если бы сервис № 1 спрятал все свои нюансы, показал подходящим мастерам мою заявку, а мне — только тех, кто на неё откликнулся — было бы вполне ОК.</li>
<li>Если бы внутри у него работала сложнейшая система искусственного интеллекта, которая с вероятностью 99,999% нашла лучшего в мире мастера под мой заказ, а я увидел бы только конечный результат — ОК.</li>
<li>Если бы то же самое делал не искусственный интеллект, а 20 тысяч сотрудников по всей стране — ОК, какая мне разница.</li>
</ul>
<p>Софт может быть сколь угодно навороченным, пока его сложность не видна человеку.</p>
<h2 id="слон-кусочками">Слон кусочками</h2>
<p>Даже если модель получилась сложная, дизайнер может подать её как простую. В этом помогает принцип дозирования информации: разбить задачу на независимые шаги и подавать пользователю отдельными кусочками.</p>
<p>Например, «Дадата» обрабатывает файл с адресами и телефонами, исправляя ошибки и восстанавливая недостающую информацию. Идеальная модель выглядела бы так:</p>
<blockquote>
<p>бросил на страницу файл → получил готовый с исправленными данными</p>
</blockquote>
<p>К сожалению, из-за скучных технических нюансов прямо так сделать не получилось. Поэтому мы разбили задачу «обработать файл» на шаги:</p>
<ol>
<li>Загрузить файл.</li>
<li>Убедиться, что «Дадата» правильно угадала, в каких столбцах какие данные лежат.</li>
<li>На 100 записях убедиться, что результат устраивает.</li>
<li>Оплатить, если не хватает денег на обработку.</li>
<li>Дождаться результата (с этого шага уже можно уйти).</li>
<li>Скачать результат.</li>
</ol>
<figure>
  <img alt="Обработка в 5 шагов" src="simple-ui-03.jpg">
  <figcaption>Шаги скрывают сложность процесса</figcaption>
</figure>
<p>Если вывалить на пользователя шаги 1–4 одним махом, вышло бы что-то монструозное. А так в каждый момент времени человек сосредоточен на конкретном шаге. Шаги по отдельности несложные, но все вместе решают непростую задачу.</p>
<h2 id="ментальная-переподготовка">Ментальная переподготовка</h2>
<p>Человек подходит к новой программе с готовой ментальной моделью. Обычно, пытаться его переобучить — плохая идея. Проще подстроиться, а не бороться с устоявшимися шаблонами поведения.</p>
<p>Но бывает, что пользователь привык к плохому, а вы придумали что-то такое, что прямо ах:</p>
<ul>
<li>Раньше привычка жать Ctrl+S была у каждого опытного пользователя. Потом Гугл-документы многих отучили.</li>
<li>Раньше уважающий себя бухгалтер регулярно ездил в налоговую с дискеткой. Теперь пользуется «Контуром», жмёт на кнопку и в ус не дует.</li>
<li>Раньше интернет-магазины требовали адрес из шести полей, и обязательно почтовый индекс. Теперь многие сообразили, что можно не напрягать человека, а мучить «Дадату» (ей всё равно, она железная).</li>
</ul>
<p>Ради стоящего дела можно и переподготовкой пользователей заняться. Но если вы чаще сталкиваетесь с реакцией «ох, что вы тут напридумывали», чем «ого! а так можно было?!» — лучше не надо.</p>
<h2 id="соответствие-ожиданиям">Соответствие ожиданиям</h2>
<p>Если программа ведёт себя так, как ожидает человек, то он воспринимает интерфейс как удобный и «интуитивный».</p>
<p>Ожидания человека формируются из:</p>
<ul>
<li>платформы,</li>
<li>среды и навыков,</li>
<li>целей.</li>
</ul>
<h3 id="платформа">Платформа</h3>
<p>Базовое ожидание пользователя — программа выглядит и ведёт себя, как принято на «родной» платформе: Windows, macOS, iOS, Android или веб. Правила платформы лучше соблюдать — это делает интерфейс привычным для пользователя и не заставляет его напрягать голову без необходимости.</p>
<p>Для десктопных и мобильных ОС написаны гайдлайны<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. С вебом сложнее — общих руководств нет. Лично мне нравятся «Контур.Гайды<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>». Если вам они не по душе, можно найти другие или подсмотреть интерфейсные приёмы у известных веб-сервисов.</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Контур.Гайды" src="simple-ui-04.png">
  <figcaption>Хорошие гайдлайны описывают внешний вид и логику поведения интерфейса</figcaption>
</figure>
</div>
</div>
<h3 id="среда-инавыки">Среда и навыки</h3>
<p>Помимо платформы, ожидания зависят от среды и навыков. Среда — это внешние условия, в которых находится человек: идёт по улице с телефоном, сидит в кабинете за столом, работает в шумном цеху. Навыки — это общая «компьютерная грамотность», понимание предметной области, опыт общения с аналогичным софтом.</p>
<p>Среду и навыки проще всего понять, наблюдая за пользователями. Это отдельная большая тема, которую мы рассматривать не будем.</p>
<h3 id="цели">Цели</h3>
<p>На уровне конкретного сценария ожидания зависят от целей пользователя:</p>
<blockquote>
<p>Приложение: «тренер по физподготовке»<br>
Цель: похудеть к лету без особых усилий<br>
Сценарий: ежедневная серия физических упражнений</p>
<p>Ожидания:</p>
<ul>
    <li>никакой теоретической подготовки,</li>
    <li>никаких настроек,</li>
    <li>очень просто в использовании, «одна кнопка»,</li>
    <li>видно, как с каждым разом я всё ближе к цели.</li>
</ul>
</blockquote>
<p>Цели и сценарии лучше прописать до начала проектирования интерфейса. Как это сделать — отдельная тема. Алан Купер посвятил ей целую книгу<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<h2 id="запомнить">Запомнить</h2>
<p>У человека в голове есть представление о том, как устроена ваша программа — ментальная модель.</p>
<p>«Стихийная» модель не получится хорошей, поэтому лучше спроектируйте её.</p>
<p>Хорошая модель — простая. В создании простых моделей помогают приёмы «сложность под капот» и «слон кусочками».</p>
<p>Переобучайте пользователя, только если он будет в восторге, когда освоит новый способ.</p>
<p>Человек воспринимает интерфейс как простой и понятный, если он соответствует ожиданиям. Чтобы не нарушить ожидания, как минимум соблюдайте правила платформы, на которой работает программа.</p>
<p>Пропишите цели и сценарии работы пользователя с программой — это поможет выявить остальные ожидания.</p>
<p>Следующая статья цикла:</p>
<p class="big"><a href="/user-actions/">Как человек решает задачи в интерфейсе</a></p>
<p><em>Спасибо <a href="http://cat-in-cap.ru">Ольге Коноваловой</a> за помощь в подготовке статьи.</em></p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Специально для <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсов без шелухи</a>»</span></em></p></div>
</div>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Ссылки по тексту:</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Гайдлайны для разных платформ: <a href="https://developer.apple.com/design/human-interface-guidelines/">Apple</a>, <a href="https://material.io/design">Google</a>, <a href="https://www.microsoft.com/design/fluent/">Microsoft</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="https://guides.kontur.ru/">Контур.Гайды</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>«<a href="/asylum-2/">Психбольница в руках пациентов</a>»&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Автоматизация задач в Python-проекте</title>
      <link>https://antonz.ru/makefile/</link>
      <pubDate>Tue, 05 May 2020 15:16:48 +0000</pubDate>
      
      <guid>https://antonz.ru/makefile/</guid>
      <description>Через мейкфайлы (да, они хороши).</description>
      <content:encoded><![CDATA[<p>Когда разрабатываешь библиотеку или приложение, всегда найдутся задачи, которые выполняешь изо дня в день:</p>
<ul>
<li>проверить код линтерами,</li>
<li>прогнать тесты с замером покрытия,</li>
<li>запустить в докере,</li>
<li>&hellip;</li>
</ul>
<p>JS-разработчикам повезло (ха): у них в <code>package.json</code> есть специальная секция <code>scripts</code> для таких штук:</p>
<pre tabindex="0"><code>{
    ...
    &quot;scripts&quot;: {
        &quot;format&quot;: &quot;prettier --write \&quot;src/**/*.ts\&quot;&quot;,
        &quot;lint&quot;: &quot;tslint -p tsconfig.json&quot;,
        &quot;test&quot;: &quot;jest --coverage --config jestconfig.json&quot;,
    },
    ...
}
</code></pre><p>Для Питона ничего подобного не предусмотрено. Можно, конечно, сделать по sh-скрипту на каждую задачу, но это замусоривает каталог проекта, да и хотелось бы все такие задачи держать вместе. А ставить отдельный таск-раннер или использовать встроенный в IDE совсем уж странно.</p>
<p>Хорошая новость: на линуксе и макоси уже есть отличное средство автоматизации задач для любых проектов — мейкфайлы (<code>Makefile</code>).</p>
<h2 id="makefile-для-любых-задач">Makefile для любых задач</h2>
<p>Возможно, вы, как и я, думали, что мейкфайлы — странная штука из 70-х годов прошлого века, которая нужна для сборки кода на <code>C</code>. Всё так ツ Но они прекрасно подходят для автоматизации вообще любых задач.</p>
<p>Вот как это может выглядеть в питонячем проекте. Создаём файл с названием <code>Makefile</code>:</p>
<pre tabindex="0"><code>coverage:  ## Run tests with coverage
	coverage erase
	coverage run --include=dadata/* -m pytest -ra
	coverage report -m

deps:  ## Install dependencies
	pip install black coverage flake8 mypy pylint pytest tox

lint:  ## Lint and static-check
	flake8 dadata
	pylint dadata
	mypy dadata

push:  ## Push code with tags
	git push &amp;&amp; git push --tags

test:  ## Run tests
	pytest -ra
</code></pre><p>И запускаем, например, линтер с тестами:</p>
<pre tabindex="0"><code>$ make lint coverage

flake8 dadata
pylint dadata
...
mypy dadata
...
coverage erase
coverage run —include=dadata/* -m pytest -ra
...
coverage report -m
Name Stmts Miss Cover Missing
--------------------------------------------------
dadata/__init__.py 3 0 100%
dadata/client.py 56 0 100%
--------------------------------------------------
TOTAL 59 0 100%
</code></pre><h2 id="возможности">Возможности</h2>
<h3 id="цепочки-действий">Цепочки действий</h3>
<p>Задача может включать несколько действий, как <code>lint</code> в примере выше:</p>
<pre tabindex="0"><code>lint:
	flake8 dadata
	pylint dadata
	mypy dadata
</code></pre><p>Каждое действие выполняется в отдельном подпроцессе, так что если нужно выполнить связанную цепочку действий (например, <code>cd</code> и <code>git pull</code>) — объединяем их через <code>&amp;&amp;</code>:</p>
<pre tabindex="0"><code>schemas:
	cd iuliia/schemas &amp;&amp; git pull &amp;&amp; cd ../..
</code></pre><h3 id="зависимости-между-задачами">Зависимости между задачами</h3>
<p>Допустим, задача <code>test</code> должна обязательно сначала выполнять линтинг, а потом уже запускать тесты. Указываем <code>lint</code> как зависимость для <code>test</code>, и готово:</p>
<pre tabindex="0"><code>test: lint
	pytest -ra
</code></pre><p>Можно указать несколько зависимостей — через пробел.</p>
<p>Либо задачи могут явно вызывать друг друга:</p>
<pre tabindex="0"><code>lint:
	flake8 dadata
	pylint dadata
	mypy dadata

test:
	pytest -ra

prepare:
	make lint
	make test
</code></pre><h3 id="параметры-задач">Параметры задач</h3>
<p>Допустим, задача <code>serve</code> запускает статический сайт, а IP и порт хочется сделать настройкой. Нет проблем:</p>
<pre tabindex="0"><code>serve:
	python -m http.server dist --bind $(bind) $(port)
</code></pre><p>Запускаем с параметрами:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ make serve <span style="color:#000">bind</span><span style="color:#000">=</span>localhost <span style="color:#000">port</span><span style="color:#000">=</span><span style="color:#1c01ce">3000</span>
</code></pre></div><p>Можно указать значения по умолчанию:</p>
<pre tabindex="0"><code>bind ?= localhost
port ?= 3000
serve:
	python -m http.server dist --bind $(bind) $(port)
</code></pre><p>Теперь при вызове <code>make</code> указывать их не обязательно:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ make serve <span style="color:#000">bind</span><span style="color:#000">=</span>192.168.0.1
$ make serve <span style="color:#000">port</span><span style="color:#000">=</span><span style="color:#1c01ce">8000</span>
$ make serve
</code></pre></div><h3 id="и-ещё-много-чего">И ещё много чего</h3>
<p>Если описанных возможностей недостаточно, смотрите замечательные руководства:</p>
<ul>
<li><a href="https://makefiletutorial.com">Learn Makefiles with the tastiest examples</a></li>
<li><a href="https://swcarpentry.github.io/make-novice/reference.html">Automation and Make</a>.</li>
</ul>
<h2 id="вдикой-природе">В дикой природе</h2>
<p>Пара примеров мейкфайлов из моих проектов:</p>
<ul>
<li><a href="https://github.com/nalgeon/dadata-py/blob/master/Makefile">dadata</a></li>
<li><a href="https://github.com/nalgeon/iuliia-py/blob/master/Makefile">iuliia</a></li>
</ul>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Мейкфайлы отлично подходят для автоматизации рутинных задач вне зависимости от языка, на котором вы пишете. Используйте их!</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Юлия → Iuliia. Всё о транслитерации</title>
      <link>https://antonz.ru/iuliia/</link>
      <pubDate>Wed, 29 Apr 2020 08:15:40 +0000</pubDate>
      
      <guid>https://antonz.ru/iuliia/</guid>
      <description>Зачем человечеству 19 стандартов и что с этим делать. В Википедии такого не найдёте.</description>
      <content:encoded><![CDATA[<p>Транслитерация — это запись кириллических слов латиницей (<code>Анна → Anna</code>, <code>Самара → Samara</code>). Её используют в загранпаспортах, водительских удостоверениях, трансграничной доставке, библиотечных каталогах и множестве других международных процессов.</p>
<p>Так вышло, что я недавно окунулся в эту тему, а в Википедии она раскрыта слабо. Поэтому расскажу, что к чему (спойлер — если вы думаете, что с транслитерацией всё плохо, то на самом деле всё ещё хуже).</p>
<h2 id="кто-виноват">Кто виноват</h2>
<p>Транслит — это хрестоматийная ситуация «у нас 14 плохих стандартов, давайте придумаем ещё один». Весь 20 век солидные, уважаемые люди придумывали всё новые и новые стандарты транслитерации.</p>
<figure>
  <img alt="Как приумножаются стандарты" src="iuliia-standards.png">
  <figcaption>Как приумножаются стандарты // <a href="https://xkcd.com/927/">xkcd</a></figcaption>
</figure>
<p>Получалось у них очень, очень плохо. Например, в загранпаспорте пишут <code>Юлия → Iuliia</code> не потому, что МИД хочет сделать вам больно, а потому что это международный стандарт ICAO Doc 9303<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> — Machine Readable Travel Documents.</p>
<p>Такое ощущение, что все стандарты писались людьми, которые ненавидят русский язык. Если для англо-американского творчества это объяснимо, то что заставило советских учёных превратить <code>Лёгкий</code> в <code>Ljogkijj</code> (ГОСТ 16876-71<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>) — решительно непонятно.</p>
<blockquote class="big">
<p>Zato naši kosmičeskie korabli borozdili prostory vselennoj</p>
</blockquote>
<p>В 21 веке человечество оказалось с двумя наиболее распространёнными стандартами: ICO Doc 9303 (<code>Юлия → Iuliia</code>) и ISO 9:1995 (<code>Юлия → Ûliâ</code>), он же отечественный ГОСТ 7.79-2000<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. Достойный результат для столетних усилий, ничего не скажешь.</p>
<p>Посмотрев на эту «красоту», ребята из Википедии взялись за голову и сделали нормальную схему транслитерации<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>, благодаря которой у несчастной <code>Юлии</code> остаётся слабый шанс быть <code>Yuliya</code>. Международные и отечественные институты эту работу проигнорировали, к сожалению.</p>
<blockquote class="big">
<p>Yuliya, syesh yeshchyo etikh myagkikh frantsuzskikh bulok iz Yoshkar-Oly, da vypey altayskogo chayu</p>
</blockquote>
<p>Конечно, нельзя было делать совсем уж хорошо (а то кто тогда станет придумывать новые стандарты). Поэтому у Википедии <code>ещё</code> превращается в <code>yeshchyo</code>, my ass. Схема хорошо передаёт фонетику, а вот выглядит иногда не очень — оцените <code>E → YE</code>, <code>Щ → SHCH</code> и <code>Ё → YO</code> в этом примере.</p>
<p>Не остался в стороне и Яндекс. У него две схемы — отдельно для ФИО<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>, отдельно для адресов<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>. Здесь наконец-то сделали <code>Щ → SCH</code>. Но <code>Юрий → Yurii</code>, а <code>Усолье → Usole</code>, что понравится не всем. Не забываем оставлять пространство для новых стандартов!</p>
<p>И Студия Лебедева туда же (в рунете ничего без неё не обходится). Когда дизайнили схему московского метро, ребята отвергли стандарт ISO, а прочие, похоже, даже не смотрели. Ну и придумали свой вариант — Мосметро<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>.</p>
<p>Чтобы вы представляли масштаб бедствия. Я насчитал 20 схем транслитерации, некоторые из которых предусматривают альтернативные наборы правил (например, с диакритикой и без). Из них 14 считаются действующими. <strong>Четырнадцать</strong> действующих «стандартов», прямо как в комиксе xkcd.</p>
<p>В качестве вишенки на торте в рунете несметное количество сервисов типа «транслитерация онлайн», которые мало того что перевирают существующие схемы, так ещё и придумывают собственные. Не отстают от них и креативные программисты на гитхабе.</p>
<p>Теперь несколько практических рекомендаций.</p>
<h2 id="как-выбрать-схему-быстрый-вариант">Как выбрать схему (быстрый вариант)</h2>
<p><strong>Загранпаспорт или в/у</strong>. По умолчанию используйте ICAO Doc 9303 — это требование закона. Впрочем, есть лайфхак: если написать отдельное заявление при подаче документов, сделают паспорт с нормальной транслитерацией. Тогда подойдёт старый стандарт МВД-310<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup> или Мосметро.</p>
<p><strong>Если нужно обратимое преобразование (cyr ↔ lat)</strong>. Используйте <span class="nowrap">ГОСТ 7.79-2000</span>. Это международный стандарт ISO 9:1995. Громоздкая, зато абсолютно непробиваемая схема. Есть варианты с диакритикой и без.</p>
<p><strong>Если визуальная красота превыше всего</strong>. Используйте схему Мосметро, она самая лаконичная и приятная на вид.</p>
<p><strong>В остальных случаях</strong>. Используйте схему Википедии. Она лучше всех по фонетике и лишь немного уступает Мосметро визуально.</p>
<p><a href="https://dangry.ru/iuliia/#main">Описание и примеры</a></p>
<h2 id="как-выбрать-схему-для-дотошных">Как выбрать схему (для дотошных)</h2>
<p>Я сделал страницу <a href="https://dangry.ru/iuliia/">со всеми схемами</a>. Там и сценарии использования, и фильтры, и подробные описания, и примеры. Читайте, выбирайте, что больше нравится. Все схемы уже реализованы на языках <code>JavaScript</code> и <code>Python</code>, подключить библиотеку — минутное дело.</p>
<h2 id="как-транслитерировать">Как транслитерировать</h2>
<p>Не пишите логику транслитерации с нуля — велик шанс ошибиться и получить очередную (N+1) схему транслитерации, «спасибо» за которую вам не скажут.</p>
<p>Не берите библиотеки с гитхаба без проверки. Все, что я смотрел — реализуют стандарт некорректно, если он чуть сложнее таблицы с однозначным соответствием.</p>
<p>Я сделал аккуратные библиотеки с нормальными тестами для <a href="https://github.com/nalgeon/iuliia-py">Python</a> и <a href="https://github.com/nalgeon/iuliia-js">JavaScript</a>. Но лучше дополнительно проверьте на паре примеров, а то вы ведь знаете этих программистов.</p>
<h2 id="чего-неделать">Чего не делать</h2>
<p><strong>Не изобретать свой стандарт</strong>. Я понимаю, что очень хочется. Мне тоже хочется взять схему Википедии, поправить в ней всякое и сказать что вот он, идеальный стандарт.</p>
<p>Но просто не надо. Уже хватит.</p>
<p><strong>Не связываться с обратной транслитерацией</strong>. «Обратная транслитерация» — это когда вы восстанавливаете справедливость и превращаете <code>Iuliia → Юлия</code>. Тут всё даже хуже, чем с транслитерацией прямой, потому что при записи латиницей никто никаких стандартов не соблюдает, и встречаются жуткие монстры.</p>
<p>В обратной транслитерации куча технических нюансов, лучше использовать готовое решение. Попробуйте, например, «<a href="https://dadata.ru/api/clean/">Дадату</a>» — она транслитерирует в обратную сторону ФИО и адреса.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>И если вам или коллеге когда-нибудь придётся столкнуться с транслитерацией по работе — не тратьте время на Википедию, потому что я его уже потратил и собрал всю нужную информацию:</p>
<p class="big">
<a href="https://dangry.ru/iuliia/">Юлия → Iuliia. Руководство по транслитерации</a>
</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Специально для подписчиков канала<span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Ссылки по тексту:</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://dangry.ru/iuliia/icao-doc-9303/">ICAO Doc 9303</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="https://dangry.ru/iuliia/gost-16876/">ГОСТ 16876-71</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p><a href="https://dangry.ru/iuliia/gost-779/">ГОСТ 7.79-2000, он же ISO 9:1995</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p><a href="https://dangry.ru/iuliia/wikipedia/">Схема Википедии</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p><a href="https://dangry.ru/iuliia/yandex-money">Схема Яндекс.Денег</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6" role="doc-endnote">
<p><a href="https://dangry.ru/iuliia/yandex-maps">Схема Яндекс.Карт</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7" role="doc-endnote">
<p><a href="https://dangry.ru/iuliia/mosmetro">Схема Мосметро</a>&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8" role="doc-endnote">
<p><a href="https://dangry.ru/iuliia/mvd-310">МВД 310</a>&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Вахтёр-бухгалтер управляет компанией</title>
      <link>https://antonz.ru/little-accountant-syndrome/</link>
      <pubDate>Tue, 14 Apr 2020 15:22:52 +0000</pubDate>
      
      <guid>https://antonz.ru/little-accountant-syndrome/</guid>
      <description>Бухгалтеры позволяют себе затягивать и блокировать бизнес-решения. А топы это терпят.</description>
      <content:encoded><![CDATA[<p>Удивительно, как во многих компаниях бухгалтеры позволяют себе затягивать и блокировать бизнес-решения. Сплошь и рядом бухгалтерия хочет странного — не потому, что требует закон или налоговая, а потому что просто она так привыкла работать.</p>
<p>Бухгалтер считает нормальным заблокировать оплату, которую запрашивает бизнес-подразделение, потому что счёт на оплату не удовлетворяет его эстетическим критериям.</p>
<p>Например, в счёте нет реквизитов плательщика (а бухгалтер, видимо, не знает реквизитов своей компании). Или — о ужас — счёт без мокрой печати и подписи кровью. О том, что счёт вообще не является первичным документом, и не требуется в принципе, бухгалтер предпочитает не думать.</p>
<p>Ещё более удивительно, что менеджмент это терпит. Даже топы. Нормальной считается ситуация, когда директор департамента упрашивает контрагента «пойти навстречу, потому что бухгалтерия отказывается проводить платёж».</p>
<p>Люди, что с вами? Если уборщица погонит вас шваброй из кабинета во время важной встречи, потому что пол грязный и его мыть пора — вы стыдливо уйдёте? Если охранник не пустит в офис, потому что вы без галстука — отправитесь переодеваться?</p>
<p>Вот некоторые «требования», с которыми бухгалтер должен сразу отправляться лесом (а если упорствует в своём заблуждении — вообще на биржу труда):</p>
<ul>
<li>для оплаты необходима карточка контрагента;</li>
<li>для оплаты обязательно нужен счёт;</li>
<li>счёт обязательно должен быть бумажным;</li>
<li>счёт должен быть заполнен так, как хочется бухгалтеру;</li>
<li>нельзя работать с контрагентом, если нет подписанного с двух сторон договора;</li>
<li>для обмена документами по электронному документообороту (ЭДО) требуется подписать отдельное соглашение;</li>
<li>нельзя работать по ЭДО, потому что бухгалтеру это непривычно;</li>
<li>при работе по 100% предоплате требуется акт сверки.</li>
</ul>
<p>Бухгалтерия — сервисное подразделение. Она должна обслуживать бизнес. А не вы её ублажать.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>2020</title>
      <link>https://antonz.ru/2020/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://antonz.ru/2020/</guid>
      <description></description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
    <item>
      <title>Каменный век безопасности</title>
      <link>https://antonz.ru/data-privacy/</link>
      <pubDate>Wed, 28 Aug 2019 09:42:44 +0000</pubDate>
      
      <guid>https://antonz.ru/data-privacy/</guid>
      <description>Наши данные утекают, и дальше будет только хуже.</description>
      <content:encoded><![CDATA[<p>Наши данные утекают. Время от времени вы читаете в новостях, как условное РЖД выставило в открытый доступ базу на 700 тысяч человек, но проблема гораздо шире.</p>
<p>Данные текут постоянно, у больших и маленьких организаций. У госорганов, ментов, банков, страховых, больниц, магазинов, авиакомпаний. Если бы проблемы с приватностью данных отслеживали как заболевания, ВОЗ бы уже трубила о мировой пандемии. И дальше будет только хуже.</p>
<p>Проблема в том, что мы все выросли без привычки гигиены данных. Мы как какой-нибудь охотник из доаграрного периода, которого вытащили в 21 век и рассказали, что надо чистить зубы и мыть руки перед едой. Он, конечно, покивает, и может даже что-то поймёт — но заботиться о личной гигиене не начнёт.</p>
<p>То же самое у нас с гигиеной приватности и защиты данных. Даже те, кто понимают — не имеют привычки эту самую гигиену соблюдать.</p>
<p>Ситуация изменится только тогда, когда вырастет поколение, с детства воспитанное с гигиеной данных. И это даже не те, кто сейчас подрастают. Может, их дети?</p>
<p>А в ближайшие десятилетия утечки данных будут становиться только масштабнее. Протеряют всё, что смогут, и ничего вы с этим не сделаете.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Создать словарь по списку ключей</title>
      <link>https://antonz.ru/dict-from-keys/</link>
      <pubDate>Tue, 09 Jul 2019 14:07:20 +0000</pubDate>
      
      <guid>https://antonz.ru/dict-from-keys/</guid>
      <description>С помощью dict.from_keys()</description>
      <content:encoded><![CDATA[<p>Предположим, вы сделали робота для общественных пространств. Он будет помогать людям.</p>
<p>Вы решаете, что полезно собирать статистику добрых дел — что и сколько раз робот сделал. Для этого удобно использовать счётчик, ключами которого будут названия действий, а значениями — количество выполнений.</p>
<p>Робот постоянно учится новым полезным активностям, так что набор дел не фиксированный. Он хранится в списке:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">actions</span> <span style="color:#000">=</span> [
  <span style="color:#c41a16">&#34;махать флагом&#34;</span>,
  <span style="color:#c41a16">&#34;чесать котов&#34;</span>,
  <span style="color:#c41a16">&#34;смешить детей&#34;</span>,
  <span style="color:#c41a16">&#34;рвать шаблоны&#34;</span>,
]
</code></pre></div><p>Как бы из этого списка сделать счётчик? Так не надо, конечно:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">collections</span> <span style="color:#a90d91">import</span> <span style="color:#000">Counter</span>

<span style="color:#000">counter</span> <span style="color:#000">=</span> <span style="color:#000">Counter</span>()
<span style="color:#a90d91">for</span> <span style="color:#000">action</span> <span style="color:#000">in</span> <span style="color:#000">actions</span>:
    <span style="color:#000">counter</span>[<span style="color:#000">action</span>] <span style="color:#000">=</span> <span style="color:#1c01ce">0</span>

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">counter</span>

<span style="color:#000">Counter</span>({
  <span style="color:#c41a16">&#39;махать флагом&#39;</span>: <span style="color:#1c01ce">0</span>,
  <span style="color:#c41a16">&#39;чесать котов&#39;</span>: <span style="color:#1c01ce">0</span>,
  <span style="color:#c41a16">&#39;смешить детей&#39;</span>: <span style="color:#1c01ce">0</span>,
  <span style="color:#c41a16">&#39;рвать шаблоны&#39;</span>: <span style="color:#1c01ce">0</span>})
</code></pre></div><p>Намного роднее воспользоваться dictionary comprehension (простите, что на англ — непереводимая игра слов):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">counter</span> <span style="color:#000">=</span> <span style="color:#000">Counter</span>({<span style="color:#000">action</span>: <span style="color:#1c01ce">0</span> <span style="color:#a90d91">for</span> <span style="color:#000">action</span> <span style="color:#000">in</span> <span style="color:#000">actions</span>})
</code></pre></div><p>Или малоизвестным методом <code>dict.fromkeys()</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">counter</span> <span style="color:#000">=</span> <span style="color:#000">Counter</span>(<span style="color:#a90d91">dict</span><span style="color:#000">.</span><span style="color:#000">fromkeys</span>(<span style="color:#000">actions</span>, <span style="color:#1c01ce">0</span>))
</code></pre></div><p>Первый аргумент — список ключей, второй — умолчательное значение. Удобно, а?</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="http://ohmypy.ru">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Пронумеровать элементы коллекции</title>
      <link>https://antonz.ru/enumerate/</link>
      <pubDate>Tue, 02 Jul 2019 14:10:00 +0000</pubDate>
      
      <guid>https://antonz.ru/enumerate/</guid>
      <description>С помощью enumerate()</description>
      <content:encoded><![CDATA[<p>Одна уважаемая компания заказала вам разработку теста для соискателей на позицию «дизайнер продукта». Есть список вопросов с вариантами ответа:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">survey</span> <span style="color:#000">=</span> {
  <span style="color:#c41a16">&#34;Чем известен Джони Айв?&#34;</span>: [
    <span style="color:#c41a16">&#34;Придумал анимированные эмодзи&#34;</span>,
    <span style="color:#c41a16">&#34;Снялся в фильме про белую комнату&#34;</span>,
    <span style="color:#c41a16">&#34;Изобрёл мышку с зарядкой в пузе&#34;</span>,
  ],
  <span style="color:#c41a16">&#34;Почему важно надувать щёки?&#34;</span>: [ <span style="color:#000">...</span> ],
  <span style="color:#c41a16">&#34;Сколько у вас статей про дизайн-системы?&#34;</span>: [ <span style="color:#000">...</span> ],
}
</code></pre></div><p>Вы написали код, который показывает на экране каждый вопрос с вариантами ответа:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">for</span> <span style="color:#000">question</span>, <span style="color:#000">answers</span> <span style="color:#000">in</span> <span style="color:#000">survey</span><span style="color:#000">.</span><span style="color:#000">items</span>():
    <span style="color:#a90d91">print</span>(<span style="color:#000">question</span>)
    <span style="color:#000">print_answers</span>(<span style="color:#000">answers</span>)
</code></pre></div><p>Но есть нюанс — варианты должны быть пронумерованы. Как бы это сделать?</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">print_answers</span>(<span style="color:#000">answers</span>):
    <span style="color:#000">i</span> <span style="color:#000">=</span> <span style="color:#1c01ce">1</span>
    <span style="color:#a90d91">for</span> <span style="color:#000">answer</span> <span style="color:#000">in</span> <span style="color:#000">answers</span>:
        <span style="color:#a90d91">print</span>(<span style="color:#c41a16">f</span><span style="color:#c41a16">&#34;</span><span style="color:#c41a16">{</span><span style="color:#000">i</span><span style="color:#c41a16">}</span><span style="color:#c41a16">: </span><span style="color:#c41a16">{</span><span style="color:#000">answer</span><span style="color:#c41a16">}</span><span style="color:#c41a16">&#34;</span>)
        <span style="color:#000">i</span> <span style="color:#000">+=</span> <span style="color:#1c01ce">1</span>

<span style="color:#000">Чем</span> <span style="color:#000">известен</span> <span style="color:#000">Джони</span> <span style="color:#000">Айв</span><span style="color:#000">?</span>
<span style="color:#1c01ce">1</span>: <span style="color:#000">Придумал</span> <span style="color:#000">анимированные</span> <span style="color:#000">эмодзи</span>
<span style="color:#1c01ce">2</span>: <span style="color:#000">Снялся</span> <span style="color:#000">в</span> <span style="color:#000">фильме</span> <span style="color:#000">про</span> <span style="color:#000">белую</span> <span style="color:#000">комнату</span>
<span style="color:#1c01ce">3</span>: <span style="color:#000">Изобрёл</span> <span style="color:#000">мышку</span> <span style="color:#000">с</span> <span style="color:#000">зарядкой</span> <span style="color:#000">в</span> <span style="color:#000">пузе</span>
</code></pre></div><p>Да, но нет. Очень часто, когда видите в коде <code>i = ..</code> и затем <code>i += 1</code> — это красный флаг. Лучше так:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">print_answers</span>(<span style="color:#000">answers</span>):
    <span style="color:#a90d91">for</span> <span style="color:#000">idx</span>, <span style="color:#000">answer</span> <span style="color:#000">in</span> <span style="color:#a90d91">enumerate</span>(<span style="color:#000">answers</span>, <span style="color:#000">start</span><span style="color:#000">=</span><span style="color:#1c01ce">1</span>):
        <span style="color:#a90d91">print</span>(<span style="color:#c41a16">f</span><span style="color:#c41a16">&#34;</span><span style="color:#c41a16">{</span><span style="color:#000">idx</span><span style="color:#c41a16">}</span><span style="color:#c41a16">: </span><span style="color:#c41a16">{</span><span style="color:#000">answer</span><span style="color:#c41a16">}</span><span style="color:#c41a16">&#34;</span>)
</code></pre></div><p><code>enumerate()</code> возвращает итератор, который при каждом обращении выдаёт пару из счётчика и соответствующего ему элемента последовательности. А аргумент <code>start</code> указывает, с какого числа стартовать счётчик (по умолчанию — с нуля).</p>
<p>P.S. Если это для вас слишком просто, представьте себя сумасшедшим любителем однострочников и попробуйте расшифровать такое:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">deque</span>(<span style="color:#a90d91">map</span>(<span style="color:#a90d91">print</span>, <span style="color:#a90d91">map</span>(<span style="color:#a90d91">lambda</span> <span style="color:#000">item</span>: <span style="color:#c41a16">f</span><span style="color:#c41a16">&#34;</span><span style="color:#c41a16">{</span><span style="color:#000">item</span>[<span style="color:#1c01ce">0</span>]<span style="color:#c41a16">}</span><span style="color:#c41a16">: </span><span style="color:#c41a16">{</span><span style="color:#000">item</span>[<span style="color:#1c01ce">1</span>]<span style="color:#c41a16">}</span><span style="color:#c41a16">&#34;</span>, <span style="color:#a90d91">enumerate</span>(<span style="color:#000">answers</span>, <span style="color:#000">start</span><span style="color:#000">=</span><span style="color:#1c01ce">1</span>))), <span style="color:#000">maxlen</span><span style="color:#000">=</span><span style="color:#1c01ce">0</span>)
</code></pre></div><div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="http://ohmypy.ru">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Быстрый язык ≠ быстрый код</title>
      <link>https://antonz.ru/fast-language/</link>
      <pubDate>Mon, 01 Jul 2019 08:15:04 +0000</pubDate>
      
      <guid>https://antonz.ru/fast-language/</guid>
      <description>Теория алгоритмов бьёт компилятор.</description>
      <content:encoded><![CDATA[<p>Получил такой комментарий на заметку про <a href="/sorted-puzzle/">быстрый и медленный алгоритмы</a>:</p>
<blockquote>
<p>Мне кажется, тут не совсем корректное сравнение. sorted оптимизированная и написана на С, в то время как insort — просто питоновская функция. Она гоняет питоновские структурки и при любом раскладе будет работать медленно.</p>
</blockquote>
<p>Это вообще популярная точка зрения, что если что-то написано на «быстром» языке, то оно уж всяко будет быстрее, чем написанное на «медленном».</p>
<p>Конечно же, это не так. Алгоритмы отличаются асимптотической сложностью — в том примере было <em>O(n logn)</em> против <em>O(n²)</em>. В такой ситуации <em>O(n logn)</em> будет всегда быстрее для достаточно большого <em>n</em>, даже если написать его на джаваскрипте и интерпретировать встроенной в Windows js-машиной, а <em>O(n²)</em> написать на самом быстром в мире C.</p>
<p>Другое дело, что оговорка «для достаточно большого n» может оказаться решающей. Бывает, что асимптотически более быстрый алгоритм начинает выигрывать, скажем, при <em>n &gt; 10 млрд</em> — а у вас в программе всегда <em>n &lt; 1 млн</em>. Именно поэтому стоит реализовать и сравнить в действии оба алгоритма, если нет 100% уверенности.</p>
<p>А ещё бывает, что при одинаковой асимптотической сложности один алгоритм в 5 раз быстрее другого — потому что она такие мелочи игнорирует. И тут тоже без тестирования никуда.</p>
<p>P. S. Модуль <code>bisect</code> на самом деле <a href="https://github.com/python/cpython/blob/3.7/Modules/_bisectmodule.c">реализован на C</a>. Если интересно, как выглядит «сишная» часть питона, посмотрите — это один из самых простых модулей.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="tg://resolve?domain=ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Cортировать в конце или держать отсортированным?</title>
      <link>https://antonz.ru/sorted-puzzle/</link>
      <pubDate>Sat, 29 Jun 2019 07:55:19 +0000</pubDate>
      
      <guid>https://antonz.ru/sorted-puzzle/</guid>
      <description>Почему бинарный поиск не всегда быстрый.</description>
      <content:encoded><![CDATA[<p>На днях я предложил подписчикам канала <a href="http://ohmypy.ru">Oh My Py</a> такую задачку:</p>
<blockquote>
<p>Допустим, вы пишете программу, которой на вход последовательно, одно за другим, приходят числа. Ваша задача — накапливать их как-то, а потом, когда числа перестанут приходить — вернуть отсортированный список.
<p>Как думаете, что будет работать быстрее:</p>
<ul>
  <li>Складывать приходящие числа в неупорядоченную кучу, отсортировать в конце.</li>
  <li>Постоянно поддерживать отсортированный список (с помощью <code>bisect</code>), в конце просто вернуть его.</li>
  <li></li>
</ul>
</blockquote>
<p>Вот результаты голосования:</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img class="img-bordered" alt="Результаты голосования" src="sorted-puzzle-poll.png">
  <figcaption>Большинство решило, что быстрее постоянно поддерживать список отсортированным.</figcaption>
</figure>
</div>
</div>
<p>Давайте разберёмся, так ли это.</p>
<h2 id="решение">Решение</h2>
<p>Сразу оговорюсь, что оценивать будем именно чистое время выполнения нашего обработчика. Понятно, что если источник будет присылать по одному числу в минуту, то общее время выполнения будет определяться именно скоростью источника, а не нашим обработчиком — вне зависимости от выбранного алгоритма. Поэтому исходим из того, что источник фигачит числами как из пулемёта.</p>
<p>Мы знаем, что сортировка на <em>n</em> числах занимает <em>O(n logn)</em> операций. Это сложность варианта «сортировать в конце».</p>
<p>Мы также знаем, что один бинарный поиск занимает <em>O(log n)</em> операций. В варианте «поддерживать отсортированным» мы выполняем поиск <em>n</em> раз, значит итоговая сложность <em>O(n logn)</em>.</p>
<p>Там <em>O(n logn)</em> и тут <em>O(n logn)</em> — значит, варианты равнозначные, расходимся.</p>
<p>На самом деле нет ツ Посмотрите на реализацию варианта «поддерживать отсортированным»:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">keep_sorted</span>(<span style="color:#000">generator</span>):
    <span style="color:#000">collection</span> <span style="color:#000">=</span> []
    <span style="color:#a90d91">for</span> <span style="color:#000">number</span> <span style="color:#000">in</span> <span style="color:#000">generator</span>:
        <span style="color:#000">index</span> <span style="color:#000">=</span> <span style="color:#000">bisect</span><span style="color:#000">.</span><span style="color:#000">bisect</span>(<span style="color:#000">collection</span>, <span style="color:#000">number</span>)
        <span style="color:#000">collection</span><span style="color:#000">.</span><span style="color:#000">insert</span>(<span style="color:#000">index</span>, <span style="color:#000">number</span>)
    <span style="color:#a90d91">return</span> <span style="color:#000">collection</span>
</code></pre></div><p>Да, бинарный поиск выполняется за логарифмическое время. Но после него идёт вставка в массив — она занимает <em>линейное</em> время.</p>
<p>Таким образом, на каждое число алгоритм тратит <em>O(n)</em> операций, а на <em>n</em> чисел — <em>O(n²)</em>. Это сильно медленнее, чем <em>O(n logn)</em>.</p>
<h2 id="проверка">Проверка</h2>
<p>Чтобы не быть голословным, я реализовал оба варианта и сравнил их в действии.</p>
<h3 id="подготовка">Подготовка</h3>
<p>Сначала подготовим генератор чисел:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">random</span>

<span style="color:#177500"># будем генерить числа от 1 до 1 млн</span>
<span style="color:#000">RANGE_SIZE</span> <span style="color:#000">=</span> <span style="color:#1c01ce">1</span> <span style="color:#000">*</span> <span style="color:#1c01ce">10</span><span style="color:#000">**</span><span style="color:#1c01ce">6</span>

<span style="color:#a90d91">def</span> <span style="color:#000">number_generator</span>(<span style="color:#000">count</span>):
    <span style="color:#a90d91">for</span> <span style="color:#000">_</span> <span style="color:#000">in</span> <span style="color:#a90d91">range</span>(<span style="color:#000">count</span>):
        <span style="color:#000">number</span> <span style="color:#000">=</span> <span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">randint</span>(<span style="color:#1c01ce">1</span>, <span style="color:#000">RANGE_SIZE</span>)
        <span style="color:#a90d91">yield</span> <span style="color:#000">number</span>
</code></pre></div><p>Затем реализуем алгоритм «сортировать в конце»:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">collections</span> <span style="color:#a90d91">import</span> <span style="color:#000">deque</span>

<span style="color:#a90d91">def</span> <span style="color:#000">sort_after</span>(<span style="color:#000">generator</span>):
    <span style="color:#000">collection</span> <span style="color:#000">=</span> <span style="color:#000">deque</span>()
    <span style="color:#a90d91">for</span> <span style="color:#000">number</span> <span style="color:#000">in</span> <span style="color:#000">generator</span>:
        <span style="color:#000">collection</span><span style="color:#000">.</span><span style="color:#000">append</span>(<span style="color:#000">number</span>)
    <span style="color:#a90d91">return</span> <span style="color:#a90d91">sorted</span>(<span style="color:#000">collection</span>)
</code></pre></div><p>И алгоритм «поддерживать отсортированным»:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">bisect</span>

<span style="color:#a90d91">def</span> <span style="color:#000">keep_sorted</span>(<span style="color:#000">generator</span>):
    <span style="color:#000">collection</span> <span style="color:#000">=</span> []
    <span style="color:#a90d91">for</span> <span style="color:#000">number</span> <span style="color:#000">in</span> <span style="color:#000">generator</span>:
        <span style="color:#000">bisect</span><span style="color:#000">.</span><span style="color:#000">insort</span>(<span style="color:#000">collection</span>, <span style="color:#000">number</span>)
    <span style="color:#a90d91">return</span> <span style="color:#000">collection</span>
</code></pre></div><h3 id="синхронная-работа">Синхронная работа</h3>
<p>Сначала рассмотрим вариант, когда генератор и обработчик работают строго последовательно: генератор присылает число, обработчик складывает его к себе, генератор присылает второе число, обработчик снова складывает, и так далее. Пока обработчик не закончил с числом, генератор не может прислать следующее.</p>
<p>Будем проверять на 1 млн чисел.</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">count</span> <span style="color:#000">=</span> <span style="color:#1c01ce">1</span> <span style="color:#000">*</span> <span style="color:#1c01ce">10</span><span style="color:#000">**</span><span style="color:#1c01ce">6</span>
</code></pre></div><p>Сортировать в конце:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">%%</span><span style="color:#000">time</span>
<span style="color:#000">sort_after</span>(<span style="color:#000">number_generator</span>(<span style="color:#000">count</span>))
;
</code></pre></div><pre tabindex="0"><code>CPU times: user 1.33 s, sys: 20.1 ms, total: 1.35 s
Wall time: 1.35 s
</code></pre><p>Держать отсортированным:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">%%</span><span style="color:#000">time</span>
<span style="color:#000">keep_sorted</span>(<span style="color:#000">number_generator</span>(<span style="color:#000">count</span>))
;
</code></pre></div><pre tabindex="0"><code>CPU times: user 1min 25s, sys: 74.9 ms, total: 1min 25s
Wall time: 1min 25s
</code></pre><p>Вариант «сортировать в конце» оказался быстрее в 63 раза (1.35 секунды против 85 секунд).</p>
<h3 id="асинхронная-работа">Асинхронная работа</h3>
<p>Теперь пусть генератор и обработчик работают независимо. Генератор присылает числа с некоторым интервалом, а обработчик независимо складывает их к себе. Генератор не дожидается, пока обработчик закончит с очередным числом — он может прислать новое в любой момент.</p>
<p>Здесь придётся работать в два процесса (отдельно генератор, отдельно обработчик), так что будем использовать очередь для синхронизации. Генератор будет складывать в неё числа, а обработчик — забирать.</p>
<p>Кроме того, добавим генератору задержку:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">random</span>
<span style="color:#a90d91">import</span> <span style="color:#000">time</span>

<span style="color:#a90d91">def</span> <span style="color:#000">number_generator</span>(<span style="color:#000">queue</span>, <span style="color:#000">count</span>, <span style="color:#000">delay</span>):
    <span style="color:#a90d91">for</span> <span style="color:#000">_</span> <span style="color:#000">in</span> <span style="color:#a90d91">range</span>(<span style="color:#000">count</span>):
        <span style="color:#000">number</span> <span style="color:#000">=</span> <span style="color:#000">random</span><span style="color:#000">.</span><span style="color:#000">randint</span>(<span style="color:#1c01ce">1</span>, <span style="color:#000">RANGE_SIZE</span>)
        <span style="color:#000">queue</span><span style="color:#000">.</span><span style="color:#000">put</span>(<span style="color:#000">number</span>)
        <span style="color:#000">time</span><span style="color:#000">.</span><span style="color:#000">sleep</span>(<span style="color:#000">delay</span>)
    <span style="color:#000">queue</span><span style="color:#000">.</span><span style="color:#000">put</span>(<span style="color:#a90d91">None</span>)
</code></pre></div><p>Алгоритмы «сортировать в конце» и «поддерживать отсортированным» не слишком поменяются. Просто теперь они получают числа не из генератора, а из очереди:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">collections</span> <span style="color:#a90d91">import</span> <span style="color:#000">deque</span>

<span style="color:#a90d91">def</span> <span style="color:#000">sort_after</span>(<span style="color:#000">queue</span>):
    <span style="color:#000">collection</span> <span style="color:#000">=</span> <span style="color:#000">deque</span>()
    <span style="color:#a90d91">while</span> <span style="color:#a90d91">True</span>:
        <span style="color:#000">number</span> <span style="color:#000">=</span> <span style="color:#000">queue</span><span style="color:#000">.</span><span style="color:#000">get</span>()
        <span style="color:#a90d91">if</span> <span style="color:#000">number</span> <span style="color:#000">is</span> <span style="color:#a90d91">None</span>:
            <span style="color:#a90d91">break</span>
        <span style="color:#000">collection</span><span style="color:#000">.</span><span style="color:#000">append</span>(<span style="color:#000">number</span>)
    <span style="color:#a90d91">return</span> <span style="color:#a90d91">sorted</span>(<span style="color:#000">collection</span>)
</code></pre></div><div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">bisect</span>

<span style="color:#a90d91">def</span> <span style="color:#000">keep_sorted</span>(<span style="color:#000">queue</span>):
    <span style="color:#000">collection</span> <span style="color:#000">=</span> []
    <span style="color:#a90d91">while</span> <span style="color:#a90d91">True</span>:
        <span style="color:#000">number</span> <span style="color:#000">=</span> <span style="color:#000">queue</span><span style="color:#000">.</span><span style="color:#000">get</span>()
        <span style="color:#a90d91">if</span> <span style="color:#000">number</span> <span style="color:#000">is</span> <span style="color:#a90d91">None</span>:
            <span style="color:#a90d91">break</span>
        <span style="color:#000">bisect</span><span style="color:#000">.</span><span style="color:#000">insort</span>(<span style="color:#000">collection</span>, <span style="color:#000">number</span>)
    <span style="color:#a90d91">return</span> <span style="color:#000">collection</span>
</code></pre></div><p>Добавим вспомогательную функцию, которая создаёт процессы и запускает тест:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">multiprocessing</span> <span style="color:#a90d91">import</span> <span style="color:#000">Process</span>, <span style="color:#000">Queue</span>

<span style="color:#a90d91">def</span> <span style="color:#000">main</span>(<span style="color:#000">processor</span>, <span style="color:#000">count</span>, <span style="color:#000">delay</span>):
    <span style="color:#a90d91">print</span>(<span style="color:#c41a16">f</span><span style="color:#c41a16">&#34;count = </span><span style="color:#c41a16">{</span><span style="color:#000">count</span><span style="color:#c41a16">}</span><span style="color:#c41a16">, delay = </span><span style="color:#c41a16">{</span><span style="color:#000">delay</span><span style="color:#c41a16">}</span><span style="color:#c41a16">&#34;</span>)
    <span style="color:#000">queue</span> <span style="color:#000">=</span> <span style="color:#000">Queue</span>()
    <span style="color:#000">generator</span> <span style="color:#000">=</span> <span style="color:#000">Process</span>(
        <span style="color:#000">target</span><span style="color:#000">=</span><span style="color:#000">number_generator</span>,
        <span style="color:#000">args</span><span style="color:#000">=</span>(<span style="color:#000">queue</span>, <span style="color:#000">count</span>, <span style="color:#000">delay</span>),
        <span style="color:#000">daemon</span><span style="color:#000">=</span><span style="color:#a90d91">True</span>,
    )
    <span style="color:#000">consumer</span> <span style="color:#000">=</span> <span style="color:#000">Process</span>(<span style="color:#000">target</span><span style="color:#000">=</span><span style="color:#000">processor</span>, <span style="color:#000">args</span><span style="color:#000">=</span>(<span style="color:#000">queue</span>,), <span style="color:#000">daemon</span><span style="color:#000">=</span><span style="color:#a90d91">True</span>)
    
    <span style="color:#000">generator</span><span style="color:#000">.</span><span style="color:#000">start</span>()
    <span style="color:#000">consumer</span><span style="color:#000">.</span><span style="color:#000">start</span>()
    <span style="color:#000">generator</span><span style="color:#000">.</span><span style="color:#000">join</span>()
    <span style="color:#000">consumer</span><span style="color:#000">.</span><span style="color:#000">join</span>()
</code></pre></div><p>Будем проверять на 1 млн чисел и интервале между приходом чисел в 1 микросекунду:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">count</span> <span style="color:#000">=</span> <span style="color:#1c01ce">1</span> <span style="color:#000">*</span> <span style="color:#1c01ce">10</span><span style="color:#000">**</span><span style="color:#1c01ce">6</span>
<span style="color:#000">delay</span> <span style="color:#000">=</span> <span style="color:#1c01ce">1</span> <span style="color:#000">*</span> <span style="color:#1c01ce">10</span><span style="color:#000">**</span>(<span style="color:#000">-</span><span style="color:#1c01ce">6</span>)
</code></pre></div><div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">%%</span><span style="color:#000">time</span>
<span style="color:#000">main</span>(<span style="color:#000">sort_after</span>, <span style="color:#000">count</span>, <span style="color:#000">delay</span>)
;
</code></pre></div><pre tabindex="0"><code>count = 1000000, delay = 1e-06
CPU times: user 3.12 ms, sys: 5.48 ms, total: 8.6 ms
Wall time: 29.3 s
</code></pre><div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">%%</span><span style="color:#000">time</span>
<span style="color:#000">main</span>(<span style="color:#000">keep_sorted</span>, <span style="color:#000">count</span>, <span style="color:#000">delay</span>)
;
</code></pre></div><pre tabindex="0"><code>count = 1000000, delay = 1e-06
CPU times: user 3.81 ms, sys: 6.43 ms, total: 10.2 ms
Wall time: 1min 43s
</code></pre><p>Кажется, что разрыв сократился (29 секунд против 103). Но на самом деле эти 29 секунд уходят не на полезную работу, а на «обвязку» — возню вокруг <code>time.sleep()</code> и межпроцессное взаимодействие. Чтобы убедиться в этом, сделаем ещё один алгоритм, который вообще не сортирует приходящие числа, а просто возвращает их в финале как есть:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">do_not_sort</span>(<span style="color:#000">queue</span>):
    <span style="color:#000">collection</span> <span style="color:#000">=</span> <span style="color:#000">deque</span>()
    <span style="color:#a90d91">while</span> <span style="color:#a90d91">True</span>:
        <span style="color:#000">number</span> <span style="color:#000">=</span> <span style="color:#000">queue</span><span style="color:#000">.</span><span style="color:#000">get</span>()
        <span style="color:#a90d91">if</span> <span style="color:#000">number</span> <span style="color:#000">is</span> <span style="color:#a90d91">None</span>:
            <span style="color:#a90d91">break</span>
        <span style="color:#000">collection</span><span style="color:#000">.</span><span style="color:#000">append</span>(<span style="color:#000">number</span>)
    <span style="color:#a90d91">return</span> <span style="color:#000">collection</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">%%</span><span style="color:#000">time</span>
<span style="color:#000">main</span>(<span style="color:#000">do_not_sort</span>, <span style="color:#000">count</span>, <span style="color:#000">delay</span>)
;
</code></pre></div><pre tabindex="0"><code>count = 1000000, delay = 1e-06
CPU times: user 2.93 ms, sys: 5.58 ms, total: 8.52 ms
Wall time: 29.1 s
</code></pre><p>Таким образом, «чистое» время работы «сортировать в конце» по-прежнему составляет около 1 секунды, а «держать отсортированным» — в десятки раз больше.</p>
<p><a href="https://gist.github.com/nalgeon/199c30f8a0298c6da9c79559ca848ddc">Ноутбук</a></p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Итого: чистая победа «сортировать в конце» над «держать отсортированным» с большим отрывом.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Специально для подписчиков <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="http://ohmypy.ru">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Быстро найти элемент коллекции</title>
      <link>https://antonz.ru/bisect/</link>
      <pubDate>Wed, 26 Jun 2019 16:44:00 +0000</pubDate>
      
      <guid>https://antonz.ru/bisect/</guid>
      <description>С помощью bisect.bisect()</description>
      <content:encoded><![CDATA[<p>Френк решил открыть магазин диковинок. Прайс-лист огромный, приведу только несколько позиций:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">collections</span> <span style="color:#a90d91">import</span> <span style="color:#000">namedtuple</span>
<span style="color:#000">Product</span> <span style="color:#000">=</span> <span style="color:#000">namedtuple</span>(<span style="color:#c41a16">&#34;Product&#34;</span>, (<span style="color:#c41a16">&#34;price&#34;</span>, <span style="color:#c41a16">&#34;name&#34;</span>))

<span style="color:#000">products</span> <span style="color:#000">=</span> [
  <span style="color:#000">Product</span>(<span style="color:#1c01ce">1500</span>, <span style="color:#c41a16">&#34;живой багет&#34;</span>),
  <span style="color:#000">Product</span>(<span style="color:#1c01ce">3300</span>, <span style="color:#c41a16">&#34;мельница для сыра&#34;</span>),
  <span style="color:#000">Product</span>(<span style="color:#1c01ce">6500</span>, <span style="color:#c41a16">&#34;костюм картошки&#34;</span>),
  <span style="color:#000">Product</span>(<span style="color:#1c01ce">9900</span>, <span style="color:#c41a16">&#34;беспилотная сова&#34;</span>),
]
</code></pre></div><p>Магазин открылся, торговля идёт бойко, но есть проблемка. Покупатели донимают вопросом «у меня есть X рублей, какую самую дорогую дичь я могу купить за эту сумму?».</p>
<p>Френк очень плохо считает (неудивительно для голубя), поэтому требуется наша помощь. Давайте сначала решим «в лоб»:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">suggest</span>(<span style="color:#000">max_price</span>):
    <span style="color:#000">best_product</span> <span style="color:#000">=</span> <span style="color:#000">Product</span>(<span style="color:#1c01ce">0</span>, <span style="color:#a90d91">None</span>)
    <span style="color:#a90d91">for</span> <span style="color:#000">product</span> <span style="color:#000">in</span> <span style="color:#000">products</span>:
        <span style="color:#a90d91">if</span> <span style="color:#000">product</span><span style="color:#000">.</span><span style="color:#000">price</span> <span style="color:#000">&gt;</span> <span style="color:#000">max_price</span>:
            <span style="color:#a90d91">continue</span>
        <span style="color:#a90d91">if</span> <span style="color:#000">product</span><span style="color:#000">.</span><span style="color:#000">price</span> <span style="color:#000">&gt;</span> <span style="color:#000">best_product</span><span style="color:#000">.</span><span style="color:#000">price</span>:
            <span style="color:#000">best_product</span> <span style="color:#000">=</span> <span style="color:#000">product</span>
    <span style="color:#a90d91">if</span> <span style="color:#000">best_product</span><span style="color:#000">.</span><span style="color:#000">name</span> <span style="color:#000">is</span> <span style="color:#a90d91">None</span>:
        <span style="color:#a90d91">return</span> <span style="color:#a90d91">None</span>
    <span style="color:#a90d91">return</span> <span style="color:#000">best_product</span>

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">suggest</span>(<span style="color:#1c01ce">5000</span>)
<span style="color:#000">Product</span>(<span style="color:#000">price</span><span style="color:#000">=</span><span style="color:#1c01ce">3300</span>, <span style="color:#000">name</span><span style="color:#000">=</span><span style="color:#c41a16">&#39;мельница для сыра&#39;</span>)
</code></pre></div><p>Работает как часы! Только Френк жалуется, что <code>suggest()</code> что-то долго думает (прайс-лист огромный, помните?). Это неудивительно, мы ведь каждый раз перебираем все товары — сложность алгоритма <code>O(n)</code></p>
<p>Надо бы отсортировать товары по цене и использовать алгоритм бинарного поиска, который работает за <code>O(log n)</code>. Правда, не слишком греет перспектива реализации алгоритма — Френк требует сделать всё сию же секунду.</p>
<p>Нам поможет модуль <code>bisect</code> стандартной библиотеки:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">bisect</span>

<span style="color:#000">prices</span> <span style="color:#000">=</span> <span style="color:#a90d91">sorted</span>(<span style="color:#000">p</span><span style="color:#000">.</span><span style="color:#000">price</span> <span style="color:#a90d91">for</span> <span style="color:#000">p</span> <span style="color:#000">in</span> <span style="color:#000">products</span>)

<span style="color:#a90d91">def</span> <span style="color:#000">suggest</span>(<span style="color:#000">max_price</span>):
    <span style="color:#000">best_index</span> <span style="color:#000">=</span> <span style="color:#000">bisect</span><span style="color:#000">.</span><span style="color:#000">bisect</span>(<span style="color:#000">prices</span>, <span style="color:#000">max_price</span>)
    <span style="color:#a90d91">if</span> <span style="color:#000">best_index</span> <span style="color:#000">==</span> <span style="color:#1c01ce">0</span>:
        <span style="color:#a90d91">return</span> <span style="color:#a90d91">None</span>
    <span style="color:#a90d91">return</span> <span style="color:#000">products</span>[<span style="color:#000">best_index</span> <span style="color:#000">-</span> <span style="color:#1c01ce">1</span>]

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">suggest</span>(<span style="color:#1c01ce">5000</span>)
<span style="color:#000">Product</span>(<span style="color:#000">price</span><span style="color:#000">=</span><span style="color:#1c01ce">3300</span>, <span style="color:#000">name</span><span style="color:#000">=</span><span style="color:#c41a16">&#39;мельница для сыра&#39;</span>)
</code></pre></div><p>Работает так:</p>
<ul>
<li>Создали отсортированный список цен.</li>
<li>Покупатель принёс 5000₽ денег.</li>
<li><code>bisect.bisect()</code> определил, на какую позицию списка можно вставить 5000, чтобы список остался отсортированным (третья позиция, между 3300 и 6500).</li>
<li>Элемент слева от этой позиции и есть интересующий нас товар («мельница» за 3300).</li>
</ul>
<p>Френк доволен.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="http://ohmypy.ru">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Узнать день недели 40 лет назад</title>
      <link>https://antonz.ru/calendar/</link>
      <pubDate>Tue, 25 Jun 2019 13:15:00 +0000</pubDate>
      
      <guid>https://antonz.ru/calendar/</guid>
      <description>С помощью calendar</description>
      <content:encoded><![CDATA[<p>Есть в питоне модуль <code>calendar</code>. Лично я ожидал от него крутых фич по работе с датами, которые не влезли в <code>datetime</code>.</p>
<p>На деле он занимается форматированием календарей в HTML (именно то, что требуется в стандартной библиотеке любого языка) и предоставляет гениальные методы вроде itermonthdays, itermonthdays2, itermonthdays3 и itermonthdays4 (оцените богатство выбора, прямо как на воскресной ярмарке).</p>
<p>Но есть в нём и полезные функции. Например, узнать день недели для любой даты в прошлом или будущем:</p>
<pre tabindex="0"><code>import calendar
wday = calendar.weekday(1959, 11, 5)

&gt;&gt;&gt; calendar.day_name[wday]
'Thursday'
</code></pre><p>Или вспомнить, сколько дней в июне:</p>
<pre tabindex="0"><code>import datetime as dt
today = dt.date.today()
_, days = calendar.monthrange(today.year, today.month)

&gt;&gt;&gt; days
30
</code></pre><p>Или проверить, високосный ли год:</p>
<pre tabindex="0"><code>&gt;&gt;&gt; calendar.isleap(2020)
True
</code></pre><p>А генерировать HTML-календари с помощью <code>calendar</code> вы не будете, надеюсь ツ</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="http://ohmypy.ru">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Создать полный дубль коллекции</title>
      <link>https://antonz.ru/deepcopy/</link>
      <pubDate>Mon, 24 Jun 2019 17:02:00 +0000</pubDate>
      
      <guid>https://antonz.ru/deepcopy/</guid>
      <description>С помощью copy.deepcopy()</description>
      <content:encoded><![CDATA[<p>У нас ответственная миссия: запустить в космос автомобиль. Сначала подготовим инфраструктуру — собственно машину и мега-пушку:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">dataclasses</span> <span style="color:#a90d91">import</span> <span style="color:#000">dataclass</span>

<span style="color:#000">@dataclass</span>
<span style="color:#a90d91">class</span> <span style="color:#3f6e75">Car</span>:
    <span style="color:#000">brand</span>: <span style="color:#a90d91">str</span>
    <span style="color:#000">model</span>: <span style="color:#a90d91">str</span>
    <span style="color:#000">driver</span>: <span style="color:#a90d91">str</span>

<span style="color:#a90d91">class</span> <span style="color:#3f6e75">SpaceCannon</span>:
    <span style="color:#a90d91">def</span> <span style="color:#000">launch</span>(<span style="color:#5b269a">self</span>, <span style="color:#000">cars</span>):
        <span style="color:#000">car</span> <span style="color:#000">=</span> <span style="color:#000">cars</span>[<span style="color:#1c01ce">0</span>]
        <span style="color:#a90d91">print</span>(<span style="color:#c41a16">f</span><span style="color:#c41a16">&#34;</span><span style="color:#c41a16">{</span><span style="color:#000">car</span><span style="color:#000">.</span><span style="color:#000">brand</span><span style="color:#c41a16">}</span><span style="color:#c41a16"> </span><span style="color:#c41a16">{</span><span style="color:#000">car</span><span style="color:#000">.</span><span style="color:#000">model</span><span style="color:#c41a16">}</span><span style="color:#c41a16"> driven by </span><span style="color:#c41a16">{</span><span style="color:#000">car</span><span style="color:#000">.</span><span style="color:#000">driver</span><span style="color:#c41a16">}</span><span style="color:#c41a16"> sent to space!&#34;</span>)
</code></pre></div><p>Проверим:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">car</span> <span style="color:#000">=</span> <span style="color:#000">Car</span>(<span style="color:#000">brand</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;Tesla&#34;</span>, <span style="color:#000">model</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;Roadster&#34;</span>, <span style="color:#000">driver</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;Starman&#34;</span>)
<span style="color:#000">cars</span> <span style="color:#000">=</span> [<span style="color:#000">car</span>]
<span style="color:#000">cannon</span> <span style="color:#000">=</span> <span style="color:#000">SpaceCannon</span>()
<span style="color:#000">cannon</span><span style="color:#000">.</span><span style="color:#000">launch</span>(<span style="color:#000">cars</span>)

<span style="color:#000">Tesla</span> <span style="color:#000">Roadster</span> <span style="color:#000">driven</span> <span style="color:#000">by</span> <span style="color:#000">Starman</span> <span style="color:#000">sent</span> <span style="color:#000">to</span> <span style="color:#000">space</span><span style="color:#000">!</span>
</code></pre></div><p>Работает!</p>
<p>Как всякий уважающий себя космический завод, наш умеет копировать машины. Очень удобно — можно сделать копию коллекции машин и всячески над ней издеваться. Например, очистить:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">copied_cars</span> <span style="color:#000">=</span> <span style="color:#000">cars</span>[:]
<span style="color:#000">copied_cars</span><span style="color:#000">.</span><span style="color:#000">clear</span>()
</code></pre></div><p>Оригинальный список при этом не пострадал, его можно спокойно запускать:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">cannon</span><span style="color:#000">.</span><span style="color:#000">launch</span>(<span style="color:#000">cars</span>)
<span style="color:#000">Tesla</span> <span style="color:#000">Roadster</span> <span style="color:#000">driven</span> <span style="color:#000">by</span> <span style="color:#000">Starman</span> <span style="color:#000">sent</span> <span style="color:#000">to</span> <span style="color:#000">space</span><span style="color:#000">!</span>
</code></pre></div><p>О, тут инженерам ещё хохма в голову пришла:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">copied_cars</span> <span style="color:#000">=</span> <span style="color:#000">cars</span>[:]
<span style="color:#000">copied_cars</span>[<span style="color:#1c01ce">0</span>]<span style="color:#000">.</span><span style="color:#000">brand</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#34;ToSky&#34;</span>
<span style="color:#000">copied_cars</span>[<span style="color:#1c01ce">0</span>]<span style="color:#000">.</span><span style="color:#000">model</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#34;Zhiguli&#34;</span>
<span style="color:#000">copied_cars</span>[<span style="color:#1c01ce">0</span>]<span style="color:#000">.</span><span style="color:#000">driver</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#34;Roskosmos guy&#34;</span>
</code></pre></div><p>Очень смешно, отправить в космос чела из Роскосмоса на жигулях, ха-ха. Пошутили и хватит, запускаем Теслу:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">cannon</span><span style="color:#000">.</span><span style="color:#000">launch</span>(<span style="color:#000">cars</span>)
<span style="color:#000">ToSky</span> <span style="color:#000">Zhiguli</span> <span style="color:#000">driven</span> <span style="color:#000">by</span> <span style="color:#000">Roskosmos</span> <span style="color:#000">guy</span> <span style="color:#000">sent</span> <span style="color:#000">to</span> <span style="color:#000">space</span><span style="color:#000">!</span>
</code></pre></div><p>Ну вот (((</p>
<p>Проблема в том, что <code>cars[:]</code> выполняет так называемое поверхностное копирование — сам список копируется, но в качестве его элементов используются ссылки на элементы оригинального списка.</p>
<p>Поэтому, меняя <code>copied_cars[0]</code>, мы превратили оригинальную Теслу в Жигули (что само по себе заслуживает уважения, конечно).</p>
<p>Создать полный дубликат коллекции поможет модуль <code>copy</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">copy</span>

<span style="color:#000">car</span> <span style="color:#000">=</span> <span style="color:#000">...</span>
<span style="color:#000">cars</span> <span style="color:#000">=</span> [<span style="color:#000">car</span>]
<span style="color:#000">copied_cars</span> <span style="color:#000">=</span> <span style="color:#000">copy</span><span style="color:#000">.</span><span style="color:#000">deepcopy</span>(<span style="color:#000">cars</span>)
<span style="color:#000">copied_cars</span>[<span style="color:#1c01ce">0</span>]<span style="color:#000">.</span><span style="color:#000">model</span> <span style="color:#000">=</span> <span style="color:#c41a16">&#34;Zhiguli&#34;</span>
<span style="color:#000">cannon</span><span style="color:#000">.</span><span style="color:#000">launch</span>(<span style="color:#000">cars</span>)

<span style="color:#000">Tesla</span> <span style="color:#000">Roadster</span> <span style="color:#000">driven</span> <span style="color:#000">by</span> <span style="color:#000">Starman</span> <span style="color:#000">sent</span> <span style="color:#000">to</span> <span style="color:#000">space</span><span style="color:#000">!</span>
</code></pre></div><p>Во, другое дело.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="http://ohmypy.ru">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Копировать у конкурентов</title>
      <link>https://antonz.ru/feature-copy/</link>
      <pubDate>Sat, 15 Jun 2019 14:06:52 +0000</pubDate>
      
      <guid>https://antonz.ru/feature-copy/</guid>
      <description>Когда не грех подсмотреть (спойлер: всегда)</description>
      <content:encoded><![CDATA[<p>Шансы на то, что вы делаете уникальный продукт — мизерные. У любого сервиса наверняка есть конкуренты и аналоги. А значит, можно и нужно подсматривать у лучших из них.</p>
<p>Удивительно, что не все этим пользуются. Вот, например, сериальный сервис «Амедиатека». Даже далёкие от темы люди знают, что самый популярный в мире аналог — «Нетфликс». Казалось бы, заплати $10, посмотри, как у них всё устроено, и перенимай хорошие решения. Но нет.</p>
<p>Могу ещё понять, что у ребят не работает нормально синхронизация: заходишь в приложение на айпаде и не видишь, какие серии уже посмотрел с компа. Вообще это провал, но, допустим, там всё дико сложно технически, и быстро исправить не получается.</p>
<p>Но что может быть проще, чем кнопки паузы и перемотки? У Амедиатеки они мизерных размеров внизу экрана — попробуй, попади. У Нетлифкса — здоровенные и по центру. Что мешает сделать нормально — загадка.</p>
<p>Или вот функция «продолжить воспроизведение». Как это работает у Амедиатеки:</p>
<ol>
<li>Тыкаешь на серию, которую уже смотрел раньше.</li>
<li>Вылезает попап (натурально, модальное окно!) с надписью «Continue playback?» и кнопками «Continue» и «Start Over».</li>
</ol>
<figure>
  <img alt="Продолжить или сначала?" src="startover.png" style="max-width: 500px">
  <figcaption>Погоди смотреть, человек! Сначала сделай нелёгкий выбор.</figcaption>
</figure>
<p>Как это должно работать, исходя из здравого смысла: тыкаешь на серию и смотришь с того момента, где остановился — без лишних вопросов. Потому что перемотать на начало, если что, всегда можно одним движением. Нетрудно догадаться, что у Нетфликса сделано именно так.</p>
<p>Или то, что человек видит после логина. У Амедиатеки:</p>
<figure>
  <img alt="Амедиатека" src="amedia.jpg" style="max-width: 682px">
  <figcaption>Набор случайных кадров без подписей, как удобно! Странно, что больше никто до такого не додумался.</figcaption>
</figure>
<p>У Нетфликса:</p>
<figure>
  <img alt="Нетфликс" src="netflix.jpg">
  <figcaption>Вот популярное, а вот то, что я уже смотрю. Окей, продолжаю.</figcaption>
</figure>
<p>Или функция skip intro / skip recap. Отличная штука, экономит от 30 до 120 секунд на серию, в зависимости от любви постановщиков к длинным вступлениям. Есть она у Нетфликса? Конечно. А у Амедиатеки? Пффф, разумеется нет.</p>
<p>Или&hellip; продолжать можно долго. Вывод простой — копировать удачные решения у лучших. И не костылить неудобное «ноу-хау».</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>О продуктоводстве</title>
      <link>https://antonz.ru/productology/</link>
      <pubDate>Mon, 11 Mar 2019 09:59:57 +0000</pubDate>
      
      <guid>https://antonz.ru/productology/</guid>
      <description>7 лет опыта разработки и развития облачного B2B-сервиса в одной статье.</description>
      <content:encoded><![CDATA[<p><em>7 лет опыта разработки и развития облачного B2B-сервиса в одной статье.</em></p>
<p>Привет! Я Антон Жиянов, техлид в <a href="https://dadata.ru">dadata.ru</a>. Разрабатываю опенсорс, веду курсы, пишу про Python, SQL, открытые данные и облачные сервисы (<a href="/projects/">много всего</a>).</p>
<p>Пара слов о «Дадате», чтобы задать контекст. Облачный B2B, основное использование — через API, маленькая распределённая команда, несколько десятков тысяч пользователей.</p>
<p>Ничего не буду писать о метриках, гроус-хакинге, касдеве, эджайле, митапах и других традиционных развлечениях продактов. Во-первых, вы это лучше меня знаете. Во-вторых, мне интереснее говорить о другом:</p>
<ul>
  <li><a href="#features">продукт и фичи</a></li>
  <li><a href="#b2b">B2B и кровавый энтерпрайз</a></li>
  <li><a href="#api">API и документация</a></li>
  <li><a href="#support">техподдержка</a></li>
  <li><a href="#development">разработка</a></li>
  <li><a href="#ui">интерфейс</a></li>
  <li><a href="#people">люди</a></li>
</ul>
<p>Дисклеймер: я часто пишу резко и категорично. Если вдруг вы не согласны — вы правы, а я нет. Не принимайте близко к сердцу, не теряйте чувство юмора.</p>
<h2 id="features">Продукт и фичи</h2>
<p>У меня скорее смешанное отношение к новым фичам. Конечно, люблю бизнес-фичи, которые увеличивают прибыль и охват. Они такие вкусные, ммм.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Как вы относитесь к новым фичам?" src="01.png">
  <figcaption>Большинство нежно любят новые фичи, а второе место love/hate делят с Маском.</figcaption>
</figure>
</div>
</div>
<p>Легко и приятно делать всякую мелкую полезную фигню. Доработать слегка демку, сделать понятнее что-нибудь в личном кабинете, добавить красивую страницу для ошибки.</p>
<p>Радостно уменьшать хаос и увеличивать порядок в продукте. Упорядочить документацию, сделать нормальное сравнение тарифов, поменять формулировки в интерфейсе, которые всех путают.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Как видит продакт VS как понимают пользователи" src="02.jpg">
  <figcaption>Как видит продакт VS как понимают пользователи</figcaption>
</figure>
</div>
</div>
<p>Весело пилить performance-фичи. Тут достаточно намекнуть разработчику и подождать, пока он всё отлично сделает. А потом ходишь надутый от гордости и всем рассказываешь, как МЫ увеличили скорость в два раза. Разве не ради этого мы стали продактами, друзья?</p>
<p>Скучновато делать всякие вспомогательные штуки, хотя понятно, что без них никуда. Поменять тарифные правила, переколбасить в очередной раз промо-страницы, доработать интеграцию с платёжной системой.</p>
<p>Категорически не годится брать в работу непрофильную муть, которая размывает фокус продукта. «Мы же обрабатываем адреса для интернет-магазинов, так давайте заодно агрегатор доставки сделаем». Ну уж нет.</p>
<p>Но ничто не сравнится с удовольствием УНИЧТОЖАТЬ старые фичи. Например, у нас была регистрация через соцсети с дополнительным экраном в конце. С каким удовольствием я его выпилил!</p>
<p><a href="/shoot-the-feature/">Как издеваться над фичами</a></p>
<h3 id="собирательство-фич">Собирательство фич</h3>
<p>Типичная проблема продакта: начали делать фичу, она не зашла, а бросить жалко (и «а вдруг взлетит»). Так и тащат за собой <a href="/abandoned-features/">недостроенную звезду смерти</a>.</p>
<p>«Собирательству» фич подвержены даже лучшие из нас. Первые версии iOS были логичными и выверенными до мелочей. Сейчас айось — это какой-то безумный игровой автомат: куда не ткни случайно, отовсюду что-то выезжает и выскакивает.</p>
<p>Другая западня — добавить фичу, потому что потенциальный клиент говорит «добавьте, и тогда я куплю». Ага, конечно. Я вообще считаю, что к мнению неплатящих пользователей стоит относиться ооочень скептически.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="А теперь о главном. Как правильно?" src="04.png">
  <figcaption>Если все согласны, что правильно фИча, почему в подкастах я постоянно слышу фичА? 🤔</figcaption>
</figure>
</div>
</div>
<h3 id="спецификации">Спецификации</h3>
<p>Поскольку люди в отрасли не могут жить спокойно, каждые три года они придумывают новую концепцию. Персоны, юзкейсы, юзер стори, джоб стори, CJM, whatever. Всё это лирика.</p>
<p>Реально важно одно:</p>
<blockquote class="big">Для каждой фичи или сценария понимать, кто потребитель и зачем это ему.</blockquote>
<p>Выясняется <a href="/persona-jtbd-cargo/">серией вопросов постановщику задачи</a>.</p>
<p>Кто и зачем — это важно. Конкретная методика — карго-культ.</p>
<h3 id="бодрость-исвежий-взгляд">Бодрость и свежий взгляд</h3>
<p>Главная проблема «долгоживущих» продакт-менеджеров и вообще любых сотрудников: со временем у человека замыливается глаз. Команда перестаёт видеть очевидные извне проблемы продукта и упускает возможности.</p>
<p>Знаю один сервис, где нельзя зарегистрировать двух пользователей с одинаковым именем (то есть не может быть две «Анны», например). Основатель мне на полном серьёзе объяснял, что это фича и так и должно быть.</p>
<p>Хотя со стороны очевидно, что это полная дичь.</p>
<p>Поэтому, если вы только пришли в проект, самое время вскрывать нелепые «багофичи», пока у вас свежий взгляд. Выписывайте всё, что кажется странным. Расспрашивайте коллег о причинах. Думайте, как достичь цели по-человечески, без костылей.</p>
<p>А если вы на проекте давно, то не отметайте с ходу «глупые» вопросы новичков. Лучше задумайтесь — вдруг люди «снаружи» считают вашу фичу глупым багом?</p>
<h2 id="b2b">B2B и кровавый энтерпрайз</h2>
<p>Делать продукты для бизнеса одно удовольствие! Люди настолько привыкли к плохим продуктам и плохому сервису, что когда вы делаете хорошо — работает как вау-фактор.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Над какими продуктами вам нравится работать?" src="05.png">
  <figcaption>B2B оказался лишь чуть популярнее роботов 🤷</figcaption>
</figure>
</div>
</div>
<p>B2C в этом смысле труднее, потому что там у людей завышенные ожидания. А в B2B — наоборот, заниженные. Хотя и в B2C плохих продуктов хватает. Особенно плохо с саппортом — обычно он предельно механистичный и бездушный, и чем крупнее сервис, тем хуже.</p>
<p>В B2B сложнее, что логика продукта сильно более навороченная. Не получится взять три простых юзкейса, зато «вылизать» их до идеала.</p>
<p>B2B тоже бывает очень разный. Есть low-touch sales, когда сайт продаёт сам, без сейлов, только за счёт маркетинга. Это достаточно похоже на B2C, «Дадата» именно так работает.</p>
<p>А есть high-touch aka «кровавый энтерпрайз», где отдельные продавцы, выездные демонстрации, пресейлы, пилотные проекты и вот это всё. Это уже совсем другая история, сильно отличная от B2C.</p>
<p>У Страйпа есть <a href="https://stripe.com/atlas/guides/business-of-saas">неплохая статья о разновидностях B2B</a>.</p>
<h3 id="счета-иакты">Счета и акты</h3>
<p>Самое «весёлое» в российском B2B — это документооборот, так же известный как «счета и акты». Если вы прискакали из мира мобилок на розовом пони, эта штука срежет вас как наточенный серп.</p>
<p>Бухгалтеры через одного не умеют платить без счёта (хотя вообще-то прекрасно можно жить без него). Сначала мы пытались бороться и объяснять, потом плюнули и сделали <a href="/too-simple/">волшебную страничку</a>.</p>
<p>С актами сложнее, поэтому мы честно печатали их каждый квартал, подписывали и рассылали по почте. Но с сотнями клиентов это превратилось в АД. Да ещё 20% актов теряла либо почта, либо бухгалтерия клиента.</p>
<p>Спас только переход на электронный документооборот (мы используем «<a href="https://www.diadoc.ru">Диадок</a>»). Теперь электронный акт у нас бесплатный, а бумажный — только курьером за отдельные деньги. Это прям хорошо помогло.</p>
<p>Да, и еще. Не позволяйте бухгалтеру <a href="/little-accountant-syndrome/">рулить бизнесом</a>.</p>
<h3 id="договор">Договор</h3>
<p>Веселее счетов и актов может быть только ДОГОВОР! Каждый третий клиент хочет его заключить, обязательно на бумаге, с мокрой печатью и подписью директора собственной кровью.</p>
<ul>
<li>Как это у вас нет договора? Вы работаете по оферте? Хорошо, нам подходит. Распечатайте её, подпишите, поставьте печать и высылайте Почтой России.</li>
<li>Как это оферта не требует согласования и подписания? Ну хорошо, можете не присылать бумагу, пришлите скан.</li>
<li>У наших юристов нашлось 128 замечаний к вашей оферте. Можете оперативно внести исправления? Заранее спасибо.</li>
<li>Ну хорошо, мы согласны работать по оферте. Давайте только сначала подпишем соглашение о работе по оферте.</li>
<li>Нет, мы категорически не согласны работать по оферте, обязательно нужен договор. Сколько-сколько он стоит? Мы готовы работать по оферте.</li>
</ul>
<p>И вот это всё продолжается в бесконечных вариациях. Доброжелательность и терпение — ваши друзья.</p>
<h3 id="тарифы-ицены">Тарифы и цены</h3>
<p>Тарифные планы в B2B обычно сложные. У нас, например, есть подписка с лимитами по фичам и объёмам, и есть отдельная оплата за каждую запись, да ещё с несколькими слоями скидок. Всё это усложняет жизнь как клиентам, так и команде.</p>
<p>Вот хороший обзор разных <a href="https://vc.ru/flood/24898-types-of-monetization">ценовых моделей для облачных сервисов</a>.</p>
<p>Часто B2B прячут цены. Хотя мы <a href="/pricing-contact-us/">сделали всё прозрачно</a>, и прекрасно зашло.</p>
<h3 id="ловушки">Ловушки</h3>
<p>В B2B клиенты любят (1) требовать сроки по конкретным фичам и (2) просить индивидуальные доработки. Называть сроки — плохая идея. А индивидуальные доработки — ОЧЕНЬ плохая идея.</p>
<p>Мы обычно называем сроки с точностью до года 🤷 Сильно реже — до квартала. Точнее — никогда.</p>
<p>На грабли с индивидуальной доработкой достаточно наступить один раз, чтобы отбить охоту заниматься этим на всю жизнь. Я, как полагается, разок наступил.</p>
<p>Самое неприятное, что эту ошибку тяжело исправить. Ненужную фичу приходится бесконечно тащить с собой в прекрасное будущее. Немного помогает плотно покрыть её автотестами и спрятать из документации, чтобы никто не догадался, что ЭТО существует.</p>
<h3 id="кровавый-энтерпрайз">Кровавый энтерпрайз</h3>
<p>Самый насупленный и серьёзный B2B — это не облако, а «коробка», которая настраивается и внедряется под специфику заказчика. Там прямо чувствуешь, как у тебя отшелушивается худи и начинает расти галстук.</p>
<p>На самом деле, над такими продуктами очень интересно работать, если команда хорошая. Но важно немножко хулиганить, а иначе можно в корпоративного зомбаря превратиться. В этом помогают <a href="/easter-egg/">пасхалки</a>, например.</p>
<p>Но лучше всего — живительные пинки здравого смысла от коллег, конечно.</p>
<p>Так что если вы всю жизнь в B2C и приуныли, можно попробовать коробочный B2B. Море интересных ощущений гарантирую. У меня коллега так сделал, и в результате столько добра причинил, что его просто ложками можно есть (добро, не коллегу).</p>
<h2 id="api">API и документация</h2>
<p>С одной стороны, делать API легче и приятнее, чем UI. Никакой тебе мудрёной логики взаимодействия, никаких Реактов и извратных UI-библиотек для мобилок.</p>
<p>С другой, стороны, неудачные решение в UI легко поменять. А ошибки в API остаются на всю жизнь, и это большая боль.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Что у вас с публичным API в продукте?" src="06.png">
  <figcaption>Большинство ребят работает над B2C, поэтому и API у них нет</figcaption>
</figure>
</div>
</div>
<p>Конечно, в книжках вам расскажут про версионирование API, но по факту всё обычно останавливается на второй-третьей версии, и дальше API только обрастает «мясом», постепенно теряя простоту и логичность.</p>
<p>Не знаю здесь универсальных рецептов. «Дадате» помогают две вещи:</p>
<ol>
<li>Сначала делать как можно проще, усложнить всегда успеем</li>
<li>Писать понятную документацию (OpenAPI — НЕ понятная документация)</li>
</ol>
<p>Понятная документация — это, прежде всего, примеры. Они помогают разработчикам работать даже с самым извратным API. И наоборот — без примеров даже над самым простым API приходится ломать голову.</p>
<p>Шикарная документация у Страйпа. <a href="https://stripe.com/docs/api">Посмотрите</a> и сравните с обычной автогенерённой по OpenAPI докой. А вот как у Страйпа реализовано <a href="https://stripe.com/blog/api-versioning">версионирование API</a> «под капотом».</p>
<p>Очень помогает сделать по примеру на каждый популярный юзкейс. Хорошо предусмотреть популярные языки — JS, PHP, Python, C#, Java. Для этого можно использовать <a href="https://www.postman.com/">Postman</a>, например — он умеет генерить код на разных языках.</p>
<h3 id="сторонние-модули">Сторонние модули</h3>
<p>Самое веселье начинается, когда сторонние компании начинают делать интеграции к вашему продукту. Например, «Дадата» интегрируется с Битриксом, amoCRM, и кучей других сервисов. Всё это — партнёрские интеграции.</p>
<p>Обеспечить стабильно высокое качество сторонней интеграции нереально без огромных трудозатрат на проверку и контроль за партнёрами. Дело осложняется тем, что партнёрский модуль для того же Битрикса потенциально может конфликтовать с миллионом других модулей.</p>
<p>В итоге неизбежно появляются глючные интеграции. Винят за них, естественно, вас, а не партнёра (ಠ_ಠ)</p>
<p>Бывают реально странные случаи. Один человек сделал модуль для нашего бесплатного сервиса. Я посмотрел, вроде всё ОК, выложил на сайт. И тут люди начинают жаловаться, что с них списывают деньги за использование модуля. Начинаю разбираться, залезаю в исходники. А там аккуратно в самом сердце модуля спрятан вызов другого нашего сервиса, уже платного. Зачем разработчик так сделал? Непонятно.</p>
<p>Хеппи-энда для партнёрских интеграций я не вижу. Смотрел, как дела у других крупных сервисов. Везде одно и то же: где модули пишут сторонние разработчики — там сразу проблемы. Пользовательский рейтинг немного улучшает положение, но тоже не панацея.</p>
<h3 id="инструменты">Инструменты</h3>
<p>Про Postman я уже сказал — он просто маст хэв.</p>
<p><a href="https://httpbingo.org/">httpbingo</a> показывает приходящие в него запросы, заголовки и прочую хурму. Помогает, если нужно посмотреть, в чём проблема с запросами пользователя. Ещё более мощная штука — <a href="https://mitmproxy.org">mitmproxy</a></p>
<p>С помощью <a href="https://apiembed.com">APIembed</a> можно встроить примеры вызова API на разных языках.</p>
<p>Совершенно гениальная штука <a href="https://badssl.com">badssl.com</a> — он имитирует все возможные проблемы с SSL-сертификатами и конфигурациями.</p>
<h2 id="support">Техподдержка</h2>
<p>Обожаю её. Нигде вы не получите столько честной обратной связи, как в саппорте. Касдев отдыхает.</p>
<p>Многие продакты изо всех сил огораживаются от саппорта, и достучаться до них через техподдержку нереально. Считаю это огромной ошибкой.</p>
<p>Обращения в техподдержку как прожектором подсвечивают все проблемы продукта — глупо этом не пользоваться. Я до сих пор читаю все тикеты, на некоторые сам отвечаю. Бодрит невероятно, всем рекомендую.</p>
<p>Саппорт не только показывает проблемы, но и подсказывает новые фичи. Главное — не верить «плюсам», которые пользователи ставят при голосовании, а выяснять конкретный <a href="/users-not-backlog/">сценарий использования</a> в каждом случае.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Что думаете о техподдержке?" src="07.png">
  <figcaption>Торжество здравого смысла в голосовании по саппорту</figcaption>
</figure>
</div>
</div>
<p>Саппорт — это ещё и невероятно увлекательно. Нигде вы не встретите столько новых людей и офигительных историй, как в техподдержке.</p>
<p>Например, благодаря саппорту я умею вызывать API «Дадаты» на C#, Java, JS, Python, PHP, Go, Delphi, VBScript и PL/SQL. Некоторые из этих примеров я предпочёл бы забыть.</p>
<h3 id="обратная-связь">Обратная связь</h3>
<p>Интересно вышло с оценкой качества поддержки. Интерком начал использовать шкалу из 5 эмодзи:</p>
<p>😠 🙁 😐 😃 😍</p>
<p>Многие скопировали. А Интерком через два года заменил 😍 на 🤩 — потому что мужики отказывались ставить сердечки другим мужикам ツ</p>
<p>Лично я предпочитаю <a href="/rating-as-feedback/">бинарную шкалу</a> «понравилось / нет» + текстовый комментарий. Но все гуру поддержки такой подход категорически осуждают.</p>
<h3 id="инструменты-1">Инструменты</h3>
<p>Самый известный, конечно, <a href="https://intercom.com">Intercom</a>. Мы используем <a href="http://userecho.com">Userecho</a> — он не такой проработанный в мелочах, но зато обладает ОГРОМНЫМ количеством фич.</p>
<p>Если продукт как-то связан с JS (у нас, например, js-виджет, который использует куча пользователей), то незаменимая штука — <a href="https://codepen.io">Codepen</a>. Там и примеры, и воспроизведение проблем, и всё что хочешь. Намного приятнее, чем JSFiddle. Советуют еще <a href="https://codesandbox.io/">CodeSandbox</a>, но я не пробовал.</p>
<p>Если надо получить информацию о браузере пользователя, то <a href="https://yandex.ru/internet/">yandex.ru/internet</a> (хотя там внизу дурацкая надпись «Если вы лично не обращались в службу поддержки Яндекса, не передавайте никому данные с этой страницы»)</p>
<p>Если какая-то замороченная проблема, которую не получается воспроизвести на Codepen, можно попросить человека записать все запросы через Хром и <a href="https://support.zendesk.com/hc/en-us/articles/204410413-Generating-a-HAR-file-for-troubleshooting">прислать HAR-архив</a>.</p>
<h2 id="development">Разработка</h2>
<p>Вывел для себя два правила:</p>
<ol>
<li>Всегда лучше брать готовое, чем писать самим.</li>
<li>Автоматизировать процесс только после того, как отработали вручную.</li>
</ol>
<p>Для любых «непрофильных» фич лучше использовать готовые решения. У нас это весь бэкофис, саппорт, счета и акты, платежи, метрики, админка.</p>
<p>Бэкофис для небольшой команды вообще прекрасно делается на гуглодоках или Airtable. Ещё интересно выглядит <a href="http://tryretool.com">Retool</a>, но в работе я его не пробовал. Вообще, если нравятся no-code решения, посмотрите <a href="https://n8n.io/">n8n.io</a> — это такой опенсорсный Zapier.</p>
<p>Одна из главных печалек для меня — что пришлось делать собственный биллинг. Сейчас в Европе или США можно взять Stripe, а для России до сих пор ничего нет. Интересно выглядел <a href="https://priceplan.ru/ru/">PricePlan</a>, но у него безумная комиссия и не видно развития.</p>
<h3 id="not-invented-here">Not invented here</h3>
<p>Not Invented Here у продактов в России цветёт буйным цветом. Главная заповедь плохого продакта:</p>
<blockquote class="big">Лучше сами, но никогда, чем чужое, но сейчас</blockquote>
<p>Реально, сколько раз сталкивался. Говоришь им «ребята, у вас с вводом адреса беда, возьмите „Дадату“ и исправьте за неделю». Отвечают «да, мы знаем, но сторонних решений не надо, все сделаем сами, уже в беклог добавили». Заходишь через два года проверить — ничего не изменилось. ЗАТО САМИ.</p>
<h3 id="mvp-иговнокод">MVP и говнокод</h3>
<p>Очень опасная тема. Я думаю, что говнокодить можно, только если вы 100% знаете, что код на выброс или будет полностью переписан в течение года.</p>
<p>Конечно, не стоит впадать и в противоположную крайность, и сразу начинать строгать дизайн-систему, распределённую архитектуру, и прочую хурму, которая оправдана только для больших систем.</p>
<p>По моим наблюдениям, нормальный модульный код с разумно организованными зависимостями и тестами подходит для 95% случаев. Оставшиеся 5%, когда можно яростно говнокодить, в реальности встречаются редко.</p>
<h2 id="ui">Интерфейс</h2>
<p>В B2B продуктах особые красоты не требуются, достаточно аккуратного UI без явных косяков. Главное — понятность.</p>
<p>Часто встречаю: нарисовали красиво, а основной сценарий в интерфейсе не проработан. Вплоть до того, что баннер «СКИДКА 10%» напрочь закрывает кнопку покупки. Это провал.</p>
<p>Ещё беда: идиотские ограничения. Имя «Ян» ввести нельзя, слишком короткое. С емейлом <span>info@dadata.ru</span> регистрироваться нельзя, слишком общий. Адрес без улицы ввести нельзя — программист не знает, что существуют деревни. Тоже провал.</p>
<p>И ещё: настройки. Это бич продуктов, боритесь с ними всеми силами. Для простоты можно считать, что каждая новая настройка — это признание вашего продуктового бессилия ツ Немного радикально, но задаёт нужный ход мыслей.</p>
<p>А вот <a href="https://medium.com/@imran_parvez/designing-settings-b2a96878961b">как проектировать настройки</a>.</p>
<p>Если продакт считает, что в интерфейсах должен понимать только дизайнер — продукт гарантированно будет отстойный. Понимать должны все — и сам продакт, и разработчики фронтенда, и тестировщики, и саппортеры.</p>
<p>Чтобы объяснить программисту, что дизайн интерфейса — это не про анимацию и игры со шрифтами, покажите ему статью про <a href="/laws/">законы робототехники в интерфейсе</a>.</p>
<h2 id="people">Суперсила продакта</h2>
<p>Напоследок пара слов о продакт-менеджерах в целом. Я думаю, что суперсила продакта — это здравый смысл. Пока всех остальных участников команды вечно заносит чёрти куда, продакт сохраняет здоровый скепсис и критическое мышление.</p>
<p>Поэтому я не верю в чуваков, которые думают, что голая пассионарность приведёт продукт к цели. Давайте начистоту, ребята:</p>
<blockquote class="big">Мы ни разу не Джобсы и не Маски</blockquote>
<p>Наша задача — не бежать впереди толпы с горящим сердцем в руке. Наша задача — баланс.</p>
<p>И точно так же не верю в ребят, которые обмазались со всех сторон метриками, и думают, что данные дают ответы на все вопросы. Продукт — больше про людей, чем про данные. Ну, если у вас не фейсбук, конечно.</p>
<p>Хорошего продакта не бывает в отрыве от предметной области. Поэтому я не понимаю коллег, которые сегодня делают ритейл, завтра такси, а послезавтра финтех.</p>
<p>По-настоящему хорошие продуктовые решения возможны, только когда ты погружён в предметку. Если продакт каждый год на новом проекте — это всё равно что его нет. Зачем он такой нужен?</p>
<p>Продакт-менеджмент, как и любой менеджмент — не универсальная дисциплина. Универсальный продакт — плохой продакт. Продакт, который нежно любит предметку — хороший, берегите его.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Здесь могли бы быть рекомендации книг, курсов и телеграм-каналов. Но вместо этого лучше рекомендую побольше полагаться на критическое мышление. Очень помогает отсеивать шлак и оставлять ценное — как на работе, так и по жизни.</p>
<p>Спасибо! И подписывайтесь в твитере — <a href="https://twitter.com/nalgeon">@nalgeon</a></p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Специально для подписчиков <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсов без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Задачка: айти-вахтёр</title>
      <link>https://antonz.ru/watchman-puzzle/</link>
      <pubDate>Thu, 21 Feb 2019 12:13:51 +0000</pubDate>
      
      <guid>https://antonz.ru/watchman-puzzle/</guid>
      <description>Как не грозить пальцем человеку без необходимости.</description>
      <content:encoded><![CDATA[<p>По моим наблюдениям, разработчики (и дизайнеры, в меньшей степени) очень любят запрещать. Я это называю «синдром айти-вахтёра».</p>
<p>Например, есть известная коллективная блог-площадка. Там можно голосовать за статьи, и если случайно ткнуть на голосовалку дважды, получаешь суровое:</p>
<blockquote>
<p>Повторное голосование запрещено</p>
</blockquote>
<p>А если нажать много раз — будет чудесная картина, которая изображена на скриншоте. Присмотритесь, у каждого сообщения есть собственный прогресс-бар обратного отсчёта. Инженерный дизайн ツ</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
  <p><img alt="Повторное голосование запрещено" src="watchman.png" class="img-bordered-thin"></p>
</div>
</div>
<p>Вопрос: Как бы вы поступили с этим сообщением?</p>
<h2 id="решение">Решение</h2>
<p>Вот результаты голосования подписчиков:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Результаты опроса" src="watchman-poll.png" class="img-bordered">
  <figcaption>Победитель — деактивировать кнопку</figcaption>
</figure>
</div>
</div>
<p>Приятно видеть такое единодушие ツ Разберём варианты:</p>
<h3 id="всё-нормально-оставлю-так">Всё нормально, оставлю так</h3>
<p>Понимаю, жаль отказываться от такой красоты. Там целая система! Мало того, что у каждого сообщения собственный обратный отсчёт. Так ещё если сообщений больше 5, то дополнительные становятся в очередь и выскакивают только после того, как закрылись предыдущие. Кто-то явно потрудился над этим ツ</p>
<p>Но всё же для пользователя сообщение бесполезно.</p>
<h3 id="переформулирую-впозитив">Переформулирую в позитив</h3>
<p>Формулировать сообщение об ошибке в позитиве («вы уже проголосовали» вместо «повторное голосование запрещено») — хорошая мысль, если сообщение действительно нужно. Здесь оно ничем не помогает, так что смысла нет.</p>
<h3 id="уберу-текст-покажу-визуально">Уберу текст, покажу визуально</h3>
<p>Подходящий способ для валидации обязательного поля на форме, например. Здесь же нет пользовательской ошибки, повторное голосование никому не мешает, так что сигнализировать о нём не стоит.</p>
<h3 id="задизейблю-кнопку-если-уже-есть-голос">Задизейблю кнопку, если уже есть голос</h3>
<p>Простой и рабочий вариант. Если человек уже проголосовал «в плюс», то дальнейшие тыки на кнопку можно спокойно игнорировать. Нет ошибки, нет проблемы, все счастливы.</p>
<p>При этом визуально кнопка не должна дизейблиться (становиться серой) — чтобы не смущать человека. Достаточно деактивировать её, то есть игнорировать повторные нажатия.</p>
<p>После голосования кнопка остаётся визуально «нажатой», чтобы человеку было понятно — голос уже отдан:</p>
<p><img alt="Кнопка «вверх» нажата" src="watchman-vote.png" class="img-bordered"></p>
<h3 id="снимать-голос-при-повторном-тыке">Снимать голос при повторном тыке</h3>
<p>Этот вариант предложили в личке. Мне он не очень нравится. Если бы действие было одно (как лайк в фейсбуке) — да, логично, при повторном нажатии отменять его (снимать лайк).</p>
<p>Но тут в интерфейсе два раздельных действия (плюс и минус). И снимать плюс при повторном нажатии на плюс — нелогично.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Сегодня == сейчас</title>
      <link>https://antonz.ru/today-is-now/</link>
      <pubDate>Tue, 19 Feb 2019 12:32:15 +0000</pubDate>
      
      <guid>https://antonz.ru/today-is-now/</guid>
      <description>Работа с датой-временем не слишком удалась в Питоне ツ</description>
      <content:encoded><![CDATA[<p>В каждом языке есть участки, которые не особо удались создателям. Для большинства языков, созданных до двухтысячных годов, камнем преткновения стала работа со временем.</p>
<p>Питон — не исключение. Возьмём функцию, которая сравнивает дату-время с точностью до минуты:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">datetime</span> <span style="color:#a90d91">import</span> <span style="color:#000">datetime</span>, <span style="color:#000">timezone</span>

<span style="color:#a90d91">def</span> <span style="color:#000">equal</span>(<span style="color:#000">dt1</span>, <span style="color:#000">dt2</span>):
  <span style="color:#a90d91">return</span> <span style="color:#000">dt1</span><span style="color:#000">.</span><span style="color:#000">replace</span>(<span style="color:#000">second</span><span style="color:#000">=</span><span style="color:#1c01ce">0</span>, <span style="color:#000">microsecond</span><span style="color:#000">=</span><span style="color:#1c01ce">0</span>) <span style="color:#000">==</span> \
    <span style="color:#000">dt2</span><span style="color:#000">.</span><span style="color:#000">replace</span>(<span style="color:#000">second</span><span style="color:#000">=</span><span style="color:#1c01ce">0</span>, <span style="color:#000">microsecond</span><span style="color:#000">=</span><span style="color:#1c01ce">0</span>)
</code></pre></div><p>И сравним «сегодня» и «сейчас»:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">equal</span>(<span style="color:#000">datetime</span><span style="color:#000">.</span><span style="color:#000">today</span>(), <span style="color:#000">datetime</span><span style="color:#000">.</span><span style="color:#000">now</span>())
<span style="color:#a90d91">True</span>
</code></pre></div><p>Оказывается, это одно и то же ツ Метод <code>today()</code> возвращает не начало дня, как можно было бы ожидать, а текущий момент времени.</p>
<p>А что насчёт времени по UTC?</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">equal</span>(<span style="color:#000">datetime</span><span style="color:#000">.</span><span style="color:#000">now</span>(<span style="color:#000">timezone</span><span style="color:#000">.</span><span style="color:#000">utc</span>), <span style="color:#000">datetime</span><span style="color:#000">.</span><span style="color:#000">utcnow</span>())
<span style="color:#a90d91">False</span>
</code></pre></div><p>Неожиданно, <code>now()</code> с часовым поясом UTC и <code>utcnow()</code> возвращают разные значения. Это потому, что <code>now()</code> возвращает объект с часовым поясом, а <code>utcnow()</code> — без. Хотя дата-время у них и совпадают.</p>
<p>Если работать с датой-временем средствами стандартной библиотеки, лучше всегда использовать или только наивные объекты (без часового пояса), или только осведомлённые (с часовым поясом). Если их смешать — гарантированно будет беда.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Обработать заявки с учётом приоритетов</title>
      <link>https://antonz.ru/heapq/</link>
      <pubDate>Mon, 18 Feb 2019 13:35:18 +0000</pubDate>
      
      <guid>https://antonz.ru/heapq/</guid>
      <description>С помощью модуля heapq</description>
      <content:encoded><![CDATA[<p>Если система обрабатывает заявки, редко бывает, что все они одинакового веса. Чаще встречаются разные приоритеты: клиенты бывают обычные и VIP, баги бывают минорные и критические, заказы бывают «до 1000 ₽» и «10000+ ₽».</p>
<p>Если приоритетов нет, обслуживать заявки просто: кто раньше пришёл, того раньше и обслужили (first in, first out — FIFO). С приоритетами сложнее: более важные заявки должны идти вперёд, но среди заявок с одинаковым приоритетом по-прежнему должен действовать принцип FIFO.</p>
<p>Допустим, была у нас система без приоритетов:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">collections</span> <span style="color:#a90d91">import</span> <span style="color:#000">deque</span>

<span style="color:#a90d91">def</span> <span style="color:#000">process</span>(<span style="color:#000">requests</span>):
    <span style="color:#a90d91">while</span> <span style="color:#000">requests</span>:
        <span style="color:#000">client</span>, <span style="color:#000">task</span> <span style="color:#000">=</span> <span style="color:#000">requests</span><span style="color:#000">.</span><span style="color:#000">pop</span>()
        <span style="color:#a90d91">print</span>(<span style="color:#c41a16">f</span><span style="color:#c41a16">&#34;</span><span style="color:#c41a16">{</span><span style="color:#000">client</span><span style="color:#c41a16">}</span><span style="color:#c41a16">: </span><span style="color:#c41a16">{</span><span style="color:#000">task</span><span style="color:#c41a16">}</span><span style="color:#c41a16">&#34;</span>)

<span style="color:#000">requests</span> <span style="color:#000">=</span> <span style="color:#000">deque</span>()
<span style="color:#000">requests</span><span style="color:#000">.</span><span style="color:#000">appendleft</span>((<span style="color:#c41a16">&#34;Лукас&#34;</span>, <span style="color:#c41a16">&#34;нарвать бананов&#34;</span>))
<span style="color:#000">requests</span><span style="color:#000">.</span><span style="color:#000">appendleft</span>((<span style="color:#c41a16">&#34;Зоя&#34;</span>, <span style="color:#c41a16">&#34;почесать спинку&#34;</span>))
<span style="color:#000">requests</span><span style="color:#000">.</span><span style="color:#000">appendleft</span>((<span style="color:#c41a16">&#34;Френк&#34;</span>, <span style="color:#c41a16">&#34;насыпать зёрен&#34;</span>))

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">process</span>(<span style="color:#000">requests</span>)
<span style="color:#000">Лукас</span>: <span style="color:#000">нарвать</span> <span style="color:#000">бананов</span>
<span style="color:#000">Зоя</span>: <span style="color:#000">почесать</span> <span style="color:#000">спинку</span>
<span style="color:#000">Френк</span>: <span style="color:#000">насыпать</span> <span style="color:#000">зёрен</span>
</code></pre></div><p>Обработка по порядку, всё честно. А теперь допустим, что у заявки появился вес:</p>
<ul>
<li>→ Лукас, вес 1</li>
<li>→ Зоя, вес 1</li>
<li>→ Френк, вес 10</li>
</ul>
<p>Френк с весом 10 должен пойти первым. А Зоя и Лукас — после него, в порядке поступления: сначала Лукас, потом Зоя.</p>
<p>Реализовать эту логику поможет модуль <code>heapq</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">heapq</span>
<span style="color:#a90d91">import</span> <span style="color:#000">time</span>
<span style="color:#000">requests</span> <span style="color:#000">=</span> []

<span style="color:#000">heapq</span><span style="color:#000">.</span><span style="color:#000">heappush</span>(<span style="color:#000">requests</span>,
  (<span style="color:#000">-</span><span style="color:#1c01ce">1</span>, <span style="color:#000">time</span><span style="color:#000">.</span><span style="color:#000">time_ns</span>(), <span style="color:#c41a16">&#34;Лукас&#34;</span>))
<span style="color:#000">heapq</span><span style="color:#000">.</span><span style="color:#000">heappush</span>(<span style="color:#000">requests</span>,
  (<span style="color:#000">-</span><span style="color:#1c01ce">1</span>, <span style="color:#000">time</span><span style="color:#000">.</span><span style="color:#000">time_ns</span>(), <span style="color:#c41a16">&#34;Зоя&#34;</span>))
<span style="color:#000">heapq</span><span style="color:#000">.</span><span style="color:#000">heappush</span>(<span style="color:#000">requests</span>,
  (<span style="color:#000">-</span><span style="color:#1c01ce">10</span>, <span style="color:#000">time</span><span style="color:#000">.</span><span style="color:#000">time_ns</span>(), <span style="color:#c41a16">&#34;Френк&#34;</span>))
</code></pre></div><p>Здесь первым аргументом мы передаём вес заявки. <code>heapq.heappush()</code> ставит первыми элементы с <em>меньшим</em> значением, так что берём вес со знаком минус.</p>
<p>Вторым аргументом передаём текущее время в наносекундах, чтобы заявки с одинаковым весом разрешались в порядке поступления.</p>
<p>Проверим результат:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">def</span> <span style="color:#000">process</span>(<span style="color:#000">requests</span>):
    <span style="color:#a90d91">while</span> <span style="color:#000">requests</span>:
        <span style="color:#000">_</span>, <span style="color:#000">_</span>, <span style="color:#000">client</span> <span style="color:#000">=</span> <span style="color:#000">heapq</span><span style="color:#000">.</span><span style="color:#000">heappop</span>(<span style="color:#000">requests</span>)
        <span style="color:#a90d91">print</span>(<span style="color:#c41a16">f</span><span style="color:#c41a16">&#34;</span><span style="color:#c41a16">{</span><span style="color:#000">client</span><span style="color:#c41a16">}</span><span style="color:#c41a16">&#34;</span>)

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">process</span>(<span style="color:#000">requests</span>)
<span style="color:#000">Френк</span>
<span style="color:#000">Лукас</span>
<span style="color:#000">Зоя</span>
</code></pre></div><p>Порядок!</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Открытка несовершенным людям</title>
      <link>https://antonz.ru/imperfect/</link>
      <pubDate>Sun, 17 Feb 2019 13:31:04 +0000</pubDate>
      
      <guid>https://antonz.ru/imperfect/</guid>
      <description>Вот что с вами не так.</description>
      <content:encoded><![CDATA[<p>Если вы не используете тайм-менеджмент и техники повышения эффективности. Если вы не читаете по книге в неделю. Если вы не медитируете и не повышаете свою осознанность. Если вы не занимаетесь нетворкингом, не посещаете митапы и конференции, не ведёте видеоблог, подкаст и стримы.</p>
<p>Если вы не ходите в спортзал по три раза в неделю. Если вы не бегаете марафоны и не стремитесь осилить Iron Man. Если вы не катаетесь на лыжах, борде, скейте, кайте, байке и самокате. Если вы не придерживаетесь диеты и бегаете по ночам к холодильнику.</p>
<p>Если вы не посещаете психотерапевта. Если вы не занимаетесь с личным коучем. Если у вас нет ментора и идеалов для подражания. Если вы не читаете книги о правильном воспитании детей, не используете контейнирование и «я-сообщения». Если вы тупите в телефон и срываетесь на близких, когда устали.</p>
<p>Если вы не увлекаетесь танцами, йогой, рукоделием, музыкой, спортом, чтением, коллекционированием, путешествиями, рисованием, флористикой, стрельбой, рыбалкой, охотой, автомобилями, дачей, домашними животными, кулинарией и даже мыловарением.</p>
<p>То знайте — с вами всё хорошо. Плюньте в глаз тому, кто утверждает обратное.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Тарифный план «свяжитесь с нами»</title>
      <link>https://antonz.ru/pricing-contact-us/</link>
      <pubDate>Mon, 11 Feb 2019 13:18:13 +0000</pubDate>
      
      <guid>https://antonz.ru/pricing-contact-us/</guid>
      <description>Как «Дадата» показала цены на все тарифы и к чему это привело.</description>
      <content:encoded><![CDATA[<p>Облачные сервисы для бизнеса обычно делают несколько тарифов с понятной ценой и один топовый в стиле «свяжитесь с нами».</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<figure>
  <img alt="Тарифы Интеркома" src="pricing-intercom.png" class="img-grayscale img-bordered-thin">
  <figcaption>Вот «Интерком» предлагает «chat with us»</figcaption>
</figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-10">
<figure>
  <img alt="Тарифы Airtable" src="pricing-airtable.png" class="img-grayscale img-bordered-thin">
  <figcaption>А вот Airtable рисует звёздочки вместо ценника</figcaption>
</figure>
</div>
</div>
<br>
<p>У «<a href="https://dadata.ru">Дадаты</a>» тоже так было:</p>
<figure>
  <img alt="Тарифы Дадаты" src="pricing-dadata.png" class="img-grayscale">
  <figcaption>Свяжитесь с нами, чтобы узнать, сколько стоит получить все-все фичи</figcaption>
</figure>
<p>Не берусь судить, насколько такой подход хорош или плох в общем случае. Наверняка, у «Интеркома» и «Эйртейбла» он оправдан. Но по личному опыту в «Дадате» — от скрытого ценника одни проблемы:</p>
<ul>
<li>Одни спрашивают «сколько стоит», потому что им действительно нужен топовый тариф.</li>
<li>Другие хотят купить «расширенный», но боятся, что позже потребуется «всё включено». Вдруг он неадекватно дорог? Тоже спрашивают.</li>
<li>Третьи вообще ничего покупать не собираются, но им очень любопытно узнать цену.</li>
</ul>
<p>В результате у поддержки много времени уходит на расчёт цены вместо реальной помощи людям.</p>
<p>Со временем нам это надоело, и теперь тарифы выглядят так:</p>
<figure>
  <img alt="Новые тарифы Дадаты" src="pricing-1.png">
  <figcaption>Теперь топовый тариф можно купить точно так же, как остальные</figcaption>
</figure>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p><img alt="Больше запросов — выше цена" src="pricing-switch-1.png"></p>
</div>
<div class="col-xs-12 col-sm-4">
<div class="figcaption">Человек сам выбирает нужное количество запросов, цена меняется соответственно.</div>
</div>
</div>
<p>Вопросы о цене почти полностью прекратились, а покупать меньше не стали.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Затем мы взялись за «коробку». Коробка — это версия «Дадаты», которую можно поставить на свой сервер. Почти у всех известных мне сервисов стоимость «коробки» на сайте не разглашают. Так было и у «Дадаты»:</p>
<p><img alt="Коробка — запросить стоимость" src="box-was.png" class="img-grayscale img-bordered-thin"></p>
<p>Поток любопытствующих о цене коробки был нескончаемым. Каждый второй веб-мастер с виртуальным хостингом непременно хотел себе коробочную версию — пока не узнавал стоимость.</p>
<p>Мы решили её не скрывать:</p>
<p><img alt="Коробка — стоимость на сайте" src="box-now.png" class="img-bordered-thin"></p>
<p>Ценник сразу отсекает тех, кто не готов платить больше за персональную «Дадату» на собственном сервере. Это хорошо, потому что такие люди всё равно не покупали.</p>
<p>При этом понятно, что вот так сходу покупать софт за 400К ₽ мало кто будет — сначала люди хотят узнать подробности установки, настройки и поддержки. Поэтому осталась кнопка, которая приглашает к диалогу — теперь она называется «запросить договор».</p>
<p>За год после нововведения мы стали тратить меньше времени на ответы о цене, а «коробок» продали больше, чем прежде.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Конечно, это не универсальный рецепт. Если у вашего продукта расчёт цены требует специально обученного человека, а удержать все нюансы ценообразования в голове невозможно, то кнопка «свяжитесь с нами» — единственный рабочий вариант.</p>
<p>Но если тарифная сетка достаточно простая, зачем её скрывать? Так и вопросов меньше, и покупателям удобнее.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Выбрать топ-k элементов списка</title>
      <link>https://antonz.ru/heapq-nlargest/</link>
      <pubDate>Mon, 11 Feb 2019 10:32:16 +0000</pubDate>
      
      <guid>https://antonz.ru/heapq-nlargest/</guid>
      <description>С помощью heapq.nlargest()</description>
      <content:encoded><![CDATA[<p>Сегодня новое соревнование — граждане города выбирают самое наглое животное. Результаты опроса поступили в виде неупорядоченного списка пар «количество голосов — участник»:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">contenders</span> <span style="color:#000">=</span> [
  (<span style="color:#1c01ce">31</span>, <span style="color:#c41a16">&#34;индюк&#34;</span>),
  (<span style="color:#1c01ce">22</span>, <span style="color:#c41a16">&#34;крыса&#34;</span>),
  (<span style="color:#1c01ce">79</span>, <span style="color:#c41a16">&#34;кот&#34;</span>),
  (<span style="color:#1c01ce">98</span>, <span style="color:#c41a16">&#34;голубь&#34;</span>),
  (<span style="color:#1c01ce">13</span>, <span style="color:#c41a16">&#34;собака&#34;</span>),
  (<span style="color:#1c01ce">95</span>, <span style="color:#c41a16">&#34;енот&#34;</span>),
  (<span style="color:#1c01ce">15</span>, <span style="color:#c41a16">&#34;хомяк&#34;</span>),
]
</code></pre></div><p>Осталось, как обычно, выбрать трёх победителей. Как насчёт такого:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">sorted</span>(<span style="color:#000">contenders</span>)[<span style="color:#000">-</span><span style="color:#1c01ce">3</span>:]
[(<span style="color:#1c01ce">79</span>, <span style="color:#c41a16">&#39;кот&#39;</span>), (<span style="color:#1c01ce">95</span>, <span style="color:#c41a16">&#39;енот&#39;</span>), (<span style="color:#1c01ce">98</span>, <span style="color:#c41a16">&#39;голубь&#39;</span>)]
</code></pre></div><p>Неплохо. Но, как вы помните, сортировка списка занимает <code>O(n log n)</code> операций. Жирновато, чтобы просто выбрать топ-3 элемента.</p>
<p>Вот альтернатива:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">import</span> <span style="color:#000">heapq</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">heapq</span><span style="color:#000">.</span><span style="color:#000">nlargest</span>(<span style="color:#1c01ce">3</span>, <span style="color:#000">contenders</span>)
[(<span style="color:#1c01ce">98</span>, <span style="color:#c41a16">&#39;голубь&#39;</span>), (<span style="color:#1c01ce">95</span>, <span style="color:#c41a16">&#39;енот&#39;</span>), (<span style="color:#1c01ce">79</span>, <span style="color:#c41a16">&#39;кот&#39;</span>)]
</code></pre></div><p>Такой вариант использует только <code>O(n)</code> операций — при небольшом <code>k</code> (в данном случае <code>k = 3</code>). Для больших <code>k</code> вариант с <code>sorted()</code> эффективнее.</p>
<p>Ну а если <code>k = 1</code> (выбираем одного победителя), то так:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">max</span>(<span style="color:#000">contenders</span>)
(<span style="color:#1c01ce">98</span>, <span style="color:#c41a16">&#39;голубь&#39;</span>)
</code></pre></div><p>Я даже знаю, как его зовут ツ</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Объединить отсортированные списки в один</title>
      <link>https://antonz.ru/heapq-merge/</link>
      <pubDate>Mon, 04 Feb 2019 10:26:00 +0000</pubDate>
      
      <guid>https://antonz.ru/heapq-merge/</guid>
      <description>С помощью heapq.merge()</description>
      <content:encoded><![CDATA[<p>Предположим, вы решили провести чемпионат мира по оглаживанию собак. Кто погладит больше всех шерстяных волчар за день, тот и победил. Участники не смогли собраться вместе, поэтому каждый город провёл независимое состязание и прислал результат:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">washington</span> <span style="color:#000">=</span> [
    (<span style="color:#1c01ce">99</span>, <span style="color:#c41a16">&#34;Френк&#34;</span>),
    (<span style="color:#1c01ce">80</span>, <span style="color:#c41a16">&#34;Клер&#34;</span>),
    (<span style="color:#1c01ce">73</span>, <span style="color:#c41a16">&#34;Зоя&#34;</span>)
]

<span style="color:#000">moscow</span> <span style="color:#000">=</span> [
    (<span style="color:#1c01ce">90</span>, <span style="color:#c41a16">&#34;Валера&#34;</span>),
    (<span style="color:#1c01ce">88</span>, <span style="color:#c41a16">&#34;Мария&#34;</span>),
    (<span style="color:#1c01ce">50</span>, <span style="color:#c41a16">&#34;Анатолий&#34;</span>)
]

<span style="color:#000">beijing</span> <span style="color:#000">=</span> [
    (<span style="color:#1c01ce">123</span>, <span style="color:#c41a16">&#34;Чан&#34;</span>),
    (<span style="color:#1c01ce">109</span>, <span style="color:#c41a16">&#34;Пинг&#34;</span>),
    (<span style="color:#1c01ce">70</span>,  <span style="color:#c41a16">&#34;Ки&#34;</span>),
]
</code></pre></div><p>Теперь ваша задача — выбрать трёх призёров. Я знаю как минимум один простой способ:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">all</span> <span style="color:#000">=</span> <span style="color:#a90d91">sorted</span>(<span style="color:#000">washington</span> <span style="color:#000">+</span> <span style="color:#000">moscow</span> <span style="color:#000">+</span> <span style="color:#000">beijing</span>)
<span style="color:#000">winners</span> <span style="color:#000">=</span> <span style="color:#a90d91">all</span>[<span style="color:#000">-</span><span style="color:#1c01ce">3</span>:]

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">winners</span>
[(<span style="color:#1c01ce">99</span>, <span style="color:#c41a16">&#39;Френк&#39;</span>), (<span style="color:#1c01ce">109</span>, <span style="color:#c41a16">&#39;Пинг&#39;</span>), (<span style="color:#1c01ce">123</span>, <span style="color:#c41a16">&#39;Чан&#39;</span>)]
</code></pre></div><p>Если всего <code>n</code> участников, такая реализация займёт <code>2n</code> памяти и потребует <code>O(n log n)</code> операций. Довольно расточительно.</p>
<p>Можно сделать то же самое за константное время и память:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">import</span> <span style="color:#000">heapq</span>

<span style="color:#a90d91">all</span> <span style="color:#000">=</span> <span style="color:#000">heapq</span><span style="color:#000">.</span><span style="color:#000">merge</span>(<span style="color:#000">washington</span>, <span style="color:#000">moscow</span>, <span style="color:#000">beijing</span>, <span style="color:#000">reverse</span><span style="color:#000">=</span><span style="color:#a90d91">True</span>)

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">next</span>(<span style="color:#a90d91">all</span>)
(<span style="color:#1c01ce">123</span>, <span style="color:#c41a16">&#39;Чан&#39;</span>)

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">next</span>(<span style="color:#a90d91">all</span>)
(<span style="color:#1c01ce">109</span>, <span style="color:#c41a16">&#39;Пинг&#39;</span>)

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">next</span>(<span style="color:#a90d91">all</span>)
(<span style="color:#1c01ce">99</span>, <span style="color:#c41a16">&#39;Френк&#39;</span>)
</code></pre></div><p><code>heapq.merge()</code> возвращает генератор, который работает поверх исходных коллекций — поэтому не расходует лишнюю память. И он учитывает, что исходные списки уже отсортированы — поэтому не выполняет лишних действий.</p>
<p>P.S. Френк, всего лишь третье место. Не ожидал от тебя.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Кортеж здорового человека</title>
      <link>https://antonz.ru/namedtuple/</link>
      <pubDate>Fri, 01 Feb 2019 11:52:24 +0000</pubDate>
      
      <guid>https://antonz.ru/namedtuple/</guid>
      <description>С помощью collections.namedtuple</description>
      <content:encoded><![CDATA[<p>Эта статья — об одном из лучших изобретений Python: именованном кортеже (namedtuple). Мы рассмотрим его приятные особенности, от известных до неочевидных. Уровень погружения в тему будет нарастать постепенно, так что, надеюсь, каждый найдёт для себя что-то интересное. Поехали!</p>
<h2 id="введение">Введение</h2>
<p>Наверняка вы сталкивались с ситуацией, когда нужно передать несколько свойств объекта одним куском. Например, информацию о домашнем питомце: тип, кличка и возраст.</p>
<p>Часто создавать отдельный класс под это дело лень, и используют кортежи:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">(<span style="color:#c41a16">&#34;pigeon&#34;</span>, <span style="color:#c41a16">&#34;Френк&#34;</span>, <span style="color:#1c01ce">3</span>)
(<span style="color:#c41a16">&#34;fox&#34;</span>, <span style="color:#c41a16">&#34;Клер&#34;</span>, <span style="color:#1c01ce">7</span>)
(<span style="color:#c41a16">&#34;parrot&#34;</span>, <span style="color:#c41a16">&#34;Питер&#34;</span>, <span style="color:#1c01ce">1</span>)
</code></pre></div><p>Для большей наглядности подойдёт именованный кортеж — <code>collections.namedtuple</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">collections</span> <span style="color:#a90d91">import</span> <span style="color:#000">namedtuple</span>

<span style="color:#000">Pet</span> <span style="color:#000">=</span> <span style="color:#000">namedtuple</span>(<span style="color:#c41a16">&#34;Pet&#34;</span>, <span style="color:#c41a16">&#34;type name age&#34;</span>)
<span style="color:#000">frank</span> <span style="color:#000">=</span> <span style="color:#000">Pet</span>(<span style="color:#a90d91">type</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;pigeon&#34;</span>, <span style="color:#000">name</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;Френк&#34;</span>, <span style="color:#000">age</span><span style="color:#000">=</span><span style="color:#1c01ce">3</span>)

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">frank</span><span style="color:#000">.</span><span style="color:#000">age</span>
<span style="color:#1c01ce">3</span>
</code></pre></div><p>Это все знают ツ А вот несколько менее известных особенностей:</p>
<h2 id="быстрое-изменение-полей">Быстрое изменение полей</h2>
<p>Что делать, если одно из свойств надо изменить? Френк стареет, а кортеж-то неизменяемый. Чтобы не пересоздавать его целиком, придумали метод <code>_replace()</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">frank</span><span style="color:#000">.</span><span style="color:#000">_replace</span>(<span style="color:#000">age</span><span style="color:#000">=</span><span style="color:#1c01ce">4</span>)
<span style="color:#000">Pet</span>(<span style="color:#a90d91">type</span><span style="color:#000">=</span><span style="color:#c41a16">&#39;pigeon&#39;</span>, <span style="color:#000">name</span><span style="color:#000">=</span><span style="color:#c41a16">&#39;Френк&#39;</span>, <span style="color:#000">age</span><span style="color:#000">=</span><span style="color:#1c01ce">4</span>)
</code></pre></div><p>А если хотите сделать всю структуру изменяемой — <code>_asdict()</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">frank</span><span style="color:#000">.</span><span style="color:#000">_asdict</span>()
<span style="color:#000">OrderedDict</span>([(<span style="color:#c41a16">&#39;type&#39;</span>, <span style="color:#c41a16">&#39;pigeon&#39;</span>), (<span style="color:#c41a16">&#39;name&#39;</span>, <span style="color:#c41a16">&#39;Френк&#39;</span>), (<span style="color:#c41a16">&#39;age&#39;</span>, <span style="color:#1c01ce">3</span>)])
</code></pre></div><h2 id="автоматическая-замена-названий">Автоматическая замена названий</h2>
<p>Допустим, вы импортируете данные из CSV и превращаете каждую строчку в кортеж. Названия полей взяли из заголовка CSV-файла. Но что-то идёт не так:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#177500"># headers = (&#34;name&#34;, &#34;age&#34;, &#34;with&#34;)</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">Pet</span> <span style="color:#000">=</span> <span style="color:#000">namedtuple</span>(<span style="color:#c41a16">&#34;Pet&#34;</span>, <span style="color:#000">headers</span>)
<span style="color:#000">ValueError</span>: <span style="color:#000">Type</span> <span style="color:#000">names</span> <span style="color:#000">and</span> <span style="color:#000">field</span> <span style="color:#000">names</span> <span style="color:#000">cannot</span> <span style="color:#000">be</span> <span style="color:#000">a</span> <span style="color:#000">keyword</span>: <span style="color:#c41a16">&#39;with&#39;</span>

<span style="color:#177500"># headers = (&#34;name&#34;, &#34;age&#34;, &#34;name&#34;)</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">Pet</span> <span style="color:#000">=</span> <span style="color:#000">namedtuple</span>(<span style="color:#c41a16">&#34;Pet&#34;</span>, <span style="color:#000">headers</span>)
<span style="color:#000">ValueError</span>: <span style="color:#000">Encountered</span> <span style="color:#000">duplicate</span> <span style="color:#000">field</span> <span style="color:#000">name</span>: <span style="color:#c41a16">&#39;name&#39;</span>
</code></pre></div><p>Решение — аргумент <code>rename=True</code> в конструкторе:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#177500"># headers = (&#34;name&#34;, &#34;age&#34;, &#34;with&#34;, &#34;color&#34;, &#34;name&#34;, &#34;food&#34;)</span>
<span style="color:#000">Pet</span> <span style="color:#000">=</span> <span style="color:#000">namedtuple</span>(<span style="color:#c41a16">&#34;Pet&#34;</span>, <span style="color:#000">headers</span>, <span style="color:#000">rename</span><span style="color:#000">=</span><span style="color:#a90d91">True</span>)

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">Pet</span><span style="color:#000">.</span><span style="color:#000">_fields</span>
(<span style="color:#c41a16">&#39;name&#39;</span>, <span style="color:#c41a16">&#39;age&#39;</span>, <span style="color:#c41a16">&#39;_2&#39;</span>, <span style="color:#c41a16">&#39;color&#39;</span>, <span style="color:#c41a16">&#39;_4&#39;</span>, <span style="color:#c41a16">&#39;food&#39;</span>)
</code></pre></div><p>«Неудачные» названия переименовались в соответствии с порядковыми номерами.</p>
<h2 id="значения-по-умолчанию">Значения по умолчанию</h2>
<p>Если у кортежа куча необязательных полей, всё равно приходится каждый раз перечислять их при создании объекта:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">Pet</span> <span style="color:#000">=</span> <span style="color:#000">namedtuple</span>(<span style="color:#c41a16">&#34;Pet&#34;</span>, <span style="color:#c41a16">&#34;type name alt_name&#34;</span>)

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">Pet</span>(<span style="color:#c41a16">&#34;pigeon&#34;</span>, <span style="color:#c41a16">&#34;Френк&#34;</span>)
<span style="color:#000">TypeError</span>: <span style="color:#000">__new__</span>() <span style="color:#000">missing</span> <span style="color:#1c01ce">1</span> <span style="color:#000">required</span> <span style="color:#000">positional</span> <span style="color:#000">argument</span>: <span style="color:#c41a16">&#39;alt_name&#39;</span>

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">Pet</span>(<span style="color:#c41a16">&#34;pigeon&#34;</span>, <span style="color:#c41a16">&#34;Френк&#34;</span>, <span style="color:#a90d91">None</span>)
<span style="color:#000">Pet</span>(<span style="color:#a90d91">type</span><span style="color:#000">=</span><span style="color:#c41a16">&#39;pigeon&#39;</span>, <span style="color:#000">name</span><span style="color:#000">=</span><span style="color:#c41a16">&#39;Френк&#39;</span>, <span style="color:#000">alt_name</span><span style="color:#000">=</span><span style="color:#a90d91">None</span>)
</code></pre></div><p>Чтобы этого избежать, укажите в конструкторе аргумент <code>defaults</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">Pet</span> <span style="color:#000">=</span> <span style="color:#000">namedtuple</span>(<span style="color:#c41a16">&#34;Pet&#34;</span>, <span style="color:#c41a16">&#34;type name alt_name&#34;</span>, <span style="color:#000">defaults</span><span style="color:#000">=</span>(<span style="color:#c41a16">&#34;нет&#34;</span>,))

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">Pet</span>(<span style="color:#c41a16">&#34;pigeon&#34;</span>, <span style="color:#c41a16">&#34;Френк&#34;</span>)
<span style="color:#000">Pet</span>(<span style="color:#a90d91">type</span><span style="color:#000">=</span><span style="color:#c41a16">&#39;pigeon&#39;</span>, <span style="color:#000">name</span><span style="color:#000">=</span><span style="color:#c41a16">&#39;Френк&#39;</span>, <span style="color:#000">alt_name</span><span style="color:#000">=</span><span style="color:#c41a16">&#39;нет&#39;</span>)
</code></pre></div><p><code>defaults</code> присваивает умолчательные значения с хвоста. Работает в питоне 3.7+</p>
<p>Для старых версий можно более коряво добиться того же результата через прототип:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">Pet</span> <span style="color:#000">=</span> <span style="color:#000">namedtuple</span>(<span style="color:#c41a16">&#34;Pet&#34;</span>, <span style="color:#c41a16">&#34;type name alt_name&#34;</span>)
<span style="color:#000">default_pet</span> <span style="color:#000">=</span> <span style="color:#000">Pet</span>(<span style="color:#a90d91">None</span>, <span style="color:#a90d91">None</span>, <span style="color:#c41a16">&#34;нет&#34;</span>)

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">default_pet</span><span style="color:#000">.</span><span style="color:#000">_replace</span>(<span style="color:#a90d91">type</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;pigeon&#34;</span>, <span style="color:#000">name</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;Френк&#34;</span>)
<span style="color:#000">Pet</span>(<span style="color:#a90d91">type</span><span style="color:#000">=</span><span style="color:#c41a16">&#39;pigeon&#39;</span>, <span style="color:#000">name</span><span style="color:#000">=</span><span style="color:#c41a16">&#39;Френк&#39;</span>, <span style="color:#000">alt_name</span><span style="color:#000">=</span><span style="color:#c41a16">&#39;нет&#39;</span>)

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">default_pet</span><span style="color:#000">.</span><span style="color:#000">_replace</span>(<span style="color:#a90d91">type</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;fox&#34;</span>, <span style="color:#000">name</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;Клер&#34;</span>)
<span style="color:#000">Pet</span>(<span style="color:#a90d91">type</span><span style="color:#000">=</span><span style="color:#c41a16">&#39;fox&#39;</span>, <span style="color:#000">name</span><span style="color:#000">=</span><span style="color:#c41a16">&#39;Клер&#39;</span>, <span style="color:#000">alt_name</span><span style="color:#000">=</span><span style="color:#c41a16">&#39;нет&#39;</span>)
</code></pre></div><p>Но с <code>defaults</code>, конечно, куда приятнее.</p>
<h2 id="необычайная-лёгкость">Необычайная лёгкость</h2>
<p>Одно из преимуществ именованного кортежа — легковесность. Армия из ста тысяч голубей займёт всего 10 мегабайт:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">collections</span> <span style="color:#a90d91">import</span> <span style="color:#000">namedtuple</span>
<span style="color:#a90d91">import</span> <span style="color:#000">objsize</span>  <span style="color:#177500"># 3rd party</span>

<span style="color:#000">Pet</span> <span style="color:#000">=</span> <span style="color:#000">namedtuple</span>(<span style="color:#c41a16">&#34;Pet&#34;</span>, <span style="color:#c41a16">&#34;type name age&#34;</span>)
<span style="color:#000">frank</span> <span style="color:#000">=</span> <span style="color:#000">Pet</span>(<span style="color:#a90d91">type</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;pigeon&#34;</span>, <span style="color:#000">name</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;Френк&#34;</span>, <span style="color:#000">age</span><span style="color:#000">=</span><span style="color:#a90d91">None</span>)

<span style="color:#000">pigeons</span> <span style="color:#000">=</span> [<span style="color:#000">frank</span><span style="color:#000">.</span><span style="color:#000">_replace</span>(<span style="color:#000">age</span><span style="color:#000">=</span><span style="color:#000">idx</span>) <span style="color:#a90d91">for</span> <span style="color:#000">idx</span> <span style="color:#000">in</span> <span style="color:#a90d91">range</span>(<span style="color:#1c01ce">100000</span>)]

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">round</span>(<span style="color:#000">objsize</span><span style="color:#000">.</span><span style="color:#000">get_deep_size</span>(<span style="color:#000">pigeons</span>)<span style="color:#000">/</span>(<span style="color:#1c01ce">1024</span><span style="color:#000">**</span><span style="color:#1c01ce">2</span>), <span style="color:#1c01ce">2</span>)
<span style="color:#1c01ce">10.3</span>
</code></pre></div><p>Для сравнения, если Pet сделать обычным классом, аналогичный список займёт уже 19 мегабайт.</p>
<p>Так происходит, потому что обычные объекты в питоне таскают с собой увесистый дандер <code>__dict__</code>, в котором лежат названия и значения всех атрибутов объекта:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">class</span> <span style="color:#3f6e75">PetObj</span>:
    <span style="color:#a90d91">def</span> <span style="color:#000">__init__</span>(<span style="color:#5b269a">self</span>, <span style="color:#a90d91">type</span>, <span style="color:#000">name</span>, <span style="color:#000">age</span>):
        <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">type</span> <span style="color:#000">=</span> <span style="color:#a90d91">type</span>
        <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">name</span> <span style="color:#000">=</span> <span style="color:#000">name</span>
        <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">age</span> <span style="color:#000">=</span> <span style="color:#000">age</span>

<span style="color:#000">frank_obj</span> <span style="color:#000">=</span> <span style="color:#000">PetObj</span>(<span style="color:#a90d91">type</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;pigeon&#34;</span>, <span style="color:#000">name</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;Френк&#34;</span>, <span style="color:#000">age</span><span style="color:#000">=</span><span style="color:#1c01ce">3</span>)

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">frank_obj</span><span style="color:#000">.</span><span style="color:#000">__dict__</span>
{<span style="color:#c41a16">&#39;type&#39;</span>: <span style="color:#c41a16">&#39;pigeon&#39;</span>, <span style="color:#c41a16">&#39;name&#39;</span>: <span style="color:#c41a16">&#39;Френк&#39;</span>, <span style="color:#c41a16">&#39;age&#39;</span>: <span style="color:#1c01ce">3</span>}
</code></pre></div><p>Объекты-namedtuple же лишены этого словаря, а потому занимают меньше памяти:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">frank</span> <span style="color:#000">=</span> <span style="color:#000">Pet</span>(<span style="color:#a90d91">type</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;pigeon&#34;</span>, <span style="color:#000">name</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;Френк&#34;</span>, <span style="color:#000">age</span><span style="color:#000">=</span><span style="color:#1c01ce">3</span>)

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">frank</span><span style="color:#000">.</span><span style="color:#000">__dict__</span>
<span style="color:#000">AttributeError</span>: <span style="color:#c41a16">&#39;Pet&#39;</span> <span style="color:#a90d91">object</span> <span style="color:#000">has</span> <span style="color:#000">no</span> <span style="color:#000">attribute</span> <span style="color:#c41a16">&#39;__dict__&#39;</span>

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">objsize</span><span style="color:#000">.</span><span style="color:#000">get_deep_size</span>(<span style="color:#000">frank_obj</span>)
<span style="color:#1c01ce">335</span>

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">objsize</span><span style="color:#000">.</span><span style="color:#000">get_deep_size</span>(<span style="color:#000">frank</span>)
<span style="color:#1c01ce">239</span>
</code></pre></div><p>Но как именованному кортежу удалось избавиться от <code>__dict__</code>? Читайте дальше ツ</p>
<h2 id="богатый-внутренний-мир">Богатый внутренний мир</h2>
<p>Если вы давно работаете с питоном, то наверняка знаете: легковесный объект можно создать через дандер <code>__slots__</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">class</span> <span style="color:#3f6e75">PetSlots</span>:
    <span style="color:#000">__slots__</span> <span style="color:#000">=</span> (<span style="color:#c41a16">&#34;type&#34;</span>, <span style="color:#c41a16">&#34;name&#34;</span>, <span style="color:#c41a16">&#34;age&#34;</span>)
  
    <span style="color:#a90d91">def</span> <span style="color:#000">__init__</span>(<span style="color:#5b269a">self</span>, <span style="color:#a90d91">type</span>, <span style="color:#000">name</span>, <span style="color:#000">age</span>):
        <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">type</span> <span style="color:#000">=</span> <span style="color:#a90d91">type</span>
        <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">name</span> <span style="color:#000">=</span> <span style="color:#000">name</span>
        <span style="color:#5b269a">self</span><span style="color:#000">.</span><span style="color:#000">age</span> <span style="color:#000">=</span> <span style="color:#000">age</span>

<span style="color:#000">frank_slots</span> <span style="color:#000">=</span> <span style="color:#000">PetSlots</span>(<span style="color:#a90d91">type</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;pigeon&#34;</span>, <span style="color:#000">name</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;Френк&#34;</span>, <span style="color:#000">age</span><span style="color:#000">=</span><span style="color:#1c01ce">3</span>)
</code></pre></div><p>У «слотовых» объектов нет словаря с атрибутами, поэтому они занимают мало памяти. «Френк на слотах» такой же лёгкий, как «Френк на кортеже», смотрите:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">objsize</span><span style="color:#000">.</span><span style="color:#000">get_deep_size</span>(<span style="color:#000">frank</span>)
<span style="color:#1c01ce">239</span>

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">objsize</span><span style="color:#000">.</span><span style="color:#000">get_deep_size</span>(<span style="color:#000">frank_slots</span>)
<span style="color:#1c01ce">231</span>
</code></pre></div><p>Если вы решили, что namedtuple тоже использует слоты — это недалеко от истины. Как вы помните, конкретные классы-кортежи объявляются динамически:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">Pet</span> <span style="color:#000">=</span> <span style="color:#000">namedtuple</span>(<span style="color:#c41a16">&#34;Pet&#34;</span>, <span style="color:#c41a16">&#34;type name age&#34;</span>)
</code></pre></div><p>Конструктор namedtuple применяет разную тёмную магию и генерит примерно такой класс (сильно упрощаю):</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">class</span> <span style="color:#3f6e75">Pet</span>(<span style="color:#a90d91">tuple</span>):
    <span style="color:#000">__slots__</span> <span style="color:#000">=</span> ()
  
    <span style="color:#a90d91">type</span> <span style="color:#000">=</span> <span style="color:#a90d91">property</span>(<span style="color:#000">operator</span><span style="color:#000">.</span><span style="color:#000">itemgetter</span>(<span style="color:#1c01ce">0</span>))
    <span style="color:#000">name</span> <span style="color:#000">=</span> <span style="color:#a90d91">property</span>(<span style="color:#000">operator</span><span style="color:#000">.</span><span style="color:#000">itemgetter</span>(<span style="color:#1c01ce">1</span>))
    <span style="color:#000">age</span> <span style="color:#000">=</span> <span style="color:#a90d91">property</span>(<span style="color:#000">operator</span><span style="color:#000">.</span><span style="color:#000">itemgetter</span>(<span style="color:#1c01ce">2</span>))
  
    <span style="color:#a90d91">def</span> <span style="color:#000">__new__</span>(<span style="color:#5b269a">cls</span>, <span style="color:#a90d91">type</span>, <span style="color:#000">name</span>, <span style="color:#000">age</span>):
        <span style="color:#a90d91">return</span> <span style="color:#a90d91">tuple</span><span style="color:#000">.</span><span style="color:#000">__new__</span>(<span style="color:#5b269a">cls</span>, (<span style="color:#a90d91">type</span>, <span style="color:#000">name</span>, <span style="color:#000">age</span>))
</code></pre></div><p>То есть наш Pet — это обычный <code>tuple</code>, к которому гвоздями приколотили три метода-свойства:</p>
<ul>
<li><code>type</code> возвращает нулевой элемент кортежа</li>
<li><code>name</code> — первый элемент кортежа</li>
<li><code>age</code> — второй элемент кортежа</li>
</ul>
<p>А <code>__slots__</code> нужен только для того, чтобы объекты получились лёгкими. В результате Pet и занимает мало места, и может использоваться как обычный кортеж:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">frank</span><span style="color:#000">.</span><span style="color:#000">index</span>(<span style="color:#c41a16">&#34;Френк&#34;</span>)
<span style="color:#1c01ce">1</span>

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">type</span>, <span style="color:#000">_</span>, <span style="color:#000">_</span> <span style="color:#000">=</span> <span style="color:#000">frank</span>
<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#a90d91">type</span>
<span style="color:#c41a16">&#39;pigeon&#39;</span>
</code></pre></div><p>Хитро придумано, а?</p>
<h2 id="неуступает-дата-классам">Не уступает дата-классам</h2>
<p>Раз уж мы заговорили о генерации кода. В питоне 3.7 появился убер-генератор кода, которому нет равных — дата-классы (dataclasses).</p>
<p>Когда впервые видишь дата-класс, хочется перейти на новую версию языка только ради него:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a90d91">from</span> <span style="color:#000">dataclasses</span> <span style="color:#a90d91">import</span> <span style="color:#000">dataclass</span>

<span style="color:#000">@dataclass</span>
<span style="color:#a90d91">class</span> <span style="color:#3f6e75">PetData</span>:
    <span style="color:#a90d91">type</span>: <span style="color:#a90d91">str</span>
    <span style="color:#000">name</span>: <span style="color:#a90d91">str</span>
    <span style="color:#000">age</span>: <span style="color:#a90d91">int</span>
</code></pre></div><p>Чудо как хорош! Но есть нюанс — он толстый:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">frank_data</span> <span style="color:#000">=</span> <span style="color:#000">PetData</span>(<span style="color:#a90d91">type</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;pigeon&#34;</span>, <span style="color:#000">name</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;Френк&#34;</span>, <span style="color:#000">age</span><span style="color:#000">=</span><span style="color:#1c01ce">3</span>)

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">objsize</span><span style="color:#000">.</span><span style="color:#000">get_deep_size</span>(<span style="color:#000">frank_data</span>)
<span style="color:#1c01ce">335</span>

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">objsize</span><span style="color:#000">.</span><span style="color:#000">get_deep_size</span>(<span style="color:#000">frank</span>)
<span style="color:#1c01ce">239</span>
</code></pre></div><p>Дата-класс генерит обычный питонячий класс, объекты которого изнемогают под тяжестью <code>__dict__</code>. Так что если вы начитываете из базы вагон строк и превращаете их в объекты, дата-классы — не лучший выбор.</p>
<p>Но постойте, дата-класс ведь можно «заморозить», как кортеж. Может тогда он станет легче?</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#000">@dataclass</span>(<span style="color:#000">frozen</span><span style="color:#000">=</span><span style="color:#a90d91">True</span>)
<span style="color:#a90d91">class</span> <span style="color:#3f6e75">PetFrozen</span>:
    <span style="color:#a90d91">type</span>: <span style="color:#a90d91">str</span>
    <span style="color:#000">name</span>: <span style="color:#a90d91">str</span>
    <span style="color:#000">age</span>: <span style="color:#a90d91">int</span>

<span style="color:#000">frank_frozen</span> <span style="color:#000">=</span> <span style="color:#000">PetFrozen</span>(<span style="color:#a90d91">type</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;pigeon&#34;</span>, <span style="color:#000">name</span><span style="color:#000">=</span><span style="color:#c41a16">&#34;Френк&#34;</span>, <span style="color:#000">age</span><span style="color:#000">=</span><span style="color:#1c01ce">3</span>)

<span style="color:#000">&gt;&gt;&gt;</span> <span style="color:#000">objsize</span><span style="color:#000">.</span><span style="color:#000">get_deep_size</span>(<span style="color:#000">frank_frozen</span>)
<span style="color:#1c01ce">335</span>
</code></pre></div><p>Увы. Даже замороженный, он остался обычным увесистым объектом со словарём атрибутов. Так что если вам нужны лёгкие неизменяемые объекты (которые к тому же можно использовать как обычные кортежи) — namedtuple по-прежнему лучший выбор.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Мне очень нравится именованный кортеж:</p>
<ul>
<li>честный iterable,</li>
<li>динамическое объявление типов,</li>
<li>именованный доступ к атрибутам,</li>
<li>лёгкий и неизменяемый.</li>
</ul>
<p>И при этом реализован в 150 строк кода. Что ещё надо для счастья ツ</p>
<p><em>Если хотите узнать больше о стандартной библиотеке Python — подписывайтесь на канал <a href="https://t.me/ohmypy">@ohmypy</a></em></p>
<p><em><a href="https://habr.com/ru/post/438162/#comments">33 комментария</a></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Из десятичной дроби — в обычную</title>
      <link>https://antonz.ru/float-as-integer-ratio/</link>
      <pubDate>Sat, 26 Jan 2019 15:42:48 +0000</pubDate>
      
      <guid>https://antonz.ru/float-as-integer-ratio/</guid>
      <description>float.as_integer_ratio() не так прост, как кажется.</description>
      <content:encoded><![CDATA[<p>У класса <code>float</code> есть прекрасный метод <code>as_integer_ratio()</code>, который представляет десятичную дробь в виде обычной — пары «числитель, знаменатель»:</p>
<pre tabindex="0"><code>&gt;&gt;&gt; (0.25).as_integer_ratio()
(1, 4)

&gt;&gt;&gt; (0.5).as_integer_ratio()
(1, 2)

&gt;&gt;&gt; (0.75).as_integer_ratio()
(3, 4)
</code></pre><p>Так вот. Никогда им не пользуйтесь ツ Потому что:</p>
<pre tabindex="0"><code>&gt;&gt;&gt; (0.2).as_integer_ratio()
(3602879701896397, 18014398509481984)
</code></pre><p>Виной всему стандарт представления дробных чисел IEEE 754, который реализует float.</p>
<p>Используйте <code>Decimal</code>:</p>
<pre tabindex="0"><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal(&quot;0.2&quot;).as_integer_ratio()
(1, 5)
</code></pre><p>Уверен, вы и так это знаете. Просто на всякий случай ツ</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Хранить последние N объектов</title>
      <link>https://antonz.ru/deque-maxlen/</link>
      <pubDate>Fri, 25 Jan 2019 09:06:58 +0000</pubDate>
      
      <guid>https://antonz.ru/deque-maxlen/</guid>
      <description>С помощью deque(maxlen).</description>
      <content:encoded><![CDATA[<p>Допустим, вы пишете систему учёта посетителей для музея изящных искусств в Хиросиме (не спрашивайте). Одно из требований безопасников — команда tail, которая показывает трёх последних визитёров. Как её реализовать?</p>
<p>Конечно, можно складывать всех прибывших в список и по запросу выдавать из него последние 3 элемента:</p>
<pre tabindex="0"><code>TAIL_COUNT = 3
visitors = []

def handle(visitor):
  visitors.append(visitor)

def tail():
  return visitors[-TAIL_COUNT:]

handle(&quot;Питер&quot;)
handle(&quot;Клер&quot;)
handle(&quot;Френк&quot;)
handle(&quot;Кен Чан&quot;)
handle(&quot;Гоу Чан&quot;)

&gt;&gt;&gt; visitors
['Питер', 'Клер', 'Френк', 'Кен Чан', 'Гоу Чан']

&gt;&gt;&gt; tail()
['Френк', 'Кен Чан', 'Гоу Чан']
</code></pre><p>Но как-то не очень правильно хранить всех посетителей только ради того, чтобы показывать последних трёх, верно? Нам поможет <code>collections.deque</code>:</p>
<pre tabindex="0"><code>from collections import deque

visitors = deque(maxlen=3)

def handle(visitor):
  visitors.append(visitor)

def tail():
  return list(visitors)

handle(&quot;Питер&quot;)
handle(&quot;Клер&quot;)
handle(&quot;Френк&quot;)
handle(&quot;Кен Чан&quot;)
handle(&quot;Гоу Чан&quot;)

&gt;&gt;&gt; visitors
deque(['Френк', 'Кен Чан', 'Гоу Чан'], maxlen=3)

&gt;&gt;&gt; tail()
['Френк', 'Кен Чан', 'Гоу Чан']
</code></pre><p><code>deque</code> (double-ended queue) хранит не более <code>maxlen</code> элементов, автоматически «выпихивая» старые при добавлении новых.</p>
<p>А ещё она добавляет элементы в начало и в конец за O(1), в отличие от списка, у которого это O(n). Идеально подходит, если коллекция часто модифицируется, а выбирать элементы по индексу не надо.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Задачка: «очистить» vs «удалить»</title>
      <link>https://antonz.ru/empty-vs-delete-puzzle/</link>
      <pubDate>Thu, 24 Jan 2019 12:24:40 +0000</pubDate>
      
      <guid>https://antonz.ru/empty-vs-delete-puzzle/</guid>
      <description>Как исключить путаницу между созвучными действиями в интерфейсе</description>
      <content:encoded><![CDATA[<p>На скриншоте интерфейс управления почтовыми ящиками. В контекстном меню есть действия <em>Empty</em> (очистить ящик) и <em>Delete</em> (удалить ящик). Я постоянно их путаю, и удаляю ящики, вместо того, чтобы очистить.</p>
<p><img alt="Очистить или удалить" src="empty-vs-delete.png" class="img-bordered"></p>
<p>Вопрос: Как минимально изменить интерфейс, чтобы уменьшить вероятность ошибки?</p>
<h2 id="решение">Решение</h2>
<p>Вот результаты голосования подписчиков:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Результаты опроса" src="empty-vs-delete-results.png" class="img-bordered">
  <figcaption>Победитель — убрать Delete в настройки</figcaption>
</figure>
</div>
</div>
<p>Я согласен с большинством — лучше убрать <em>Delete</em> в настройки. Удаление почтового ящика — редкая операция, ей нечего делать в контекстном меню. <em>Empty</em> же используется часто: это тестовая почта, ящики время от времени чистят.</p>
<p>Почему остальные варианты нравятся меньше:</p>
<ul>
<li>
<p><em>Переименовать, чтобы стало понятнее</em>. Как не переименовывай, оба пункта останутся близкими по смыслу, а значит ошибки никуда не уйдут.</p>
</li>
<li>
<p><em>Сделать Delete красным и добавить иконку</em>. Это, скорее всего, сработает. Но визуальный акцент на редкой операции — так себе решение.</p>
</li>
<li>
<p><em>Убрать Empty в настройки</em>. Этот вариант я специально добавил, чтобы чуть усложнить выбор ツ Думаю, тут всё понятно.</p>
</li>
</ul>
<p>В личку несколько раз прислали ещё один вариант:</p>
<ul>
<li><em>Добавить подтверждение на Delete</em>. Оно там и так есть, ничуть не помогает. Подтверждения не работают, потому что для рутинных операций люди их не читают</li>
</ul>
<p>Перенос Delete в настройки решает задачу, делает интерфейс проще и лёгок в реализации. Лучший вариант!</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Подвох в функции sum()</title>
      <link>https://antonz.ru/sum-gotcha/</link>
      <pubDate>Mon, 21 Jan 2019 11:49:29 +0000</pubDate>
      
      <guid>https://antonz.ru/sum-gotcha/</guid>
      <description>«unsupported operand type(s) for &#43;» — что происходит вообще?</description>
      <content:encoded><![CDATA[<p>Сидите вы на работе и смотрите на дневную статистику по заявкам разных типов:</p>
<pre tabindex="0"><code>monday = {&quot;question&quot;: 1, &quot;problem&quot;: 3, &quot;idea&quot;: 2}
tuesday = {&quot;problem&quot;: 5, &quot;idea&quot;: 1}
wednesday = {&quot;question&quot;: 2, &quot;problem&quot;: 2}
</code></pre><div class="row">
<div class="col-xs-12 col-sm-10">
<p>Задача — посчитать агрегированную статистику за все дни. Всё вроде понятно. Тут подходит тимлид и говорит, что если решите задачу однострочником, он подарит вам жёлтую резиновую уточку.</p>
<p>Устоять перед этим решительно невозможно.</p>
</div>
<div class="col-xs-12 col-sm-2">
<figure>
  <img alt="Уточка" src="duck.jpg">
</figure>
</div>
</div>
<h2 id="словари--счётчики">Словари → счётчики</h2>
<p>Сначала от словарей надо перейти к счётчикам. Воспользуемся для этого функцией <code>map()</code>. Она принимает на входе функцию и последовательность (iterable), после чего применяет функцию к каждому элементу последовательности и возвращает, что получилось. Например:</p>
<pre tabindex="0"><code>&gt;&gt;&gt; mapped = map(abs, [-1, -2, -3])
&gt;&gt;&gt; list(mapped)
[1, 2, 3]
</code></pre><p><code>abs()</code> возвращает абсолютное значение числа, а <code>list()</code> тут нужен, чтобы отработал map (сам по себе он ленивый, пока не пнёшь — не полетит).</p>
<p>В нашем случае последовательностью будет набор дневных статистик, а функцией — конструктор счётчика:</p>
<pre tabindex="0"><code>&gt;&gt;&gt; map(Counter, [monday, tuesday, wednesday])
&lt;map object at 0x10cae2470&gt;
</code></pre><p>map object — это итератор, который сделает из словарей счётчики, когда нам это действительно понадобится — в момент суммирования.</p>
<h2 id="счётчики--агрегат">Счётчики → агрегат</h2>
<p>Окей, теперь осталось только посчитать сумму от этого добра. Как мы знаем, у счётчиков перекрыт оператор сложения, так что почему бы просто не вызвать <code>sum()</code> на них?</p>
<pre tabindex="0"><code>&gt;&gt;&gt; sum(map(Counter, [monday, tuesday, wednesday]))
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for +: 'int' and 'Counter'
</code></pre><p>Эээ, что? Откуда тут <code>int</code>, мы же суммируем объекты <code>Counter</code>?</p>
<p>Оказывается, функция <code>sum()</code> принимает два аргумента:</p>
<ol>
<li>последовательность, которую суммируем</li>
<li>первое слагаемое для итоговой суммы, по умолчанию — 0</li>
</ol>
<p>Например:</p>
<pre tabindex="0"><code>&gt;&gt;&gt; sum([1, 2, 3])
6

&gt;&gt;&gt; sum([1, 2, 3], 10)
16
</code></pre><p>Получается, в нашем случае <code>sum()</code> пытается сложить 0 со счётчиком от <code>monday</code>, и, естественно, ломается. Решение — передать в качестве первого слагаемого пустой счётчик:</p>
<pre tabindex="0"><code>sum(..., Counter())
</code></pre><p>Объединяем всё вместе:</p>
<pre tabindex="0"><code>&gt;&gt;&gt; sum(map(Counter, [monday, tuesday, wednesday]), Counter())
Counter({'problem': 10, 'question': 3, 'idea': 3})
</code></pre><p>Готово!</p>
<h2 id="почему-вздыхает-гвидо">Почему вздыхает Гвидо</h2>
<p>Гвидо ван Россум недолюбливает <code>map()</code> и, кажется, функциональщину как таковую. Вместо неё он предпочитает пользоваться comprehensions.</p>
<p>В нашем случае вместо <code>map()</code> можно использовать такую конструкцию:</p>
<pre tabindex="0"><code>(Counter(stat) for stat in [monday, tuesday, wednesday])
</code></pre><h2 id="используйте-с-осторожностью">Используйте с осторожностью</h2>
<p>Ради жёлтой резиновой уточки на многое можно пойти, но всё-таки лучше использовать однострочники с осторожностью. Главный критерий хорошего кода — простота понимания. Поэтому вполне можно добавить промежуточную переменную, а то и две:</p>
<pre tabindex="0"><code>daily_stats = map(Counter, [monday, tuesday, wednesday])
empty_stat = Counter()
sum(daily_stats, empty_stat)
</code></pre><p>А если не хотите, чтобы читатель мучительно вспоминал, что за такой второй аргумент в <code>sum()</code>, можно и вовсе сделать так:</p>
<pre tabindex="0"><code>daily_stats = map(Counter, [monday, tuesday, wednesday])
functools.reduce(operator.add, daily_stats)
</code></pre><p>Лично мне такой вариант даже больше нравится ツ</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Операции со статистикой</title>
      <link>https://antonz.ru/collections-counter-sum/</link>
      <pubDate>Sat, 19 Jan 2019 08:39:13 +0000</pubDate>
      
      <guid>https://antonz.ru/collections-counter-sum/</guid>
      <description>С помощью collections.Counter</description>
      <content:encoded><![CDATA[<p>Вернёмся к примеру со статистикой по заявкам разных типов. Вот данные о вопросах, проблемах и идеях за три дня:</p>
<pre tabindex="0"><code>monday = {&quot;question&quot;: 1, &quot;problem&quot;: 3, &quot;idea&quot;: 2}
tuesday = {&quot;problem&quot;: 5, &quot;idea&quot;: 1}
wednesday = {&quot;question&quot;: 2, &quot;problem&quot;: 2}
</code></pre><p>Как бы посчитать агрегированную статистику? Можно так, конечно:</p>
<pre tabindex="0"><code>def add_day(day_stats, stats):
  for key, value in day_stats.items():
    stats[key] += value
  return stats

stats = {&quot;question&quot;: 0, &quot;problem&quot;: 0, &quot;idea&quot;: 0}
stats = add_day(monday, stats)
stats = add_day(tuesday, stats)
stats = add_day(wednesday, stats)

stats
{'question': 3, 'problem': 10, 'idea': 3}
</code></pre><p>Но вы наверняка догадываетесь, что это не наш метод. Поможет арифметика со счётчиками:</p>
<pre tabindex="0"><code>from collections import Counter

monday = Counter({&quot;question&quot;: 1, &quot;problem&quot;: 3, &quot;idea&quot;: 2})
tuesday = Counter({&quot;problem&quot;: 5, &quot;idea&quot;: 1})
wednesday = Counter({&quot;question&quot;: 2, &quot;problem&quot;: 2})

stats = monday + tuesday + wednesday

stats
Counter({'problem': 10, 'question': 3, 'idea': 3})
</code></pre><p>Что насчёт самого популярного типа заявок?</p>
<pre tabindex="0"><code>stats.most_common(1)
[('problem', 10)]
</code></pre><p>А какие типы заявок встречались во вторник и в среду?</p>
<pre tabindex="0"><code>(tuesday | wednesday).keys()
dict_keys(['problem', 'idea', 'question'])
</code></pre><p>А сколько проблем было за все дни кроме понедельника?</p>
<pre tabindex="0"><code>(stats - monday)[&quot;problem&quot;]
7
</code></pre><p>Думаю, вы уловили идею ツ</p>
<p>P.S. Хотите реально злую штуку? Вот как посчитать агрегированную статистику в одну строчку:</p>
<pre tabindex="0"><code>sum(map(Counter, [monday, tuesday, wednesday]), Counter())
</code></pre><div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Почему стоит вести блог только на собственном домене</title>
      <link>https://antonz.ru/custom-domain-blogging/</link>
      <pubDate>Thu, 10 Jan 2019 07:52:36 +0000</pubDate>
      
      <guid>https://antonz.ru/custom-domain-blogging/</guid>
      <description>А не на «Медиуме», «Хабре» или «Виси».</description>
      <content:encoded><![CDATA[<p>Послушал очередной выпуск «Подлодки» — про <a href="http://podlodka.tilda.ws/93">личный бренд разработчика</a>. Ребята там обсуждают разные каналы общения с аудиторией: доклады, подкасты, соцсети, блоги.</p>
<p>Я со многим не согласен. Почти со всем ツ Но если по докладам и подкастам Егору и компании явно виднее, то по блоггингу не могу промолчать.</p>
<p>Егор говорит:</p>
<blockquote>
<p>Не стоит с самого начала париться и заводить стенделон-блог, потому что можете убить много времени.</p>
</blockquote>
<p>Дальше ведущие обсуждают, что лучше, мол, использовать Medium, потому что это быстро, удобно и «из коробки идёт рекомендательная система».</p>
<p>Вот что я об этом думаю:</p>
<p>Вести блог на «Медиуме», «Хабре» или «Виси» — так себе идея. Это как работать «литературным негром» для ленивого богатого чувака, который вас в грош не ставит.</p>
<ol>
<li>Всё, что вы пишете на коллективных блого-платформах, работает на благо владельцев этих платформ, а не на вас.</li>
<li>Читатели вынуждены кроме собственно статей «наслаждаться» рекламой, требованиями отключить блокировщики, включить оповещения, подписаться на платный тариф и прочей лабудой, которую подсовывает платформа (особенно отличается этим «Медиум»).</li>
<li>Однажды владелец платформы может решить, что вы нарушили третий подпункт двенадцатого пункта пятьдесят третьей страницы пользовательского соглашения — и выпилит учётную запись вместе со всем вашим добром.</li>
</ol>
<p>А вот альтернатива:</p>
<p>Домен на год стоит 150₽. Облачный <a href="https://ru.wordpress.com/">WordPress</a>, к которому можно приделать этот домен, стоит 250₽ в месяц. Если жалко 250₽, можно взять <a href="https://www.blogger.com/">Blogger</a> или <a href="https://www.tumblr.com/">Tumblr</a> — они бесплатные и тоже дают прикрепить собственный домен.</p>
<p>Времени на настройку потратите 20 минут, но это будет <em>ваш</em> блог и <em>ваши</em> статьи. Если решите потом переехать с Вордпресса на облачный Ghost или на стенделон — статьи прозрачно для подписчиков переедут вместе с вами — потому что всё на вашем домене, а не на домене блого-платформы.</p>
<p>Насчёт рекомендательной системы «из коробки». На «Медиуме» для русскозычных статей она просто не работает («Медиум» вообще презирает кириллицу, даже отображает каким-то мерзким шрифтом). «Хабр» и «Виси» действительно дадут большой охват, но говорить о каком-то личном бренде не приходится — вы навсегда останетесь одним из тысяч безликих юзернеймов, вне зависимости от популярности статей.</p>
<p>А если «Медиум» так дорог вашему сердцу — делайте на нём репосты избранных статей из своего блога. На «Хабре» и «Виси» тоже можно, только не один-в-один, а вариации на тему.</p>
<p>Потратьте 150₽, купите домен, правда.</p>
<p><em>P.S. Подписывайтесь на «<a href="https://itunes.apple.com/ru/podcast/podlodka-podcast/id1209828744">Подлодку</a>», она классная. Ребята когда-то делали вид, что они про мобильную разработку, но, к счастью, одумались, и теперь записывают подробнейшие разборы всяких айтишных тем.</em></p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>P.P.S. И подписывайтесь на самый здравый канал о питончике в телеграме — <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Посчитать количество объектов каждого типа</title>
      <link>https://antonz.ru/collections-counter/</link>
      <pubDate>Wed, 09 Jan 2019 13:17:14 +0000</pubDate>
      
      <guid>https://antonz.ru/collections-counter/</guid>
      <description>С помощью collections.defaultdict или  collections.Counter</description>
      <content:encoded><![CDATA[<p>Допустим, вы пишете программу, которая обрабатывает заявки разных типов — идеи, вопросы и проблемы:</p>
<pre tabindex="0"><code>from collections import namedtuple
Request = namedtuple(&quot;Request&quot;, (&quot;type&quot;, &quot;text&quot;))

requests = [
  Request(type=&quot;question&quot;, text=&quot;Как пасти котов?&quot;),
  Request(type=&quot;problem&quot;, text=&quot;Бакланы портят стадион&quot;),
  Request(type=&quot;idea&quot;, text=&quot;Переводчик с лисьего на русский&quot;),
  Request(type=&quot;problem&quot;, text=&quot;Кот крадёт электричество&quot;),
  Request(type=&quot;problem&quot;, text=&quot;Мыши похитили 540 кг марихуаны&quot;),
  Request(type=&quot;idea&quot;, text=&quot;Холодильник с таймером&quot;),
]
</code></pre><p>Предположим, требуется посчитать количество заявок каждого типа. Если в прошлой жизни человек писал на джаваскрипте, код может получиться таким:</p>
<pre tabindex="0"><code>stats = {}
for req in requests:
  if req.type in stats:
    stats[req.type] += 1
  else:
    stats[req.type] = 1

stats
{'question': 1, 'problem': 3, 'idea': 2}
</code></pre><p>Прямо больно смотреть на этот if, верно? Лучше воспользоваться методом <code>dict.setdefault()</code>. Но как по мне, он тоже уродливый, поэтому ещё лучше — <a href="https://devdocs.io/python/library/collections#collections.defaultdict">collections.defaultdict</a>:</p>
<pre tabindex="0"><code>from collections import defaultdict
stats = defaultdict(lambda: 0)
for req in requests:
    stats[req.type] += 1

dict(stats)
{'question': 1, 'problem': 3, 'idea': 2}
</code></pre><p>А совсем хорошо — <a href="https://devdocs.io/python/library/collections#collections.Counter">collections.Counter</a>:</p>
<pre tabindex="0"><code>from collections import Counter
stats = Counter(req.type for req in requests)

dict(stats)
{'question': 1, 'problem': 3, 'idea': 2}
</code></pre><p>У счётчиков есть ещё пара полезных особенностей, но о них в другой раз.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Умолчательные значения настроек</title>
      <link>https://antonz.ru/collections-chainmap/</link>
      <pubDate>Tue, 08 Jan 2019 12:30:01 +0000</pubDate>
      
      <guid>https://antonz.ru/collections-chainmap/</guid>
      <description>С помощью collections.ChainMap</description>
      <content:encoded><![CDATA[<p>Если в программе есть настройки, хорошо предусмотреть для них умолчательные значения. Так всё будет работать «из коробки», а в конфиг полезут только те, кому это действительно надо.</p>
<p>Допустим, настройки по умолчанию мы сложили в словарь:</p>
<pre tabindex="0"><code>DEFAULTS = {
  &quot;name&quot;: &quot;Frank&quot;,
  &quot;species&quot;: &quot;pigeon&quot;,
  &quot;age&quot;: 42,
}
</code></pre><p>А пользовательские настройки лежат в settings.ini. Их можно считать функцией load_settings(), которая тоже возвращает словарь.</p>
<p>Вопрос: как получить актуальное значение того или иного свойства?</p>
<p>Так себе способ:</p>
<pre tabindex="0"><code>custom = load_settings()

def get_setting_value(name):
  if name in custom:
    return custom[name]
  else:
    return DEFAULTS[name]
</code></pre><p>Способ лучше — воспользоваться <a href="https://devdocs.io/python/library/collections#collections.ChainMap">collections.ChainMap</a>:</p>
<pre tabindex="0"><code>from collections import ChainMap

# пусть custom ==
# { &quot;species&quot;: &quot;human&quot; }
custom = load_settings()
settings = ChainMap(custom, DEFAULTS)

def get_setting_value(name):
  return settings[name]

get_setting_value(&quot;name&quot;)
'Frank'

get_setting_value(&quot;species&quot;)
'human'
</code></pre><p>В ChainMap можно запихать сколько угодно словарей, поиск по ним производится последовательно. Присваивание тоже работает:</p>
<pre tabindex="0"><code>settings[&quot;age&quot;] = 33

custom
{'species': 'human', 'age': 33}

DEFAULTS
{'name': 'Frank', 'species': 'pigeon', 'age': 42}
</code></pre><div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Enum здорового человека</title>
      <link>https://antonz.ru/enum/</link>
      <pubDate>Fri, 04 Jan 2019 15:31:45 +0000</pubDate>
      
      <guid>https://antonz.ru/enum/</guid>
      <description>Его придумали не просто так.</description>
      <content:encoded><![CDATA[<p>Если программист привык писать код, как это делали наши пращуры со времён аграрной революции, то перечисления у него выглядят как-то так:</p>
<pre tabindex="0"><code>class PigeonState:
    eating = 0
    sleeping = 1
    flying = 2

PigeonState.sleeping
1
</code></pre><p>Конечно, у наших современников есть способ получше — <a href="https://devdocs.io/python~3.7/library/enum">enum.Enum</a>:</p>
<pre tabindex="0"><code>import enum
class PigeonState(enum.Enum):
    eating = 0
    sleeping = 1
    flying = 2

PigeonState.sleeping.value
1
</code></pre><p>Это не просто более многословный способ сделать то же самое. У енумов есть вагон плюшек, недоступных староверам. Например, можно делать синонимы состояний:</p>
<pre tabindex="0"><code>class PigeonState(enum.Enum):
    eating = 0
    sleeping = 1
    flying = 2
    
    # There is no way Frank is really doing that
    thinking = 1

PigeonState.thinking
&lt;PigeonState.sleeping: 1&gt;
</code></pre><p>Или добавлять свои атрибуты:</p>
<pre tabindex="0"><code>class PigeonState(enum.Enum):
    eating = (0, &quot;Ест&quot;)
    sleeping = (1, &quot;Спит&quot;)
    flying = (2, &quot;Парит в небесах&quot;)
    
    def __init__(self, id, title):
        self.id = id
        self.title = title

PigeonState.flying.id
2

PigeonState.flying.title
'Парит в небесах'
</code></pre><p>А ещё можно:</p>
<ul>
<li>сравнивать по is вместо ==</li>
<li>сортировать с помощью enum.IntEnum</li>
<li>итерировать по значениям</li>
<li>создавать динамически</li>
</ul>
<p>В общем, енумы — однозначное добро.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Исходники стандартной библиотеки</title>
      <link>https://antonz.ru/python-sources/</link>
      <pubDate>Thu, 03 Jan 2019 12:34:26 +0000</pubDate>
      
      <guid>https://antonz.ru/python-sources/</guid>
      <description>Загляните в них.</description>
      <content:encoded><![CDATA[<p>У большинства питонячих модулей хорошее описание: написано доходчиво, часто есть примеры. Но ничто не заменит исходного кода, если что-то непонятно или хочется понять, как та или иная штука реализована.</p>
<p>Core-разработчик Питона <a href="https://twitter.com/raymondh">Реймонд Хеттингер</a> тоже это заметил, и поэтому в документации к каждому модулю стандартной библиотеки первым делом идёт ссылка на исходники этого самого модуля на гитхабе.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Ссылка на исходники" src="python-sources.png" class="img-bordered">
  <figcaption>Модуль fnmatch — «лайтовая» альтернатива регулярным выраженияем. Хотите узнать, как он проверяет строки по паттернам? Загляните в исходники.</figcaption>
</figure>
</div>
</div>
<p>Если вы прочитали описание функции или класса, а вопросы остались — не стесняйтесь пойти в исходный код и посмотреть, как оно там устроено. Большинство модулей отлично написаны, код понятный, в меру откомментирован.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>2019</title>
      <link>https://antonz.ru/2019/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://antonz.ru/2019/</guid>
      <description></description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
    <item>
      <title>Дизайн — это здравый смысл</title>
      <link>https://antonz.ru/common-sense-design/</link>
      <pubDate>Wed, 26 Dec 2018 15:30:45 +0000</pubDate>
      
      <guid>https://antonz.ru/common-sense-design/</guid>
      <description>Пользуйтесь им, чтобы ошеломить конкурентов.</description>
      <content:encoded><![CDATA[<p>Чтобы создать хороший интерфейс, дизайнеру требуется:</p>
<ul>
<li>80% здравого смысла,</li>
<li>19% знания предметной области,</li>
<li>1% дизайн-мышления, дизайн-систем, насмотренности и прочего, про что дизайнеры любят писать статьи на Медиуме.</li>
</ul>
<p>То есть главное в дизайне — здравый смысл. Чтобы доказать это утверждение, я сделаю «редизайн» популярного приложения Zoom (замена скайпу для видео- и аудио-конференций) с позиции обычного здравомыслящего человека, не дизайнера.</p>
<p>Не буду рисовать красивые макеты, а грубо покажу на скриншотах, что можно сделать иначе, если включить голову.</p>
<h2 id="1-главное-действие">1. Главное действие</h2>
<p>Какое главное действие на основном экране приложения для конференций?</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Главное действие глазами дизайнера" src="01.png" class="img-bordered-thin">
  <figcaption><strong>Ответ дизайнера Зума</strong><br>Главное действие — начать чатик. Мы сделали маленькую кнопочку для этого и спрятали её в уголок. А поскольку она стала незаметна, крупно написали в центре экрана, что надо пойти в уголок и нажать на эту кнопочку. Логично же вроде, да?</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Главное действие глазами человека" src="01cs.png" class="img-bordered-thin">
  <figcaption><strong>Ответ нормального человека</strong><br>Главное действие — начать конференцию. Бахните здоровенную кнопку про это в центр экрана.</figcaption>
</figure>
</div>
</div>
<h2 id="2-как-начать-конференцию">2. Как начать конференцию</h2>
<p>Хьюстон, у нас проблемы: пользователь не закрыл с отвращением приложение, а ткнул в «Start meeting» на главном экране. Что делать?</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Как начать конференцию глазами дизайнера" src="02.png" class="img-bordered-thin">
    <figcaption><strong>Ответ дизайнера</strong><br>Надо спросить, а точно ли он уверен, что хочет начать конференцию. Хорошо бы ещё предложить загадочную опцию «Use Personal Meeting ID», про которую никто не знает, что это такое и на кой чёрт оно нужно.</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Как начать конференцию глазами человека" src="02cs.png" class="img-bordered-thin">
  <figcaption><strong>Ответ человека</strong><br>Вы не поверите, но после нажатия на «Start meeting» надо <em>начать конференцию</em>. Если опция «Use Personal Meeting ID» безумно дорога вам, <em>в первый раз</em> напишите для чего она и скажите, что в будущем можно сменить её в настройках. Во второй раз и во все последующие — просто <em>начните драную конференцию</em>.</figcaption>
</figure>
</div>
</div>
<h2 id="3-как-включить-звук">3. Как включить звук</h2>
<p>Кожаный мешок не сдаётся и нажал на «Start a Meeting» на предыдущем экране. Что делать?</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Как включить звук глазами дизайнера" src="03.png" class="img-bordered-thin">
    <figcaption><strong>Ответ дизайнера</strong><br>Надо спросить, как включить звук — как это делают все нормальные приложения или через дозвон?</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Как включить звук глазами человека" src="03cs.png" class="img-bordered-thin">
  <figcaption><strong>Ответ человека</strong><br>Дозвон? Алё, какой сейчас год на дворе? Просто молча включите чёртов микрофон и начните уже конференцию. Если функция дозвона безумно дорога вам, расскажите про неё на онбординге, но не показывайте больше никогда.</figcaption>
</figure>
</div>
</div>
<h2 id="4-как-всё-таки-начать-конференцию">4. Как всё-таки начать конференцию</h2>
<p>Человечишка включил микрофон. Что ему предложить?</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Как всё-таки начать конференцию глазами дизайнера" src="04.png" class="img-bordered-thin">
    <figcaption><strong>Ответ дизайнера</strong><br>Чёт даже не знаю. Давайте покажем крупно его фото. Я не знаю, что дальше делать, серьёзно. Может он сам разберётся?</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Как всё-таки начать конференцию глазами человека" src="04cs.png" class="img-bordered-thin">
  <figcaption><strong>Ответ человека</strong><br>Это <em>конференция</em>, чуваки, в ней участвуют <em>несколько</em> людей. Дайте мне возможность их пригласить.</figcaption>
</figure>
</div>
</div>
<h2 id="5-как-пригласить-собеседников">5. Как пригласить собеседников</h2>
<p>Методом революционной интуиции юзер допёр, что надо нажать на «Participants». Что делаем дальше? Так далеко ещё никто не проходил.</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Как пригласить собеседников глазами дизайнера" src="05.png" class="img-bordered-thin">
    <figcaption><strong>Ответ дизайнера</strong><br>О, это просто. Покажем пустой список участников — их ведь нет, верно?</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Как пригласить собеседников глазами человека" src="05cs.png" class="img-bordered-thin">
  <figcaption><strong>Ответ человека</strong><br>🤦🤦🤦</figcaption>
</figure>
</div>
</div>
<h2 id="6-как-всё-таки-пригласить-собеседников">6. Как всё-таки пригласить собеседников</h2>
<p>Нам попался сообразительный засранец: он нашёл маленькую кнопку «Invite» и нажал на неё. Какие варианты предложим?</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Как всё-таки пригласить собеседников глазами дизайнера" src="06.png" class="img-bordered-thin">
    <figcaption><strong>Ответ дизайнера</strong><br>Нууу, смс, почта. Что ещё, я не знаю. Эээ, скопировать ссылку?</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Как всё-таки пригласить собеседников глазами человека" src="06cs.png" class="img-bordered-thin">
  <figcaption><strong>Ответ человека</strong><br>Сейчас люди в основном переписываются в <em>мессенджерах</em>. Может, вы слышали — вотсап, телеграм, вот это всё?</figcaption>
</figure>
</div>
</div>
<h2 id="7-поехали">7. Поехали</h2>
<p>Дизайнер: это было несложно, да?</p>
<p>Человек: дизайнер, ты реально упоротый.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Здравый смысл, ребята. Пользуйтесь им.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Чистый код. Единообразие в именах</title>
      <link>https://antonz.ru/naming-consistency/</link>
      <pubDate>Thu, 13 Dec 2018 13:23:31 +0000</pubDate>
      
      <guid>https://antonz.ru/naming-consistency/</guid>
      <description>Просто хороших имён недостаточно.</description>
      <content:encoded><![CDATA[<p>Всякая книга про хороший код начинается с главы об именах переменных и функций. Но каждый, кто работал с большим проектом, знает — хороших имён недостаточно. Важно ещё, чтобы они были единообразными во всём проекте.</p>
<p>Посмотрим на питоновский модуль <code>difflib</code>, который помогал нам сравнивать строки:</p>
<ul>
<li><code>find_longest_match()</code> находит самый длинный совпадающий кусок между двуми последовательностями и возвращает match — объект с совпадением и дополнительной информацией.</li>
<li><code>get_matching_blocks()</code> находит все совпадения между двумя последовательностями и возвращает список из match.</li>
<li><code>get_close_matches()</code> находит слова, сильнее всего похожие на переданное слово, возвращает список строк.</li>
</ul>
<p>По отдельности вроде все названия хороши и понятны. Но я утверждаю, что это — плохой код:</p>
<ul>
<li><code>find_longest_match</code> возвращает объект-<code>match</code>, как и следует из названия; и <code>get_matching_blocks</code> возвращает такие же объекты, хотя название намекает, что должны возвращаться какие-то <code>blocks</code></li>
<li><code>get_close_matches</code>, судя по названию, должен возвращать <code>match</code>, как <code>find_longest_match</code> — но возвращает строки</li>
<li>одна и та же по сути операция (поиск совпадений) в одном случае называется <code>find</code>, а в двух других — <code>get</code></li>
</ul>
<p>В результате уже на следующий день не вспомнить, кто как называется, без обращения к документации.</p>
<p>Уж на уровне одного модуля можно напрячься и сохранить единообразие? Я предложил бы такие имена:</p>
<ul>
<li><code>find_longest_match()</code></li>
<li><code>find_all_matches()</code></li>
<li><code>find_similar_words()</code> или просто <code>find_similar()</code></li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Шаблонизатор для бедных</title>
      <link>https://antonz.ru/string-template/</link>
      <pubDate>Wed, 12 Dec 2018 15:32:00 +0000</pubDate>
      
      <guid>https://antonz.ru/string-template/</guid>
      <description>С помощью string.Template</description>
      <content:encoded><![CDATA[<p>Мантра «There should be one — and preferably only one — obvious way to do it» из Zen of Python далека от реальности.</p>
<p>Все мы знаем, что в Питоне за долгие годы собрали аж три способа подстановки переменных в строку:</p>
<pre tabindex="0"><code>who = &quot;Голубь Френк&quot;
&quot;%s постучался в стеклянные двери&quot; % who
&quot;{} постучался в стеклянные двери&quot;.format(who)
f&quot;{who} постучался в стеклянные двери&quot;
</code></pre><p>Но не все знают, что есть ещё и четвёртый способ — <a href="https://devdocs.io/python~3.7/library/string#string.Template">string.Template</a>. Больше того, он ещё и может быть полезен иногда.</p>
<p>Например, если вам не нужны расширенные возможности вроде форматирования чисел или обращения к атрибутам внутри шаблона, а нужно тупо заменять строковые переменные на их значения. Да ещё и синтаксис подстановки отличается от стандартного:</p>
<blockquote>
<p>CHANGEME:who постучался в стеклянные двери</p>
</blockquote>
<p>Тут и пригодится string.Template:</p>
<pre tabindex="0"><code>import string
class OmskTemplate(string.Template):
    delimiter = &quot;CHANGEME:&quot;

template = OmskTemplate(&quot;CHANGEME:who постучался в стеклянные двери&quot;)
template.substitute({ &quot;who&quot;: &quot;Кот Джарвис&quot;})

'Кот Джарвис постучался в стеклянные двери'
</code></pre><p>Если нужен ещё более извращённый синтаксис — например, <code>==!who!==</code> — достаточно перекрыть атрибут класса pattern, указав в нём подходящее регулярное выражение.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Разбить строку на слова с учётом кавычек</title>
      <link>https://antonz.ru/shlex-split/</link>
      <pubDate>Fri, 07 Dec 2018 15:55:00 +0000</pubDate>
      
      <guid>https://antonz.ru/shlex-split/</guid>
      <description>С помощью shlex.split()</description>
      <content:encoded><![CDATA[<p>Предположим, вы собираете архив статей, и хотите для каждой автоматически определять теги — по ним можно будет моментально найти статью в архиве. В качестве тегов решили брать топ-3 слова из текста.</p>
<p>Например, такая статья:</p>
<pre tabindex="0"><code>text = &quot;&quot;&quot;Голубь Френк прибыл в отель &quot;Четыре сезона&quot; с дружеским визитом. По сообщениям очевидцев, он сожрал в ресторане киноа прямо из тарелки гостя, а затем клюнул в глаз прибежавшего на шум официанта.

Френк прилетает в &quot;Четыре сезона&quot; каждый год. В прошлый раз мерзкая птица нагадила в ванну с шампанским в королевском люксе, лишив кого-то романтического вечера.&quot;&quot;&quot;
</code></pre><p>Вы чистите текст от пунктуации, бьёте по пробелам и считаете слова. Вот топ-3:</p>
<pre tabindex="0"><code>[('френк', 2),
 ('четыре', 2),
 ('сезона', 2)]
</code></pre><p>Но погодите, разве правильно считать «четыре» и «сезона» разными тегами? Это ведь название отеля, лучше учитывать их как одно словосочетание. Тут-то и пригодится функция <a href="https://devdocs.io/python/library/shlex#shlex.split">shlex.split()</a> — она трактует словосочетания в кавычках как один токен:</p>
<pre tabindex="0"><code># слегка чистим text, для краткости опускаю
import shlex
from collections import Counter

words = shlex.split(text)
words = [word for word in words if len(word) &gt; 3]
Counter(words).most_common(3)

[('френк', 2),
 ('четыре сезона', 2),
 ('голубь', 1)]
</code></pre><p>Вот теперь теги что надо!</p>
<p>P.S. Вообще, shlex предназначен для разбора shell-подобных строк, так что если злая судьба заставит вас парсить bash-скрипты — вы знаете, куда смотреть.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Чистый код. Похожие названия методов</title>
      <link>https://antonz.ru/real-quick-ratio/</link>
      <pubDate>Thu, 06 Dec 2018 15:54:00 +0000</pubDate>
      
      <guid>https://antonz.ru/real-quick-ratio/</guid>
      <description>Как не надо называть похожие методы.</description>
      <content:encoded><![CDATA[<p>На днях мы использовали метод <code>SequenceMatcher.ratio()</code> из модуля difflib, чтобы <a href="/difflib-ratio/">оценить сходство двух строк</a>.</p>
<p>А что бы вы сказали, если узнали, что у того же класса есть ещё методы <code>quick_ratio()</code> и <code>real_quick_ratio()</code>? С описанием «возвращает верхнюю границу ratio довольно быстро» и «возвращает верхнюю границу ratio очень быстро»?</p>
<p>Я бы сказал, что это говнокод. Если бы коллега принёс такой код на ревью, я бы предложил подумать ещё ツ Либо ты нормально называешь эти методы, чтобы понятно было, когда какой использовать. Либо прячешь их в глубине модуля и не делаешь частью публичного API.</p>
<p>Конкретно в данном случае я бы сделал «быстрый» и «очень быстрый» методы приватными, потому что они нужны только для оптимизации работы других публичных методов difflib. Используются примерно так:</p>
<pre tabindex="0"><code>if matcher.real_quick_ratio() &gt;= cutoff and \
    matcher.quick_ratio() &gt;= cutoff and \
    matcher.ratio() &gt;= cutoff:
    ...
</code></pre><p>Как вспомогательные методы — ладно. Но точно не в публичный интерфейс.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Обращение к JavaScript-разработчикам</title>
      <link>https://antonz.ru/nojs/</link>
      <pubDate>Wed, 05 Dec 2018 08:17:49 +0000</pubDate>
      
      <guid>https://antonz.ru/nojs/</guid>
      <description>Ещё не поздно всё исправить.</description>
      <content:encoded><![CDATA[<p>Если вы фронтенд-разработчик — пожалуйста, не отчаивайтесь! Это не приговор. Многие мои знакомые фронтендеры сумели отказаться от этой калечащей привычки и вернуться к нормальной жизни.</p>
<p>Многие снова обрели душевное спокойствие и уверенность в завтрашнем дне. Они заново научились общаться с другими людьми. У многих есть семьи. Они счастливы!</p>
<p>Вы тоже можете измениться. Ещё не поздно. Коллеги из здоровых областей разработки с радостью примут вас. Во многих городах есть группы поддержки и митапы для бывших фронтендеров. Есть квалифицированные психотерапевты и некалечащие препараты.</p>
<p>Вы ещё можете бросить фронтенд и стать адекватным человеком. Мы не осуждаем вас, мы здесь и готовы помочь. Не сдавайтесь, боритесь. Обратитесь к ближайшему Java, Python или Go-разработчику, чтобы узнать, как сделать первый шаг к отказу от джаваскрипта. Начните менять жизнь к лучшему прямо сейчас!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Кратко напечатать развесистую структуру</title>
      <link>https://antonz.ru/pprint-depth/</link>
      <pubDate>Tue, 04 Dec 2018 15:46:00 +0000</pubDate>
      
      <guid>https://antonz.ru/pprint-depth/</guid>
      <description>С помощью pprint.pprint() и аргумента depth.</description>
      <content:encoded><![CDATA[<p>Наверняка вы знаете про функции <a href="https://devdocs.io/python/library/pprint#pprint.pprint">pprint.pprint()</a> и <code>pprint.pformat()</code>, которые красиво форматируют разные коллекции и словари.</p>
<p>У них есть замечательный опциональный параметр depth, который ограничивает уровень вложенности при форматировании. Он здорово помогает, если хочется получить общее представление о данных, не сильно вникая в детали.</p>
<p>Например, запросили вы апишечку и получили в ответ развесистый словарь:</p>
<pre tabindex="0"><code>rating = requests.get(&quot;https://www.cia.gov/the-world-factbook/top-dumbest-animals&quot;).json()
</code></pre><p>Заглянем в него, не погружаясь в детали:</p>
<pre tabindex="0"><code>import pprint
pprint.pprint(rating, depth=3)

{'leaderbord': [
  {'details': {...}, 'name': 'Голубь Френк', 'position': 1},
  {'details': {...}, 'name': 'Лисица Клер', 'position': 2},
  {'details': {...}, 'name': 'Попугай Питер', 'position': 3},
  {'details': {...}, 'name': 'Свинка Зои', 'position': 4},
  {'details': {...}, 'name': 'Макака Лукас', 'position': 5}],
 'name': 'Самые тупые животные'}
</code></pre><p>Ненужные подробности автоматически скрыты за «&hellip;», и мы видим самую суть. Френк, я в тебе не сомневался.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Сравнить строки на похожесть</title>
      <link>https://antonz.ru/difflib-ratio/</link>
      <pubDate>Mon, 03 Dec 2018 12:06:00 +0000</pubDate>
      
      <guid>https://antonz.ru/difflib-ratio/</guid>
      <description>С помощью модуля difflib.</description>
      <content:encoded><![CDATA[<p>Помните ваш <a href="/string-capwords/">стартап с самыми актуальными новостями дня</a>? Кажется, у него появился конкурент — он нагло крадёт ваши аутентичные новости, рерайтит их, и рассылает ничего не подозревающим клиентам, подрывая вашу репутацию.</p>
<p>Судите сами, вот ваши новости:</p>
<pre tabindex="0"><code>genuine = [
  &quot;«Братец-хлеб» из Китая носит плащ и корону из булочек, чтобы кормить чаек&quot;,
  &quot;Мясо гигантских тараканов станет вкусной и недорогой альтернативой говядине&quot;,
  &quot;Скандал в ботаническом саду: 10 миллионов рублей ушло на зарплату кактусам&quot;,
]
</code></pre><p>А вот новости жалкого подражателя:</p>
<pre tabindex="0"><code>plagiary = [
  &quot;Китайский хлебный братец кормит чаек плащом и короной из булочек&quot;,
  &quot;Гигантское мясо тараканов станет говядине недорогой и вкусной альтернативой&quot;,
  &quot;Зарплата кактусов в ботаническом саду составила 10 скандальных миллионов рублей&quot;,
]
</code></pre><p>Нужны какие-то основания для судебного иска, и нужны быстро. Хорошо, что в стандартной библиотеке Питона есть модуль <a href="https://devdocs.io/python~3.7/library/difflib">difflib</a>. Сделаем на нём функцию сравнения:</p>
<pre tabindex="0"><code>import difflib

def similarity(s1, s2):
  normalized1 = s1.lower()
  normalized2 = s2.lower()
  matcher = difflib.SequenceMatcher(None, normalized1, normalized2)
  return matcher.ratio()
</code></pre><p>И сравним:</p>
<pre tabindex="0"><code>similarity(genuine[0], plagiary[0])
0.51

similarity(genuine[1], plagiary[1])
0.69

similarity(genuine[2], plagiary[2])
0.55
</code></pre><p>АГА! 51%, 69% и 55% похожести! Всё ясно, какие ещё нужны доказательства.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как стать умнее на порядок</title>
      <link>https://antonz.ru/order-of-magnitude/</link>
      <pubDate>Mon, 03 Dec 2018 07:58:02 +0000</pubDate>
      
      <guid>https://antonz.ru/order-of-magnitude/</guid>
      <description>А то и на два.</description>
      <content:encoded><![CDATA[<p>Есть одна вещь, которая огорчает меня в коллегах по отрасли. Встречается она даже у программистов, что уж говорить о других причастных к производству софта специализациях.</p>
<p>Это безответственное использование выражения «на порядок».</p>
<p>Часто, когда человек хочет сказать «намного больше» — говорит «на порядок». Это, видимо, должно придать словам дополнительный «математический» вес:</p>
<blockquote>
<p>Мы добавили на сайт пять всплывающих окон, и конверсия выросла на порядок.</p>
</blockquote>
<blockquote>
<p>Новая версия нашего мега-продукта работает на порядок быстрее.</p>
</blockquote>
<blockquote>
<p>Я стал применять технику «помидорок», и эффективность увеличилась на порядки.</p>
</blockquote>
<p>По определению, «на порядок» — это отличие как минимум в 10 раз. А «на порядки» — минимум в 100 раз.</p>
<ul>
<li>Если конверсия была 2%, а стала 25% — поздравляю, это действительно «на порядок» (хотя больше похоже на то, что кто-то совсем заврался).</li>
<li>Если мега-продукт заработал в 2 раза быстрее — это «в два раза», а не «на порядок» (если хотите выпендриться — скажите «производительность возросла кратно»).</li>
<li>Если в прошлом месяце на сайт пришло 1000 человек, а в этом 1500 — это «посещаемость выросла на 50%» (или «в полтора раза»), а не «на порядок».</li>
<li>Если эффективность вроде бы возросла, но вы никогда её не мерили, и понятия не имеете, насколько — это «по ощущениям стало лучше», а не «на порядок».</li>
</ul>
<p>Уверен, что у моих читателей всё в порядке с порядками. Просто наболело.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Простое сравнение с шаблоном</title>
      <link>https://antonz.ru/fnmatch/</link>
      <pubDate>Sun, 02 Dec 2018 18:05:00 +0000</pubDate>
      
      <guid>https://antonz.ru/fnmatch/</guid>
      <description>С помощью модуля fnmatch.</description>
      <content:encoded><![CDATA[<p>Для проверки строки по шаблону обычно используют регулярные выражения и модуль <code>re</code>. Но иногда хочется что-нибудь попроще, пусть и не такое мощное — вроде like в SQL.</p>
<p>Сравнить строку или список с шаблоном поможет модуль <a href="https://devdocs.io/python~3.7/library/fnmatch">fnmatch</a>:</p>
<pre tabindex="0"><code>import fnmatch
journal = [
  &quot;10:00 Начался обычный день в омской ветклинике&quot;,
  &quot;10:30 Голубь Френк постучался в стеклянные двери&quot;,
  &quot;10:50 Лисица Клер поскреблась в окно&quot;,
  &quot;11:10 Попугай Питер проник через вентиляцию&quot;,
  &quot;11:11 Клер попыталась сожрать Френка и Питера&quot;,
  &quot;11:25 Осьминог Пауль всплыл в мужском туалете&quot;,
]

fnmatch.filter(journal, &quot;*Френк*&quot;)
[ '10:30 Голубь Френк постучался в стеклянные двери',
  '11:11 Клер попыталась сожрать Френка и Питера' ]

fnmatch.fnmatch(&quot;frank&quot;, &quot;f???k&quot;)
True
</code></pre><p>Под капотом используются регулярки, так что всегда можно конвертировать шаблон в регулярное выражение:</p>
<pre tabindex="0"><code>fnmatch.translate(&quot;*Френк*&quot;)
'(?s:.*Френк.*)\\Z'
</code></pre><p>Курлык.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Все слова с прописной буквы</title>
      <link>https://antonz.ru/string-capwords/</link>
      <pubDate>Fri, 30 Nov 2018 16:01:00 +0000</pubDate>
      
      <guid>https://antonz.ru/string-capwords/</guid>
      <description>С помощью string.capwords()</description>
      <content:encoded><![CDATA[<p>Допустим, запустили вы стартап. В автоматическом режиме собираете самые упоротые новости русскоязычных СМИ, вот такие:</p>
<blockquote>
<p>Кот из Новокузнецка признан виновным в потопе</p>
</blockquote>
<p>Автоматически же переводите их на английский, вот так:</p>
<blockquote>
<p>Cat from Novokuznetsk found guilty in the flood</p>
</blockquote>
<p>И ежедневно рассылаете подписчикам по всему миру.</p>
<p>Всё хорошо, но знакомый эксперт из МГИМО подсказывает: в английском принято каждое слово в заголовке начинать с заглавной буквы. А у вас-то не так!</p>
<p>Можно, конечно, бить заголовок по пробелам через <code>.split()</code>, исправлять регистр через <code>.capitalize()</code> и склеивать обратно через <code>.join()</code>. Но есть способ лучше — <a href="https://devdocs.io/python~3.7/library/string#string.capwords">string.capwords()</a>:</p>
<pre tabindex="0"><code>import string
header = &quot;Cat from Novokuznetsk found guilty in the flood&quot;
string.capwords(header)

'Cat From Novokuznetsk Found Guilty In The Flood'
</code></pre><p>Соу мач беттер.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Отформатировать текст для консоли</title>
      <link>https://antonz.ru/textwrap-fill/</link>
      <pubDate>Thu, 29 Nov 2018 14:45:00 +0000</pubDate>
      
      <guid>https://antonz.ru/textwrap-fill/</guid>
      <description>С помощью модуля textwrap.</description>
      <content:encoded><![CDATA[<p>Если любите делать CLI-утилиты, модуль <a href="https://devdocs.io/python/library/textwrap">textwrap</a> наверняка вам понравится.</p>
<p>Он умеет перформатировать многострочный текст, чтобы длина строки не превышала N символов:</p>
<pre tabindex="0"><code>text = &quot;Около двух месяцев назад породистый голубь по имени Френк постучался в стеклянные двери омской ветеринарной клиники&quot;
formatted = textwrap.fill(text, width=20)
print(formatted)

Около двух месяцев
назад породистый
голубь по имени
Френк постучался в
стеклянные двери
</code></pre><p>Или добавить отступ, например для цитаты:</p>
<pre tabindex="0"><code>import textwrap
inspirational = &quot;Цитаты простых людей:&quot;
quote = &quot;Откройте окно вообще дышать невозможно&quot;
quote = textwrap.indent(quote, prefix=&quot;&gt; &quot;)
print(inspirational, quote, sep=&quot;\n&quot;)

Цитаты простых людей:
&gt; Откройте окно вообще дышать невозможно
</code></pre><p>Френк одобряет.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Python. Сделать превьюшку длинного текста</title>
      <link>https://antonz.ru/textwrap-shorten/</link>
      <pubDate>Wed, 28 Nov 2018 17:46:00 +0000</pubDate>
      
      <guid>https://antonz.ru/textwrap-shorten/</guid>
      <description>С помощью textwrap.shorten()</description>
      <content:encoded><![CDATA[<p>Допустим, мы хотим получить превьюшку длинной статьи. Можно обрезать механически:</p>
<pre tabindex="0"><code>article = &quot;Около двух месяцев назад породистый голубь по имени Френк постучался в стеклянные двери омской ветеринарной клиники&quot;
article[:30]

'Около двух месяцев назад пород'
</code></pre><p>Фраза оборвана посреди слова — это неуважение к читателю и к Френку.</p>
<p>А можно воспользоваться функцией <a href="https://devdocs.io/python/library/textwrap#textwrap.shorten">textwrap.shorten()</a>:</p>
<pre tabindex="0"><code>import textwrap
textwrap.shorten(article, 30, placeholder=&quot;...&quot;)

'Около двух месяцев назад...'
</code></pre><p>Намного лучше!</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Oh My Py — всё о стандартной библиотеке Python</title>
      <link>https://antonz.ru/ohmypy/</link>
      <pubDate>Wed, 28 Nov 2018 16:21:00 +0000</pubDate>
      
      <guid>https://antonz.ru/ohmypy/</guid>
      <description>Голубь Френк раскрывает возможности стандартной библиотеки Python, о которых вам лучше бы знать.</description>
      <content:encoded><![CDATA[<p>Давно хотел подписаться на интересный канал по Питону, но не нашёл такого и решил завести свой ツ Встречайте <a href="https://t.me/ohmypy">Oh My Py</a> — канал про тайные возможности стандартной библиотеки Питона.</p>
<p>Тайные не потому, что кто-то их скрывает, конечно. Просто стандартная библиотека огромная! А разработчики часто не копают глубоко и изобретают велосипед вместо того, чтобы использовать готовое.</p>
<p>Заодно обсудим полезные и не самые известные приёмы в работе с языком и структурами данных. А ещё особенности дизайна и говнокод в стандартной библиотеке (да, встречается и такое).</p>
<p>Заметки из канала будут попадать в блог под тегом <a href="/tag/ohmypy/">ohmypy</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Тестировщики не должны находить баги</title>
      <link>https://antonz.ru/testers-should-not-find-bugs/</link>
      <pubDate>Tue, 20 Nov 2018 16:21:00 +0000</pubDate>
      
      <guid>https://antonz.ru/testers-should-not-find-bugs/</guid>
      <description>На черта они тогда нужны?</description>
      <content:encoded><![CDATA[<p>Читаю сейчас книгу Мартина о правильных программистах. Вообще, Мартин весёлый дядька — обожает категоричные утверждения, прямо как я. Но тут превзошёл сам себя: тестировщики, мол не должны ничего находить! На кой-они тогда нужны, верно?</p>
<p>На самом деле, мысль его другая: код должен попадать к тестировщику уже тщательно проверенным. И тут я 100% «за».</p>
<p>Сколько раз наблюдал: программист чего-то там наделал, как-то вроде работает, какие-то даже тесты есть. И перебрасывает в тестирование — проверяйте, мол. QA сразу находит баги, программист чинит, QA снова находит, он снова чинит… В тяжёлых случаях это длится неделями.</p>
<p>Мартин прав. Фича здорового человека попадает в тестирование уже проверенной со всех сторон. Все ветки покрыты тестами, проверена производительность, учтены особенности продакшен-среды.</p>
<p>И это тяжело. Постоянно хочется срезать углы и понадеяться на «авось», когда знаешь, что за тобой кто-то проверит. Давите эти гнилые порывы, проверяйте всё сами — как если после вас сразу на прод ツ</p>
<p>Конечно, тестировщик всё равно найдёт баги — просто потому что мыслит иначе, чем разработчик. Но не будет ни бессмысленного пинг-понга, ни продолбов по срокам, ни костылей в коде.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Человек! Докажи, что это ты</title>
      <link>https://antonz.ru/first-verify/</link>
      <pubDate>Fri, 16 Nov 2018 16:40:00 +0000</pubDate>
      
      <guid>https://antonz.ru/first-verify/</guid>
      <description>Как разозлить пользователя на ровном месте</description>
      <content:encoded><![CDATA[<p>Терпеть не могу Гугл и его сервисы, но на работе вынужден пользоваться Gmail. С периодичностью несколько раз в неделю Гугл выкидывает меня из почты и говорит:</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Человек, докажи, что это ты" src="verify.jpg">
  <figcaption>Человек, докажи, что это ты</figcaption>
</figure>
</div>
</div>
<p>Если у Гугла есть специальные люди, которые пишут текст для интерфейса, то в средневековой Японии им пришлось бы сделать сеппуку за такую формулировку.</p>
<p>По-своему это даже красиво: одним предложением указать пользователю его место в иерархии «человек-программа». Докажи, что это ты, жалкий червь. Иначе ты недостоин продолжать наслаждаться сервисами Гугла.</p>
<p>А ведь можно было просто написать:</p>
<blockquote>
<p>Чтобы продолжить, введите пароль</p>
</blockquote>
<p>В идеале, конечно, диалог с требованием что-то там подтвердить вообще не должен возникать. Но это отдельный разговор.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>​Премиальный и золотой тарифы</title>
      <link>https://antonz.ru/gold-pricing/</link>
      <pubDate>Fri, 16 Nov 2018 12:59:47 +0000</pubDate>
      
      <guid>https://antonz.ru/gold-pricing/</guid>
      <description>Заплати в 10 раз больше и получи значок «я не лох».</description>
      <content:encoded><![CDATA[<p>Наткнулся на забавный пример ценообразования. Есть приложение «Труколлер» — оно помогает распознавать телефонных спамеров. В базовом варианте бесплатное, но, разумеется, есть платный тариф (Premium). В нём типовой набор плюшек — нет рекламы, дополнительные приятные возможности, всякое такое. Обычное дело.</p>
<p>Но сегодня я заметил, что у «Труколлера» есть и «золотой» (Gold) тариф — ровно в 10 раз дороже «премиального». Смотрите, чем он отличается:</p>
<ol>
<li>Приоритетная техническая поддержка</li>
<li>Почётный золотой значок (sic!)</li>
</ol>
<div class="row">
<div class="col-xs-12 col-sm-10">
<figure>
  <img alt="Truecaller Gold" src="truecaller.png" class="img-bordered">
  <figcaption>Заплати в 10 раз больше и получи значок «я не лох»</figcaption>
</figure>
</div>
</div>
<p>Переплачивать за быструю техподдержку — стандартная практика в корпоративном сегменте. Всякие Ораклы, IBM и прочие SAP в «базовом» варианте даже бровью не поведут, если у заказчика возникли проблемы с их софтом. Чтобы добиться от них хоть какой-то внятной помощи, крупные компании покупают «золотые» и «платиновые» тарифы с конским ценником. Это оправданно.</p>
<p>Но «Труколлер»? Если с ним возникают проблемы, проще снести приложение и поставить аналог, чем обращаться в поддержку. И уж точно нет смысла платить 10x за приоритетный саппорт.</p>
<p>Почётный золотой значок — это вообще волшебно. Я сразу вспомнил приложение «I am Rich» для айфона, которое стоило $1000 и прожило в апсторе ровно 1 день. Ну там хоть понятно — это был чистый стёб разработчика. Но кто станет платить 7К в год за золотой значок, серьёзно?</p>
<p>Может маркетологи из «Труколлера» тоже так развлекаются, конечно. Тогда я бы им предложил добавить по-настоящему золотую фичу: посмотреть, под каким именем ты записан у других людей в контактах. Ну и переименовать тариф в «платиновый», конечно ツ</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Финал «Интерфейсов без шелухи»</title>
      <link>https://antonz.ru/sin/</link>
      <pubDate>Tue, 13 Nov 2018 15:53:51 +0000</pubDate>
      
      <guid>https://antonz.ru/sin/</guid>
      <description>Жизнь и смерть рассылки.</description>
      <content:encoded><![CDATA[<p>Рассылку об интерфейсах я запустил в апреле 2016 года. Сегодня, спустя 2,5 года и 6000 подписчиков, вышел финальный выпуск.</p>
<p>«Интерфейсы без шелухи» были и остаются единственной рассылкой, которая фокусируется на статьях русскоговорящих авторов. Большинство составителей предпочитают компилировать выпуски из переводов и англоязычных статей — так проще. Я же видел ребят, которые интересно пишут на русском и незаслуженно остаются в стороне — и хотел это исправить. Кажется, это вполне получилось.</p>
<p>Рассылка никогда не была объективной — в выпуск попадало только то, что лично я считал дельным. Со временем таких материалов становилось всё меньше. Мне не интересно писать об очередном инструменте прототипирования, дизайн-системах и о чём там ещё сейчас принято в «дизайнерских» кругах.</p>
<p>Я не хочу превратиться в Юру Ветрова, который «уже семь лет я публикую регулярные обзоры свежих статей по теме интерфейсов». Кстати, подписывайтесь на <a href="https://jvetrau.com/category/digest/">рассылку Юры</a>, если вам такие обзоры интересны ツ</p>
<p>Мне надоела узкая тема дизайна интерфейсов. Теперь меня больше увлекает разработка софта и техническая «начинка» классных продуктов. Но это совсем не формат «интерфейсов без шелухи».</p>
<p>Поэтому рассылка закончена. Если вам интересно читать мои заметки — подписывайтесь <a href="https://t.me/dangry">в телеграме</a>.</p>
<p>Спасибо всем, кто читал «интерфейсы без шелухи» всё это время! ♥️</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Django и пустые значения</title>
      <link>https://antonz.ru/django-null/</link>
      <pubDate>Thu, 08 Nov 2018 19:01:50 +0000</pubDate>
      
      <guid>https://antonz.ru/django-null/</guid>
      <description>Неожиданный креатив от авторов популярного фреймворка</description>
      <content:encoded><![CDATA[<p><em>В последние недели жизнь тесно познакомила меня с самым популярным фреймворком для быстрой разработки веб-приложений на Питоне — <a href="https://www.djangoproject.com">Django</a>. В нём много любопытного, чем я время от времени намерен делиться ツ</em></p>
<p>Допустим, у вас в приложении есть сущность «Клиент», а у клиента поле «Имя». Клиенты указывают имя при регистрации, но поскольку это не обязательно — многие предпочитают оставлять поле пустым. Как в таких случаях должно имя храниться в базе данных?</p>
<p>Я всегда полагал, что на этот вопрос может быть единственный ответ — использовать специальное значение <code>NULL</code>. Оно ведь ровно для этого и предназначено: показать, что поле не заполнено, его значение неизвестно.</p>
<h2 id="null-vsпустая-строка">NULL vs пустая строка</h2>
<p>Создатели «Джанги», однако, пошли против вековой мудрости разработчиков, и норовят сохранять отсутствующее значение как пустую строку. За это отвечает специальная настройка (<code>null=False</code>). Менять её не рекомендуют — мол, <a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.null">путаница от этого возникнет</a>:</p>
<blockquote>
<p>If <code>True</code>, Django will store empty values as <code>NULL</code> in the database. Default is <code>False</code>.</p>
</blockquote>
<blockquote>
<p>Avoid using <code>null</code> on string-based fields because empty string values will always be stored as empty strings, not as <code>NULL</code>.</p>
</blockquote>
<blockquote>
<p>If a string-based field has <code>null=True</code>, that means it has two possible values for &ldquo;no data&rdquo;: <code>NULL</code>, and the empty string. In most cases, it’s redundant to have two possible values for &ldquo;no data&rdquo;; the Django convention is to use the empty string, not <code>NULL</code>.</p>
</blockquote>
<p>Этот кусок документации заслуживает особой похвалы. Так всё запутать, ничего толком не объяснив — это ещё надо суметь. Следите за руками:</p>
<ul>
<li>с одной стороны, «<strong>if True</strong>, Django will store empty values <strong>as NULL</strong>»,</li>
<li>одновременно с этим «empty string values will <strong>always</strong> be stored <strong>as empty strings</strong>, not as NULL».</li>
</ul>
<p>Так вы храните пустые значения как NULL при включённой настройке? Или всегда-всегда как пустую строку (и на кой чёрт тогда настройка)? Определитесь уже!</p>
<p>На самом деле, авторы имели в виду следующее:</p>
<ul>
<li>Если <code>null=False</code>, и вы не присвоите полю значение, «Джанга» молча присвоит ему <code>&quot;&quot;</code> и сохранит в базе как пустую строку.</li>
<li>Если <code>null=True</code>, и вы не присвоите полю значение, «Джанга» молча присвоит ему <code>None</code> и сохранит в базе как <code>NULL</code>.</li>
<li>Вне зависимости от настройки, если вы явно присвоите полю значение <code>&quot;&quot;</code>, «Джанга» сохранит его в базе как пустую строку.</li>
<li>Вне зависимости от настройки, если вы явно присвоите полю значение <code>None</code>, «Джанга» сохранит его в базе как <code>NULL</code>.</li>
</ul>
<p>Ох.</p>
<h2 id="not-null-натаблице">NOT NULL на таблице</h2>
<p>Но это полбеды. О чём авторы совсем забыли упомянуть в документации — о том, что <code>null=False</code> генерирует такой SQL-код:</p>
<pre tabindex="0"><code>ALTER TABLE &quot;tablename&quot;
ADD COLUMN &quot;columnname&quot; varchar (50) DEFAULT '' NOT NULL;
</code></pre><p>То есть не просто «мы будем записывать неизвестное значение в базу как пустую строку», а «мы вообще запретим этому полю иметь значение <code>NULL</code>».</p>
<p>Это очень, очень творческое дизайнерское решение. Дело в том, что если у вас таблица на 100000 строк, и вы добавляете в неё <code>NOT NULL</code> столбец, то это, мягко говоря, небыстро. И полностью блокирует таблицу на всё время операции.</p>
<p>А если приложение развивается, новые столбцы добавляют регулярно. И с <code>NOT NULL</code> каждый раз при миграции таблица блокируется и полностью перезаписывается. Как вообще можно было додуматься до такого подхода?</p>
<p>Чтобы решить проблему, достаточно игнорировать рекомендации «Джанги» и ставить текстовым полям <code>null=True</code>.</p>
<p>P.S. В PostgreSQL 11 добавили специальную оптимизацию, благодаря которой добавление <code>NOT NULL</code> столбца <a href="https://www.depesz.com/2018/04/04/waiting-for-postgresql-11-fast-alter-table-add-column-with-a-non-null-default/">работает моментально</a>, если у него есть значение по умолчанию. Так что в новом «Постгресе» рекомендуемые настройки «Джанги» наконец-то перестали стрелять в ногу разработчикам.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Секта свидетелей раздутой конверсии</title>
      <link>https://antonz.ru/conversion/</link>
      <pubDate>Thu, 06 Sep 2018 14:40:06 +0000</pubDate>
      
      <guid>https://antonz.ru/conversion/</guid>
      <description>Грязные приёмы помогают увеличить конверсию, но это ничего не значит.</description>
      <content:encoded><![CDATA[<p>Стоит только написать о человечном дизайне — например, рекомендовать сайту не плеваться всплывающими окнами и пуш-нотификациями — как тут же приходят опровергатели с железобетонным утверждением «а я так делаю, и у меня конверсия выросла»:</p>
<ul>
<li>Ну и что, что человек не может ничего прочитать, пока не подпишется на рассылку в огромном попапе? Так конверсия выше!</li>
<li>Ну и что, что всех бесит, когда в углу прыгает и требует внимания онлайн-консультант? Зато конверсия растёт!</li>
<li>Ну и что, что при попытке увести курсор мыши на соседнюю вкладку выскакивает окошко с предложением ОГРОМНОЙ СКИДКИ? Это всё ради конверсии!</li>
</ul>
<p>Специально для секты свидетелей высокой конверсии у меня есть два соображения, которые они редко учитывают.</p>
<h2 id="1-выручка-вместо-конверсии">1. Выручка вместо конверсии</h2>
<p>Конверсия сама по себе мало о чём говорит. Обещаниями, уловками и прямым обманом магазин заставит зарегистрироваться в 2 раза больше посетителей, но это не значит, что продажи вырастут вдвое.</p>
<p>Для коммерческой компании адекватный показатель — выручка (и прибыль), а не конверсия.</p>
<h2 id="2-долговременные-последствия">2. Долговременные последствия</h2>
<p>Окей, допустим «продающие» уловки увеличили не только конверсию, но и выручку. Но помимо изменений «в моменте» есть и долговременные:</p>
<p><em>Что с возвратами?</em> Может быть, привлечённые уловками покупатели намного чаще возвращают товар или отказываются в последний момент.</p>
<p><em>Что с репутацией?</em> Может быть, людям не слишком нравятся ваши грязные приёмчики, и они согнали магазину рейтинг в Яндекс-маркете.</p>
<p><em>Что с оттоком и выручкой с клиента?</em> Может быть, ваш новый сайт, полный «тёмных» паттернов, привлекает больше новых пользователей. Но при этом отталкивает существующих — и они меньше покупают или не продлевают подписку.</p>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>Не замыкайтесь вы на этой конверсии. Смотрите на все показатели бизнеса; и не в моменте, а в перспективе.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Этикет ведущего телеграм-канала</title>
      <link>https://antonz.ru/telegram-etiquette/</link>
      <pubDate>Fri, 24 Aug 2018 12:42:12 +0000</pubDate>
      
      <guid>https://antonz.ru/telegram-etiquette/</guid>
      <description>Правила гигиены, которых стоит придерживаться.</description>
      <content:encoded><![CDATA[<p>Это правила гигиены, которых я придерживаюсь в канале «<a href="https://t.me/dangry">Интерфейсов без шелухи</a>». Подойдут не всем, но пригодятся многим.</p>
<h2 id="1-неразмазывать-мысль-понескольким-сообщениям">1. Не размазывать мысль по нескольким сообщениям</h2>
<p>Лучше сначала внятно сформулировать мысль целиком, и потом опубликовать одним постом — а не серией уточнений самого себя, как мы привыкли делать это в чатах.</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p><em>Поток сознания</em><br>
    <img alt="Поток сознания" src="telegram-etiquette-3.png" class="img-bordered-thin">
</p>
</div>
<div class="col-xs-12 col-sm-6">
<p><em>Оформленная мысль</em><br>
    <img alt="Одна мысль — один пост" src="telegram-etiquette-7.png" class="img-bordered-thin">
</p>
</div>
</div>
<p>А ещё — перечитайте пост перед отправкой и исправьте очевидные проблемы в формулировках. Никто не хочет читать полуфабрикат.</p>
<h2 id="2-ограничиться-одним-постом-вдень">2. Ограничиться одним постом в день</h2>
<p>Если у вас не новостной канал, конечно. Учитывая бешеную активность в чатах и группах, читателю не очень радостно получать десяток дополнительных сообщений ежедневно.</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p><em>Новостник, ему можно</em><br>
    <img alt="Новостной канал" src="telegram-etiquette-5.png" class="img-bordered-thin">
</p>
</div>
<div class="col-xs-12 col-sm-6">
<p><em>А этот мог бы и не частить</em><br>
    <img alt="Поток умных мыслей" src="telegram-etiquette-9.png" class="img-bordered-thin">
</p>
</div>
</div>
<p>Один пост, максимум два — самое то.</p>
<h2 id="3-отключить-оповещения">3. Отключить оповещения</h2>
<p>В ваших заметках нет ничего настолько срочного, чтобы тыкать в подписчика пуш-оповещениями. Конечно, многие и так мьютят все каналы, но хорошо позаботиться об остальных и самостоятельно выключить колокольчик:</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8">
<figure>
  <img alt="Silent broadcast" src="telegram-etiquette-8.png" class="img-bordered-thin">
  <figcaption>Silent broadcast — ваш друг</figcaption>
</figure>
</div>
</div>
<h2 id="4-выносить-длинные-посты-втелеграф">4. Выносить длинные посты в Телеграф</h2>
<p>Из-за узкого экрана длинные сообщения превращаются в простыню, которую тяжело читать. Лучше вынести пост в Телеграф или отдельный блог. Телеграфные статьи в телеграме вообще показываются нативно, спасибо Instant View.</p>
<h2 id="5-использовать-форматирование">5. Использовать форматирование</h2>
<p>Отформатированный пост приятно выглядит, да и читать его легче:</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8">
<figure>
  <img alt="Форматирование" src="telegram-etiquette-4.png" class="img-bordered-thin">
  <figcaption>Идеальный аккуратный пост</figcaption>
</figure>
</div>
</div>
<p>Вот что поможет:</p>
<ul>
<li>жирный заголовок,</li>
<li>ссылки в конце, а не по тексту,</li>
<li>минимум эмодзи,</li>
<li>иллюстрация, если уместно.</li>
</ul>
<h2 id="6-обозначать-рекламу">6. Обозначать рекламу</h2>
<p>Элементарная порядочность: ставишь рекламу — напиши, что это она. Не надо маскировать под рекомендации или «кстати, наткнулся тут».</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p><em>Не надо так</em><br>
    <img alt="Новостной канал" src="telegram-etiquette-1.png" class="img-bordered-thin">
</p>
</div>
<div class="col-xs-12 col-sm-6">
<p><em>Хештег «реклама», всё честно</em><br>
    <img alt="Поток умных мыслей" src="telegram-etiquette-2.png" class="img-bordered-thin">
</p>
</div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Алиса, всё грустно</title>
      <link>https://antonz.ru/alice/</link>
      <pubDate>Wed, 22 Aug 2018 07:54:27 +0000</pubDate>
      
      <guid>https://antonz.ru/alice/</guid>
      <description>Почему голосового помощника не получится научить хорошему.</description>
      <content:encoded><![CDATA[<p>Голосовой помощник Яндекса — «Алиса» — работает на смартфонах, в автомобилях и в Яндекс-станции. Алиса обладает «навыками»: человек спрашивает и командует, Алиса отвечает и выполняет.</p>
<p>Есть стандартные навыки («какая сейчас погода»). Можно делать собственные: «включи свет», «проверь почту», «закажи пропуск». В теории выглядит красиво.</p>
<figure>
  <img alt="Каталог навыков" src="alice-2.png" class="img-bordered-thin">
  <figcaption>У Яндекса целый каталог навыков</figcaption>
</figure>
<p>Я посмотрел, как «нестандартные» навыки работают на практике. Резюме такое, что для «умного» дома или офиса они совсем не годятся.</p>
<h3 id="1-нельзя-сделать-навык-только-для-себя">1. Нельзя сделать навык только для себя</h3>
<p>Есть как бы «приватные» навыки, но приватность заключается только в том, что они скрыты в каталоге. На самом деле — доступны всем. То есть если создать навык, который проверяет почту и зачитывает письма — изучить ваш почтовый ящик сможет любой, кто услышит, как вы обращаетесь к Алисе.</p>
<figure>
  <img alt="Настройки приватности" src="alice-4.png" class="img-bordered-thin">
  <figcaption>Многообразие настроек приватности</figcaption>
</figure>
<p>Вряд ли кто-то захочет, чтобы другие люди читали его письма, командовали светом в квартире или тем более банковским счётом ツ</p>
<p>Это было бы поправимо, если бы не следующая проблема:</p>
<h3 id="2-нет-автоматической-авторизации">2. Нет автоматической авторизации</h3>
<p>«Алиса» не умеет отличить человека по голосу или привязать навыки к учётной записи. Если хотите настоящей приватности — реализуйте авторизацию самостоятельно.</p>
<p>А поскольку авторизовать по голосу — задача нетривиальная, скорее всего придётся ограничиться секретным словом и привязкой к устройству. Не слишком удобно в повседневном использовании.</p>
<h3 id="3-нельзя-просто-так-взять-ипопросить">3. Нельзя просто так взять и попросить</h3>
<p>Нельзя просто сказать «Алиса, включи свет в прихожей». Сначала придётся активировать навык:</p>
<blockquote>
<p>Алиса, запусти навык «умный дом»</p>
</blockquote>
<p>И затем уже командовать:</p>
<blockquote>
<p>Включи свет в прихожей</p>
</blockquote>
<p>Да быстрее самому включить ツ</p>
<p>Но дело ещё хуже. Фраза для активации должна быть глобально уникальной среди всех существующих в мире навыков. То есть «умный дом» не подойдёт, придётся говорить что-то типа такого:</p>
<blockquote>
<p>Алиса, запусти навык «Умный дом Антона Жиянова». Включи свет в прихожей.</p>
</blockquote>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8">
<figure>
  <img alt="Активационное имя" src="alice-3.png" class="img-bordered-thin">
  <figcaption>Фраза для активации, она же «активационное имя», должна быть уникальной</figcaption>
</figure>
</div>
</div>
<p>И это мне ещё с редкой фамилией повезло. Готовьтесь испытать муки творчества, сравнимые с придумыванием домена или адреса электронной почты.</p>
<h3 id="4-на-выходе--вахтёр">4. На выходе — вахтёр</h3>
<p>Новый навык обязательно проходит модерацию, даже если пользоваться им будете только вы. В чате разработчиков говорят, модераторы имеют склонность отклонять навыки, предназначенные для личного использования.</p>
<p>Модерация занимает 1–3 дня.</p>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>Собственные навыки Яндекс запустил только в этом году, так что со временем проблемы починят, надеюсь. А пока и Алиса, и Станция — больше игрушки, чем реальные помощники.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Уберите капчу при оплате</title>
      <link>https://antonz.ru/payment-captcha/</link>
      <pubDate>Fri, 17 Aug 2018 10:58:08 +0000</pubDate>
      
      <guid>https://antonz.ru/payment-captcha/</guid>
      <description>И вообще уберите.</description>
      <content:encoded><![CDATA[<p>«Спасибо, кэп! Какой чудак будет ставить капчу на форму оплаты?». А таких много. В этой заметке я покажу примеры и выведу универсальное правило применения капчи.</p>
<h2 id="капча-для-подписчика">Капча для подписчика</h2>
<p>У газеты «Ведомости» есть платная подписка:</p>
<figure>
  <img alt="Подписка на Ведомости" src="vedomosti.png" class="img-bordered-thin">
  <figcaption>Указываешь номер телефона, получаешь код по СМС, подтверждаешь.</figcaption>
</figure>
<p>На втором шаге человека встречает капча. Она не решает ровным счётом ни одной задачи, кроме как убить конверсию:</p>
<ol>
<li>Ведомости <em>уже</em> потратились на отправку СМС, а значит отсеивать ботов несколько поздновато.</li>
<li>Человек подтверждает свою человечность, вводя код из СМС. Капча проверяет непонято что.</li>
</ol>
<p>Представим теперь, что капчу убрали. И нашёлся такой умный бот, что получил СМС, и ввёл код, и подписался на Ведомости. Что плохого произойдёт для газеты? Ничего. Капча не нужна.</p>
<div class="boxed">
    <p>Заметка на полях. Дорогие «Ведомости», по номеру телефона можно автоматически определить <a href="https://dangry.ru/ken/provider-by-phone/">мобильного оператора</a>. Даже если человек перешёл от одного оператора к другому с сохранением старого номера. Воспользуйтесь этим и не заставляйте подписчиков выполнять тупую работу за вас.</p>
    <p>А ещё кнопка «Подписаться» должна быть <em>под</em> текстовым полем с кодом активации, а не над ним.</p>
</div>
<h2 id="капча-при-оплате">Капча при оплате</h2>
<p>Популярный пакет офисных программ LibreOffice принимает пожертвования на сайте:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Форма пожертвования LibreOffice" src="libre-1.png">
  <figcaption>Выглядит как обычная форма пожертвования</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="С омерзительной капчей" src="libre-2.png">
  <figcaption>Но стоит нажать на кнопку...</figcaption>
</figure>
</div>
</div>
<p>Нажимаешь на Donate, получаешь в благодарность капчу. Если разгадал — так уж и быть, можешь заплатить. Не разгадал или бот — ха-ха, неудачник, не видать ЛибреОфису твоих денежек! Хм.</p>
<p>Как и с «Ведомостями», капча ЛибреОфиса эффективно решает единственную задачу — собрать как можно меньше денег. Не думаю, что это достойная цель.</p>
<p>Если убрать капчу, то бот отвалится на этапе ввода карточки или подтверждения платежа. Что плохого произойдёт для ЛибреОфиса? Ничего. Капча не нужна.</p>
<h2 id="выводы-и-правила">Выводы и правила</h2>
<p>Первое, консервативное правило капчи:</p>
<blockquote class="big">
Уберите капчу, если расходы на борьбу с ботами меньше упущенной прибыли от потерянных клиентов
</blockquote>
<p>Например, ваш сервис без капчи привлекает 100 клиентов в месяц и 500 ботов, а с капчей — 50 клиентов и 0 ботов. Пусть средний чек на клиента — 1000 ₽ в месяц.</p>
<p>Значит, на капче вы теряете 50 * 1000 = 50 000 ₽ в месяц. А если убрать капчу, получите 500 ботов. Обойдутся ли эти боты вам дороже 50 000 ₽? Если да, ставьте капчу. Если нет — к чёрту её.</p>
<p>Если последовательно применять консервативное правило капчи, рано или поздно придёте ко второму, радикальному:</p>
<blockquote class="big">
Не используйте капчу
</blockquote>
<p>Люди придумали много неинвазивных методов борьбы с ботами. Если ваши программисты утверждают, что капча — единственный вариант, дайте им по жопе и отправьте в гугл. Ну или у меня пусть спросят.</p>
<p>Но если от радикального правила внутри всё бурлит и клокочет — консервативное всегда к вашим услугам.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Специально для подписчиков <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсов без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как понять рекурсию</title>
      <link>https://antonz.ru/recursion/</link>
      <pubDate>Sat, 11 Aug 2018 09:51:13 +0000</pubDate>
      
      <guid>https://antonz.ru/recursion/</guid>
      <description>Раз и навсегда.</description>
      <content:encoded><![CDATA[<p>У программистов есть расхожая шутка:</p>
<blockquote>
<p>Чтобы понять рекурсию, надо понять рекурсию.</p>
</blockquote>
<p>Шутка на самом деле неудачная. Чтобы это увидеть, достаточно перевести её в псевдокод:</p>
<pre tabindex="0"><code>def understand_recursion():
    understand_recursion()
</code></pre><p>Не хватает важнейшей составляющей — базового случая. В результате получается бесконечная цепочка вызовов. Понятно теперь, почему программисты так лажают в рекурсивных алгоритмах.</p>
<p>Исправим ошибку:</p>
<pre tabindex="0"><code>def understand_recursion(myself):
    if recursion_is_understood(myself):
        return
    understand_recursion(myself)
</code></pre><p>Или, переходя на естественный язык:</p>
<blockquote class="big">
Чтобы понять рекурсию, надо понимать рекурсию до тех пор, пока не поймёте
</blockquote>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>О кодах подтверждения</title>
      <link>https://antonz.ru/security-code/</link>
      <pubDate>Wed, 08 Aug 2018 14:43:35 +0000</pubDate>
      
      <guid>https://antonz.ru/security-code/</guid>
      <description>Всё, что вы хотели знать: удобство vs безопасность, шансы и злодеи, повторы в цифрах.</description>
      <content:encoded><![CDATA[<p>Банки и другие сервисы используют коды подтверждения для защиты от мошенников. Обычно код выглядит как число из 4–6 цифр, которое приходит по СМС или пуш-оповещением.</p>
<p>В этой заметке я расскажу об удобстве и безопасности разных вариантов.</p>
<h2 id="какие-бывают-коды">Какие бывают коды</h2>
<p>Дизайн кода подтверждения — классическая проблема, когда кажется, что безопасность конфликтует с удобством использования. Безопасники хотят сделать код как можно длиннее, чтобы злодей не смог его подобрать. А продуктовые ребята наоборот, хотят коды покороче, чтобы человеку было проще запомнить.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Код подтверждения" src="code-google.png">
  <figcaption>Коды подтверждения помогают удостоверить личность и авторизовать действия с деньгами</figcaption>
</figure>
</div>
</div>
<p>Я попросил участников чата «Интерфейсов без шелухи» прислать примеры кодов подтверждения от разных сервисов. Всего в выборку попало 30 сервисов, вот статистика:</p>
<ul>
<li>45% сервисов используют коды из 6 цифр</li>
<li>41% используют 4 цифры</li>
<li>14% используют 5 цифр</li>
</ul>
<h2 id="какой-длины-кода-достаточно">Какой длины кода достаточно</h2>
<p>Если у вас в компании есть безопасник — наверняка он ответит «шесть цифр и никак не меньше». 6 цифр — это 1 миллион комбинаций. Если дать злодею возможность беспрепятственно вводить коды каждую секунду, ему потребуется 11 дней, чтобы угадать.</p>
<p>Понятно, что беспрепятственно вводить коды никто не даст: сервисы ограничивают количество ошибочных попыток (а ещё время жизни кода и как часто можно генерить новые коды). Поэтому 6 цифр — это неоправданно много.</p>
<p>Код из 4 цифр даёт 10 тысяч комбинаций. Если разрешить 3 попытки ввода, шанс угадать составит 0,03%. Другими словами, злоумышленнику придётся попытать счастья с 3300 человек, прежде чем у него что-то получится. Не слишком интересный расклад для злодея ツ</p>
<h2 id="правдали-что-цифры-вкоде-повторяются">Правда ли, что цифры в коде повторяются</h2>
<p>Это довольно распространённая точка зрения. Хочется думать: родной банк так заботится о твоём удобстве, что генерит коды с повторяющимися цифрами — чтобы легче было запомнить:</p>
<ul>
<li><span class="text-red">1</span>3457<span class="text-red">1</span></li>
<li>8<span class="text-red">5</span>6<span class="text-red">5</span>1</li>
<li>64<span class="text-red">11</span></li>
</ul>
<p>В большинстве случаев это заблуждение. Чем длинее код, тем больше вероятность, что цифры в нём повторятся сами собой, без всяких усилий сервиса. Например, для кода из 4 цифр вероятность повторения хотя бы одной цифры — 50%. А для кода из 6 цифр — уже 85%.</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<figure>
  <img alt="Код с повтором" src="code-tinkoff.png">
  <figcaption>Теория вероятности играет за вас! Шанс получить код с повтором весьма велик</figcaption>
</figure>
</div>
</div>
<p>Ради интереса я взял сервисы, по которым собрал больше всего данных, и проверил, какова доля кодов с повторами в цифрах. У большинства распределение получилось несмещённое, то есть специально они одинаковые цифры не генерят.</p>
<p>Единственное исключение — «Тиньков»: у него 65% кодов с повторами против ожидаемых 50%.</p>
<h2 id="что-если-всегда-генерить-код-сповторами">Что, если всегда генерить код с повторами</h2>
<p>Допустим, наш супер-дружественный сервис решил генерить 4-значные коды, в которых хотя бы одна цифра повторяется. Это примерно 5000 комбинаций — всего в два раза меньше, чем на «обычном» 4-значном коде.</p>
<p>Шанс угадать такой код на 3 попытках — 0,06% или 1650 бесплодных злодейских заходов. Как по мне, вполне надёжно. Хотя ваш безопасник будет против, конечно ツ</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Резюмирую:</p>
<ul>
<li>Никогда, никогда, никогда не делайте коды длиннее 6 цифр.</li>
<li>4-значный код — хороший баланс между удобством и безопасностью.</li>
<li>Попробуйте генерить коды с повторами, пользователям понравится.</li>
</ul>
<p>А ещё, пишите код <a href="/sms-password/">в начале сообщения</a>.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Синтез и распознавание речи в 50 строк на JavaScript</title>
      <link>https://antonz.ru/speech-api/</link>
      <pubDate>Tue, 07 Aug 2018 12:29:34 +0000</pubDate>
      
      <guid>https://antonz.ru/speech-api/</guid>
      <description>Местами даже неплохо работает.</description>
      <content:encoded><![CDATA[<p>Если вы, как большинство нормальных людей, не следите пристально за развитием веб-API, то вот краткая сводка их успехов в обработке речи.</p>
<h3 id="синтез-речи">Синтез речи</h3>
<p>Вовсю работает в нормальных браузерах. Реализуется в несколько строчек на джаваскрипте:</p>
<p data-height="265" data-theme-id="0" data-slug-hash="LBJNXG" data-default-tab="js,result" data-user="nalgeon" data-pen-title="Синтез речи" class="codepen">See the Pen <a href="https://codepen.io/nalgeon/pen/LBJNXG/">Синтез речи</a> by Anton (<a href="https://codepen.io/nalgeon">@nalgeon</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<br>
<p>Функция speak создаёт говорилку и озвучивает переданный текст на русском языке.</p>
<h3 id="распознавание-речи">Распознавание речи</h3>
<p>Работает только в хроме и фаерфоксе, причём у каждого по-своему. На андроиде тоже работает, хотя функциональность ограничена по сравнению с десктопом. Реализуется посложнее, но тоже терпимо — 40 строчек джаваскрипта:</p>
<p data-height="400" data-theme-id="0" data-slug-hash="XBPKrW" data-default-tab="js,result" data-user="nalgeon" data-pen-title="Распознавание речи" class="codepen">See the Pen <a href="https://codepen.io/nalgeon/pen/XBPKrW/">Распознавание речи</a> by Anton (<a href="https://codepen.io/nalgeon">@nalgeon</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<br>
<p>Распознавалка — в классе Recognizer. Начинает слушать после вызова <code>start()</code>, заканчивает после <code>stop()</code>. Накапливает распознанный текст в свойстве <code>transcript</code>. Умеет возвращать промежуточные результаты распознавания, если передать обработчик в <code>start()</code>:</p>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#000">recognizer</span>.<span style="color:#000">start</span>((<span style="color:#000">text</span>) =&gt; {
  <span style="color:#000">txtInterim</span>.<span style="color:#000">value</span> <span style="color:#000">=</span> <span style="color:#000">text</span>;
  <span style="color:#000">txtMessage</span>.<span style="color:#000">value</span> <span style="color:#000">=</span> <span style="color:#000">recognizer</span>.<span style="color:#000">transcript</span>;
});
</code></pre></div><p>Добрый человек Tal Ater сделал удобную обёртку над API распознавания — библиотеку <a href="https://github.com/TalAter/annyang">annyang</a>. С ней всё ещё проще.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="tg://resolve?domain=ohmypy">Oh My Py</a>»</span>, это лучше любого JavaScript</em></p></div>
</div>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>
]]></content:encoded>
    </item>
    
    <item>
      <title>Не надо заканчивать фичи</title>
      <link>https://antonz.ru/abandoned-features/</link>
      <pubDate>Mon, 30 Jul 2018 17:44:01 +0000</pubDate>
      
      <guid>https://antonz.ru/abandoned-features/</guid>
      <description>Только потому, что вы их начали.</description>
      <content:encoded><![CDATA[<p>Вредный совет продакту: «Надо заканчивать фичи». Вредный совет вообще: «Надо заканчивать то, что начал».</p>
<ul>
<li>Я не заканчиваю читать начатую книгу, если понимаю, что она пустая.</li>
<li>Я не заканчиваю и не публикую текст, если получилась фигня.</li>
<li>Я не заканчиваю тренировку, если чувствую себя плохо.</li>
</ul>
<p>И вам не советую.</p>
<figure>
  <img alt="Фичи" src="features.jpg">
  <figcaption>Говорить «нет» стоит как новым, так и начатым фичам // <a href="http://dilbert.com/strip/2013-02-25">Dilbert</a></figcaption>
</figure>
<p>В применении к фичам:</p>
<p><strong>Что значит не заканчивать фичу?</strong> Это значит, прекратить её улучшать, если видишь, что отдача (деньги, транзакции — любые попугаи, в которых меряете) меньше, чем затраты (деньги, человеко-часы, душевные силы).</p>
<p>Лучше вообще выпилить такую фичу из продукта, чем убиваться с доработкой или бесконечно тащить её с собой, теряя деньги на сопровождение и тестирование.</p>
<p><strong>Почему важно не заканчивать фичи?</strong> Потому что время команды ограничено, а потенциальные фичи — нет. И лучше тратить ресурсы на фичи с хорошим соотношением «отдача/затраты», чем заканчивать плохие только потому, что когда-то начал их делать.</p>
<p><strong>Что происходит с продуктом, в котором все фичи заканчивают?</strong> Он развивается мучительно медленно, а пользователи недоумевают, какого чёрта в продукт запихали все эти никому не нужные возможности.</p>
<p>Фичи надо заканчивать. Но только если игра стоит свеч.</p>
<p><em>P.S. Это ответ на заметку «<a href="https://medium.com/@mdubakov/157278331672">Надо заканчивать фичи</a>» Михаила Дубакова, основателя Targetprocess</em></p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Математика для программиста</title>
      <link>https://antonz.ru/math/</link>
      <pubDate>Mon, 23 Jul 2018 13:03:53 +0000</pubDate>
      
      <guid>https://antonz.ru/math/</guid>
      <description>Её можно освоить за несколько месяцев</description>
      <content:encoded><![CDATA[<p>В университете меня три года пичкали функциональным анализом, дифференциальными уравнениями и теорией функций комплексного переменного. Считаю это преступлением против юности: как и большинству программистов, эти знания никогда не понадобились.</p>
<p>В этой заметке я расскажу, какие (небольшие) кусочки математики действительно пригодятся программисту и как их освоить за несколько месяцев. Если вы уже программируете — можно использовать как чек-лист для самопроверки.</p>
<figure>
  <img alt="Проблема коммивояжера" src="math.png">
  <figcaption>Иногда математика и вовсе не нужна // <a href="https://xkcd.com/399/">xkcd</a></figcaption>
</figure>
<p>Сразу скажу, что если вы программируете игры или разрабатываете софт для физиков, медиков или биологов — этого не хватит. Но для «бизнесовых» и повседневных программ — с запасом.</p>
<p>Интересные программисту области относятся к дискретной математике. Более конкретно:</p>
<ul>
<li>логика,</li>
<li>комбинаторика,</li>
<li>теория вероятностей и матстатистика,</li>
<li>линейная алгебра,</li>
<li>теория графов,</li>
<li>теория сложности.</li>
</ul>
<p>Сами по себе они довольно жирные, но программисту достаточно самых основ, углубляться не обязательно.</p>
<h3 id="логика">Логика</h3>
<p>Логические переменные и операторы. Булева алгебра. Таблицы истинности.</p>
<p>Вполне возможно, что это проходят ещё в школе — я уже не помню, что там было ツ</p>
<h3 id="комбинаторика">Комбинаторика</h3>
<p>Размещения и сочетания. Бином Ньютона и биномиальные коэффициенты. Разбиения. Формула включений и исключений.</p>
<h3 id="теория-вероятностей-иматстатистика">Теория вероятностей и матстатистика</h3>
<p>События и их вероятности. Комбинации и последовательности событий. Зависимые события и теорема Байеса.</p>
<p>Меры среднего значения выборки: арифметическое среднее, медиана и процентили. Матожидание, дисперсия, стандартное отклонение.</p>
<p>Случайные переменные и их свойства. Распределение вероятности.</p>
<h3 id="линейная-алгебра">Линейная алгебра</h3>
<p>Матрицы и векторы. Базовые операции над матрицами.</p>
<h3 id="теория-графов">Теория графов</h3>
<p>Гравы, подграфы, вершины и рёбра. Маршруты, пути и циклы. Операции над графами. Деревья. Раскраски.</p>
<h3 id="теория-сложности">Теория сложности</h3>
<p>Логарифм и экспонента. Арифметическая, геометрическая и прочие суммы.</p>
<p>Скорость роста функций и алгоритмов. O-нотация. Анализ алгоритмов.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Теперь о том, где этому учиться.</p>
<ul>
<li>Курс <a href="https://stepik.org/course/1127">Основы дискретной математики</a> закрывает большую часть тем, рекомендую. Рассчитан на два месяца.</li>
<li>Теорию сложности можно посмотреть в курсе <a href="https://stepik.org/course/902/">Введение в дискретную математику</a>, четвёртый модуль.</li>
<li>Основы линейной алгебры очень доступно рассказаны в курсе <a href="https://www.coursera.org/learn/machine-learning">Machine Learning</a>, первая неделя, модуль Linear Algebra Review.</li>
</ul>
<p>Все курсы бесплатные.</p>
<p>За скобками остались алгоритмы и структуры данных, потому что их обычно относят к «computer science», а не математике. Напишу о них в другой раз.</p>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Прапор информационной безопасности</title>
      <link>https://antonz.ru/officer/</link>
      <pubDate>Fri, 08 Jun 2018 09:53:47 +0000</pubDate>
      
      <guid>https://antonz.ru/officer/</guid>
      <description>Как суверенный вариант чуждого западного officer.</description>
      <content:encoded><![CDATA[<p>У американцев предусмотрен вагон должностей вида «чототам officer». Типа «Data Protection Officer» или «Information Security Officer».</p>
<p>Традиционно их переводят на русский как «офицеров». Это неправильно, потому что ну какие они к чёрту офицеры. В то же время, превращать officer в какого-нибудь «специалиста» или «менеджера» тоже нехорошо.</p>
<p>И вот сегодня меня осенило. Officer — это же «прапор»! Послушайте, как хорошо:</p>
<ul>
<li>прапор информационной безопасности</li>
<li>прапор защиты данных</li>
<li>старший прапор маркетинга</li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-10">
<figure>
  <img alt="Прапор на Хедхантере" src="officer.png" class="img-bordered">
  <figcaption>Уже на Хедхантере</figcaption>
</figure>
</div>
</div>
<p>Прапор идеально подходит. Он не офицер, но в то же время и не рядовой. Он близок нам по армейскому фольклору. Он звучный и образный, в конце концов.</p>
<p>Officer в бизнесе = прапор!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Автокомплит и проверка данных</title>
      <link>https://antonz.ru/suggestions-vs-validation/</link>
      <pubDate>Mon, 04 Jun 2018 17:29:32 +0000</pubDate>
      
      <guid>https://antonz.ru/suggestions-vs-validation/</guid>
      <description>Ограничивать пользователя фиксированным списком вариантов — плохая идея.</description>
      <content:encoded><![CDATA[<p>Чтобы помочь человеку правильно ввести сложные данные, часто используют автокомплит (он же «подсказки»):</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <figure>
      <img alt="Подсказки по адресу" src="suggestions-address.png">
      <figcaption>Например, по адресу</figcaption>
    </figure>
</div>
<div class="col-xs-12 col-sm-6">
    <figure>
      <img alt="Подсказки по компании" src="suggestions-party.png">
      <figcaption>Или по компании</figcaption>
    </figure>
</div>
</div>
<p>Когда программист видит автокомплит — немедленно совмещает его с проверкой. Программист думает так:</p>
<blockquote>
<p>Если пользователь хочет ввести что-то непредусмотренное автокомплитом, следует сурово его покарать.</p>
</blockquote>
<p>Нельзя допустить, чтобы человек вводил отсебятину, думает программист:</p>
<figure>
  <img alt="«Некорректный» адрес" src="suggestions-address-error.png" class="img-bordered-thin">
  <figcaption>Плохой адрес, плохой. Уходи, негодный человек!</figcaption>
</figure>
<p>Люди спокойно вешают такие проверки на формы заказа в интернет-магазинах, например. Их не смущает, что покупатель, получив свой «некорректный адрес» (или ещё лучше — «некорректное ФИО»), просто уйдёт.</p>
<p>Мы в «<a href="https://dadata.ru/suggestions/">Дадате</a>» как раз занимаемся автокомплитом по разным видам данных, и не проходит и недели, чтобы в техподдержку не пришёл очередной программист с вопросом «как запретить вводить данные, которых нет в подсказках».</p>
<p>Нормальное решение только одно:</p>
<blockquote class="big">
Не использовать автокомплит для проверки данных
</blockquote>
<p>Подсказки помогают человеку быстро и правильно ввести данные: домашний адрес, марку автомобиля, реквизиты компании. Они не предназначены для проверки:</p>
<ul>
<li>Если покупатель в магазине указал неизвестный автокомплиту дом — ничего страшного. Менеджер потом перезвонит и уточнит.</li>
<li>Если человеку нравится указывать машину как «BMW X5 3.0 SD», а подсказки знают только «BMW 5-Series» — не надо рассказывать, что записаться в сервис никак невозможно.</li>
<li>Если предприниматель два часа назад зарегистрировал компанию в налоговой, и облачная бухгалтерия ещё не успела подтянуть данные — не надо отказывать в регистрации, пусть введёт реквизиты вручную.</li>
</ul>
<p>Бывают, конечно, ситуации, когда уместно жёстко ограничить варианты — например, если выбирают пункт выдачи товара или аэропорт вылета. Но чаще встречаются «открытые» списки.</p>
<p>Простая эвристика:</p>
<blockquote class="big">
Автокомплит — для помощи человеку, не для проверки
</blockquote>
<!-- 
<div class="row">
<div class="col-xs-12 col-sm-10"><p><em>И подписывайтесь на <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</em></span></p></div>
</div>
-->
]]></content:encoded>
    </item>
    
    <item>
      <title>Облако vs коробка</title>
      <link>https://antonz.ru/cloud-vs-box/</link>
      <pubDate>Thu, 17 May 2018 12:53:07 +0000</pubDate>
      
      <guid>https://antonz.ru/cloud-vs-box/</guid>
      <description>Коробка не сравнится с облаком по простоте установки и настройки. Не стоит и пытаться.</description>
      <content:encoded><![CDATA[<p>Ghost (лучший блого-движок ever) празднует пятилетний юбилей. По этому поводу авторы написали, что они поняли о рынке и разработке опенсорс-софта за прошедшее время. Статья классная, рекомендую.</p>
<p>Зацепил один момент. Они пишут:</p>
<blockquote>
<p>When we started out, we tried to make everything as simple and user-focused as possible. Most open source software has terrible UI design, so we would have great UI design and it would be the best of both worlds!</p>
</blockquote>
<blockquote>
<p>This falls apart almost immediately.</p>
</blockquote>
<p>Дело даже не в опенсорсе, а в разнице между «коробочным» и «облачным» софтом. Облачные системы на самом деле чудовищно сложные — множество отдельных компонентов, соединённых причудливой логикой, да ещё куча интеграций с внешними системами. Но для пользователя (даже для администратора) они выглядят простыми — потому что сложность скрыта под капотом.</p>
<p>«Коробочные» системы (имею в виду серверный софт), как бы разработчики ни старались, не могут быть настолько же простыми в установке и настройке, как облако. Но, парадоксально, внутри они устроены намного проще — иначе их вообще невозможно было бы нормально поставить.</p>
<p>Ребята из Госта пытались сделать простую в настройке «коробку» — и оказалось, что это утопия:</p>
<blockquote>
<p>We deliberately limited flexibility in the product to try and make it more simple. But it ended up being still not simple enough for the average user, and not powerful or flexible enough for the professional user — the worst of both worlds.</p>
</blockquote>
<p>У хорошей «коробки» вместо облачной простоты — гибкость. А со сложностью борются понятной документацией, лёгкостью внесения изменений и развитыми средствами диагностики.</p>
<p class="big"><a href="https://blog.ghost.org/5/">After 5 years and 3 $M, here’s everything we’ve learned from building Ghost</a></p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Apple и вау-продукты</title>
      <link>https://antonz.ru/airpods/</link>
      <pubDate>Wed, 16 May 2018 10:20:09 +0000</pubDate>
      
      <guid>https://antonz.ru/airpods/</guid>
      <description>Ничего такого я от Эпла уже не ждал, а вот поди ж ты.</description>
      <content:encoded><![CDATA[<p>После выпуска айпода Эпл постоянно ищет новый вау-продукт — такой, чтобы не просто популярный, а аж дух захватывало.</p>
<ul>
<li>Сначала получилось с айфоном.</li>
<li>Потом не получилась с айпадом — оказалось, что планшеты людям не особо нужны.</li>
<li>Потом не получилось с макбуком. Эйр не слишком зашёл, а прошки постепенно стали хуже чем были.</li>
<li>Потом не получилось с часами — тут история как с планшетами.</li>
<li>Из нового захода на айфон получилось это убожество с ушами, о котором даже говорить неудобно.</li>
</ul>
<figure>
  <img alt="Вау-мышь" src="apple-wow-mouse.jpg">
  <figcaption>Картина «Мышь капитулирует перед инженерным гением дизайнеров» // <a href="https://www.geek.com/apple/design-before-function-apple-magic-mouse-2-cant-be-used-while-charging-1636939/">geek.com</a></figcaption>
</figure>
<p>В общем, ничего такого я от Эпла уже не ждал. Пока не попробовал новые наушники — эйрподы, которые похоже на свисающие из ушей сигареты.</p>
<p>И знаете, мне всё равно, на что они похожи. Наушники дико удобные — практически не ощущаются и не ограничивают движения.</p>
<p>Работают как гарнитура — можно вообще только одно ухо вставить, а второе отдать кому-нибудь — получится телеконференция. Раньше я пользовался Plantronics Legend, и при всём уважении к Плантрониксу, эйрподы уделывают его в ноль.</p>
<p>
    <a href="https://www.apple.com/airpods/" class="img-link"><img alt="Эйрподы" src="airpods.jpg"></a>
</p>
<p>Работают с андроидом (когда такое было вообще). Больше того, для счастливых обладателей ведра бонус: двойное постукивание по наушнику работает как play / pause. На айфоне оно по умолчанию вызывает Сири, ха-ха (ещё одна неудавшаяся эпловая поделка).</p>
<p>Для меня Эпл наконец сделали сказочный продукт. Это 🔥</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Где расположить ошибку</title>
      <link>https://antonz.ru/error-position/</link>
      <pubDate>Mon, 07 May 2018 14:50:00 +0000</pubDate>
      
      <guid>https://antonz.ru/error-position/</guid>
      <description>Солидные господа из Швейцарии провели исследование, а 1000 дизайнеров его опровергли.</description>
      <content:encoded><![CDATA[<p>Сыграл с читателями «<a href="tg://resolve?domain=dangry">интерфейсов без шелухи</a>» в моего любимого супергероя — Капитана Очевидность.</p>
<p>Солидные господа из Швейцарии провели исследование: где лучше всего показывать сообщение об ошибке при заполнении текстового поля на форме. Речь шла о десктопах, потому что в Швейцарии смартфоны не признают.</p>
<p><img src="error-position.png" alt="Где расположить ошибку"></p>
<p>1000 дизайнеров использовали капитанское супероружие — здравый смысл — чтобы получить такие результаты:</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8">
<div class="boxed">
<p><em>Где расположить сообщение об ошибке (относительно текстового поля)?</em></p>
<p>↓ снизу — 616<br>
👍👍👍👍👍👍👍 59%</p>
<p>справа → — 268<br>
👍👍👍 26%</p>
<p>↑ сверху — 127<br>
👍 12%</p>
<p>← слева — 16<br>
▫️ 2%</p>
<p>↓↓↓ внизу формы — 13<br>
▫️ 1%</p>
</div>
</div>
</div>
<p>Не могу сказать, что капитан победил. Швейцарцы выяснили, что удобнее всего человеку видеть сообщения об ошибках <em>справа</em> от текстового поля. Но они исследовали десктопные интерфейсы. На мобильных, естественно, лучше всего показывать сообщения <em>под</em> текстовым полем.</p>
<p>Так что ничья ツ</p>
<p><a href="http://doc.rero.ch/record/304897/files/iwc24-0107.pdf">Отчёт об исследовании</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Карточки в интерфейсе</title>
      <link>https://antonz.ru/cards/</link>
      <pubDate>Sat, 28 Apr 2018 10:18:34 +0000</pubDate>
      
      <guid>https://antonz.ru/cards/</guid>
      <description>Тупо запилить заголовок, аватарку и кнопку действия — недостаточно</description>
      <content:encoded><![CDATA[<p>Карточки помогают компактно показать сложный объект:</p>
<figure>
  <img alt="Карточка статьи на Медиуме" src="card-medium.png">
  <figcaption>Карточка статьи на Медиуме</figcaption>
</figure>
<p>Понятно, что в компактном представлении все характеристики объекта не покажешь. Поэтому грамотные дизайнеры подбирают содержимое карточки под сценарий использования. Например, для Медиума это:</p>
<ul>
<li>иллюстрация (привлечь внимание);</li>
<li>заголовок (понять, о чём статья);</li>
<li>аватарка и имя автора (заинтересовать, если автор знаком читателю);</li>
<li>количество аплодисментов (социальное доказательство ценности);</li>
<li>время чтения (принять решение: читать сейчас, добавить в закладки или вовсе не читать).</li>
</ul>
<p>У Фейсбука на первый взгляд тоже всё хорошо:</p>
<figure>
  <img alt="Карточка пользователя Фейсбука" src="card-fb-1.png">
  <figcaption>Карточка пользователя Фейсбука</figcaption>
</figure>
<p>Но не очень:</p>
<ul>
<li>Чуть ли не на самом выигрышном месте — количество фолловеров (что это? зачем? почему не написать там про общих друзей?)</li>
<li>Непонятно, кем и где человек работает (мешает узнать малознакомого человека или заинтересоваться незнакомым)</li>
</ul>
<p>Отсутствие информации о работе — это прямо провал. При этом фейсбук умеет компактно показывать место работы:</p>
<figure>
  <img alt="Место работы в Фейсбуке" src="card-fb-2.png">
  <figcaption>Владыка маркетинга в Convead и SMM менеджер в Modulbank<br>В прошлом: ОАО «МТТ»</figcaption>
</figure>
<p>Но на карточке почему-то не пишет ¯\_(ツ)_/¯</p>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>Если формулировать правила для содержимого карточки, я бы предложил такие:</p>
<ol>
<li>Хорошая карточка отвечает на главные вопросы пользователя в этой точке сценария использования.</li>
<li>И помогает разработчику достичь бизнес-целей (увеличить конверсию, вовлечение, виральность и т.п.)</li>
</ol>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как сделать собственный прокси для Телеграма</title>
      <link>https://antonz.ru/socks/</link>
      <pubDate>Mon, 16 Apr 2018 16:06:54 +0000</pubDate>
      
      <guid>https://antonz.ru/socks/</guid>
      <description>Чтобы не зависеть от тормозных публичных проксей.</description>
      <content:encoded><![CDATA[<p>В России окончательно заблокировали Телеграм. Чтобы он продолжил работать, нужен либо VPN (сложный путь) либо SOCKS5-прокси (простой путь). Я выбираю простой. Есть готовые прокси, но если вы хотите поднять собственный — вот как это сделать.</p>
<p>Прежде всего, потребуется виртуальный сервер. Я лично предпочитаю <a href="https://m.do.co/c/b862c8d73641">Digital Ocean</a> (реферальная ссылка, по которой бесплатно дают $10 — хватит на 2 месяца). Но можно попробовать другие облака, у которых есть бесплатные микро-сервера:</p>
<ul>
<li><a href="https://aws.amazon.com/ru/ec2/">Amazon EC2</a></li>
<li><a href="https://cloud.google.com/compute/pricing">Google Cloud Platform</a></li>
<li><a href="https://azure.microsoft.com/en-us/pricing/details/app-service/">Microsoft Azure</a></li>
</ul>
<p>В качестве операционной системы я выбрал Ubuntu 16.04. Рекомендую отключить вход под рутом и настроить сертификат — вот <a href="https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-16-04">инструкция</a>.</p>
<p>Когда виртуальный сервер готов, заходим на него по SSH и устанавливаем SOCKS5-сервер Dante:</p>
<pre tabindex="0"><code>sudo apt update
sudo apt install -y dante-server
</code></pre><p>В убунте ставится древняя версия Данте — 1.1.19. Но её вполне достаточно.</p>
<p>Настраиваем Данте в файле <code>/etc/danted.conf</code>. Редактировать проще всего программой <code>nano</code>:</p>
<pre><code>sudo nano /etc/danted.conf
</code></pre>
<p>Удаляем содержимое и вставляем свой конфиг:</p>
<pre tabindex="0"><code>logoutput: stderr
internal: eth0 port = 1080
external: eth0

method: username
user.privileged: root
user.notprivileged: nobody
user.libwrap: nobody

client pass {
    from: 0.0.0.0/0 to: 0.0.0.0/0
    log: error
}

pass {
    from: 0.0.0.0/0 to: 0.0.0.0/0
    log: error
}
</code></pre><p>Выходим из редактора с сохранением: <code>Ctrl+O</code>, затем <code>Enter</code>, затем <code>Ctrl+X</code></p>
<p>Создаём пользователя, который будет подключаться через прокси, и устанавливаем ему пароль:</p>
<pre tabindex="0"><code>sudo useradd --shell /usr/sbin/nologin telegram
sudo passwd telegram
</code></pre><p>Запускаем Данте:</p>
<pre><code>sudo systemctl restart danted
</code></pre>
<p>Готовим ссылку для автоматической настройки телеграма:</p>
<pre><code>tg://socks?server=IP_АДРЕС&amp;port=1080&amp;user=telegram&amp;pass=ПАРОЛЬ
</code></pre>
<p>Вместо «IP_АДРЕС» подставьте IP-адрес сервера, а вместо «ПАРОЛЬ» — пароль пользователя, которого создали чуть раньше.</p>
<p>Скидываем ссылку в личный чат в телеграме (Saved Messages), тыкаем на неё и соглашаемся применить настройки. Всё, телеграм работает через прокси.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Задачка: регистрация с фото и паспортом</title>
      <link>https://antonz.ru/signup-puzzle/</link>
      <pubDate>Mon, 16 Apr 2018 08:06:09 +0000</pubDate>
      
      <guid>https://antonz.ru/signup-puzzle/</guid>
      <description>Исправляем проблемы и рассматриваем альтернативы.</description>
      <content:encoded><![CDATA[<style>
.img-bordered-thin {
  border: 1px solid #aaa;
}
</style>
<div class="row">
<div class="col-xs-12 col-sm-10">
<p>Я предложил читателям телеграм-канала «<a href="https://t.me/dangry" class="nowrap">интерфейсов без шелухи</a>» такую задачку:</p>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-10">
<div class="boxed">
<p>На просторах фейсбука встретил скрины регистрации в довольно типичном приложении, которому надо идентифицировать человека. Так обычно работают каршеринги и всяки уберо-подобные сервисы, которым не обойтись просто электронной почтой.</p>
<p><img alt="Регистрация с фото и паспортом" src="signup-puzzle.jpg"></p>
<p>Интерфейс достаточно аккуратный, явно делал дизайнер. Но, думаю, есть что улучшить. Попробуем?</p>
</div>
</div>
</div>
<p>Спасибо всем, кто прислал свои варианты! Давайте разберём решение. Начнём с исправления проблем в существующем интерфейсе, а закончим альтернативными вариантами.</p>
<p>Будем исходить из того, что и личное фото, и фото паспорта действительно нужны сервису (допустим, юристы требуют). В противном случае решение было бы слишком простым ツ</p>
<h2 id="редизайн-личное-фото">Редизайн: личное фото</h2>
<p>Непонятно, зачем на первом экране крестик, да ещё в левом верхнем углу. Если фото требуется для продолжения регистрации, какой смысл закрывать? Если это возврат к предыдущему шагу, то для него на Андроиде есть кнопка «назад».</p>
<p>Сначала кажется, что инструкция предельно понятна: «загрузите личное фото». Полагаю, надо ткнуть на изображение камеры и сделать селфи. Но зачем тогда внизу кнопка «добавить фото»? Из текста под заголовком становится понятно, что можно загрузить уже готовое фото.</p>
<p>Это плохо: мы сразу перегрузили экран и усложнили пользователю жизнь, поставив его перед выбором. Очевидно, что большинство пользователей не держат под рукой готовое фото. Поэтому лучше просто предложить сделать селфи, а уже на экране селфи дать возможность загрузить файл:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
<figure>
  <img alt="Сфотографируйте себя" src="signup-puzzle-1-1.png" class="img-bordered-thin">
  <figcaption>Предлагаем сделать селфи…</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-5">
<figure>
  <img alt="Селфи" src="signup-puzzle-1-2.png" class="img-bordered-thin">
  <figcaption>…и делаем его</figcaption>
</figure>
</div>
</div>
<p>В поясняющем тексте было много мусора. «Пожалуйста» лишнее, «для продолжения регистрации» — тоже. Требование загрузки в формате .jpg — просто абсурд. А поскольку мы убрали вариант с загрузкой, от пояснения удалось целиком избавиться.</p>
<h2 id="редизайн-фото-паспорта">Редизайн: фото паспорта</h2>
<p>Текст под заголовком повторяет очевидное — из заголовка и следующих двух блоков и так понятно, что надо сделать.</p>
<p>Непонятно, зачем разноцветные блюры на фотографиях. Пока фото не сделано, лучше показывать схематичное изображение разворота паспорта. Когда сделано — его и показывать.</p>
<p>Крестик удаления фото микроскопический — сложно будет попасть пальцем. Да и зачем удалять фотографию? Если получилась неудачная, можно просто переснять.</p>
<p>Исправляем:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
<p><img alt="Сфотографируйте паспорт" src="signup-puzzle-2.png" class="img-bordered-thin"></p>
</div>
<div class="col-xs-12 col-sm-3">
  <p class="figcaption">Схематичные изображения страниц помогут открыть нужный разворот паспорта</p>
</div>
</div>
<h2 id="альтернатива-отдельные-экраны">Альтернатива: отдельные экраны</h2>
<p>С первым экраном (личное фото) есть проблема: он предлагает лишнее действие. Можно без потери смысла фотографировать сразу на нём. Тогда логично и фото паспорта разнести по отдельным экранам. Такой вариант предложил <a href="https://t.me/ademyanovskih">Алексей Демьяновских</a> (макеты участника с моими правками):</p>
<div class="row">
<div class="col-xs-12 col-sm-4">
<figure>
  <img alt="Селфи" src="signup-puzzle-3-1.jpg">
      <figcaption>Не предлагаем сделать фото, а сразу включаем фронтальную камеру</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-4">
<figure>
  <img alt="Паспорт — первый разворот" src="signup-puzzle-3-2.jpg">
  <figcaption>Рамки помогут правильно расположить паспорт</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-4">
<figure>
  <img alt="Паспорт — регистрация" src="signup-puzzle-3-3.jpg">
  <figcaption>Шагов много, не забываем показывать прогресс вверху</figcaption>
</figure>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-4">
<figure>
  <img alt="Все документы" src="signup-puzzle-4-1.jpg">
      <figcaption>Если какое-то фото не получилось, можно ткнуть на него и переснять</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-4">
<figure>
  <img alt="Заявка отправлена" src="signup-puzzle-4-2.jpg">
  <figcaption>Ура!</figcaption>
</figure>
</div>
</div>
<h2 id="альтернатива-длинный-экран">Альтернатива: длинный экран</h2>
<p>Возможно, при регистрации помимо фотографий требуются и другие данные. Если приложение не умеет распознавать текст с фотографий, то придётся указывать и ФИО, и дату рождения, и номер-серию паспорта вручную. Это значит, что получается минимум три экрана: текстовые данные, личное фото, фото паспорта.</p>
<p>Можно упаковать всё в один длинный экран. Чуть менее наглядно, но зато сразу видно всё, что требует приложение для регистрации. И легко вернуться к предыдущему шагу. Пример из приложения Belka Car:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
<figure>
  <img alt="Персональные данные" src="signup-puzzle-6-1.png" class="img-bordered-thin">
  <figcaption>Вводим персональные данные…</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-5">
<figure>
  <img alt="Документы" src="signup-puzzle-6-2.png" class="img-bordered-thin">
  <figcaption>…и делаем фото</figcaption>
</figure>
</div>
</div>
<p>Ну или хотя бы сделать общий экран с фотографиями. Макет прислал анонимный участник:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
  <p><img alt="Фото на одном экране" src="signup-puzzle-7.png" class="img-bordered-thin"></p>
</div>
<div class="col-xs-12 col-sm-3">
  <p class="figcaption">Первым экраном могут быть текстовые данные, вторым — фото документов</p>
</div>
</div>
<p>Если оставлять отдельные экраны, хорошо бы добавить индикатор прогресса («шаг 2 из 3»). На это указали многие участники, а <a href="http://antonlyutikov.webflow.io/">Антон Лютиков</a> отрисовал весь сценарий:</p>
<figure>
  <img alt="Регистрация с индикатором прогресса" src="signup-puzzle-8.jpg">
  <figcaption>Приложение распознаёт текст с фото документов и предлагает исправить, если что-то не так</figcaption>
</figure>
<h2 id="альтернатива-чат">Альтернатива: чат</h2>
<p><a href="https://t.me/uuhbuh">Олег Бухтияр</a> обратил внимание на вариант с «чат-ботом», который использует Яндекс.Драйв:</p>
<figure>
  <img alt="Регистрация через бота" src="signup-puzzle-9.jpg" class="img-bordered-thin">
  <figcaption>Бот пишет короткими простыми фразами, как это обычно делают люди в чатах</figcaption>
</figure>
<p>Это, пожалуй, самый естественный по нынешним временам вариант. Бот пишет конкретные короткие указания, пользователь выполняет. Ошибиться почти невозможно. Отсюда и минусы:</p>
<ul>
<li>невозможно вернуться к предыдущему шагу,</li>
<li>непонятно, сколько ещё шагов впереди.</li>
</ul>
<h2 id="бизнес-логика-пропустить-шаги">Бизнес-логика: пропустить шаги</h2>
<p>Слава Соколов справедливо заметил:</p>
<blockquote>
<p>Должна быть возможность пропустить шаги с добавлением фотографий. Человек сможет пользоваться приложением, просто не все функции будут доступны. Актуально, если, например, паспорта под рукой нет.</p>
</blockquote>
<p>Если разработчики не готовы «пустить» человека в приложение до проверки паспорта, стоит хотя бы сохранять уже введённые данные — и не требовать их, когда пользователь через два дня вернётся с паспортом.</p>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>Было ещё несколько предложений, которые не кажутся мне удачными:</p>
<ul>
<li><em>Брать личное фото из паспорта</em>. Паспорт действует 25 лет и больше, люди на фото мало похожи на себя нынешних. Да и фото там так себе. Если брать откуда-то готовое фото, я бы скорее предложил соцсети (заодно и ФИО получаешь автоматом).</li>
<li><em>Регистрация через Госуслуги (ЕСИА)</em>. Вообще, идея богатая. Коммерческие компании действительно могут использовать «Единую систему», чтобы идентифицировать пользователей (причём это юридически значимая идентификация). Но пока на Госуслугах зарегистрировано только 50% взрослого населения (в 2018 собираются довести до 70%). Так что регистрация через Госуслуги как единственный вариант не подойдёт.</li>
</ul>
<p>Ещё раз спасибо всем участникам! Мы продолжим ツ</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Решайте задачки на канале <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Оживляж для скучного приложения</title>
      <link>https://antonz.ru/boring-apps/</link>
      <pubDate>Wed, 11 Apr 2018 14:39:00 +0000</pubDate>
      
      <guid>https://antonz.ru/boring-apps/</guid>
      <description>Ничто так не оживляет софт, как перевыполнение ожиданий человека.</description>
      <content:encoded><![CDATA[<p>Алиса Котляренко написала любопытную статью о том, каким должен быть интерфейс у скучных продуктов. Она выделяет такие приёмы: геймификация, анимация, иллюстрация, маскоты, юмор и настроение.</p>
<p>Я не проводил объективных исследований, поэтому могу говорить только за себя. У меня из перечисленного не работает ничего, кроме лёгкого, уместного юмора в интерфейсных текстах. Геймификация — ну такое, анимация и иллюстрации — безразлично, маскоты (aka Скрепыш в Ворде и обезьяна в Мейлчимпе) — раздражают.</p>
<p>Для меня самое классное в скучном продукте — когда он неожиданно обнаруживает человечность или делает чуть больше, чем я ожидал.</p>
<p>Например, есть Яндекс.Погода (что может быть скучнее). Ну там всё как у всех: погода сейчас, на ближайшие часы, красивая графика, аккуратная анимация. Но есть фишка, которая греет душу — «карта осадков».</p>
<figure>
  <img alt="Карта осадков" src="boring-apps.jpg">
  <figcaption>Перемещаешься во времени и видишь, как дождь двигается по карте города. Мегаполезная штука, которую не ожидаешь увидеть, а она есть.</figcaption>
</figure>
<p>Вот это круто. А ачивки и ужимки с животными — да ну нафиг.</p>
<p>Читатели «интерфейсов без шелухи» согласны, вот результаты опроса:</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8">
<div class="boxed">
<p><em>Что лучше всего работает для вас?</em></p>
<p>Превосходит ожидания – 453<br>
👍👍👍👍👍👍👍 64%</p>
<p>Настроение в тексте – 110<br>
👍👍 16%</p>
<p>Анимация и графика – 104<br>
👍👍 15%</p>
<p>Геймификация – 24<br>
▫️ 3%</p>
<p>Маскоты – 14<br>
▫️ 2%</p>
</div>
</div>
</div>
<p><a href="https://www.smashingmagazine.com/2018/04/designing-emotional-interfaces-boring-apps/">Статья Алисы</a></p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Пароли в СМС и пушах</title>
      <link>https://antonz.ru/sms-password/</link>
      <pubDate>Mon, 09 Apr 2018 14:33:00 +0000</pubDate>
      
      <guid>https://antonz.ru/sms-password/</guid>
      <description>Один банк починил пароли, будьте как он.</description>
      <content:encoded><![CDATA[<p>Альфа-Банк тут выложил в общий доступ свою дизайн-систему, и там нашёлся хороший принцип про одноразовые пароли:</p>
<blockquote>
<p>Важно, чтобы одноразовый пароль был полностью виден в предпросмотре входящего сообщения и был как можно короче. Так клиент сможет быстро увидеть пароль, запомнить его и ввести.</p>
</blockquote>
<p>Золотые прям слова. Альфа-Банк много лет слал примерно такие сообщения:</p>
<blockquote>
<p>Podverdite perevod na summu NNN RUR na schet MMM. Vnimanie! Nikomu ne soobshayte parol. Parol dlya perevoda: 573281</p>
</blockquote>
<p>Разумеется, в панели нотификаций на телефоне показывалась только начальная бесполезная часть, а за паролем приходилось лезть внутрь сообщения.</p>
<p>В определённый момент ребята исправились и теперь шлют так:</p>
<blockquote>
<p>Kod: 4904. Podverdite perevod na summu 5000.00 RUR.</p>
</blockquote>
<p>Осталось только отказаться от транслита, убрать копейки — и будет совсем хорошо.</p>
<p>P.S. Кто-то уже спешит возмутиться: небезопасно, мол! А ну как злодей увидит код на экране заблокированного телефона и стремительно ринется вводить вперёд законного владельца? Не переживай, друг: у телефонов есть настройка «не показывать содержимое сообщения при заблокированном экране».</p>
<p>P.P.S. Больше <a href="/security-code/">о дизайне кодов подтверждения</a></p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Потрясающий интерфейс и отвратительная морда</title>
      <link>https://antonz.ru/good-bad-ugly/</link>
      <pubDate>Fri, 16 Mar 2018 10:05:01 +0000</pubDate>
      
      <guid>https://antonz.ru/good-bad-ugly/</guid>
      <description>Что делать, когда менеджмент выбирает «лишь бы подешевле».</description>
      <content:encoded><![CDATA[<p>Мне иногда пишут «ты вот топишь за хорошие интерфейсы, а что толку — менеджмент всё равно всегда выбирает какаху, лишь бы подешевле».</p>
<p>Кажется, тут недопонимание.</p>
<p>На самом деле, нет выбора между «божественно прекрасный интерфейс задорого» и «самое убогое во вселенной отстоище задёшево». Обычно есть как минимум такие варианты:</p>
<ol>
<li>Сделать плохо, потратив N ресурсов.</li>
<li>Сделать нормально, потратив те же N (или чуть больше) ресурсов.</li>
<li>Сделать отлично, потратив k*N ресурсов.</li>
</ol>
<p>Понимать принципы создания хороших интерфейсов стоит хотя бы для того, чтобы видеть вариант 2. Иначе вы остаётесь только со «сделать плохо».</p>
<p>Действительно, далеко не всегда вы пойдёте по варианту 3 — потому что есть ограничения и есть приоритеты. Но почти никогда не останетесь с вариантом 1, потому что между «сделать плохо» и «сделать нормально за те же деньги» адекватный менеджер всегда выберет «сделать нормально».</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Если нет награды, прогресс бесполезен</title>
      <link>https://antonz.ru/progress-and-reward/</link>
      <pubDate>Wed, 28 Feb 2018 11:07:08 +0000</pubDate>
      
      <guid>https://antonz.ru/progress-and-reward/</guid>
      <description>Мотивация усиливается, когда виден прогресс. Но только если понятно, в чём награда.</description>
      <content:encoded><![CDATA[<p>Мотивация усиливается по мере приближения к цели. Особенно хорошо это работает, если человек видит прогресс.</p>
<p>Продукты и сервисы вовсю этим пользуются. Хрестоматийный пример — LinkedIn с его «прогрессом заполнения профиля», но вообще приём используется повсеместно. Даже на форме заявки на кредитку пишут «шаг 1 из 4» — это тоже визуализация прогресса.</p>
<p>Приём работает при одном условии — человек понимает, в чём награда. Прогресс сам по себе не особо мотивирует, если я не понимаю, что получу взамен.</p>
<p>Яркий анти-пример — приложение заказа такси Gett. У них есть программа лояльности со статусами вроде «суперзвезда», «вожак стаи» и «босс». Но статусы ничем не отличаются, кроме названия и количества очков, которые надо набрать.</p>
<p>Так было несколько лет. Потом, похоже, кто-то в Gett заметил, что программа лояльности никого не делает лояльнее, и задумался о наградах. И придумал «скидку в часы пик».</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<p><img alt="Бессмысленные награды в Gett" src="gett.png"></p>
</div>
</div>
<p>И теперь эту скидку написали всем статусам выше определённого уровня. Одну и ту же ツ Но если награда везде одна и та же — это всё равно что её нет.</p>
<p>В общем, если показывать прогресс достижения цели — то вывесить понятную награду. А если у цели несколько уровней, то и награды должны быть разными.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Когда дизайн не нужен</title>
      <link>https://antonz.ru/admin-ui/</link>
      <pubDate>Wed, 21 Feb 2018 09:31:05 +0000</pubDate>
      
      <guid>https://antonz.ru/admin-ui/</guid>
      <description>Когда есть универсальная админка.</description>
      <content:encoded><![CDATA[<p>Я вообще большой поклонник интерфейсов «под задачу». Таких, чтобы удобно закрывали конкретные пользовательские сценарии, а не пытались быть конструкторами под любые требования (чем часто грешат в корпоративном софте).</p>
<p>Но есть одно исключение — админки. Админка — это интерфейс над данными (клиентами, товарами, заказами, любыми объектами предметной области) с базовыми возможностями вроде поиска, фильтрации и редактирования. Работают с админкой исключительно сотрудники бэкофиса: техподдержка, контент-менеджеры, администраторы.</p>
<p><img src="admin-ui.png" alt="Типичная админка"></p>
<p>Я за универсальные админки, которые работают «из коробки», вообще без участия дизайнера и разработчика. Да, там иногда приходится поработать напильником, но выигрыш от готового интерфейса колоссальный. А освободившееся время и ресурсы лучше направить на проработку интерфейса для конечных пользователей.</p>
<p>Готовые админки вроде есть под все популярные фреймворки разработки. Самая известная, конечно — Django (Python). Но и других хватает: RailsAdmin (Ruby), Spring Roo и Grails (Java), Play Framework (Scala), KeystoneJS (JavaScript).</p>
<p>Рекомендую.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Убийственный дизайн</title>
      <link>https://antonz.ru/design-can-kill/</link>
      <pubDate>Wed, 14 Feb 2018 13:11:27 +0000</pubDate>
      
      <guid>https://antonz.ru/design-can-kill/</guid>
      <description>Книга Tragic Design. Об ошибках в дизайне, которые калечат и убивают — и о том, как их избежать.</description>
      <content:encoded><![CDATA[<p>Наткнулся на классную, судя по всему, книгу — Tragic Design. Об ошибках в дизайне, которые калечат и убивают — и о том, как их избежать.</p>
<p>Вторая глава с захватывающим названием «Design Can Kill» есть в открытом доступе. Там разобраны 4 ситуации, когда ошибки в интерфейсе продукта привели к фатальным последствиям:</p>
<ul>
<li>Аппарат для лучевой терапии, которые стрелял в пациентов направленным пучком в 17000 рад (в 85 раз больше нормальной дозы).</li>
<li>Паром, у которого «газ» и «тормоз» менялись местами в зависимости от режима (вспоминается классическое программистское «define TRUE FALSE»).</li>
<li>Автомобиль, который блокировал двери и загорался при ударе сзади — и убил таким способом 180 человек.</li>
<li>Самолёт, который влетел в гору, потому что путал градусы с вертикальной скоростью.</li>
</ul>
<p>Почитайте, чтобы навсегда перестать использовать режимы в интерфейсе. Это будет поубедительнее, чем аналогичная тема у Раскина ツ</p>
<p class="big">
<a href="https://www.safaribooksonline.com/library/view/tragic-design/9781491923603/ch02.html">Design Can Kill</a>
</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Прощание с пользователем</title>
      <link>https://antonz.ru/offboarding/</link>
      <pubDate>Thu, 08 Feb 2018 15:59:00 +0000</pubDate>
      
      <guid>https://antonz.ru/offboarding/</guid>
      <description>Как правильно расстаться в любой ситуации.</description>
      <content:encoded><![CDATA[<p>Есть такая штука — <em>офбординг</em> (offboarding). Это то, как продукт ведёт себя, когда взаимодействие с пользователем закончилось:</p>
<ul>
<li>человек уходит с сайта, ничего не купив;</li>
<li>человек отменяет подписку на сервис;</li>
<li>человек оформил заказ.</li>
</ul>
<p>Как видно, расставание может быть на «позитиве» (оформил заказ) или на «негативе» (отменил подписку). В любом случае, маркетологам и дизайнером не хочется, чтобы продукт в этот момент стоял истуканом. И чаще всего — правильно не хочется.</p>
<p>Что делать при офбординге — зависит от конкретной ситуации. Я думаю, что достаточно руководствоваться одним вопросом:</p>
<blockquote>
<p>Что сейчас важно для человека?</p>
</blockquote>
<p>Допустим, покупатель оформил заказ в магазине. Что ему важно? Понять, чего ждать дальше. Отвечаем:</p>
<blockquote>
<p>Мы приняли заказ. Менеджер перезвонит через полчаса, чтобы согласовать доставку.</p>
</blockquote>
<p>Или пользователь оформил подписку на сервис, который интегрируется с его сайтом. Что важно? Понять, как подключить и куда обращаться, если что-то не заработает. Отвечаем:</p>
<blockquote>
  <p>Вы приобрели подписку на сервис подсказок DaData.ru, тариф «Лёгкий». Вот <u>инструкция по настройке</u></p>
  <p>Если возникнут вопросы, пишите <u>в службу поддержки</u>, будем рады ответить.</p>
</blockquote>
<p>Или человек отписался от рассылки. Что ему важно? 1) чтобы не выносили мозг и 2) облегчить душу, если он зол. Отвечаем:</p>
<blockquote>
<p>Вы отписались от рассылки и больше не получите наших писем. Если мы чем-то вас рассердили — пожалуйста, дайте знать:
(<em>место для гневного сообщения</em>)</p>
</blockquote>
<p>Или вот: человек уходит с сайта, ничего не купив. Что ему важно? Чтобы не мешали. Поэтому не делаем ничего. И конечно же, не тыкаем в него попапом с предложением невероятной скидки (привет маркетологам).</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Прощание, если оно на позитиве — удачный момент, чтобы предложить дополнительные услуги, попросить рекомендацию или отзыв, подписать на новости (только не абстрактные, а релевантные для человека). Но главное:</p>
<blockquote class="big">
Ответить на важные вопросы или молча отпустить
</blockquote>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Не моя проблема</title>
      <link>https://antonz.ru/not-my-problem/</link>
      <pubDate>Fri, 26 Jan 2018 12:56:00 +0000</pubDate>
      
      <guid>https://antonz.ru/not-my-problem/</guid>
      <description>Многие специалисты не дают себе труда разобраться в контексте проблемы. А зря.</description>
      <content:encoded><![CDATA[<p>Вы, наверно, слышали афоризм про односторонность узкого специалиста. Афоризм лживый, на мой взгляд. Профи, прокачанный в одной области, волей-неволей неплохо понимает и в смежных — это необходимое условие мастерства.</p>
<p>Но проблема в другом — многие специалисты не дают себе труда разобраться в контексте проблемы.</p>
<p>Пример: медленно работает программа. Раньше уже были проблемы с базой данных, поэтому первым делом бегут к администратору БД. Тот смотрит и говорит:</p>
<blockquote>
<p>С базой всё в порядке, проблемы в приложении, идите к разработчикам.</p>
</blockquote>
<p>А потрать он пять минут и вникни в контекст, ответ мог быть таким:</p>
<blockquote>
<p>Смотрите — вот этот запрос, хотя сам по себе выполняется моментально, за день был выполнен 2 000 000 раз. Может это и нормально, но выглядит странно — имеет смысл показать разработчикам.</p>
</blockquote>
<p>Или таким:</p>
<blockquote>
<p>80% времени на базе выполняются вот эти 5 запросов. Обратите внимание разработчиков на них.</p>
</blockquote>
<p>Конечно, иногда на вникание в контекст может потребоваться время, которого просто нет. Тогда ответ мог бы быть таким:</p>
<blockquote>
<p>С базой всё хорошо, и явных проблем с запросами я не вижу. Если разработчики всё же сочтут, что причина «тормозов» в базе, я могу вместе с ними подробно проанализировать профиль нагрузки и предложить варианты решения. На это потребуется N времени.</p>
</blockquote>
<p>Хочу чаще встречать специалистов, которые вникают в контекст.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Специально для подписчиков <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсов без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Обратить необратимое</title>
      <link>https://antonz.ru/irreversible/</link>
      <pubDate>Mon, 22 Jan 2018 09:44:51 +0000</pubDate>
      
      <guid>https://antonz.ru/irreversible/</guid>
      <description>Необратимые операции сильнее всего нуждаются в отмене, как ни странно.</description>
      <content:encoded><![CDATA[<p>Возможно, вы слышали о грандиозном UX-провале на Гавайях: там из-за плохого интерфейса оператор ошибся и отправил жителям оповещение о ракетном ударе (с милым дополнением «ЭТО НЕ УЧЕБНАЯ ТРЕВОГА»).</p>
<p>По этому поводу Гавайи и плохие интерфейсы простебали уже все кому не лень. Из основных проблем выделяют визуальную схожесть кнопок тестовой и реальной тревоги, плохое подтверждение действия и не-сценарность интерфейса (он выглядит просто как свалка ссылок).</p>
<p>Но главная беда, на мой взгляд, такая:</p>
<blockquote class="big">
Нет отмены ошибочной операции
</blockquote>
<p>Кажется, у необратимых операций всегда должна быть отмена. Это контринтуитивно (мол, какая же отмена, если операция необратимая). Но именно таким операциям и нужна отмена.</p>
<p>Простейший способ добавить отмену необратимого действия — выполнять его не по факту нажатия на кнопку, а отложенно, через N секунд. Обычно человек моментально понимает, что сделал что-то не то — и успевает отменить. Если вы когда-нибудь по ошибке отправляли письмо не тому человеку, то знаете, как это бывает ツ</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Регистрация и оплата как необходимое зло</title>
      <link>https://antonz.ru/necessary-evil/</link>
      <pubDate>Fri, 19 Jan 2018 10:01:45 +0000</pubDate>
      
      <guid>https://antonz.ru/necessary-evil/</guid>
      <description>Когда работаешь с «необходимым злом», главное — минимизировать боль и сохранять контекст.</description>
      <content:encoded><![CDATA[<p>Два самых распространённых «необходимых зла» в интерфейсе — регистрация и оплата.</p>
<ul>
<li>зло — потому что пользователю они не нужны, у него другая задача;</li>
<li>необходимое — потому что без них не получить результат.</li>
</ul>
<p>Когда работаешь со «злом», главное — минимизировать боль и сохранить контекст.</p>
<h2 id="минимизировать-боль">Минимизировать боль</h2>
<p>Чем быстрее человек преодолеет препятствие, тем лучше. Поэтому из регистрации имеет смысл выкинуть всё лишнее, обойдясь необходимым минимумом.</p>
<p><em>Плохая регистрация</em></p>
<figure>
  <img alt="Подписка на рассылку у Сони" src="signup-bad.png">
  <figcaption>Подписка на емейл-рассылку Сони настолько ужасна, что даже по-своему прекрасна</figcaption>
</figure>
<div class="row">
<div class="col-xs-12 col-sm-8 col-md-6">
<p><em>Хорошая</em></p>
<figure>
  <img class="bordered img-grayscale" alt="Подписка на рассылку у «Интерфейсов без шелухи»" src="signup-good.png">
  <figcaption>Удивительно, но емейла вполне достаточно. Надо бы тоже добавить страну проживания и группу крови</figcaption>
</figure>
</div>
</div>
<p>Из оплаты всё не выкинешь, но можно оставить только платёжные реквизиты:</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8">
<figure>
  <img class="img-grayscale" alt="Оплата Яндекс-деньгами" src="pay-good.png">
  <figcaption>Например, фамилия и имя при оплате картой не нужны</figcaption>
</figure>
    </div>
</div>
<p>Правило: отвлекать человека как можно меньше, чтобы побыстрее вернуть его к основной задаче.</p>
<h2 id="сохранить-контекст">Сохранить контекст</h2>
<p>После того, как человек закончил с регистрацией или оплатой, хороший интерфейс вернёт его ровно туда, где он до этого остановился.</p>
<p>Регистрация должна возвращать на тот же экран, но актуализировать состояние интерфейса:</p>
<div class="row">
<div class="col-xs-12 col-sm-5">
    <p><em>До регистрации</em></p>
<figure>
  <img alt="API «Дадаты» до регистрации" src="signup-01.png">
  <figcaption>Заглушки API_KEY и SECRET_KEY — ключи для работы с программой, которые до регистрации неизвестны.</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-5 col-sm-offset-1">
    <p><em>После регистрации</em></p>
<figure>
  <img alt="API «Дадаты» после регистрации" src="signup-02.png">
  <figcaption>Тот же экран, но раз человек зарегистрировался — вместо заглушек реальные значения.</figcaption>
</figure>
</div>
</div>
<p>Оплата должна переводить на следующий шаг. Допустим, потребовалась заплатить посередине пользовательского сценария, потому что не хватает денег, чтобы его завершить:</p>
<div class="row">
<div class="col-xs-12 col-md-10">
<figure>
  <img alt="Пополнить баланс, чтобы обработать файл" src="pay-in-the-middle.png">
  <figcaption>«Дадата» просит доплатить, чтобы хватило на обработку файла</figcaption>
</figure>
</div>
</div>
<p>Если после оплаты человека выкинет на главную страницу или в начало сценария — это не дело. Лучше продолжить сценарий с той точки, где отвлеклись на оплату:</p>
<figure>
  <img alt="Пользовательский сценарий с оплатой посередине" src="pay.png">
  <figcaption>Началась обработка → отвлеклись на оплату → обработка продолжилась → готов результат</figcaption>
</figure>
<p>Правило: вернуть человека туда, где он остановился, чтобы побыстрее закончить начатое.</p>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>«Необходимое зло» — не только регистрация и оплата. Бывает, не хватает данных, и приходится запрашивать их у человека. Бывает, надо подождать завершения другой операции. Бывает, требуется подтверждение третьей стороны.</p>
<p>Правила для таких ситуаций одни и те же:</p>
<blockquote class="big">
Минимизировать боль и сохранить контекст
</blockquote>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>По техническим причинам</title>
      <link>https://antonz.ru/reasons/</link>
      <pubDate>Tue, 16 Jan 2018 09:05:42 +0000</pubDate>
      
      <guid>https://antonz.ru/reasons/</guid>
      <description>Сервис тупых отмазок на все случаи жизни.</description>
      <content:encoded><![CDATA[<p>Люди любят объяснять провалы «техническими причинами»:</p>
<blockquote>
<p>По техническим причинам поезда следуют с увеличенными интервалами.
По техническим причинам платежи картой временно не принимаются.
По техническим причинам магазин не работает после 18:00.</p>
</blockquote>
<p>Я знаю один секрет: всем плевать на абстрактные причины. Неважно, технические они, гуманитарные, политические, религиозные или социальные. Если не можете назвать конкретику, лучше ограничиться голыми фактами:</p>
<blockquote>
<p>Поезда ходят с интервалом 5–10 минут.
Платежи картой заработают 25 января.
Часы работы: 10–18</p>
</blockquote>
<p>Но если уж так хочется объяснять проблемы «причинами», предлагаю включать фантазию:</p>
<blockquote>
<p>В честь дня защиты улиток поезда следуют с увеличенными интервалами.
Платежи картой не принимаются во славу Плутоса.
Магазин не работает после 18, потому что ну сколько можно уже.</p>
</blockquote>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Пуш-оповещения и гении из Гугла</title>
      <link>https://antonz.ru/chrome-push/</link>
      <pubDate>Fri, 12 Jan 2018 08:41:33 +0000</pubDate>
      
      <guid>https://antonz.ru/chrome-push/</guid>
      <description>Как блестящие умы из команды Хрома улучшили пуш-оповещения.</description>
      <content:encoded><![CDATA[<p>Люди терпеть не могут пуш-оповещения на сайтах. Но когда те же самые люди делают собственные сайты, что-то у них в мозгу щёлкает и они обязательно добавляют запрос на нотификации, непременно на главную страницу.</p>
<p>Когда-то Хром (самый популярный браузер, на Андроиде работает по умолчанию) показывал такие запросы в маленькой всплывашке, которая не особо мешала работать с сайтом.</p>
<p>Потом команда Хрома исследовала вопрос и обнаружила: 90% запросов на пуш-оповещения люди игнорируют.</p>
<p>Какой вывод из этого сделал бы рядовой обыватель:</p>
<blockquote>
<p>Пуш-оповещения никому не нужны, давайте их отключим.</p>
</blockquote>
<p>Какой вывод сделала команда блестящих инженеров и дизайнеров Гугла:</p>
<blockquote>
<p>Несчастные ублюдки не в состоянии заметить нашу маленькую всплывашку. Ну так мы им поможем, мухахахахаха.</p>
</blockquote>
<p>С тех пор Хром показывает запрос на пуш-оповещения в модальном окне, которое блокирует работу, пока человек не выберет — разрешить или нет.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="Хрен с горы хочет слать нотификации" src="chrome-push.png">
</figure>
</div>
</div>
<p>Гениально.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Я медленно снимаю твои деньги с карты</title>
      <link>https://antonz.ru/ux-writing/</link>
      <pubDate>Wed, 03 Jan 2018 12:09:16 +0000</pubDate>
      
      <guid>https://antonz.ru/ux-writing/</guid>
      <description>Или как начать писать в интерфейсе по-человечески.</description>
      <content:encoded><![CDATA[<p><em>Или как начать писать в интерфейсе по-человечески, не тратя полжизни на изучение бесконечных статей и книг Ильяхова на эту тему.</em></p>
<p>Многие сервисы заранее блокируют стоимость услуги на карте клиента, чтобы убедиться в его платёжеспособности.</p>
<p>Банки в СМС-оповещениях не делают разницы между блокировкой и списанием (может и правильно), потому присылают «с карты списано NNN рублей».</p>
<p>Если клиент пользуется услугой в первый раз, он начинает вибрировать: «ничего не сделали, а деньги уже списали, кидалы, а-а-а». Начинаются нервные звонки в поддержку и ругань в соцсетях. Ситуация проясняется, но осадок остаётся.</p>
<p>А избежать неприятных последствий просто: достаточно объяснить человеку, что происходит. Например, Qlean присылает такую СМС:</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img alt="СМС от Qlean о списании с карты" src="qlean.png">
  <figcaption>Теперь понятно, можно не волноваться</figcaption>
</figure>
</div>
</div>
<p>Конечно, на самом деле это не «всего лишь проверка». 50% суммы они спишут в любом случае, даже если отменить уборку (в качестве штрафа).</p>
<p>Но эти нюансы в СМС не объяснишь, да и до штрафа дело доходит редко. А так клиент спокоен, доволен, и не отвлекает поддержку.</p>
<h2 id="как-писать-в-интерфейсе-по-человечески">Как писать в интерфейсе по-человечески</h2>
<p>Если пользователь не понимает, что происходит, он бесится. Когда пользователь бесится, подходят самые разные нехорошие вещи. Лучше его не злить.</p>
<p>Лучший способ не злить пользователя: в любой потенциально непонятной ситуации объяснять, что происходит и чего ожидать.</p>
<p>Как это сделать:</p>
<ol>
<li>
<p>Заметить, что вот этот конкретный экран, шаг или событие в интерфейсе плохо понятен. Если проводите юзабилити-тесты, такие участки заметны по вопросам «это чё», «что за фигня произошла» и «что мне с этим делать». Если не проводите — включите эмпатию или покажите коллеге.</p>
</li>
<li>
<p>Объяснить происходящее вслух, как объяснили бы хорошему знакомому. Прямо проговорить. Начните с универсального «ну бл*, короче» — чтобы снять писательский блок. Запишите объяснение на диктофон.</p>
</li>
<li>
<p>Сделать выжимку самого главного и записать. Короткий вариант пойдёт в виде надписи в интерфейсе. Длинный — в виде статьи в базе знаний.</p>
</li>
</ol>
<p>Готово, вы восхитительны.</p>
<p>P.S. Есть нюанс. Иногда разрулить непонятность лучше не дополнительным объяснением, а наоборот: убрать лишнее или вовсе перепроектировать участок интерфейса. Но на то и дизайнер, чтобы отличать такие ситуации, верно?</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>2018</title>
      <link>https://antonz.ru/2018/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://antonz.ru/2018/</guid>
      <description></description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
    <item>
      <title>Сила частичных решений</title>
      <link>https://antonz.ru/partial-solutions-power/</link>
      <pubDate>Mon, 25 Dec 2017 08:21:32 +0000</pubDate>
      
      <guid>https://antonz.ru/partial-solutions-power/</guid>
      <description>Программисты ненавидят частичные решения. Если штука работает 99 раз из 100, значит она не работает вообще — так считает программист.</description>
      <content:encoded><![CDATA[<p>Программисты ненавидят частичные решения. Если штука работает 99 раз из 100, значит она не работает вообще — так считает программист. Если она работает 9 раз из 10, так это и вовсе издевательство.</p>
<p>Но при взаимодействии с людьми, этими нелогичными белковыми существами, попадание в 90% случаев — отличный результат. Главное, чтобы в оставшихся 10% алгоритм честно говорил «не знаю», а не выдавал результат наобум.</p>
<p>Пример: автоматическое определение пола по имени-фамилии. Да, никакой алгоритм не угадает пол у «Саши Савченко». Но если он уверенно отрабатывает на Настях и Колях, а про «Женю» честно скажет «не знаю» — это отличный алгоритм. Потому что в 90% случаев вы узнаете пол, а в оставшихся 10% — ничего не потеряете.</p>
<p>Понятно, что частичные решения не везде уместны. Если автопилот в одном полёте из десяти говорит «ой всё, я не смогла» — в топку такой автопилот.</p>
<p>Но намного чаще частичные решения помогают. Главное, чтобы не врали.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Сломается всё</title>
      <link>https://antonz.ru/release-it/</link>
      <pubDate>Tue, 19 Dec 2017 12:51:48 +0000</pubDate>
      
      <guid>https://antonz.ru/release-it/</guid>
      <description>Каждая отдельная часть. Самым изощрённым способом. Это невозможно предупредить.</description>
      <content:encoded><![CDATA[<p><em>(и что с этим делать)</em></p>
<p>За долгую историю общения с нагруженными сервисами я понял — законы Мерфи работают.</p>
<p>Сломается всё, каждая отдельная часть. Сломается самым изощрённым способом. Сломаются внутренности, о которых ты даже не подозревал, что они существуют.</p>
<p>Сбои невозможно предупредить. Всё что остаётся — минимизировать риски и последствия.</p>
<p>Интересно, что этому никто не учит. Подозреваю, что те кто обычно учат — сами не умеют, а те кто умеют — не любят учить.</p>
<p>Мне известно ровно одно исключение — книга Майкла Нигарда «Release It!». Это книга, которую стоило бы прочесть всем корпоративным архитекторам вместо фуфла, которое они обычно читают.</p>
<p>Каждый раз, когда я пренебрегал приёмами, описанными в книге — получал по носу. При этом приёмы все простые. Но применять их сложно: нет времени, да и программисты сопротивляются.</p>
<p>«Вот ещё, буду я встраивать прерыватель в обращения к биллингу. Пусть лучше биллинг свой наладят, чтоб нормально работал!» — это типичная реакция программиста, к которому приходишь с советами из книги Нигарда. К сожалению все эти «пусть они наладят», «это задача администратора», «купите сервер помощнее» — не работают. Работают только подходы, описанные Нигардом.</p>
<p>В общем, если читать ровно одну книгу об архитектуре софтверных систем — берите. На днях как раз вышло второе издание.</p>
<br>
<div class="row">
<div class="col-xs-12 col-sm-3">
  <a class="img-link" href="https://pragprog.com/book/mnee2/release-it-second-edition"><img class="portfolio-thumb--raised" alt="Release It! Second Edition" src="release-it.jpg"></a>
</figure>
</div>
<div class="col-xs-12 col-sm-8">
<p>
    <b><a href="https://pragprog.com/book/mnee2/release-it-second-edition">Release It! Second Edition</a></b><br>
    Design and Deploy Production-Ready Software<br>
    by Michael Nygard
</p>
</div>
</div>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="tg://resolve?domain=ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Вредные привычки: mind maps</title>
      <link>https://antonz.ru/mind-maps/</link>
      <pubDate>Mon, 18 Dec 2017 09:20:29 +0000</pubDate>
      
      <guid>https://antonz.ru/mind-maps/</guid>
      <description>Самой вредной привычкой после курения оказалась для меня привычка записывать конспекты книг в виде ментальных карт.</description>
      <content:encoded><![CDATA[<p>Самой вредной привычкой после курения оказалась для меня привычка записывать конспекты книг в виде ментальных карт (mind maps).</p>
<p>Я был жутко увлечен этим подходом. Скрупулёзно конспектировал в нечеловеческих условиях: на микроскопическом экранчике HTC Touch с Windows Mobile 6, яростно тыкая в него стилусом (суровые были времена, что и говорить). Собрал этих конспектов 50 штук.</p>
<p>А потом оказалось, что они даже для растопки не годятся.</p>
<p>Формат майндмапов провоцирует строить глубокие иерархии — 6–7 уровней вложенности. А человек нормально воспринимает 1–2. В результате перечитывать это невозможно.</p>
<p>Формат майндмапов заставляет всё записывать в формате отрывочных фраз, «буллетов». Ни одну мысль нормально подробно не сформулируешь. В результате читаешь потом и ломаешь голову «что же я имел в виду».</p>
<p>Наконец, майндмапы по-прежнему неудобно читать и писать на телефонах. Не знаю, как я умудрялся делать это на древнем виндофоне. Сейчас не готов на такие жертвы даже на 5.5'' экране.</p>
<p>Формат, который оказался в сто раз проще и удобнее — текстовые заметки в Симплноуте. Удобно записывать, удобно искать, удобно перечитывать.</p>
<p>А на каждый старый конспект я теперь трачу по часу времени, перегоняя его в человекочитаемый вид.</p>
<p><em>Обложка — <a href="https://www.flickr.com/photos/zipckr/4688416205">Pietro Zanarini</a></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Днище ИТ-безопасности</title>
      <link>https://antonz.ru/it-security/</link>
      <pubDate>Tue, 12 Dec 2017 09:28:51 +0000</pubDate>
      
      <guid>https://antonz.ru/it-security/</guid>
      <description>100% встреченных мной специалистов по ИТ-безопасности занимаются анальным огораживанием.</description>
      <content:encoded><![CDATA[<p>С подачи Григория Бакунова я прочитал письмо Линуса Торвальдса о разработчиках, пользователях и спецах по информационной безопасности. Оно длинное, но вот самый смак в вольном переводе:</p>
<blockquote>
<p>Когда ты, безопасник, бесишь пользователей и разработчиков — я не приму работу и назову тебя хреновым специалистом.</p>
</blockquote>
<blockquote>
<p>Потому что в конце концов, важны именно пользователи. Без них система может быть «безопасной», но вся твоя огораживательная активность — просто мастурбация. В конце концов, ты не сделал ничего полезного.</p>
</blockquote>
<p>К сожалению, 100% встреченных мной специалистов по информационной безопасности занимались именно анальным огораживанием, профессиональной мастурбацией и созданием препятствий для собственных коллег. Уверен, где-то они есть нормальные, но, видимо, довольно редки.</p>
<p>Все в компании, от рядовых сотрудников до топ-менеджеров, относятся к отделу ИТ-безопасности одинаково: как к вредному мелкому божку, которому надо принести жертву, чтобы не пакостил. Безопасники работают формально, не вникая в суть дела. Они «защищаются» от фантомных угроз, не обращая внимание на реальные. Они выносят мозг всем вокруг, а сами не хотят ни за что отвечать.</p>
<p>На кой чёрт они — такие — вообще нужны?</p>
<p><a href="https://lkml.org/lkml/2017/11/21/356">Полный текст письма Линуса</a></p>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="https://t.me/ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Андроид и китайское лего</title>
      <link>https://antonz.ru/android-lego/</link>
      <pubDate>Wed, 29 Nov 2017 10:22:37 +0000</pubDate>
      
      <guid>https://antonz.ru/android-lego/</guid>
      <description>Если бы Гугл был рыцарем, то девизом следовало выбрать «пренебрежение к деталям».</description>
      <content:encoded><![CDATA[<p>Однажды мне достался китайский ноунейм-аналог лего. Издалека он выглядел в точности как настоящий, но вблизи иллюзия разрушилась: блёклые кирпичики из плохой пластмассы, уродливые люди с болтающимися руками, а кубики не держатся вместе. Наверно, китайцы сочли, что всё это мелочи.</p>
<p>Андроид, при всех своих достоинствах (их полно, без шуток) — китайское лего. Если бы Гугл был рыцарем, то девизом следовало выбрать «пренебрежение к деталям».</p>
<p>Вот несколько примеров для моих друзей, лишенных радости ежедневного взаимодействия с андроидом.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Иконка часов всегда показывает 11:10, а календарь — 31 число (в айоси они показывают текущее время и день, если что).</p>
<p>Слайдеры громкости (они раздельные для музыки и звонка) отградуированы по-разному. Соответственно, их невозможно поставить в одинаковое положение. Чей больной мозг вообще это придумал?</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<figure>
  <img class="bordered" alt="Очень разная громкость" src="android-lego-1.png">
  <figcaption>Кошмар перфекциониста — разные деления на слайдерах громкости</figcaption>
</figure>
</div>
</div>
<p>В 7 андроиде одна и та же кнопка в панели быстрых настроек ведёт себя по-разному. Например, в одном случае отключает wifi, в другом — открывает настройки.</p>
<p>8 андроид жужжит и показывает оповещение каждый раз, когда пропадает сеть. Соответственно, в метро это гад жужжит постоянно. И нет, это не отключается.</p>
<p>8 андроид считает своим долгом сообщить, когда какая-то программа работает в фоне. Наверно, это станет новостью для дизайнеров Гугла, но программы <em>постоянно</em> работают в фоне. Угадайте, какое оповещение я теперь вижу чаще всего?</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Я могу продолжать долго, но ограничусь последним штрихом, который отлично показывает внимание дизайнеров Гугла к деталям.</p>
<div class="row">
<div class="col-xs-12 col-sm-4">
  <p><img alt="Загадочная папка" src="android-lego-2.png"></p>
</div>
<div class="col-xs-12 col-sm-4">
  <p class="figcaption">Приложение такси и приложение такси. Как бы назвать папку? Хммм. А! Unnamed Folder!</p>
</div>
</div>
<p>Если объединить несколько значков в папку, андроид назовёт её Unnamed. Ну правда, откуда ему знать, что там в папке? Конечно, человек скачал приложения из стора, где все они разбиты по категориям. Но теперь-то они не в сторе, а на рабочем столе, верно? Решительно невозможно придумать адекватное название для папки. Удивительно, что айось как-то с этим справляется.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>А хорошие интерфейсы — в телеграм-канале <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Угадайка и неленивый интерфейс</title>
      <link>https://antonz.ru/guess/</link>
      <pubDate>Tue, 28 Nov 2017 16:03:48 +0000</pubDate>
      
      <guid>https://antonz.ru/guess/</guid>
      <description>Лучше один раз напрячь программиста, чем тысячу раз приставать к пользователям.</description>
      <content:encoded><![CDATA[<p>Ленивые интерфейсы любят выносить мозг. В любой ситуации, когда можно догадаться самостоятельно или спросить человека — ленивая программа предпочитает спросить. Давайте посмотрим, как этого избежать.</p>
<h2 id="угадайка">Угадайка</h2>
<p>Вот Мейлчимп требует, чтобы человек рассказал, где что лежит:</p>
<figure>
  <img alt="Угадайка в Мейлчимпе" src="guess-mailchimp.png">
  <figcaption>Ну невозможно же догадаться, где здесь имя, а где телефон, правда?</figcaption>
</figure>
<p>Когда мы проектировали «<a href="https://dadata.ru/">Дадату</a>», сразу хотели сделать нормально. В результате появилась угадайка типов:</p>
<figure>
  <img alt="Угадайка в Дадате" src="guess-dadata.png">
  <figcaption>Человек загружает файл, а Дадата сама расставляет типы на столбцах и просит проверить.</figcaption>
</figure>
<p>Угадайку можно сделать довольно навороченной: приделать к ней нейросеть, обучать в реальном времени, учитывать индивидуальные особенности пользователя, и так далее.</p>
<p>Сильно проще — угадывать по эвристикам:</p>
<pre tabindex="0"><code>***@***.*** → это емейл
Начинается на 79xx или 89xx → телефон
Есть слово из топ-100 имён или фамилий → ФИО
Встречается «область», «город» или «улица» → почтовый адрес
</code></pre><p>Даже простой эвристический механизм работает много лучше, чем ничего. В 80% случаев человек пробежит глазами по заголовкам, убедится что всё хорошо, и запустит обработку. В оставшихся 20% беззлобно матернёт тупую железяку и исправит где надо.</p>
<p>А если взять историю взаимодействия с пользователями и проанализировать паттерны поведения, вообще можно делать чудеса.</p>
<h2 id="эвристики">Эвристики</h2>
<p>Я уважаю машинное обучение — оно помогает угадывать правильный вариант в сложных ситуациях. Но удивительно, как много можно сделать без него, с помощью простых эвристик. Например:</p>
<ul>
<li>В магазине автоматически выбирать домашний или рабочий адрес доставки в зависимости от дня недели и геопозиции.</li>
<li>После регистрации, когда требуется подтвердить емейл, показать ссылку «перейти в почту», которая отправит человека в почту Яндекса, Мейла или Гугла — в зависимости от почтового домена.</li>
<li>Предложить сохранить фильтр в CRM, если пользователь вручную настраивает его уже в третий раз.</li>
<li>Автоматически выбрать предпочтительную папку для письма из тематической рассылки, ориентируясь на предыдущие письма.</li>
</ul>
<p>Другую информацию легко получить из сторонних API (Дадата, Яндекс, Гугл, &hellip;):</p>
<ul>
<li>Пол по ФИО.</li>
<li>Индекс, район города, ближайшее метро и почтовое отделение по адресу.</li>
<li>Реквизиты компании по названию или ИНН.</li>
<li>Страну, оператора связи и часовой пояс по телефону.</li>
<li>Банк по номеру карты.</li>
<li>Аватарку по емейлу.</li>
</ul>
<p>Такие мелочи производят приятное впечатление на человека, а в реализации обходятся недорого.</p>
<h2 id="итого">Итого</h2>
<p>Лучше один раз напрячь программиста, чем тысячу раз приставать к пользователям:</p>
<ol>
<li>Программа нормально угадывает и не теребит человека по мелочам.</li>
<li>Для этого не нужен отдел машинлёнинга и бюджет в миллион рублей. Достаточно выделить день на анализ эвристик и несколько дней на реализацию.</li>
<li>Попробуйте сами ツ</li>
</ol>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Никто не читает требования</title>
      <link>https://antonz.ru/specs/</link>
      <pubDate>Thu, 23 Nov 2017 11:33:28 +0000</pubDate>
      
      <guid>https://antonz.ru/specs/</guid>
      <description>Люди не читают требования, хоть ты тресни. Единственный выход — писать их иначе.</description>
      <content:encoded><![CDATA[<p>Раньше я писал требования по Коберну с Вигерсом. Действующие лица, основной сценарий, альтернативные, глоссарий, развесистая структура спецификации, вот это всё.</p>
<p>Отличные требования. Одна проблема с ними — никто не читает. Это странно, у нас же типа инженерная профессия, должны люди внимательно читать спецификации. Но вот не читают. Гады.</p>
<p>Потом мне как-то прислали такую же чужую спеку на ознакомление, я прочёл и понял, что не понял. И не хочу понимать (хотя пришлось себя заставить, да).</p>
<p>С тех пор стараюсь писать спецификации как статьи: с примерами из жизни, иллюстрациями, внутренней логикой повествования и кровавой развязкой (над последним ещё надо поработать).</p>
<figure>
  <img class="img-bordered" alt="Фрагмент требований «Дадаты»" src="specs.png">
  <figcaption>Пример из требований к «<a href="https://dadata.ru/">Дадате</a>». Естественно, там дальше есть и кровавые подробности, как должно работать «под капотом». Но их тоже стараюсь излагать человеческим языком.</figcaption>
</figure>
<p>Не могу сказать, что получается прямо увлекательно. Но определённо лучше, чем юзкейсы, юзер стори, джоб стори и «система должна». Хотя в комиксах было бы ещё лучше.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Бесплатные продукты и пирожки с говном</title>
      <link>https://antonz.ru/freeware/</link>
      <pubDate>Tue, 21 Nov 2017 09:42:44 +0000</pubDate>
      
      <guid>https://antonz.ru/freeware/</guid>
      <description>Многие считают, что если продукт бесплатный, то с автора и спроса нет. Есть проблемы? Сиди и молчи в тряпочку.</description>
      <content:encoded><![CDATA[<p>Однажды читатель «интерфейсов без шелухи» написал мне:</p>
<blockquote>
<p>Когда продукт бесплатный, у пользователей нет прав чего-то требовать от него вообще.</p>
</blockquote>
<p>Действительно, многие считают, что если продукт бесплатный, то с автора и спроса нет. Есть проблемы? Сиди и молчи в тряпочку, бесплатно же получил. Вообще спасибо сказать должен.</p>
<p>Тут фундаментальная ошибка. Делать продукт платным или бесплатным — решение автора и его выбор. Но бесплатный продукт — не подаяние, а клиент — не нищий с протянутой рукой.</p>
<p>Вот смотрите, что писал по этому поводу Ильяхов ещё до того, как его тридцатиметровый бронзовый памятник воздвигли в центре Красной площади:</p>
<blockquote>
<p>Читатель рассылки — это клиент. То, что он не платит за рассылку деньги, не делает его меньшим клиентом, чем, например, платящий клиент Мегаплана. Человек платит за рассылку не деньгами, а вниманием, временем и репостами.</p>
</blockquote>
<p>Это не значит, что автор должен забесплатно разбиться в лепёшку. У бесплатного продукта могут быть жёсткие ограничения — например, отсутствие техподдержки, ограничение по функциям или редкие обновления. Это нормально, если автор прямо об этом говорит.</p>
<p>Но бесплатный продукт не означает, что автор может делать какаху и требовать, чтобы пользователи за это кланялись ему в ножки.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Категорически запрещено</title>
      <link>https://antonz.ru/prohibited/</link>
      <pubDate>Thu, 16 Nov 2017 08:18:45 +0000</pubDate>
      
      <guid>https://antonz.ru/prohibited/</guid>
      <description>В сознании многих людей запрет — вроде магического заклинания: надо подобрать формулировку посильнее, чтобы был эффект. Но они не стараются!</description>
      <content:encoded><![CDATA[<p>В сознании многих людей запрет — вроде магического заклинания: надо подобрать формулировку посильнее, чтобы был эффект. Поэтому мало кто ограничивается обычным «запрещено».</p>
<p>Пишут:</p>
<ul>
<li>ЗАПРЕЩЕНО</li>
<li>ЗАПРЕЩЕНО!!!</li>
<li>СТРОГО ЗАПРЕЩЕНО</li>
<li>СТРОЖАЙШЕ ЗАПРЕЩЕНО</li>
<li>КАТЕГОРИЧЕСКИ ЗАПРЕЩЕНО</li>
</ul>
<p>Когда заклинатель запретов с удивлением обнаруживает, что магия не действует, он напрягается и продолжает заклинание:</p>
<ul>
<li>ШТРАФ</li>
<li>ШТРАФ 1000 руб.</li>
<li>ШТРАФ 5000 рублей!!!</li>
</ul>
<p>Когда и это не действует, запретитель впадает в ступор и пытается взять количеством объявлений, размером шрифта и восклицательными знаками.</p>
<p>Слабая, пораженческая позиция! Вот несколько идей, которые стоило бы применить:</p>
<ul>
<li>Помощь потустороннего:</li>
</ul>
<blockquote>
<p>Запрещено! А то прокляну!</p>
</blockquote>
<ul>
<li>Опора на авторитет:</li>
</ul>
<blockquote>
<p>Запрещено личным указом В. В. Путина!</p>
</blockquote>
<ul>
<li>Угроза социальному статусу:</li>
</ul>
<blockquote>
<p>Запрещено всем, кроме позорнейших лохов!</p>
</blockquote>
<ul>
<li>Угроза здоровью:</li>
</ul>
<blockquote>
<p>Запрещено, а то ноги переломаю!
&lt;Завхоз Виталич, 105 кг мышечной ярости&gt;</p>
</blockquote>
<ul>
<li>Или так:</li>
</ul>
<blockquote>
<p>Запрещено, иначе вас и ваших близких постигнут болезни и мучительная смерть!</p>
</blockquote>
<p>Ну масса вариантов же.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Плохой, плохой магазин</title>
      <link>https://antonz.ru/bad-bad-shop/</link>
      <pubDate>Tue, 14 Nov 2017 08:58:30 +0000</pubDate>
      
      <guid>https://antonz.ru/bad-bad-shop/</guid>
      <description>В России огромное количество плохих интернет-магазинов. И виноваты в этом разработчики.</description>
      <content:encoded><![CDATA[<p>В России огромное количество плохих интернет-магазинов. В смысле, которыми неудобно пользоваться. И виноваты в этом не владельцы магазинов, которые не понимают в интерфейсах и не читают Baymard. Виноваты разработчики «коробок» и облачных платформ для магазинов, которые этого не делают.</p>
<p>Это они придумали спрашивать про «Ваш город — Самара. Мы угадали? Да / нет». Это они после складывания каждого товара в корзину показывают модальное окно «Продолжить покупки или перейти в корзину?». Это они начинают чекаут с требования зарегистрироваться.</p>
<p><img src="shop-choose.png" alt="Очень Важный Вопрос"></p>
<p>Это они называют «заказом в один клик» функцию «перезвоните мне». Это они требуют ввести регион «город Москва» и город «город Москва». И обязательно индекс, а то как же без него доставку считать. И телефон в правильном формате, будьте добры. Докажите, что вы достойны покупать в нашем магазине, уважаемый.</p>
<p>Ах у вас блокировщик рекламы включён? Тогда точно недостойны, для вас кнопка «Оформить заказ» не работает (это прям мода такая пошла, привязывают кнопку к счётчику Метрики, нет счётчика — нет заказа).</p>
<p>Идея для стартапа: сервис, на котором проще сделать хороший магазин, чем то что сейчас делают.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Гладкие и шершавые интеграции</title>
      <link>https://antonz.ru/smooth-integration/</link>
      <pubDate>Fri, 10 Nov 2017 10:20:33 +0000</pubDate>
      
      <guid>https://antonz.ru/smooth-integration/</guid>
      <description>На «гладкость» интеграции своего сервиса с другими всегда хочется забить. А зря.</description>
      <content:encoded><![CDATA[<p>Если вы работаете над облачным сервисом, то здоровенная часть пользовательского опыта — «гладкость» интеграции вашего сервиса со всякими другими. На эту часть разработчикам всегда хочется забить (вот ещё, возиться со сторонними сервисами) — а пользователи страдают.</p>
<p>Например, есть Яндекс-касса, которая сама не умеет выписывать чеки, но интегрирована с онлайн-кассами (Атол и Модуль-касса). Вот основной пункт инструкции по подключению:</p>
<blockquote>
<p>Пропишите здесь настройки для интеграции. Их можно скопировать в личном кабинете вашей онлайн-кассы.</p>
</blockquote>
<p>Но нет. Нельзя их скопировать в личном кабинете Атола. Человек, который писал инструкцию, никогда не пробовал сам подключить онлайн-кассу.</p>
<p>Или вот ещё. Если онлайн-касса однажды сломается, Яндекс напишет:</p>
<blockquote>
<p>Ваша онлайн-касса не отвечает. Если касса стоит у вас, отправьте чек вручную. Если арендуете, это можно сделать в вашем сервисе.</p>
</blockquote>
<p>Но нет. Нельзя отправить чек вручную в Атоле. Автор инструкции никогда не пробовал это сделать.</p>
<p>Я точно знаю, что мы в «<a href="https://dadata.ru/">Дадате</a>» тоже небезгрешны, и проверяем не все интеграции (слабое оправдание — огромное количество этих интеграций). Пример Яндекс-кассы — лишний повод этим заняться ツ</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Жизнь через RSS</title>
      <link>https://antonz.ru/rssify/</link>
      <pubDate>Wed, 08 Nov 2017 06:44:27 +0000</pubDate>
      
      <guid>https://antonz.ru/rssify/</guid>
      <description>Как удобно читать блоги, рассылки, каналы в Телеграме, паблики в Фейсбуке и Вконтакте.</description>
      <content:encoded><![CDATA[<p><em>Как удобно читать блоги, рассылки, каналы в Телеграме, паблики в Фейсбуке и Вконтакте.</em></p>
<p>Была у меня идея для стартапа на миллион: один инструмент для всех подписок. Я даже сделал промо-страницу для проверки спроса.</p>
<figure>
  <img alt="Консона" src="konsona-labeled.png">
  <figcaption>«Консона» берёт на себя все информационные подписки и показывает их в простом и удобном интерфейсе. Как RSS-ридер, только для любых источников.</figcaption>
</figure>
<p>Спроса особого не обнаружилось, но лично для меня проблема актуальности не потеряла. И вот, наконец, удалось свести все информационные каналы в один.</p>
<p>Делюсь рецептом, может и вам пригодится. Как читать всё что угодно через RSS:</p>
<ul>
<li><a href="https://feedbin.com/">Feedbin</a> для блогов. Или его бесплатный аналог — <a href="https://feedly.com/">Feedly</a></li>
<li>Тот же Feedbin для <a href="https://feedbin.com/blog/2016/02/03/subscribe-to-email-newsletters-in-feedbin/">рассылок</a></li>
<li><a href="https://antonz.ru/medium-rss/">Финт ушами</a> для Медиума.</li>
<li><a href="https://notifier.in/">Notifier</a> Кирилла Мальцева для телеграм-каналов.</li>
</ul>
<p>Не представляете, каким облегчением было отписаться от каналов в Телеграме и использовать его как мессенджер. Мечта ツ</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Приём «показать все»</title>
      <link>https://antonz.ru/show-all/</link>
      <pubDate>Tue, 24 Oct 2017 09:04:47 +0000</pubDate>
      
      <guid>https://antonz.ru/show-all/</guid>
      <description>Подвох с решением «показать топ-N результатов» и кнопкой «показать все».</description>
      <content:encoded><![CDATA[<p>Распространённый приём: когда есть неизвестное, но потенциально большое количество элементов (например, результатов поиска), показывать топ-N и кнопку «показать все».</p>
<div class="row">
<div class="col-xs-12 col-sm-8 col-md-6">
  <img alt="Показать все" src="show-all-1.png">
</div>
</div>
<p>Самый большой облом для пользователя: жмёшь на «показать все», и обнаруживаешь, что элементов всего и было N штук, то есть ничего нового ты не увидел.</p>
<p>Идеальный вариант — точно знать общее количество элементов, и сообщить пользователю. Но посчитать все элементы может быть вычислительно «дорого».</p>
<p>Есть алгоритм, который решает проблему. Я сначала покажу на примере, а потом напишу общее правило.</p>
<blockquote>
<p>Пусть есть виджет с результатами поиска, в котором показываем 3 наиболее релевантных результата и кнопку «показать все». При этом места на экране мало, в виджете можем уместить:</p>
<ul>
<li>3 результата + кнопку,</li>
<li>или 4 результата без кнопки.</li>
</ul>
</blockquote>
<p>Решение: вместо топ-3 попробуем запросить у сервера топ-6, и дальше:</p>
<ol>
<li>Если нашлось 4 или меньше результатов, просто покажем их, без всяких кнопок:</li>
</ol>
<div class="row">
<div class="col-xs-12 col-sm-8 col-md-6">
  <img alt="Показать без кнопки" src="show-without-button-1.png">
</div>
</div>
<ol start="2">
<li>Если нашлось 5 результатов, покажем топ-3 и кнопку с конкретным «остатком»:</li>
</ol>
<div class="row">
<div class="col-xs-12 col-sm-8 col-md-6">
  <img alt="Показать с остатком" src="show-more-1.png">
</div>
</div>
<ol start="3">
<li>Наконец, если нашлось 6 результатов (это значит, что их может быть и больше), покажем топ-3 и кнопку «показать все»:</li>
</ol>
<div class="row">
<div class="col-xs-12 col-sm-8 col-md-6">
  <img alt="Показать все" src="show-all-1.png">
</div>
</div>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>Теперь общее правило:</p>
<ol>
<li>Вместо <code>N</code> запрашивать <code>2N</code> элементов.</li>
<li>Если нашлось <code>X ≤ 1,5N</code> элементов — показать все без кнопки.</li>
<li>Если нашлось <code>1,5N &lt; X &lt; 2N</code> — показать <code>N</code> и кнопку с остатком.</li>
<li>Если нашлось ровно <code>2N</code> — показать <code>N</code> и кнопку «показать все».</li>
</ol>
<p>P. S. Спасибо Саше Кириллову за замечания.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Задачка: приглашение обновить ОС</title>
      <link>https://antonz.ru/os-update-puzzle/</link>
      <pubDate>Thu, 19 Oct 2017 07:05:03 +0000</pubDate>
      
      <guid>https://antonz.ru/os-update-puzzle/</guid>
      <description>Как перевести пользователя на новую версию, не тыкая в лицо модальным окном.</description>
      <content:encoded><![CDATA[<div class="row">
<div class="col-xs-12 col-sm-10">
<p>Я предложил читателям телеграм-канала «<a href="https://t.me/dangry" class="nowrap">интерфейсов без шелухи</a>» такую задачку:</p>
</div>
</div>
<div class="boxed">
<h3>Приглашение обновить ОС</h3>
<p>Сотрудники Apple любят хвастаться большим процентом пользователей, которые перешли на самую свежую версию ОС. Достигается этот большой процент модальным окном, которое выскакивает посреди экрана, блокируя работу с телефоном, и требует на выбор:</p>
<ul>
  <li>Обнови меня немедленно.</li>
  <li>Обнови меня чуть позже.</li>
  <li>Насладись описанием новой версии.</li>
</ul>
<figure>
  <img alt="Приглашение обновить айось" src="ios.jpg">
  <figcaption>Так выглядит приглашение обновить айось</figcaption>
</figure>
<p>Как видите, варианта «пшла прочь» не предусмотрено. Если выбрать «позже», айось немедленно подсунет второе модальное окно (уже на весь экран), в котором потребует подтвердить твёрдое намерение обновиться ночью. Если и в этом окне выбрать неприметную надпись «напомнить позже», то айось вернётся на следующий день и начнёт всё с начала.</p>
<p>Поэтому выбор простой: или обновляйся, или получай каждый день по щщам модальным окном. Большинство выбирает обновление.</p>
<p>Предположим, вы занимаете высокий пост в Apple, и по странной случайности не хотите тыкать пользователю в лицо попапами в самой типа как удобной операционной системе на свете. Но при этом хотите сохранить высокие темпы перехода пользователей на новые версии.</p>
<p>Что делать?</p>
</div>
<h3 id="невыносить-человеку-мозг">Не выносить человеку мозг</h3>
<p>Большинство обновлений — минорные (версия 10.x.x). Особой пользы человеку они не добавляют. Следовательно, нет нужды тыкать модальными окошками. Новая версия ОС тихо скачивается в фоне, и автоматически планируется к обновлению следующей ночью.</p>
<p>Пользователю приходит пуш-уведомление:</p>
<blockquote>
<p>Сегодня ночью iOS обновится на версию 10.3.3. Новых фич нет, но исправили пачку ошибок.</p>
</blockquote>
<p>По тыку на уведомление можно изменить расписание. Можно было бы и вариант «пропустить версию» добавить, но мы же в Apple работаем — понятно, что такой вариант не пройдёт ツ</p>
<p>Приятно, что этот вариант предложила треть ответивших.</p>
<h3 id="выбрать-подходящее-время">Выбрать подходящее время</h3>
<p>Раз ось выбирает время обновления автоматически, есть риск, что она ошибётся. Что если человек по ночам тусит, а днём отсыпается и заряжает телефон?</p>
<p>Чтобы повысить вероятность угадать, не грех и пошпионить (айось всё равно это делает, кого мы обманываем). Пусть ОС собирает статистику по периодам «неактивности на подзарядке», и планирует обновление на соответствующий интервал.</p>
<p>Если ось не угадала — человек скорректирует время, не зря же ему уведомление приходит.</p>
<h3 id="дать-возможность-откатиться">Дать возможность откатиться</h3>
<p>Если место позволяет, сделать резервную копию. На следующий день после обновления прислать радостное уведомление:</p>
<blockquote>
<p>iOS обновилась на версию 11. Если что-то не так, вернитесь на предыдущую версию до 22 октября.</p>
</blockquote>
<p>Можно и по электронной почте инструкцию для экстренных ситуаций прислать, а то вдруг телефон после обновления неработоспособен.</p>
<p>Срок на откат — неделя, потом ось тихо удаляет бэкап.</p>
<h3 id="чуть-чуть-подтолкнуть">Чуть-чуть подтолкнуть</h3>
<div class="row">
<div class="col-xs-12 col-sm-8">
<p>Если речь идёт о мажорной версии (10 → 11), или о серьёзной дыре в безопасности, хочется дополнительно простимулировать пользователя. Читатели прислали множество вариантов, как это сделать, не опускаясь до попапов:</p>
<ul>
  <li>показывать в строке индикаторов иконку айоси;</li>
  <li>добавить новую заметную кнопку в центр управления;</li>
  <li>подсунуть баннер в список запущенных приложений;</li>
  <li>нудеть на экране блокировки;</li>
  <li>в особо любимых пользователем системных приложениях соблазнять классными фичами в новой версии ОС.</li>
</ul>
</div>
<div class="col-xs-12 col-sm-4">
<img alt="Баннер в списке запущенных приложений" src="ios-push.png">
</div>
</div>
<h3 id="страна-радужных-пони-обновить-незаметно">Страна радужных пони: обновить незаметно</h3>
<p>В идеальном мире всё было бы ещё проще. Ось бы обновлялась в фоне, не влияя на производительность телефона. Параллельно продолжала бы работать старая версия. В конце человек получил бы уведомление:</p>
<blockquote>
<p>Дружище, новая версия iOS готова к работе.</p>
</blockquote>
<p>По тыку на уведомление через приятную глазу трёхсекундную анимацию старая версия морфировала бы в новую, и пользователь продолжал работать.</p>
<p>Увы, технически так не умеют.</p>
<h3 id="плохая-идея-улучшать-попап">Плохая идея: улучшать попап</h3>
<div class="row">
<div class="col-xs-12 col-sm-8">
<p>Вторая по популярности идея — оставить модальное окно, но добавить в него «пользы». Показывать там демо-ролики, или онбординговые картинки, или писать подробно о новых фичах.</p>
<p>Я думаю, это плохая идея. Главная проблема попапов — они прерывают нормальный процесс работы с устройством, вырывают из контекста и тем самым бесят. Путь «улучшения» модального окна тупиковый — злить человека оно не перестанет.</p>
</div>
<div class="col-xs-12 col-sm-3">
<img alt="Улучшенное модальное окно" src="ios-promo.jpg">
</div>
</div>
<h3 id="очень-плохая-идея-наказать-занепослушание">Очень плохая идея: наказать за непослушание</h3>
<p>Третья по популярности идея — наказать пользователя за то, что он не спешит обновиться:</p>
<ul>
<li>запретить обновлять приложения;</li>
<li>запретить устанавливать новые приложения;</li>
<li>заблокировать часть функций у уже установленных приложений;</li>
<li>полностью заблокировать системные приложения.</li>
</ul>
<p>Какое счастье, что эти люди не работают в команде Эпла. Хотя не исключаю, что к этому в итоге дело и придёт.</p>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>Спасибо всем участникам! Особенно хочу отметить <a href="http://pravosudov.com/">Матвея Правосудова</a>, Филиппа Ляха, Алексея Милеева и Мишу Березина.</p>
<p>Мы продолжим ツ</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Решайте задачки на канале <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Продавец-террорист</title>
      <link>https://antonz.ru/phone-sales/</link>
      <pubDate>Thu, 05 Oct 2017 16:05:08 +0000</pubDate>
      
      <guid>https://antonz.ru/phone-sales/</guid>
      <description>Телефонные продавцы «грузят» собеседников. От этого проигрывают все.</description>
      <content:encoded><![CDATA[<p>Типичный сценарий работы телефонного продавца-террориста:</p>
<blockquote>
<p>— Добрый день! Антон Николаевич?
— Да.
— Вам удобно сейчас говорить?
— Да.
— (нескончаемый поток слов с «уникальным торговым предложением»)</p>
</blockquote>
<p>Недавно наблюдал, как коллега сначала минуту слушала вступительную речь такого продавана, а потом ещё минуту пыталась уговорить его повесить трубку, потому что ей это не надо.</p>
<p>Я лично обрываю такие звонки после первых 10 секунд блеяния с той стороны, после чего заношу номер в чёрный список.</p>
<p>Не понимаю, почему продавцы-террористы не могут соблюдать простые правила общения:</p>
<ol>
<li>Сначала представься:</li>
</ol>
<blockquote>
<p>Добрый день, меня зовут Виктория Чапаева, представлю компанию «Хренчопродам».</p>
</blockquote>
<ol start="2">
<li>Затем <em>одним предложением</em> сформулируй суть:</li>
</ol>
<blockquote>
<p>Хочу пригласить вас на конференцию про продаже хрена в октябре.</p>
</blockquote>
<ol start="3">
<li>Наконец, дай слово собеседнику:</li>
</ol>
<blockquote>
<p>Удобно сейчас обсудить?</p>
</blockquote>
<p>Понятно, что это лучше для «клиента». Но и для продавца стратегия выигрышная:</p>
<ul>
<li>Если посылают, то быстро, и продавец переходит к следующему звонку, не тратя лишнее время.</li>
<li>Собеседник, получив своё «право на нет» в первые секунды разговора, с большей вероятностью согласится выслушать.</li>
</ul>
<p>Но нет, продаваны предпочитают уповать на «правило трёх да» и терпение собеседников. Зря.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Пейджинг, ещёкалка и бесконечный скрол</title>
      <link>https://antonz.ru/paging/</link>
      <pubDate>Wed, 27 Sep 2017 14:48:37 +0000</pubDate>
      
      <guid>https://antonz.ru/paging/</guid>
      <description>Три способа постраничной навигации по данным, и как их использовать.</description>
      <content:encoded><![CDATA[<p><em>Три способа постраничной навигации по данным, и как их использовать.</em></p>
<p>Когда программа показывает пользователю много данных (товаров, клиентов, результатов поиска), загружать их все сразу бывает слишком накладно. Поэтому используют постраничную загрузку в одной из трёх разновидностей:</p>
<ul>
<li><em>Пейджинг</em>. Разбить набор данных на страницы, присвоить каждой номер, показать номера пользователю. Пользователь может перейти к любой странице.
<img src="paging-pager.png" alt="Пейджинг"></li>
<li><em>Ещёкалка</em>. Показывать следующую страницу по кнопке «загрузить ещё». Пользователь может перейти только к следующей странице; перейти к произвольной не получится.
<img src="paging-more.png" alt="Ещёкалка"></li>
<li><em>Бесконечный скрол</em>. Автоматическая ещёкалка: следующая страница загружается не по кнопке, а по факту докручивания до конца предыдущей страницы.
<img src="paging-auto.png" alt="Бесконечный скрол"></li>
</ul>
<p>«Контур.Гайды» отлично написали, как должен работать каждый вариант, чтобы человеку было удобно. Но остаётся вопрос — какой способ навигации выбрать. Мне нравится такое правило:</p>
<blockquote class="big">
Всегда использовать бесконечный скрол, если умеешь его готовить.
</blockquote>
<p>«Умеешь готовить» — значит:</p>
<ul>
<li>данные подгружаются быстро, человеку не придётся часто видеть индикатор загрузки;</li>
<li>работает поиск (обязательно) и фильтрация (по вкусу);</li>
</ul>
<p>И ещё:</p>
<ul>
<li>программа всегда грузит на одну страницу вперёд (некоторые люди наловчились очень быстро прокручивать вниз);</li>
<li>программа запоминает текущую позицию списка;</li>
<li>при возврате к списку на 100500 элементе программа не грузит всё с начала, а быстро загружает и показывает интервал (100500-N/2, 100500+N/2), где N — размер страницы.</li>
</ul>
<p>В остальном «Контур.Гайды» всё сказали:</p>
<ul>
<li><a href="https://guides.kontur.ru/components/paging/">Пейджинг</a></li>
<li><a href="https://guides.kontur.ru/components/eschekalka/">Ещёкалка</a></li>
<li><a href="https://guides.kontur.ru/components/endlesscroll/">Бесконечный скрол</a></li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Подсказки в голосовых интерфейсах</title>
      <link>https://antonz.ru/voice-cues/</link>
      <pubDate>Fri, 15 Sep 2017 12:45:50 +0000</pubDate>
      
      <guid>https://antonz.ru/voice-cues/</guid>
      <description>О костылях, которые помогают объяснить человеку, как решить свою задачу.</description>
      <content:encoded><![CDATA[<p>Кэтрин Уайтентон <a href="https://www.nngroup.com/articles/audio-signifiers-voice-interaction/">пишет</a>, как в голосовых интерфейсах помочь пользователю понять, что надо сказать, чтобы решить свою задачу.</p>
<p>В графических интерфейсах помогают текстовые инструкции и внешний вид элементов управления (ссылки подчёркнуты, кнопки формой напоминают реальные). В голосовых сложнее — текста много давать нельзя (человек быстро запутается), а внешний вид вовсе отсутствует.</p>
<p>Кэтрин предлагает несколько приёмов:</p>
<ul>
<li>Использовать невербальные звуки (пиканье) как знак, что система восприняла команду. Либо чтобы привлечь внимание человека.</li>
<li>Угадывать намерение и спрашивать подтверждение («Назначь встречу на 9» — «Окей, встреча на завтра на 9 утра. Нормально?»).</li>
<li>Если сценарий сильно ветвистый, приоритезировать вопросы и спрашивать сначала о главном.</li>
</ul>
<p>Это всё хорошо. Но по-прежнему бесполезно. Оцените пример, на котором автор показывает приёмы проектирования:</p>
<blockquote>
<p>— Назначь встречу на 9. (<em>человек</em>)
— Как назвать событие? (<em>программа</em>)
— Стрижка.</p>
</blockquote>
<p>Кто в реальности скажет секретарю «назначь встречу», когда он хочет записать в календарь стрижку? Человек сразу скажет суть:</p>
<blockquote>
<p>У меня стрижка завтра в 9, отметь там себе.</p>
</blockquote>
<p>Весь сценарий, на котором построена статья, демонстрирует беспомощность голосовых помощников.</p>
<p>Я по-прежнему считаю, что до универсальных голосовых интерфейсов далеко. Реальные применения — «натаскать» программу даже не на конкретную предметную область, а на <a href="https://antonz.ru/voice-interface-leaking-abstraction/">узкий сценарий в ней</a>.</p>
<p>При этом использовать подсказки, о которых пишет Кэтрин — вполне ОК. Только не в качестве костылей для изначально убогого интерфейса.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Задачка: бардак в телеграме</title>
      <link>https://antonz.ru/telegram-puzzle/</link>
      <pubDate>Wed, 06 Sep 2017 07:02:05 +0000</pubDate>
      
      <guid>https://antonz.ru/telegram-puzzle/</guid>
      <description>Как помочь Телеграму избавиться от месива каналов, групп и диалогов.</description>
      <content:encoded><![CDATA[<div class="row">
<div class="col-xs-12 col-sm-10">
<p>Я предложил читателям телеграм-канала «<a href="https://t.me/dangry" class="nowrap">интерфейсов без шелухи</a>» такую задачку:</p>
</div>
</div>
<div class="boxed">
<h3>Бардак в Телеграме</h3>
<div class="row">
<div class="col-xs-12 col-sm-8">
<p>Утром вы просматривали любимые каналы, как телеграм вдруг зазвонил. Внезапно, это был Павел Дуров. Не знаю, что на него нашло, но он хочет предложить вам работу. Точнее, разовый проект.</p>
<p>Павел сказал, что гордится идеей каналов в телеграме. «Это как СМИ, только лучше», — сказал он. И продолжал:</p>
<blockquote><p>Когда каналов становится много, работать с ними неудобно. Приходится массово мьютить, но это не спасает — всё равно засоряют список контактов и мешаются с чатами. Больше того, если рабочие чаты ведутся в телеграме — они мешаются с личной перепиской, и всё это превращается в неуправляемое месиво.</p></blockquote>
</div>
<div class="col-xs-12 col-sm-4">
<img alt="Бардак в Телеграме" src="telegram-task.png" style="border: 1px solid #333;">
</div>
</div>
<p>Павел просит вас решить проблему бардака с чатами и каналами в интерфейсе. Дополнительно пожелание: придумать простое и изящное решение, без масштабных переделок. «Не хочу тратить на это много денег», — пояснил он.</p>
<p>Давайте поможем Павлу и сделаем телеграм лучше! Для простоты ограничимся клиентом для мобильных, веб и десктоп не трогаем.</p>
</div>
<p>Спасибо всем, кто прислал свои варианты! Давайте разберём решение. Сразу скажу, что единственно верного варианта тут не вижу. Решения упорядочил по степени вмешательства в интерфейс.</p>
<h2 id="большой-брат">Большой брат</h2>
<p>«Пессимизировать» чаты и каналы, которые пользователь изо дня в день игнорирует. Сначала отключать для них оповещения, затем не поднимать в ленте, несмотря на наличие новых сообщений и, наконец, тихо удалять.</p>
<p>Анализировать активность человека в группах и диалогах в привязке к времени и месту, выявлять рабочую переписку. Глушить рабочие чаты в нерабочее время. В рабочее время глушить каналы.</p>
<p>Не обязательно делать это принудительно. Большой брат может ограничиться советами человеку:</p>
<ul>
<li>вот явно рабочие чаты — хочешь глушить их, когда находишься не в офисе и по выходным?</li>
<li>вот унылые каналы, которые ты не читаешь — хочешь отписаться?</li>
<li>в этой группе очень много флуда — хочешь заглушить её с 10 до 18?</li>
</ul>
<p>Сомневаюсь, что Дурову понравилось бы такое решение — так и до Фейсбука с его «умной лентой» недалеко. Но зато отделяет важное от неважного, вообще не трогая интерфейс.</p>
<h2 id="избранное-инепрочитанное">«Избранное» и «непрочитанное»</h2>
<p><em>Избранное</em><br>
Отдельная вкладка или пункт меню. Всё важное в избранное, остальное — в общую кучу. При желании хоть целый день можно провести в избранном, не отвлекаясь на флуд в каналах и группах.</p>
<p><em>Непрочитанное</em><br>
Отдельная вкладка или пункт меню. Спасает от проблемы «потеряшек», когда чат с непрочитанными сообщениями сполз далеко вниз из-за обилия более новых, но прочитанных.</p>
<p>Оба решения простые, отлично сочетаются друг с другом и прочими вариантами.</p>
<h2 id="диалоги-группы-иканалы">Диалоги, группы и каналы</h2>
<p>Сделать отдельные вкладки для каждой сущности: диалоги, группы, каналы, боты. Это уже реализовано в альтернативном клиенте Plus Messenger и неплохо работает:</p>
<div class="row">
<div class="col-xs-12 col-sm-6 col-md-5">
<p><img alt="Диалоги, группы и каналы" src="telegram-tabs.png" class="bordered"></p>
</div>
<div class="col-xs-12 col-sm-6">
<p>Plus Messenger зачем-то разделяет группы и супергруппы (хотя это чисто техническое деление), но в остальном устроен весьма разумно. Количество непрочитанных показывает отдельно по каждой вкладке.</p>
<p>Заодно использует отдельные вкладки «избранное» и «непрочитанное».</p>
</div>
</div>
<h2 id="личные-ирабочие">Личные и рабочие</h2>
<p>Разновидность «избранного»: отделяем не важное от второстепенного, а рабочее от личного. Соня Яковчук нарисовала скетч для айфона:</p>
<div class="row">
<div class="col-xs-12 col-sm-6 col-md-5">
<p><img alt="Личные и рабочие" src="telegram-personal-working.jpg"></p>
</div>
<div class="col-xs-12 col-sm-6">
<p>Как видите, разделение на личные и рабочие прекрасно сочетается с делением на чаты и каналы.</p>
<p>А Никита Лаптев предложил вместо переключения по вкладкам сделать отдельные экраны и переходить туда-сюда свайпами влево-вправо.</p>
<p>При переключении на «личные» можно автоматически отключать оповещения от «рабочих», и наоборот. Или оставить это на усмотрение человека — главное, чтобы можно было заглушить раздел целиком.</p>
</div>
</div>
<h2 id="категории-или-теги">Категории или теги</h2>
<p>Отмечать чаты произвольными тегами: друзья, родственники, работа, секретный проект, новости, интерфейсы, всё что душе угодно. А дальше переключаться между ними или мьютить прямо группами.</p>
<div class="row">
<div class="col-xs-12 col-sm-6 col-md-5">
<p><img alt="Категории или теги" src="telegram-tags.png"></p>
</div>
<div class="col-xs-12 col-sm-6">
<p>Это Slack, но возьмите любой почтовый клиент или RSS-ридер, и увидите такую же логику: папки, категории, теги.</p>
<p>Самый популярный вариант — его предложили 40% участников.</p>
</div>
</div>
<h2 id="приятные-мелочи">Приятные мелочи</h2>
<p>Читатели прислали несколько механик, которые хоть и не относятся напрямую к задаче, пригодились бы в телеграме:</p>
<blockquote>
<p><em>Денис Токарев</em>
Отмечать чат прочитанным по свайпу вправо.</p>
</blockquote>
<p>Удобно, если я просто хочу убрать кучу непрочитанных с глаз долой, не заходя в переписку.</p>
<blockquote>
<p><em>Анонимус</em>
Каналы должны быть по умолчанию замьючены</p>
</blockquote>
<p>Полностью поддерживаю. Добросовестные авторы каналов и так публикуют в режиме Silent Broadcast, а недобросовестных надо к этому принуждать. Больше того, я бы и группы по умолчанию глушил (у меня все группы вручную замьючены — ни разу об этом не пожалел).</p>
<blockquote>
<p><em>Анонимус</em>
Это мессенджер, и главное — переписка, люди, общение. Поэтому: собеседники всегда в топе, а каналы и чаты — всегда ниже переписок с людьми.</p>
</blockquote>
<p>Согласен, если речь идёт только о непрочитанных. Я бы даже более строгий порядок ввёл: диалоги &gt; группы &gt; каналы.</p>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>Было ещё несколько решений, но там такие космолёты, что я не готов всерьёз их обсуждать.</p>
<p>Ещё раз спасибо всем участникам! Мы продолжим ツ</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Решайте задачки на канале <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Лучший движок для блога</title>
      <link>https://antonz.ru/ghost-one/</link>
      <pubDate>Mon, 28 Aug 2017 07:17:05 +0000</pubDate>
      
      <guid>https://antonz.ru/ghost-one/</guid>
      <description>Ghost — лучший блоговый движок для одиночек и небольших компаний. Он недавно обновился до версии 1.0, и это прекрасно.</description>
      <content:encoded><![CDATA[<p><em>Ghost — лучший блоговый движок для одиночек и небольших компаний. Он недавно обновился до версии 1.0, и это прекрасно.</em></p>
<p>Ghost идеально вписался между облачными платформами (Медиум, Тильда, Блогспот) и Вордпрессом. Он прост, удобен, содержит кучу функций из коробки и легко настраивается.</p>
<p><img src="ghost-admin.png" alt="Админка"></p>
<p>В конце июля вышла версия 1.0. Команда разработки пилила её весь год — исправляли конструктивные огрехи и закладывали основу для дальнейшего развития. В новой версии переработали редактор (хотя он и так был неплох), добавили пачку мелких фич, но основные изменения под капотом. Авторы говорят, что благодаря им Гост будет развиваться быстрее. Посмотрим ツ</p>
<p>Расскажу о некоторых возможностях Госта.</p>
<h2 id="удобно-писать-ипубликовать">Удобно писать и публиковать</h2>
<p>Редактор поддерживает Маркдаун со всеми наворотами, вроде картинок, таблиц, ==подсветки== и исходных <code>кодов</code>. Пишешь и сразу видишь результат:</p>
<p><img src="ghost-preview.png" alt="Предварительный просмотр"></p>
<p>Есть черновики с секретными ссылками (чтобы показать рецензенту до публикации) и публикация по расписанию.</p>
<p>Полная настройка для соцсетей: обложка, заголовок, описание. Можно даже отдельно докрутить для фейсбука и твитера.</p>
<p>Всякие сеошные штуки включены из коробки: Google AMP, пермалинки, карта сайта. Вообще не приходится думать об этой фигне, она просто работает.</p>
<figure>
  <img alt="Настройки публикации" src="ghost-publication.png" class="img-bordered-thin">
  <figcaption>85% читателей приходят в блог из соцсетей, и Гост помогает настроить всё, чтобы их привлечь</figcaption>
</figure>
<p>Работает подписка на обновления через RSS, емейл и Slack.</p>
<p>Если добавить статические страницы (например, главная, проекты и «о себе») — получится полноценный сайт, а не просто блог. Мой сайт сделан именно так.</p>
<h2 id="удобно-настраивать">Удобно настраивать</h2>
<p>Для Госта существуют сотни готовых тем — платных и бесплатных. Ещё лучше, что сделать свою тему проще простого — понятный синтаксис, плюс ребята сделали сайт с подробной документацией.</p>
<p><img src="ghost-marketplace.jpg" alt="Маркетплейс"></p>
<p>Настраивается всё, что душе угодно. Например, показывать заметки с фотографиями в виде мини-превьюшек, а статьи — аннотациями. Или сделать отдельную страницу о путешествиях. Или не показывать заметки, отмеченные секретным тегом. И это без копания в потрошках движка. Авторы отлично продумали и описали API, его хватает для любых фантазий.</p>
<h2 id="удобно-для-бизнеса">Удобно для бизнеса</h2>
<p>У блога может быть сколько угодно авторов. Причём Гост поддерживает разделение прав на обычных авторов, редакторов и администраторов. Для небольшой (а может и для большой) компании этого более чем достаточно.</p>
<p>Гост полностью открыт под лицензией MIT. Это значит, что он бесплатен для коммерческого использования и разрешает любые модификации.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8">
<p><img alt="Гост — open source" src="ghost-oss.png">
</p>
</div>
</div>
<p>Гост не требователен к серверу: без проблем работает на SQLite и VPS за 150 рублей.</p>
<p>С версии 1.0 Гост наконец-то научился обновляться одной командой (<code>ghost update</code>), так что администратору не приходится напрягаться.</p>
<p>Если неохота хостить на своём сервере, есть облачная версия. Там прикрепляется свой домен, работают автоматические бэкапы и SSL, CDN из 100 точек по всему миру.</p>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>Как по мне, Гост — лучшее, что случилось с инструментами для блогеров за последние годы. Если решите попробовать, вот ссылки:</p>
<ul>
<li><a href="https://ghost.org/features/">Описание и облачная версия</a></li>
<li><a href="https://ghost.org/developers/">Коробочная версия</a></li>
<li><a href="https://docs.ghost.org/docs">Документация</a></li>
<li><a href="http://marketplace.ghost.org/">Темы</a></li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Если вы больше читатель, чем писатель, подписывайтесь на телеграм-канал <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Рейтинг как обратная связь</title>
      <link>https://antonz.ru/rating-as-feedback/</link>
      <pubDate>Wed, 23 Aug 2017 09:42:00 +0000</pubDate>
      
      <guid>https://antonz.ru/rating-as-feedback/</guid>
      <description>Три механики обратной связи: 5-балльная шкала («звёзды»), бинарная оценка («палец вверх, палец вниз») и эмоции.</description>
      <content:encoded><![CDATA[<p>Мишель Фицпатрик из Интеркома написала, как <a href="https://blog.intercom.com/product-principles-emoji-conversation-ratings/">встроить в продукт рейтинги</a>, чтобы от них был толк для клиентов и сотрудников. Мишель говорит об обратной связи для службы поддержки (это специализация Интеркома), но статья на самом деле подходит для любой системы, в которой люди оценивают что-то.</p>
<p>Мишель пишет о трёх механиках: 5-балльной шкале («звёзды»), бинарной оценке («палец вверх, палец вниз») и эмоциях:</p>
<ul>
<li><em>Звёзды</em> <span class="nowrap">★★★☆☆</span><br>
Плохи тем, что у каждого человека своё понимание конкретной оценки. 5 баллов для одного «норм», а для другого «восторг!».</li>
<li><em>Палец вверх, палец вниз</em> <span class="nowrap">👍 👎</span><br>
Плох тем, что весь диапазон эмоций: «ну такое», «хорошо», «отлично» — попадает в одну и ту же оценку «лайк».</li>
<li><em>Эмоции</em> <span class="nowrap">😠 🙁 😐 😀 😍</span><br>
Лучший вариант, потому что не оставляет разночтений. Пользователю предлагают выбрать конкретное впечатление: ужасно, плохо, нормально, отлично, восхитительно. Опционально можно оставить комментарий с подробностями.</li>
</ul>
<p>Интерком остановился на варианте с эмоциями, но я не считаю, что он действительно лучший. Проблема в том, что он противоречит принципу «не заставляйте меня думать»: человеку приходится выбирать как минимум из двух вариантов. Ужасно или плохо? Нормально или отлично? Отлично или восхитительно?</p>
<p>Огромный плюс варианта «палец вверх, палец вниз» — думать человеку не приходится. Если добавить к нему необязательный комментарий — получается идеальный рейтинг для клиента и сотрудника. Клиент не напрягается, а сотрудник явно видит негативные отзывы, которые обычно и представляют интерес.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Суперсила дизайнера</title>
      <link>https://antonz.ru/design-superpower/</link>
      <pubDate>Mon, 14 Aug 2017 06:43:58 +0000</pubDate>
      
      <guid>https://antonz.ru/design-superpower/</guid>
      <description>Суперсила хорошего дизайнера — находить простые решения. Особенно это полезно в стартапах.</description>
      <content:encoded><![CDATA[<p>Суперсила хорошего дизайнера — находить простые решения. Особенно это полезно в стартапах и, напротив, в сложных продуктах с большой историей:</p>
<ul>
<li>В стартапах важно двигаться как можно быстрее, а простые решения экономят время.</li>
<li>В продуктах с историей интерфейс наслаивался годами, часто без оглядки на внутреннюю логику и удобство использования, и в результате так и просит упрощения.</li>
</ul>
<p>Сегодня о первой ситуации — стартапах.</p>
<p>Возьмем сервис юзабилити-аудита, который показывает проблемы в UX сайта глазами обычного посетителя и дизайнера:</p>
<ol>
<li>Клиент оставляет заявку.</li>
<li>Она распределяется между рецензентами.</li>
<li>Те пишут отзывы.</li>
<li>Результат отправляется клиенту.</li>
</ol>
<figure>
<img alt="Заявка на юзабилити-аудит" src="superpower-dangry.png" class="bordered">
<figcaption>У каждой заявки до трёх рецензентов, которых надо как-то координировать</figcaption>
</figure>
<p>Классический подход к конструированию таких программ: делаем фронтенд с формой заявки и админку с бизнес-процессом. В админке регистрируются рецензенты, у каждого дашборд, где видны новые заявки. Рецензенты откликаются на заявки, бизнес-логика следит, чтобы два человека не взяли одну и ту же заявку и чтобы один рецензент не забрал себе слишком много заявок.</p>
<p>Неплохо добавить ещё оповещение по почте, чтобы рецензенты оперативно узнавали о заявках. А может лучше слать пуш-уведомления на смартфон? Да, и обязательно нужен отдельный интерфейс модератора, где он проверит заявку и вернёт рецензенту, если тот фигню написал.</p>
<p>Ох, а ещё надо отзывы рецензентов скомпоновать в красивый отчёт. И хорошо бы добавить поддержку визуальных комментариев, форматирования и картинок в отзывах.</p>
<p>Чувствуете миллион рублей и полгода работы, которые придется потратить на разработку сервиса?</p>
<p>Теперь к чёрту классический подход и включаем суперсилу. Пристальный взгляд на рецензентов показывает, что они — активные пользователи фейсбука. Создаем секретную группу, приглашаем в неё рецензентов, администратор группы — модератор.</p>
<p>Делаем фронтенд с заявкой, каждая заявка — пост в группе. Чтобы забрать заявку, рецензент оставляет комментарий. Там же модератор пишет замечания, если есть.</p>
<p>Всё. Админка не нужна, сервер с базой не нужен, уведомления работают из коробки. Сама рецензия — гуглодокумент: в нём и совместная работа, и форматирование, и комментарии. Сервис делается с нуля за два дня без программирования.</p>
<p>Простые решения срезают углы и игнорируют нюансы. Но в стартапе это даже хорошо: никто не знает, куда в итоге вывезет продукт, а простые решения переделывать легче, чем сложные.</p>
<div class="row">
<div class="col-xs-12 col-sm-10"><p><em>Заметка из рассылки <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://dangry.ru/sin/">Интерфейсы без шелухи</a>»</em></span></p></div>
</div>
<p class="figcaption">
<em>Обложка — <a href="https://thenounproject.com/term/charging-superpower/882197/">Gan Khoon Lay</a></em>
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Персоны, Jobs-to-Be-Done и здравый смысл</title>
      <link>https://antonz.ru/persona-jtbd-cargo/</link>
      <pubDate>Wed, 09 Aug 2017 17:19:23 +0000</pubDate>
      
      <guid>https://antonz.ru/persona-jtbd-cargo/</guid>
      <description>Предлагаю не заморачиваться конкретным подходом, а выяснить вместо этого — кто потребитель фичи и зачем она ему.</description>
      <content:encoded><![CDATA[<p>Пейдж Лаубхаймер из группы Нильсена-Нормана опубликовал статью-сравнение двух методик: <a href="https://www.nngroup.com/articles/personas-jobs-be-done/">персон и Jobs-to-Be-Done</a>.</p>
<p>Я предлагаю не заморачиваться насчёт следования тому или иному походу. Они каждый год разные. Персоны, юзкейсы, юзер стори, джоб стори, whatever. Реально важно одно:</p>
<blockquote class="big">Для каждой фичи или сценария понимать, кто потребитель и зачем это ему, какую проблему решает.</blockquote>
<p>Выясняется серией вопросов постановщику задачи:</p>
<blockquote>
<p>— Давай добавим регистрацию через соцсети.</p>
<p>— Зачем?</p>
<p>— Ну, чтобы пользователям не надо было придумывать пароль.</p>
</blockquote>
<p>Не стоит удовлетворяться очевидным. Продолжаем спрашивать:</p>
<blockquote>
<p>— А зачем пользователям вообще регистрироваться?</p>
<p>— Ну, чтобы купить товары в нашем магазине.</p>
<p>— А что мы продаём, помнишь?</p>
<p>— Ну да, секс-игрушки с доставкой по всей стране.</p>
<p>— Уверен, что покупатели захотят пускать нас в свои соцсети?</p>
<p>— Эээ.</p>
</blockquote>
<p>Оп! Выяснили <em>кто</em> и <em>зачем</em> — стало понятно, что фича в таком виде никуда не годится. Переходим к решению реальной проблемы:</p>
<blockquote>
<p>— Может, наоборот, разрешим полностью анонимную покупку, без регистрации?</p>
<p>— Да, пожалуй.</p>
</blockquote>
<p>Потребителя фичи и решаемую проблему должен понимать каждый: маркетолог, аналитик, дизайнер, разработчик, тестировщик и технический писатель. Чтобы у всех этих людей сформировалось общее видение — достаточно записать мотивацию в пару абзацев.</p>
<blockquote>
<p><em>Проблема</em><br>Покупатели секс-игрушек не горят желанием делиться контактными данными с магазином. Существующий процесс оформления заказа их отпугивает.</p>
</blockquote>
<blockquote>
<p><em>Решение</em><br>Полностью анонимная покупка. Оформлять заказ без регистрации, не спрашивать имя, фамилию, телефон, адрес — вообще ничего. Пояснить, что платёжные реквизиты (номер карты) не храним. Доставлять до пункта выдачи.</p>
</blockquote>
<p>Кто и зачем — это важно. Конкретная методика — карго-культ.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Задачка: Яндекс-музыка и медленный интернет</title>
      <link>https://antonz.ru/yandex-music-puzzle/</link>
      <pubDate>Mon, 07 Aug 2017 11:57:22 +0000</pubDate>
      
      <guid>https://antonz.ru/yandex-music-puzzle/</guid>
      <description>Как сервису стриминга музыки действовать при медленном интернете.</description>
      <content:encoded><![CDATA[<p>На днях я предложил читателям телеграм-канала «<a href="https://t.me/dangry" class="nowrap">интерфейсов без шелухи</a>» такую задачку:</p>
<div class="boxed" style="margin-bottom: .8em;">
<h3>Яндекс-музыка и медленный интернет</h3>
<div class="row">
<div class="col-xs-12 col-sm-8">
<p>Мобильное приложение Яндекс-музыки пребывает в иллюзии, что всегда и везде есть хороший интернет. Когда запускаешь приложение, оно хочет показать персональные рекомендации («плейлист дня»). Если связь плохая, или телефон подключился к вайфай-сети без интернета, то приложение долго тупит, после чего сообщает, что «не смогла».</p>
<p>Давайте поможем Яндекс-музыке и предложим, что делать при запуске приложения, если интернет медленный или его вовсе нет. Чем больше при этом пользы для человека — тем лучше ツ</p>
</div>
<div class="col-xs-12 col-sm-4 col-md-offset-1 col-md-3">
<img alt="Плейлист дня в Яндекс-музыке" src="yandex-music.jpg" style="border-bottom: 1px solid #333;">
</div>
</div>
</div>
<p>Спасибо всем, кто прислал свои варианты! Давайте разберём решение.</p>
<h2 id="запоминать-прошлое-состояние">Запоминать прошлое состояние</h2>
<p>Главный провал приложения вне зависимости от наличия интернета — оно каждый раз начинает жизнь с чистого листа и пытается открыть «плейлист дня». При этом закончить сеанс человек мог на конкретной песне, исполнителе или в сохранённых треках — Яндекс-музыке плевать. Она всегда открывает рекомендации.</p>
<p>На проблему обратил внимание <a href="http://pravosudov.com">Матвей Правосудов</a>, и я полностью разделяю его боль:</p>
<blockquote>
<p>Не понимаю, почему Я.Музыка, когда у меня есть интернет, все равно переключает на рекомендации, хотя я использую только свои треки.</p>
</blockquote>
<p>Это как если бы приложение «часы» при запуске всегда предлагало установить часовой пояс. Очень удобно.</p>
<p>Правильный вариант — начинать оттуда, где закончили в предыдущий раз. Это настолько базовый сценарий, что удивительно, как ребята из Яндекса его проморгали.</p>
<h2 id="нетеряться-когда-нет-интернета">Не теряться, когда нет интернета</h2>
<p>Когда нет интернета, «Музыка» сообщает «нет соединения». Мужчина, вы что, не видите — у нас обед.</p>
<p>Формально всё правильно, интернета нет. Но неужели это всё, что можно предложить пользователю?</p>
<p>Вместо бесполезного «нет соединения» можно:</p>
<ul>
<li>Сохранять 20 прослушанных вчера треков, и предлагать послушать ещё раз, в первую очередь — понравившиеся.</li>
<li>Если у человека много сохранённых треков — построить плейлист дня по ним.</li>
</ul>
<p>Конечно, сообщение об отсутствии связи останется. Но займёт более скромное место:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Нет интернета, было" src="yandex-music-offline-asis.jpg" style="border: 1px solid #eaeaea;">
  <figcaption>Было: у нас обед</figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure>
  <img alt="Нет интернета, стало" src="yandex-music-offline-tobe.jpg" style="border: 1px solid #eaeaea;">
  <figcaption>Стало: интернета нет, но это ничего</figcaption>
</figure>
</div>
</div>
<p><a href="https://t.me/achirkof">Андрей Чирков</a> предлагает, что делать, если сохранённых треков совсем нет:</p>
<blockquote>
<p>Если и локальных плейлистов нет, то показать какую-нибудь забавную картинку потерявшегося интернета и дать совет на будущее сохранять любимые плейлисты локально.</p>
</blockquote>
<h2 id="медленный-интернет--нет-интернета">Медленный интернет = нет интернета</h2>
<p>Медленная связь вводит «Музыку» в ступор. Она бесконечно крутит индикатором загрузки, надеясь что-то получить от сервера. Такая же беда, если телефон подключился к вайфай-сети без интернета.</p>
<p>Это бесполезно. Понятно ведь, что для стриминга музыки есть минимальные требования к каналу. Значит, можно сформулировать правило:</p>
<pre tabindex="0"><code>ЕСЛИ за X времени не удалось скачать Y Кб данных
ТО   интернета нет
</code></pre><p>А раз нет интернета, вести себя, как описано в предыдущем разделе — предлагать сохранённые треки.</p>
<h2 id="снизить-качество-нопродолжать-работать">Снизить качество, но продолжать работать</h2>
<p>Допустим, пропускной способности канала хватает, чтобы обмениваться данными с сервером. Но стриминг в высоком качестве не тянет.</p>
<p><a href="https://vk.com/wow1k">Владимир Бирюков</a> предлагает:</p>
<blockquote>
<p>Подгружать треки в урезанном качестве, сообщив об этом пользователю. Лучше пусть что-то играет, чем совсем ничего.</p>
</blockquote>
<p>Логично.</p>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>Ещё раз спасибо всем участникам! Продолжим через недельку ツ</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Решайте задачки на канале <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Дырявая абстракция голосовых интерфейсов</title>
      <link>https://antonz.ru/voice-interface-leaking-abstraction/</link>
      <pubDate>Tue, 01 Aug 2017 11:03:26 +0000</pubDate>
      
      <guid>https://antonz.ru/voice-interface-leaking-abstraction/</guid>
      <description>«Умный» голосовой интерфейс — дырявейшая абстракция над несовершенными алгоритмами распознавания смысла.</description>
      <content:encoded><![CDATA[<p>Эдриан Цумбрюнен написал о голосовом интерфейсе, который прикидываются человеком: понимает свободные формулировки и демонстрируют эмоции. Эдриан называет такие интерфейсы «скеоморфными» и преподносит их как благо <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>А я думаю, что они зло. Суть моего несогласия лучше всего сформулировал Алан Купер <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>:</p>
<blockquote>
<p>Если так сложно добиться, чтобы <em>люди</em> чётко понимали устные инструкции — как мы собираемся давать устные инструкции <em>компьютерам</em>? Распознать слова — совсем не то же самое, что распознать смысл, а именно смысл критически важен в инструкциях.</p>
</blockquote>
<p>У программистов есть расхожее понятие «дырявой абстракции»: когда сложную штуку прячут за простым интерфейсом, но она всячески оттуда вылезает и кусает пользователя за пятки. «Умный» голосовой интерфейс — дырявейшая абстракция над несовершенными алгоритмами распознавания смысла.</p>
<p>Худшие качества любой системы — непредсказуемость (не знаешь, как она себя поведёт) и ненадёжность (часто ломается). «Умные» голосовые интерфейсы сочетают эти свойства — они <em>непредсказуемо ненадёжны</em>. Никогда не знаешь, какая формулировка введёт их в ступор или будет превратно понята.</p>
<p>Настоящая, неигрушечная польза от голосовых интерфейсов — там, где у человека заняты глаза и руки: в автомобиле, в операционной, на заводе. Непредсказуемо ненадёжный интерфейс — катастрофа для этих ситуаций.</p>
<p>При нынешнем уровне технологии я за «тупые», утилитарные голосовые интерфейсы. Такой интерфейс не пытается изображать собеседника — вместо этого решает узкую задачу, зато делает это хорошо. Пример утилитарного интерфейса — голосовой ввод адреса в «Яндекс-навигаторе». Делает одну вещь: записывает адрес со слуха. Зато понимает самые чудовищные акценты и редко ошибается.</p>
<p>А скеоморфные голосовые интерфейсы пусть остаются в играх, развлечениях и дизайнерских статьях на медиуме.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://uxdesign.cc/skeuomorphism-in-conversational-design-6ff9aea98829">Skeuomorphism In Conversational Design</a>, Эдриан Цумбрюнен&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="https://medium.com/@MrAlanCooper/alexa-please-kill-me-now-eb693ce73258">Alexa, Please Kill Me Now</a>, Алан Купер&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Задачка: город в интернет-магазине</title>
      <link>https://antonz.ru/delivery-city-puzzle/</link>
      <pubDate>Thu, 27 Jul 2017 08:47:46 +0000</pubDate>
      
      <guid>https://antonz.ru/delivery-city-puzzle/</guid>
      <description>Как магазину избавиться от назойливого попапа выбора города, если цены и доставка отличаются в разных городах.</description>
      <content:encoded><![CDATA[<p>Два дня назад я предложил читателям телеграм-канала «<a href="https://t.me/dangry" class="nowrap">интерфейсов без шелухи</a>» такую задачку:</p>
<div class="boxed" style="margin-bottom: .8em;">
<h3>Город в интернет-магазине</h3>
<p>Есть интернет-магазин, работает по всей стране. От города к городу отличаются доступные способы и стоимость доставки. Цены на 95% товаров одинаковые для всех городов, но для 5% отличаются.</p>
<p>Раньше магазин показывал каждому посетителю при входе такой попап:</p>
<blockquote><p>Ваш город — «Санкт-Петербург». Мы угадали?<br>
ДА / НЕТ</p>
</blockquote>
<p>Но пришёл новый директор по маркетингу и категорически требует попап убрать — он, мол, бесит покупателей. Что делать, чтобы и маркетолога удовлетворить, и покупателям по ценам и доставке не наврать?</p>
</div>
<p>Теперь время разобрать решение. Неожиданно для меня откликнулось аж 80 человек. Ребята, спасибо вам большое! Простите, что не перечисляю всех в заметке — очень много отличных ответов <span class="nowrap">¯\_(ツ)_/¯</span></p>
<p>Попробую собрать их вместе. Поехали.</p>
<h3 id="сначала-обоснуй">Сначала обоснуй</h3>
<p>Некоторые предложили с ходу отправить маркетолога куда подальше — иди мол, докажи с данными в руках, что попап реально мешает.</p>
<p>Я согласен, что в неочевидных ситуациях надо опираться на данные. Но не уверен, что заслоняющий главную страницу попап требует дополнительных исследований ツ</p>
<h2 id="выбор-города-без-насилия-над-личностью">Выбор города без насилия над личностью</h2>
<p>Магазин уже автоматически определяет город — значит, осталась только вместо попапа молча вывести его в шапке:</p>
<img alt="Город в шапке" class="img-bordered" src="delivery-city-puzzle-1.png">
<p>По тыку на название город можно поменять.</p>
<p>Некоторые предложили добавить в шапку призыв проверить правильность геолокации:</p>
<img alt="Город в шапке с подтверждением" class="img-bordered" src="delivery-city-puzzle-2.png">
<p>Тоже вариант, если место позволяет. Но не подходит для мобильных.</p>
<p>@KarelWintersky резонно заметил, что иногда геолокация покажет страну, в которой магазин вовсе не работает (например, продаёт по России, а человек по айпи в Казахстане). И предложил для таких случаев показывать попап. Я бы всё же попап не показывал, а выбрал город по умолчанию (самый популярный для магазина).</p>
<p>И отличное дополнение от <a href="https://www.facebook.com/grepto">Александра Попова</a>:</p>
<blockquote>
<p>Если определился город, с которым магазин не работает — ставим ближайший к нему.</p>
</blockquote>
<p>Насчёт геолокации. Она бывает двух видов: по айпи-адресу и по геокоординатам от браузера. По айпи менее точно, но работает прозрачно для пользователя. По координатам более точно, но браузер спрашивает разрешение (особенно бесит оно на мобильных, потому что выглядит как попап). Лично я за определение по айпи только потому, что оно не теребит пользователя.</p>
<h2 id="город-истоимость-доставки">Город и стоимость доставки</h2>
<p>Стоимость и время доставки волнуют человека, только когда он определился с товаром. Поэтому город при входе на сайт можно не спрашивать. Вместо этого на карточке товара пишем:</p>
<blockquote>
<p>Доставим в <u>Санкт-Петербург</u> послезавтра, от 300 ₽</p>
</blockquote>
<p>Если человек видит, что магазин не угадал с городом, тыкает на «Санкт-Петербург» и выбирает свой вариант.</p>
<p>Ещё рабочее решение: не показывать стоимость доставки вовсе, пока человек не начнёт оформлять заказ и не укажет там адрес. Есть адрес — всё понятно с доставкой.</p>
<img alt="Город при доставке" class="img-bordered" src="delivery-city-puzzle-3.png">
<p>Со способами доставки — аналогично.</p>
<h2 id="город-истоимость-товаров">Город и стоимость товаров</h2>
<p>Тут интереснее. Едкое замечание прислал <a href="https://www.facebook.com/evan.konenko">Эван Коненко</a>:</p>
<blockquote>
<p>Директору по маркетингу стоит намекнуть, что разные цены на товары в зависимости от региона раздражают гораздо сильнее несчастного попапа. Разнобой в ценах — типичная недоработка маркетологов и продактов.</p>
</blockquote>
<p>Действительно, может оказаться, что проще и правильнее выровнять все цены, чем решать это в интерфейсе.</p>
<p>Но предположим, что цены никак не поменять. Стоит ли тыкать в человека выбором города ради 5% товаров? Большинство считает, что нет — и я с этим согласен.</p>
<p>Вот рабочие варианты, что делать для 5% товаров, по которым цены отличаются:</p>
<ol>
<li>Показывать наибольшую цену, а при изменении города уменьшать её и радовать человека «скидкой». Сработает, если разброс цен по городам небольшой.</li>
<li>Явно писать рядом с ценой, для какого она города («5250 ₽  в <u>Санкт-Петербурге</u>»). При смене города пересчитывать стоимость корзины и уведомлять покупателя.</li>
</ol>
<p>Остроумное решение предложил Игорь @vespexx: показывать минимальную цену, а дельту при необходимости добавлять в стоимость доставки. Стоимость доставки при этом определять на этапе оформления заказа, когда город уже точно известен.</p>
<h3 id="подвох-сгеолокацией-игородом-доставки">Подвох с геолокацией и городом доставки</h3>
<p>Эван Коненко указал на подвох в условиях задачи:</p>
<blockquote>
<p>Проблему с различными ценами на товары в зависимости от региона не решает ни существующий попап, ни автоматическое определение локации, ни пальцы пользователя в дверях, потому что определяющим цену является <em>адрес доставки</em>, а не нынешнее месторасположение покупателя. Таким образом, мы работаем с переменной, значение которой узнаем где-то в середине пользовательского заказа.</p>
</blockquote>
<p>Действительно, человек может быть в Питере, а заказывать для Омска. Но я не думаю, что это большая проблема — такой покупатель точно обратит внимание на город, и сам выберет Омск.</p>
<h2 id="что-несработает">Что не сработает</h2>
<p>Несколько решений, которые я бы в свой магазин не поставил:</p>
<p><em>Дорогой попап</em>
Оставить попап, но добавить ему ценности (засунуть туда спецпредложение).</p>
<p><em>Цену не скажу</em>
Не показывать цену товара, пока пользователь явно не выберет город. Сюда же — не показывать такие товары вовсе.</p>
<p><em>Сам разбирайся</em>
Показывать вилку цен со сноской и пояснением. Сюда же — показывать наименьшую цену и ссылку «посмотреть цены по всем городам».</p>
<p><em>Гражданин, ваши документы</em>
Сделать отдельную стартовую страницу, на которой будет <em>только</em> выбор города. Не выбрал — на сайт не пускать!</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Ещё раз спасибо всем участникам! Любые вопросы и замечания пишите в личку — <a href="https://t.me/nalgeon">@nalgeon</a>. Продолжим через недельку ツ</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Решайте задачки на канале <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Урл как интерфейс</title>
      <link>https://antonz.ru/url-as-interface/</link>
      <pubDate>Wed, 26 Jul 2017 12:41:03 +0000</pubDate>
      
      <guid>https://antonz.ru/url-as-interface/</guid>
      <description>URL — часть интерфейса. Поэтому он должен быть хорош.</description>
      <content:encoded><![CDATA[<p>Для меня урл (URL) на сайте или в веб-приложении — часть интерфейса. Поэтому он должен быть хорош.</p>
<p>Понимаю, что нормальные люди не задумываются об урлах, а в идеале вовсе не знают, что это такое. Но я гик, поэтому хочу красивые и информативные адреса. Если у вас так же — оставайтесь, поговорим о плохих и хороших урлах.</p>
<h2 id="плохие-урлы">Плохие урлы</h2>
<p>Начнём с характеристик плохого урла.</p>
<h3 id="урл-независит-отсостояния">Урл не зависит от состояния</h3>
<p>Пусть есть список клиентов с адресом <em>/customers</em>. Если при поиске, фильтрации и переходе по страницам списка адрес не меняется — это плохой урл. Такой не сохранишь в закладках и не пришлёшь коллеге.</p>
<p>Лучше, если урл отражает состояние списка:</p>
<pre tabindex="0"><code>/customers?channel=facebook&amp;sort-by=ltv&amp;page=3
</code></pre><h3 id="урл-шифрует-состояние">Урл шифрует состояние</h3>
<p>Допустим, программист осознал проблему с урлом из предыдущего примера, и добавил в него состояние:</p>
<pre tabindex="0"><code>/customers?state=eyAiZmlsdGVyIjogeyAiY2hhbm5lbCI6ICJmYWNlYm9vayIsICJuYW1lIjogbnVsbCwgInBob25lIjogbnVsbCwgImVtYWlsIjogbnVsbCB9LCAic29ydC1ieSI6IHsgImZpZWxkIjogImx0diIsICJkaXJlY3Rpb24iOiAiYXNjIiB9LCAicGFnZSI6IDMgfQ==
</code></pre><p>Это всё равно плохой адрес. Во-первых, он уродлив. Во-вторых, непонятно, что в нём зашифровано — вдруг там мой пароль, а я поделюсь ссылкой?</p>
<h3 id="вурле-мусор">В урле мусор</h3>
<p>Вот адрес поискового запроса в Гугле:</p>
<pre tabindex="0"><code>https://www.google.ru/search?newwindow=1&amp;site=&amp;source=hp&amp;q=who+am+i&amp;oq=who+am+i&amp;gs_l=psy-ab.3..0l4.563.2744.0.2962.8.8.0.0.0.0.73.547.8.8.0....0...1.1.64.psy-ab..0.8.546...0i131k1._To1c908Z2U
</code></pre><p>Большая часть в нём — мусор:</p>
<pre tabindex="0"><code>newwindow=1&amp;site=&amp;source=hp&amp;oq=who+am+i&amp;gs_l=psy-ab.3..0l4.563.2744.0.2962.8.8.0.0.0.0.73.547.8.8.0....0...1.1.64.psy-ab..0.8.546...0i131k1._To1c908Z2U
</code></pre><p>Лучше убрать служебные параметры, бесполезные для человека, и оставить только то, что по делу:</p>
<pre tabindex="0"><code>https://www.google.com/search?q=who+am+i
</code></pre><h3 id="урл-содержит-кириллицу">Урл содержит кириллицу</h3>
<p>Добавил этот пункт ради Медиума, который делает такие ссылки, если вовремя не словить его за хвост:</p>
<pre tabindex="0"><code>https://medium.com/russian/%D0%BE-%D1%86%D0%B5%D0%BB%D1%8F%D1%85-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0-%D0%B8-%D0%B4%D1%80%D1%83%D0%B3%D0%B8%D1%85-%D1%80%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D1%85-%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%B0%D1%85-c6c1aa6c32
</code></pre><p>Задумка хорошая: включить заголовок статьи в урл и повысить информативность. А получился мусор. Решить проблему несложно — автоматически транслитерировать кириллицу, которая идёт в адрес:</p>
<pre tabindex="0"><code>https://medium.com/russian/o-celyah-proekta-i-drugih-ritoricheskih-voprosah-c6c1aa6c32
</code></pre><h3 id="урл-спрятан-засокращателем-ссылок">Урл спрятан за сокращателем ссылок</h3>
<p>Сокращатели превращают нормальные ссылки:</p>
<pre tabindex="0"><code>https://explainshell.com/?utm_source=twitter.com&amp;utm_medium=social
https://dangry.ru/sona/interface/
https://antonz.ru/choice/
</code></pre><p>в такие:</p>
<pre tabindex="0"><code>https://amp.gs/mgYs
https://goo.gl/QspV62
https://t.co/JCZGu9SelO
</code></pre><p>Тут плохо всё. Потерялись не только параметры, но и сам сайт. Теперь я совсем не понимаю, куда заведёт ссылка.</p>
<p>Конечно, я знаю, зачем нужны сокращатели. Маркетологи прячут за ними utm-метки — параметры, которые говорят владельцу сайта, откуда пришёл посетитель. Я даже понимаю, почему нужны эти метки — соцсети не сообщают источник перехода (это большое зло и тема для отдельной статьи).</p>
<p>Но для меня как для пользователя сети — сокращатели чистейшее зло.</p>
<h2 id="хорошие-урлы">Хорошие урлы</h2>
<p>Перейдём к хорошему.</p>
<h3 id="урл-однозначно-идентифицирует-конкретный-объект">Урл однозначно идентифицирует конкретный объект</h3>
<p>Для магазина значимые объекты — товары, для журнала — статьи и комментарии, для системы контроля версий — каждая строка кода:</p>
<pre tabindex="0"><code>https://market.yandex.ru/product/8478688
https://habrahabr.ru/company/hflabs/blog/267997/#comment_8598021
https://github.com/hflabs/suggestions-jquery/blob/master/less/suggestions.less#L40
</code></pre><p>Хороший урл ведёт прямо на идентифицируемый объект, без промежуточных страниц и попапов.</p>
<h3 id="урл-информативный">Урл информативный</h3>
<p>По хорошему урлу примерно понятно, о чём он. Например, клиенты с единственным заказом за последний год:</p>
<pre tabindex="0"><code>/customers?order-count=1&amp;order-date=last-year
</code></pre><p>Урл может быть уникальным и при этом информативным:</p>
<pre tabindex="0"><code>https://wpdev.uservoice.com/forums/257854-universal-windows-platform/suggestions/6509607-stop-internet-explorer-development

https://www.citilink.ru/catalog/mobile/cell_phones/393683/
</code></pre><p>Ссылка должна оставаться рабочей, даже если объект переместят в другую категорию или раздел сайта. Пока в урле есть идентификатор, этого достаточно.</p>
<p>Более того, «текстовую» часть можно убрать, а адрес продолжит работать:</p>
<pre tabindex="0"><code>https://wpdev.uservoice.com/forums/257854/suggestions/6509607

https://www.citilink.ru/catalog/393683/
</code></pre><p>Такой подход хорошо показал себя на форумах, в блогах и каталогах.</p>
<h3 id="урл-читается-как-обычное-предложение">Урл читается как обычное предложение</h3>
<p>Это высший пилотаж:</p>
<pre tabindex="0"><code>http://yasobe.ru/na/obed
</code></pre><p>Так редко получается, но если видите возможность — не упустите.</p>
<div class="boxed" style="margin-bottom: .8em;">
<h3>Красота и иерархичность</h3>
<p>Важно, чтобы адрес оставался иерархичным: каждый кусочек от слэша до слэша не просто «создаёт красоту», а имеет самостоятельный смысл:</p>
<ul>
  <li><em>/na/obed</em> — конкретный сбор;</li>
  <li><em>/na/</em> — список всех сборов (а Яндекс отдаёт 404, ататат);</li>
  <li><em>/</em> — главная страница.</li>
</ul>
<p>Каждый слэш создаёт уровень иерархии. Если убирать уровни один за одним справа налево, ссылка каждый раз должна отдавать что-то логичное, пока не дойдём до главной страницы.</p>
<p>Не пренебрегайте иерархией ради красоты. Но если получается сделать иерархичный адрес красивым — отлично.</p>
</div>
<h3 id="урл-живёт-вечно">Урл живёт вечно</h3>
<p>Сайты меняются, сливаются в один и разбиваются на несколько. Урлы страниц при этом изменяются, и это нормально. Главное — оставлять со старых адресов редирект на новые:</p>
<pre tabindex="0"><code>weather.yandex.ru → yandex.ru/pogoda
designpreppy.ru/interface.html → dangry.ru/sona/interface/
antonz.ru/2016/04/12/laws/ → antonz.ru/laws/
</code></pre><p>Единожды опубликованный урл должен жить вечно. Даже если страница по ссылке удалена, на её месте оставляют заглушку с пояснением:</p>
<figure>
  <img alt="Покемон-радар" class="bordered img-grayscale" src="pokemon.png">
  <figcaption>RIP, <a href="http://dadata.ru/pokemon">покемон-радар</a></figcaption>
</figure>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>Делать хорошие урлы нелегко, а оценит их мало кто. Но если у вас получится — знайте, я вами горжусь ツ</p>
<p>Спасибо коллегам:</p>
<ul>
<li><a href="https://iamakulov.com">Ване Акулову</a>, который вдохновил меня написать эту заметку, прислав ссылку на статью Скотта Хансельмана <a href="https://www.hanselman.com/blog/URLsAreUI.aspx">URLs are UI</a>.</li>
<li><a href="https://www.facebook.com/dorofeev.pavel22">Павлу Дорофееву</a>, который обратил внимание на устойчивость урлов к изменению текстовой части.</li>
<li><a href="http://tonsky.me">Никите Прокопову</a>, который поднял проблему красоты и иерархичности урлов.</li>
<li>Андрею Лёзову, который напомнил о редиректах.</li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Больше таких статей — на канале <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Хватит сортировать по алфавиту</title>
      <link>https://antonz.ru/no-more-latch/</link>
      <pubDate>Tue, 18 Jul 2017 08:52:05 +0000</pubDate>
      
      <guid>https://antonz.ru/no-more-latch/</guid>
      <description>Как упорядочить объекты в интерфейсе, чтобы пользователю было удобно с ними работать.</description>
      <content:encoded><![CDATA[<p>Часто при проектировании интерфейса нужно показать на экране список однотипных объектов: людей, товаров, статей. И возникает вопрос — как их организовать?
Классический ответ дал в 1989 году Ричард Вурман, автор термина «информационная архитектура». Он предложил <a href="http://www.informit.com/articles/article.aspx?p=130881&amp;seqNum=6">мнемонику LATCH</a>: положение, алфавит, время, категория, иерархия.</p>
<p>Это неплохая модель, но есть что улучшить. Вот мой вариант — как организовать информацию в интерфейсе.</p>
<h2 id="поалфавиту">По алфавиту</h2>
<p>Составить список объектов и отсортировать по названию. Например, контакты в телефонной книге компании упорядочены по фамилиям:</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<p><img alt="Организация по алфавиту" src="alphabet.png" class="bordered"></p>
</div>
</div>
<p>Организацию по алфавиту используют, если пользователь будет искать нужный объект по первым буквам названия:</p>
<ul>
<li>глоссарий в книге,</li>
<li>список учеников в классном журнале,</li>
<li>код компании в биржевой сводке.</li>
</ul>
<p>Часто алфавит используют «по умолчанию». Подход ленивого дизайнера: не знаешь, как упорядочить список — отсортируй по алфавиту ツ</p>
<h2 id="повремени">По времени</h2>
<p>Показать объекты в хронологическом порядке — привязать к событиям во времени. Например, чтобы проиллюстрировать историю становления компании, написать, когда начал работать каждый сотрудник:</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<p><img alt="Организация по времени" src="time.png" class="bordered"></p>
</div>
</div>
<p>Организацию по времени используют, когда важно знать точный момент события:</p>
<ul>
<li>список встреч на день,</li>
<li>расписание автобуса,</li>
<li>история изменения карточки клиента в CRM.</li>
</ul>
<p>Не всегда нужна привязка к моменту, иногда достаточно знать взаимный порядок событий (что произошло раньше, что позже):</p>
<ul>
<li>инструкция на случай пожара,</li>
<li>последовательность шагов при регистрации на сайте,</li>
<li>следующие номера на табло в электронной очереди.</li>
</ul>
<h2 id="поположению">По положению</h2>
<p>Привязать объекты к положению в пространстве. Например, если в компании сотрудники работают в разных городах, удобно показать их на карте:</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<p><img alt="Организация по положению" src="location.png" class="bordered"></p>
</div>
</div>
<p>Заодно понятно, какая у кого разница во времени.</p>
<p>Организацию по положению используют, когда важно, как расположены объекты относительно контейнера, друг друга или наблюдателя:</p>
<ul>
<li>станции метро на карте,</li>
<li>туалеты на схеме терминала аэропорта,</li>
<li>органы в теле человека.</li>
</ul>
<p>Обычно объекты привязывают к точке в двух- или трёхмерном пространстве. Но иногда достаточно упорядочить объекты по взаимному расположению (первый, второй, третий). Так организован список сносок в конце книги или станции на конкретной ветке метро.</p>
<h2 id="покатегориям">По категориям</h2>
<p>Разложить объекты по именованным кучкам — категориям. Например, распределить сотрудников по отделам:</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<p><img alt="Организация по категориям" src="category-1.png" class="bordered"></p>
</div>
</div>
<p>Организацию по категориям используют, когда есть очевидный пользователю признак, по которому объекты похожи или отличаются:</p>
<ul>
<li>меню в ресторане (закуски, салаты, супы, основные блюда, десерт),</li>
<li>формат листа в магазине канцтоваров (А1, А2, А3, А4),</li>
<li>контакты на карточке клиента в CRM (адреса, телефоны, емейлы, аккаунты в соцсетях).</li>
</ul>
<p>Для категории подходит любой качественный признак: цвет, форма, вкус, фактура. Если признак количественный (площадь, стоимость, вес) — попадаем в следующий раздел («по количеству»).</p>
<p>Иногда одновременно используют несколько наборов категорий. Основной набор показывают сразу. Например, для магазина ноутбуков это будут «бюджетные», «игровые» и «компактные» категории. Дополнительную классификацию прячут за фильтрами: бренды, диагональ экрана, объем диска, цвет.</p>
<h2 id="поколичеству">По количеству</h2>
<p>Упорядочить объекты по значению количественного признака. Например, руководителю компании захотелось узнать, кто сколько получает:</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<p><img alt="Организация по количеству" src="count.png" class="bordered"></p>
</div>
</div>
<p>Организацию по количеству используют, когда важно знать «у кого больше, у кого меньше» и «сколько конкретно»:</p>
<ul>
<li>фильмы по рейтингу IMDB,</li>
<li>ноутбуки по цене,</li>
<li>города по населению.</li>
</ul>
<p>Если выделить диапазоны значений и придумать для них названия — получатся категории. Например, вместо точного количества товара на складе магазин может использовать категории «много», «несколько» и «остался последний».</p>
<div class="boxed">
<h3>Что не так с мнемоникой LATCH Ричарда Вурмана</h3>
<p>Вурман напортачил с последним пунктом, иерархией (hierarchy). Он имел в виду «упорядочить по количеству»: расстоянию, стоимости, рейтингу. Но так бы не получилась мнемоника, поэтому он взял «иерархию» и всех запутал.</p>
<p>На самом деле иерархия возникает, когда дизайнер комбинирует несколько способов. Например, показать офисы компании на карте, а внутри офисов — сотрудников по алфавиту. Получилась иерархия.</p>
<p>Композиция конкретного способа с самим собой тоже создаёт иерархию. Особенно часто это встречается в категориях. Например, организовать сотрудников по отделам, отделы — по департаментам, департаменты — по бизнес-единицам. Тоже иерархия.</p>
</div>
<h2 id="порелевантности">По релевантности</h2>
<p>Упорядочить объекты по полезности — по соответствию предпочтениям человека. Например, при поиске по списку контактов ранжировать результаты по соответствию запросу:</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<p><img alt="Организация по релевантности" src="relevance.png" class="bordered"></p>
</div>
</div>
<p>Организацию по релевантности используют, когда человек явно или неявно сообщил о своих предпочтениях:</p>
<ul>
<li>результаты поиска на сайте (явное предпочтение — поисковый запрос),</li>
<li>выдача в социальной сети (неявное предпочтение — история лайков и просмотров пользователя),</li>
<li>рекомендуемые товары (неявное предпочтение — поведение человека на сайте и история покупок).</li>
</ul>
<p>Ещё порядок «по полезности» отлично подходит для коротких списков, элементы которых слабо связаны между собой:</p>
<ul>
<li>преимущества на сайте компании,</li>
<li>характеристики на карточке товара в магазине,</li>
<li>отзывы в портфолио консультанта.</li>
</ul>
<h2 id="посвязям-сдругими-объектами">По связям с другими объектами</h2>
<p>Организовать объекты в сеть и показать отношения между ними. Например, компания пригласила консультанта, чтобы проанализировал психологический климат в коллективе. Он нарисовал такую схему:</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<p><img alt="Организация по связям" src="relations-1.png" class="bordered"></p>
</div>
</div>
<p>Организация по связям отличается от остальных методов: нет ни упорядоченности, ни явной принадлежности объекта к категории. Её используют, чтобы увидеть закономерности, пути и расстояния между объектами:</p>
<ul>
<li>социальный граф знакомств, чтобы «достучаться» до нужного человека,</li>
<li>схема владения и аффилированности компаний, чтобы определить конечного бенефициара,</li>
<li>схема дорог, чтобы найти кратчайший маршрут.</li>
</ul>
<h2 id="случайным-образом">Случайным образом</h2>
<p>Показать список объектов «абы как», отобразить в случайном порядке. Если «по алфавиту» — умолчательный вариант ленивого дизайнера, то «случайным образом» — ленивого программиста.</p>
<p>Такой способ редко полезен. Но иногда случается: например, перемешать варианты ответов в тесте, чтобы сложнее было списать.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<h3 id="как-это-использовать">Как это использовать</h3>
<p>Когда в следующий раз будете проектировать экран с множеством однотипных объектов, не выбирайте вариант организации «по умолчанию» — абы как или по алфавиту.</p>
<p>Задайтесь вопросами:</p>
<ul>
<li>Как пользователь будет искать нужный объект?</li>
<li>Важно ли знать взаимный порядок объектов?</li>
<li>Привязаны ли объекты к моментам времени или точкам в пространстве?</li>
<li>Чем объекты похожи и чем отличаются?</li>
<li>Какие взаимосвязи есть между объектами?</li>
<li>Что больше всего интересно человеку, каковы его намерения?</li>
</ul>
<p>Ответив на вопросы, увидите, какой метод организации подходит лучше.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Куда подглядывать, когда проектируешь интерфейс</title>
      <link>https://antonz.ru/spy-ui/</link>
      <pubDate>Mon, 03 Jul 2017 15:11:35 +0000</pubDate>
      
      <guid>https://antonz.ru/spy-ui/</guid>
      <description>В Контур.Гайды, конечно!</description>
      <content:encoded><![CDATA[<p>На днях я предложил <a href="https://antonz.ru/like-google/">смотреть на Гмейл</a>. Для мобильных интерфейсов, понятное дело, есть гайдлайны вендоров:</p>
<ul>
<li><a href="https://developer.apple.com/ios/human-interface-guidelines/">Human Interface Guidelines</a></li>
<li><a href="https://material.io/guidelines/">Material Design Guidelines</a></li>
</ul>
<p>А для веба ещё пара отличных источников, если работаете над бизнес-приложениями:</p>
<ul>
<li><a href="https://guides.kontur.ru/">Контур.Гайды</a></li>
<li><a href="http://harmony.intuit.com/">Harmony Design System</a></li>
</ul>
<p>В зависимости от тематики:</p>
<ul>
<li>Для интернет-магазинов я бы подглядывал интерфейс у <a href="https://www.mann-ivanov-ferber.ru/">МИФа</a>.</li>
<li>Медиа — <a href="https://journal.tinkoff.ru/">Тинькофф-Журнал</a> и <a href="https://meduza.io/">Медуза</a>.</li>
<li>Каталоги и классифайды — <a href="https://auto.ru/">Авто.ру</a> и <a href="https://market.yandex.ru/">Яндекс.Маркет</a>.</li>
</ul>
<p>Если у вас есть проверенные временем авторитеты — пишите <a href="https://t.me/nalgeon">@nalgeon</a>, дополню.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как веб-дизайнеру проектировать хардварные интерфейсы</title>
      <link>https://antonz.ru/ilya-aleksandrov/</link>
      <pubDate>Wed, 21 Jun 2017 07:56:53 +0000</pubDate>
      
      <guid>https://antonz.ru/ilya-aleksandrov/</guid>
      <description>Илья Александров о дизайне интерфейсов для «железных» продуктов — носимых устройств, автомобилей и киосков самообслуживания.</description>
      <content:encoded><![CDATA[<div class="row">
<div class="col-xs-12 col-md-10">
<p style="font-size: 1em"><em>Сегодняшнее интервью — с Ильёй Александровым. Он рассказывает о специфике проектирования интерфейсов для «железных» продуктов — носимых устройств, автомобилей и киосков самообслуживания. И советует, как обычному дизайнеру попасть в hardware.
 </em></p>
</div>
</div>
<h3 id="расскажи-осебе-вкратце-чем-занимаешься-где-работаешь-чемувлекаешься">Расскажи о себе вкратце: чем занимаешься, где работаешь, чем увлекаешься</h3>
<div class="row"><div class="col-xs-12 col-sm-7"><p>Я проектирую продукты и интерфейсы. Люблю разнообразие. Начинал с веб-сайтов и презентаций, немного мобильных приложений. Затем игровые интерфейсы в World of Tanks, позже киоск самообслуживания, электрический грузовик, рельсовый электровелосипед. Сейчас работаю над несколькими носимыми устройствами и <a href="http://www.lightpack.tv/">Лайтпаком</a> — «световым оркестром» для комнаты.</p>
<p>Чаще всего работаю на старте проекта, либо когда продукт требует глобальных изменений. Мой основной интерес — прийти туда, где ничего не понятно, и придать продукту ясные очертания и вектор развития.</p></div>
<div class="col-xs-8 col-sm-offset-1 col-sm-4"><figure><a class="img-inline" href="http://facebook.com/yakostro"><img alt="Илья Александров" src="yakostro-avatar.jpg" style="max-width: 200px;"></a><figcaption><a href="https://www.facebook.com/yakostro">Илья Александров</a><br>Человек-стартер: делает из идей понятные продукты.</figcaption></figure></div>
</div>
<p>Кроме работы хожу в бассейн, катаюсь на роликах и велосипеде. Изучаю разные уголки Питера (живу тут уже два года). Играю на гитаре и флейте. Недавно начал программировать свою мини-игру. Ну и конечно, новое увлекательное занятие — воспитание дочери.</p>
<h3 id="тыпишешь-a-hrefhttpsmediumcomyakostroвблогеa-что-занимаешься-интерфейсами-для-сложных-систем-расскажи-окаком-нибудь-крутом-проекте">Ты пишешь <a href="https://medium.com/@yakostro">в блоге</a>, что занимаешься интерфейсами для сложных систем. Расскажи о каком-нибудь крутом проекте.</h3>
<p>Почти все проекты, с которыми я имею дело, можно назвать сложными. В них много сущностей и взаимосвязей. Много возможных вариантов использования, и не всегда понятно как и что делать.</p>
<p>Например, для «<a href="https://medium.com/@yakostro/ae8a3b12a3b7">Симкомата</a>» (киоск по автоматизированной продаже симкарт) проектировал сразу четыре ветки UX-сценариев:</p>
<ol>
<li>Для самих пользователей — людей, которые покупают сим-карту. На этом главный фокус.</li>
<li>Для обслуживающего персонала — людей, которые заполняют киоск симками, забирают деньги, вставляют чековую ленту.</li>
<li>Для администраторов от бизнеса.</li>
<li>Для технарей, которые настраивают киоск.</li>
</ol>
<figure>
  <img alt="Интерфейс симкомата" src="yakostro-simkomat.png">
  <figcaption>Один из уроков проекта: простые нарисованные схемы работают лучше, чем видео с инструкцией</figcaption>
</figure>
<p>Требования по первым двум пунктам пересекаются. Поэтому, чтобы спроектировать расположение элементов и устройств внутри симкомата, приходится учитывать сценарии обеих групп.</p>
<p>Или <a href="https://charge.auto/">Charge</a>. В этом проекте я проектировал пользовательский опыт водителей грузовиков. Задачей было переосмыслить стандартные подходы. Поэтому я занимался не одним интерфейсом, а целой экосистемой:</p>
<ul>
<li>интерфейсами кабины грузовика (приборная панель, физические контролы, инфотейнмент-система);</li>
<li>интерфейсами, с которыми водитель будет работать вне кабины (на базе мобильных устройств);</li>
<li>логистической системой в вебе для связи с водителями и клиентами.</li>
</ul>
<p>За полтора года удалось спроектировать верхний уровень всей экосистемы и разработать базовые версии ключевых интерфейсов.</p>
<h3 id="язнаю-что-тебе-доводилось-проектировать-звуковые-интерфейсы-расскажи-какие-есть-правила-вработе-созвуком">Я знаю, что тебе доводилось проектировать звуковые интерфейсы. Расскажи, какие есть правила в работе со звуком?</h3>
<p>Да, сейчас как раз делаю носимое устройство — «паническую кнопку» для путешественников-экстремалов. У него звуковой фидбек и световые индикаторы — эти два вида нотификации дублируют и дополняют друг друга.</p>
<div class="row">
<div class="col-xs-12 col-sm-6 col-md-8">
<p>Из того, что нашёл по правилам и стандартам, самое краткое и по делу — <a href="http://www.cs.au.dk/~dsound/DigitalAudio.dir/Papers/Earcons_and_Icons.pdf">Earcons and Icons: Their Structure and Common Design Principles</a>.</p>
<p>Впервые узнал оттуда понятие «earcon» — иконка для уха. Очень концептуально, по-моему ツ В брошюре описано, как они должны «выглядеть», как их объединять в группы и создавать систему из понятных звуковых фраз.</p>
<p>Ещё интересная книга по теме — <a href="https://www.crcpress.com/Human-Factors-in-Alarm-Design/Stanton/p/book/9780748401093">Human Factors in Alarm Design</a>.</p>
</div>
<div class="col-xs-12 col-sm-6 col-md-4">
  <a class="img-link" href="https://www.crcpress.com/Human-Factors-in-Alarm-Design/Stanton/p/book/9780748401093"><img alt="Human Factors in Alarm Design" src="yakostro-alarm-design.jpg"></a>
</div>
</div>
<h3 id="расскажи-оспецифике-дизайна-для-игровых-проектов-наоснове-своего-опыта-работы-для-world-oftanks">Расскажи о специфике дизайна для игровых проектов на основе своего опыта работы для World of Tanks?</h3>
<p>О специфике мы с Лёшей Копыловым <a href="http://2013.profsoux.ru/papers/38/">рассказывали</a>. Я не буду повторяться, потому что получится очень длинно.</p>
<p>В играх встречаются разные по типу интерфейсы. В «танках», например, есть боевой интерфейс, а есть сервисные: меню игры, «магазин», «инвентарь», игровой чат.</p>
<p>Сервисные интерфейсы — не геймплейные, а скорее обслуживающие. Их проектирование бывает похоже на проектирование сайта или мобильного приложения. Но если прийти с опытом чисто «вебовским», то будет очень сложно перестраиваться. Мы даже в какой-то момент старались искать людей без опыта сайтоделания.</p>
<p>Боевой интерфейс — совсем иная история. Нужно работать, например, над поведением камеры. Это уже выход из плоскости. Как камера интерпретирует прокрутку или перемещение мышки? Как на неё влияет скорость движения танка?</p>
<div class="row">
<div class="col-xs-12 col-sm-6 col-md-8">
<p>От этого сильно зависит, как чувствует себя игрок, комфортно ли ему, вовлечён ли он в процесс. Неправильно настроенная камера может даже способствовать «выдёргиванию» человека из процесса. Чтобы лучше понять, о чём я говорю, посмотрите выступление <a href="https://www.youtube.com/watch?v=doVivf-Nvuo">Creating an Emotionally Engaging Camera for Tomb Raider</a>.</p>
<p>Самое важное в играх — фан, на эту тему читайте книгу <a href="https://www.amazon.com/Theory-Game-Design-Raph-Koster/dp/1449363210">Theory of Fun</a>. Интерфейс должен помогать переживать этот фан, способствовать вовлечению, получению эмоций — помимо более утилитарных функций.</p>
</div>
<div class="col-xs-12 col-sm-6 col-md-4 first-md">
<a class="img-link" href="https://www.amazon.com/Theory-Game-Design-Raph-Koster/dp/1449363210"><img alt="Theory of Fun for Game Design" src="yakostro-theory-of-fun.jpg"></a>
</div>
</div>
<h3 id="кто-обычно-есть-втвоей-команде-как-распределяете-обязанности">Кто обычно есть в твоей команде? Как распределяете обязанности?</h3>
<p>Поначалу делаю большую часть работы сам. Потом подтягиваю дизайнеров, когда понятен фронт работ.</p>
<p>В «Варгейминге» сначала нас было двое проектировщиков в отделе UX, а графические дизайнеры — отдельно. Потом объединились, набрали людей, и я стал отвечать за будущее интерфейса и за систему. Параллельно пропускал через себя все фичи, которые делали остальные дизайнеры.</p>
<p>В «Симкомате» начинал тоже сам, затем наняли дизайнера. Я обучал его UX-аналитике, учил проводить пользовательское тестирование. Программисты были на аутсорсе, и я параллельно с проектированием руководил софтовой разработкой.</p>
<p>В «Чардже» (электрический грузовик) я сначала был один. Делал всё, включая аналитику, UX-исследования, планирование, управление софтовой разработкой и поиском железных поставщиков. Затем взяли дизайнера, программиста и специалиста по железу.</p>
<p>Сейчас в «<a href="http://www.woodenshark.com">Вуденшарке</a>» занимаюсь всем спектром UX-работ. Исследования, системная аналитика, создание всех артефактов, помощь в создании прототипов, тестирование. Только не рисую сам.</p>
<h3 id="как-тынаходишь-такие-крутые-проекты-большинству-дизайнеров-завсю-жизнь-непридётся-поработать-сэлектрическим-грузовиком-носимыми-устройствами-или-лайтпаком-аутебя-прямо-цепочка-достижений-отодной-крутой-штуки-кдругой-как-тебе-это-удаётся">Как ты находишь такие крутые проекты? Большинству дизайнеров за всю жизнь не придётся поработать с электрическим грузовиком, носимыми устройствами или лайтпаком. А у тебя прямо цепочка достижений — от одной крутой штуки к другой. Как тебе это удаётся?</h3>
<p>Это череда неслучайных случайностей. В «танки» я попал, потому что пошел работать в <a href="http://www.uidg.ru">UIDG</a>. К ним тогда пришли заказчики и говорят: «Надо аналитику». А я нашим в компании сказал: «Я люблю игры и всегда хотел ими заниматься, дайте мне этот заказ». Мне дали. Я сделал аналитику, потом нам заказали проектирование пары больших фич. «Танкам» всё понравилось и они схантили меня ツ</p>
<p>Когда уходил из «Варгейминга», хотел делать что-то более реальное, физическое. Вернулся на родину, в Ижевск. Там мой друг Артём Субботин, основатель Симкомата, попросил немного помочь советом. А потом говорит — пошли работать.</p>
<p>После «Симкомата» начал искать работу, и мне написали ребята из Charge. Сказали, что нашли меня через выступление на <a href="http://2013.profsoux.ru/papers/38/">ПрофсоUX</a>. Оттуда вышли на линкедин-профиль, а был описан релевантный опыт «симкомата».</p>
<p>Когда ушел из Charge, спустя пять месяцев расстройства и размышлений написал в Фейсбуке, что ищу работу. Не ждал, что вообще будет что-то с железками в Питере. Был уже почти готов работать над какой-нибудь CRM-кой. Тут мне написал Митя Гориловский и пригласил работать над «Лайтпаком» и другими интересными проектами в компании <a href="http://www.woodenshark.com">Woodenshark</a>. Я про такую даже и не знал.</p>
<figure>
  <img alt="Lightpack TV" src="yakostro-lightpack.jpg">
  <figcaption>Илья с командой сделали из концептуальной идеи «Лайтпака» цельный продукт.</figcaption>
</figure>
<p>То есть оно как-то само друг за друга цепляется. Главное след за собой оставлять: рассказывать о своем опыте. Статьи и выступления хорошо работают. Например, по статье об <a href="https://medium.com/@yakostro/7e4180b6ef8d">автомобильных интерфейсах</a> на меня вышли ещё одни ребята с транспортом.</p>
<h3 id="допустим-есть-дизайнер-который-пресытился-работой-свеб-интерфейсами-хочет-поработать-вжелезных-проектах-делать-интерфейсы-для-голосовых-помощников-роботов-или-автопилотов-что-ему-посоветуешь-счего-начать">Допустим, есть дизайнер, который пресытился работой с веб-интерфейсами. Хочет поработать в «железных» проектах — делать интерфейсы для голосовых помощников, роботов или автопилотов. Что ему посоветуешь, с чего начать?</h3>
<p>Искать такие проекты, пытаться к ним устроиться. Проектировщиков прямо по «железным» интерфейсам почти нет. Поэтому компании с удовольствием берут людей с хорошей базой знаний, методологий и опытом. Нужно хотя бы немного зацепиться за тему, а дальше само пойдет. Главное — копошиться, расставлять «капканчики»: писать статьи, выступать, рассказывать всем о своем опыте, не стесняться.</p>
<p>Или другой вариант: взять интересную тему и сделать проект — хотя бы просто концепт. Классно оформить и выложить. Говорят, это работает, хотя мне удалось работать сразу с живыми проектами.</p>
<p>Смотреть по сторонам в компании, где работаешь. Везде «совать свой нос» и вовремя заметить возможность (как было у меня с «танками» — проект ведь могли просто отдать другому дизайнеру).</p>
<h3 id="какие-инструменты-используешь-вработе-какие-твои-любимые">Какие инструменты используешь в работе? Какие твои любимые?</h3>
<p>Любимые — бумага и гелевая ручка <a href="https://www.komus.ru/katalog/pismennye-prinadlezhnosti/ruchki-gelevye/ruchki-gelevye-neavtomaticheskie/c/6271/?pageSize=30&amp;sort=relevance&amp;q=&amp;q.Trademark.6.2=Paper+Mate">PaperMate</a>. Затем доска. Потом всё остальное. Смотря что делаю:</p>
<ul>
<li><a href="https://www.google.com/intl/ru/docs/about/">Гуглдокс</a> и <a href="https://www.mindjet.com/mindmanager/">MindManager</a> на старте проекта.</li>
<li><a href="https://www.draw.io">Draw.io</a> или <a href="https://products.office.com/visio/flowchart-software">Visio</a> чтобы описать состояния, переходы и сущности.</li>
<li><a href="http://www.adobe.com/ru/products/illustrator.html">Illustrator</a> или <a href="https://www.figma.com">Figma</a> для графических интерфейсов, схем навигации по продукту и детального проектирования. Финальный дизайн я обычно отдаю кому-то, чтобы не тратить время на пиксели.</li>
<li><a href="https://www.invisionapp.com">Invision</a>, если надо быстро запрототипировать.</li>
<li>Среда программирования, если надо кодить для прототипа.</li>
</ul>
<div class="boxed">
<h3>Где подписаться на Илью</h3>
<p>В блоге <a href="https://medium.com/@yakostro">статьи на профессиональные темы</a></p>
<p>В фейсбуке <a href="http://facebook.com/yakostro">всё остальное</a></p>
</div>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Важные оповещения и ковбой Мальборо</title>
      <link>https://antonz.ru/important-notifications/</link>
      <pubDate>Fri, 16 Jun 2017 08:52:00 +0000</pubDate>
      
      <guid>https://antonz.ru/important-notifications/</guid>
      <description>Оповещения в мобильных ОС — безусловное зло для пользователя. Их единственная цель — заставить человека почаще возвращаться к смартфону.</description>
      <content:encoded><![CDATA[<p>Прочитал забавную статью с «критическим анализом» <a href="https://uxdesign.cc/4956ed86a804">систем пуш-нотификации</a> в андроиде и айоси. Автор подробно рассматривает особенности дизайна оповещений в каждой из систем и делает выводы о плюсах и минусах. Разделяет решения на более и менее полезные.</p>
<p>Смешно.</p>
<p>Оповещения, как они реализованы в обоих ОС — безусловное зло для пользователя. Их единственная цель — заставить человека почаще возвращаться к смартфону.</p>
<p>Вот система, которая могла бы приносить больше пользы, чем вреда:</p>
<ol>
<li>
<p>По умолчанию оповещения от всех приложений выключены. Исключения: телефон, календарь, таймер и оповещения о стихийных бедствиях.</p>
</li>
<li>
<p>Приложение не может предлагать включить нотификации. Это только инициатива пользователя.</p>
</li>
<li>
<p>Оповещения включаются не для приложения в целом, а для адресата. Чтобы пользователь мог разрешить нотификации для СМС и чатов только с близкими людьми, чьи сообщения действительно важно увидеть немедленно.</p>
</li>
</ol>
<p>Но дизайнеры андроида и айоси никогда не пойдут на такие изменения. Точно так же, как табачные компании по собственной воле не прекращали рекламу сигарет.</p>
<p>Для корпораций забота о пользователе = забота, чтобы побольше потреблял. Неважно, что они рассказывают об инновациях. Со времён ковбоя Мальборо ничего не изменилось.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как подписаться на блог в Медиуме по RSS</title>
      <link>https://antonz.ru/medium-rss/</link>
      <pubDate>Wed, 24 May 2017 07:02:28 +0000</pubDate>
      
      <guid>https://antonz.ru/medium-rss/</guid>
      <description>Если хотите гарантированно подписаться на блог — используйте RSS. Медиум его поддерживает, хотя и не афиширует.</description>
      <content:encoded><![CDATA[<p>Медиум (Medium) — это популярная коллективная блоговая платформа. Она славится аскетичным интерфейсом, приятной типографикой и отсутствием нормального способа подписаться на конкретный блог.</p>
<p>Вы можете «зафоловить» человека, и Медиум будет присылать его новые статьи вам по электронной почте. Или не будет. Как повезёт.</p>
<p>Если хотите гарантированно подписаться на блог — используйте RSS. Медиум его поддерживает, хотя и не афиширует. Просто скормите RSS-ридеру ссылку на блог человека в таком виде:</p>
<pre><code>https://medium.com/@юзернейм
</code></pre>
<p>Например:</p>
<pre><code>https://medium.com/@kapanaga
https://medium.com/@_ericelliott
https://medium.com/@jane_malkova
</code></pre>
<p>Юзернеймы людей, на которых вы подписаны в Медиуме, смотрите по специальной ссылке:</p>
<pre><code>https://medium.com/@ваш_юзернейм/following
</code></pre>
<p>Например, вот мои:</p>
<pre><code>https://medium.com/@nalgeon/following
</code></pre>
]]></content:encoded>
    </item>
    
    <item>
      <title>Машинное обучение для нормальных людей</title>
      <link>https://antonz.ru/machine-learning/</link>
      <pubDate>Wed, 03 May 2017 07:37:06 +0000</pubDate>
      
      <guid>https://antonz.ru/machine-learning/</guid>
      <description>Рассказываю для не-специалистов, какие инструменты машинного обучения можно применять здесь и сейчас.</description>
      <content:encoded><![CDATA[<p>Прочитал на днях статью «Применение машинного обучения для дизайнеров» и книгу «Машинное обучение для дизайнеров». Разочарован: не понимаю, для кого это всё пишут. Куча размахиваний руками в воздухе и псевдо-сложных рассуждений. Ноль практического применения.</p>
<p>Но я задумался — а где <em>реально</em> обычный дизайнер интерфейсов (или любой не-специалист в computer science) может столкнуться с машинным обучением в повседневных проектах, да ещё с русскоязычными данными. Я попробовал собрать несколько примеров вместе с инструментами.</p>
<p>Поехали!</p>
<h2 id="распознавание-речи">Распознавание речи</h2>
<p><em>Что это</em>. Программа слушает запись голоса и преобразует её в текст.</p>
<p><em>Инструменты</em>. Распознавать речь умеют все крупные вендоры: Гугл, Амазон, Микрософт. Они сделали удобные облачные сервисы и библиотеки, только с русским всё печально. Поэтому для русской речи я использовал <a href="https://tech.yandex.ru/speechkit/">SpeechKit</a> от Яндекса.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8">
<figure>
  <img alt="Распознавание речи" src="ml-speech-recognition.png">
  <figcaption>Яндекс обещает 84% точность распознавания. Ну, если только в мечтах маркетологов ツ</figcaption>
</figure>
</div>
</div>
<p>Речь распознавать он более-менее умеет, но качество очень так себе. По моему опыту, короткие бытовые фразы распознаются на 70%, а если говорит ребёнок или у человека плохая дикция — 50%. То есть это далеко не продакшен-качество, использовать голос как единственный способ ввода нельзя.</p>
<p>Есть одно исключение: адреса. Их Яндекс распознаёт очень хорошо (возможно, вы замечали это по яндекс-навигатору). Лучше человека. Так что для ввода адресов SpeechKit реально можно использовать.</p>
<h2 id="понимание-смысла-сказанного">Понимание смысла сказанного</h2>
<p><em>Что это</em>. Программа анализирует текст и пытается понять, что имел в виду человек. По такому принципу работают голосовые помощники вроде Siri и «умные» чат-боты (тупые же ориентируются по ключевым словам, без всякого машинного обучения).</p>
<figure>
  <img class="bordered" alt="Понимание смысла сказанного" src="ml-text-meaning.png">
  <figcaption>Красиво, да? Это иллюстрация из SpeechKit от Яндекса. Жаль, что на самом деле он так не умеет ツ</figcaption>
</figure>
<p><em>Инструменты</em>. Всё ещё хуже, чем с распознаванием речи. Тот же SpeechKit умеет проводить морфологический анализ предложения (части речи, лица, падежи). Плюс-минус умеет вычленять даты, адреса и ФИО. Но не умеет главного — понимать смысл: выделять действия, объекты, характеристики и обстоятельства.</p>
<h2 id="распознавание-текста">Распознавание текста</h2>
<p><em>Что это</em>. Программа распознаёт печатный и рукописный текст на сканах и из видео, извлекает текст из фотографий документов и банковских карт, считывает штрихкоды.</p>
<p><em>Инструменты</em>. На этой поляне давно и прочно играет ABBYY с их <a href="https://www.abbyy.com/ru-ru/ocr-sdk/">FineReader Engine</a>, а ещё есть <a href="http://smartengines.ru/">Smart Engines</a>.</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<img alt="Распознавание текста" src="ml-snils.jpg">
</div>
<div class="col-xs-12 col-sm-6">
<div class="figcaption">Smart Engines распознаёт паспорт, СНИЛС или водительское удостоверение за секунду и предупреждает, если не уверен в распознавании.</div>
</div>
</div>
<h2 id="компьютерное-зрение-иклассификация-изображений">Компьютерное зрение и классификация изображений</h2>
<p><em>Что это</em>. Программа анализирует изображение и относит его к одной из категорий (спортивная машина, ребёнок, цветок и т. п.) Отсеивает «взрослые» фото, считывает текст и логотип с фотографии. Находит лица, определяет количество людей и их пол. Выделяет основные цвета.</p>
<p><em>Инструменты</em>. Тут работают <a href="https://cloud.google.com/vision/">Cloud Vision</a> от Гугла и свеженький <a href="https://imagemoderation.yandexdatafactory.com/">Data Factory</a> от Яндекса.</p>
<p>Про решение от Яндекса толком ничего не известно, а Гугл справляется хорошо. Вот Антон Мальцев на Хабре отлично <a href="https://habrahabr.ru/post/312714/">разобрал каждую возможность</a> и сравнил с конкурентами.</p>
<h2 id="рекомендации-прогнозы-ианализ-взаимосвязей">Рекомендации, прогнозы и анализ взаимосвязей</h2>
<p><em>Рекомендации</em> — это «классическое» машинное обучение, которое уже лет двадцать работает на том же Амазоне: проанализировать действия пользователя, понять его предпочтения, предложить что-то интересное. Аналогично Фейсбук формирует ленту, рекомендует друзей и группы — изучая предпочтения пользователя.</p>
<figure>
  <img class="bordered" alt="Рекомендации, прогнозы и анализ взаимосвязей" src="ml-amazon.png">
  <figcaption>Рекомендации, прогнозы и анализ взаимосвязей — самые распространённые применения машинного обучения на сайтах и сервисах.</figcaption>
</figure>
<p><em>Прогнозы</em> — «обучить» программу на известной выборке данных, чтобы дальше она «предсказывала» результат по новым данным.</p>
<p>Например, банк скармливает программе базу людей, которые брали кредиты, и по каждому человеку указывает итог — вернул он долг или просрочил. Дальше программа сама выдаёт прогноз для новых заёмщиков — просрочит человек выплату или нет.</p>
<p>Еще пример: та же программа предсказывает, сколько конкретно денег можно ссудить человеку, чтобы он без проблем выплатил потом кредит.</p>
<p><em>Анализ взаимосвязей</em> — программа смотрит на данные и замечает закономерности, которые человек не может увидеть самостоятельно. Например, тот же банк может получить ответ на вопрос «что общего у заёмщиков, которые просрочили выплату по кредиту?»</p>
<p><em>Инструменты</em>. Тут много алгоритмов, я не буду вдаваться в подробности. Много готовых библиотек и сервисов, которые их реализуют. Вот <a href="https://jaxenter.com/machine-learning-frameworks-list-131500.html">хороший обзор</a>, а вот пример использования гуглового облака для <a href="https://habrahabr.ru/company/softline/blog/319704/">рекомендаций в интернет-магазине</a>, на русском.</p>
<h2 id="творчество">Творчество</h2>
<p><em>Что это</em>. Программа выступает «соавтором» дизайнера. Человек задаёт условия задачи, алгоритм анализирует варианты решения и предлагает оптимальный. Это направление ещё называют генеративным дизайном.</p>
<p>Генеративный дизайн используют в архитектуре, промышленности, медицине. Задача, которую решает программа — уменьшить вес и увеличить прочность конструкции (например, детали самолёта или протеза). Маловероятно, что вы столкнётесь с таким проектом, но мало ли ツ</p>
<p><em>Инструменты</em>. Для генеративного дизайна используют <a href="http://www.autodesk.com/solutions/generative-design">софт компании Autodesk</a>.</p>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>Конечно, это очень поверхностный обзор. Если завзятый технарь каким-то чудом дочитает до этого места, он будет раскалён как чайник ツ С другой стороны, я надеюсь, что получилось понятное для не-специалистов введение в тему.</p>
<p>Описанные техники машинного обучения встречаются в повседневных проектах, поэтому хорошо понимать, про что они — даже если вы далеки от «компьютерных наук».</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Долой скриншоты или Правильный отчёт о проекте</title>
      <link>https://antonz.ru/case-study/</link>
      <pubDate>Mon, 17 Apr 2017 16:27:00 +0000</pubDate>
      
      <guid>https://antonz.ru/case-study/</guid>
      <description>Как правильно рассказывать о выполненных проектах. Особенно рекомендую фрилансерам и руководителям студий.</description>
      <content:encoded><![CDATA[<p>Лорен Холидей написала, как правильно рассказывать о выполненных проектах. Особенно рекомендую статью фрилансерам и руководителям студий.</p>
<p>Вместо скучных скриншотов автор рекомендует потратить силы и время, но подготовить полноценное описание проекта (case study). Вот из чего оно состоит:</p>
<h3 id="1-саммари">1. Саммари</h3>
<p>Краткая суть проекта, из которой читатель поймёт, интересны ему подробности или нет. Основная проблема заказчика. Решение, к которому вы пришли. Количественные результаты. Ссылка на сайт.</p>
<p>Большинство читателей ограничится этим разделом, и это нормально. Если его не сделать — вообще читать не будут ツ</p>
<h3 id="2-контекст">2. Контекст</h3>
<p>Кто клиент, чем он занимается, сколько времени занял проект. Подробное описание проблемы (зачем вас наняли).</p>
<h3 id="3-процесс">3. Процесс</h3>
<p>Как вы пришли от проблемы к решению. Интервью, исследования, проверка гипотез, прототипы.</p>
<h3 id="4-решение">4. Решение</h3>
<p>Как выглядит итоговый результат. Не ограничивайтесь скриншотами, напишите нормальный поясняющий текст.</p>
<h3 id="5-результаты">5. Результаты</h3>
<p>Что изменилось в бизнесе заказчика к лучшему. Здесь же отзыв.</p>
<h3 id="пример-классных-отчётов-собака-павлова">Пример классных отчётов: Собака Павлова</h3>
<p>Что касается российских компаний, которые делают интерфейсы — мне больше всего нравятся отчёты «Собаки Павлова» (если подписаны на рассылку «интерфейсов без шелухи» — наверняка это заметили ツ. Собственно, остальные даже рядом не стояли по качеству изложения. Вот пример, если никогда не видели: <a href="http://pavlova.cc/cases/solar/">Интерфейс Solar Staff</a></p>
<p class="big">
<a href="https://blog.prototypr.io/68997f295ef9">Screenshots are so Last Year: How to Write a Case Study That Wins You Clients</a>
</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Запас доверия</title>
      <link>https://antonz.ru/trust/</link>
      <pubDate>Fri, 07 Apr 2017 09:24:26 +0000</pubDate>
      
      <guid>https://antonz.ru/trust/</guid>
      <description>Как повлиять на доверие пользователя.</description>
      <content:encoded><![CDATA[<p>Каждый раз, когда я начинаю работать с новым приложением, к нему есть запас доверия. Каждый раз, когда я сталкиваюсь с проблемой, этот запас уменьшается. Но иногда (реже, чем хотелось бы) запас восполняется — если программа оправдывает мои ожидания или превосходит их.</p>
<p>Вот что уменьшает моё доверие:</p>
<ul>
<li>На программу нельзя положиться: тупо не работает, теряет данные, глючит.</li>
<li>Программа врёт: неправильно считает или не делает, что обещали.</li>
<li>Заставляет меня терять время: тормозит или запрашивает лишнюю информацию.</li>
<li>Не понимаю, как получить желаемый результат.</li>
<li>При очередном запуске не помнит, на чём я остановился до того.</li>
<li>Не прощает ошибок.</li>
</ul>
<p>Вот что увеличивает моё доверие:</p>
<ul>
<li>Программа угадывает мои предпочтения.</li>
<li>В сложной ситуации подсказывает, как мне лучше действовать.</li>
<li>Автоматизирует то, что я привык делать вручную.</li>
</ul>
<p>А как у вас? Поделитесь, интересно. Пишите в <a href="https://www.facebook.com/nalgeon/posts/1029905230444017">фейсбук</a> или <a href="https://t.me/nalgeon">телеграм</a></p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Люблю старые интерфейсы</title>
      <link>https://antonz.ru/old-interface/</link>
      <pubDate>Tue, 04 Apr 2017 12:42:27 +0000</pubDate>
      
      <guid>https://antonz.ru/old-interface/</guid>
      <description>Такие, знаете, немодные и слегка неказистые, которых давно не касалась рука дизайнера и разработчика.</description>
      <content:encoded><![CDATA[<p>Такие, знаете, немодные и слегка неказистые, которых давно не касалась рука дизайнера и разработчика.</p>
<p>К старому интерфейсу я привык. Пусть он не идеален, пусть заставляет выполнять лишние действия — зато я всё знаю, где и что лежит. Поэтому меня бесит Тинькофф: ребята как только закончат делать очередной интернет-банк, сразу начинают делать новый с нуля. Понимаю, lifetime learning и все дела, но я не готов каждый год осваивать ваш новый интерфейс.</p>
<div class="row">
<div class="col-xs-12 col-sm-10">
<figure>
  <img alt="Новый тормозной интерфейс" src="tinkoff.png" class="bordered">
  <figcaption>Новый, глючный, тормозной интерфейс. Зато сделан на модном фронтенд-фреймворке.</figcaption>
</figure>
</div>
</div>
<p>В старом интерфейсе проработаны сценарии использования. Пользователи достаточно капали на мозг дизайнеру, чтобы он протоптал в интерфейсе тропинки под их задачи. Пусть местами выглядит громоздко, зато могу добиться результата, не обращаясь в техподдержку. Хотите знать, что бывает с новыми модными интерфейсами, если они не поддерживают привычные сценарии — спросите у Яндекса с Кинопоиском.</p>
<p>В старом интерфейсе меньше багов. Большую часть давно починили, а новых не добавили, потому что дизайнер интерфейс не трогает. Да, мне может не хватать новых фич, но зато не придется через раз получать «что-то пошло не так». Слышите меня, Яндекс.Деньги?</p>
<div class="row">
<div class="col-xs-12 col-sm-8 col-md-6">
<figure>
  <img alt="Что-то пошло не так" src="yamoney.png">
</figure>
</div>
<div class="col-xs-12 col-sm-8 col-md-4">
    <div class="figcaption">Спасибо, очень помогли. 10% покупок вываливается в «техническую ошибку», зато выглядит стильненько.</div>
</div>
</div>
<p>Люблю старые интерфейсы.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Письма пользователям-отщепенцам</title>
      <link>https://antonz.ru/retention-letter/</link>
      <pubDate>Mon, 03 Apr 2017 12:27:00 +0000</pubDate>
      
      <guid>https://antonz.ru/retention-letter/</guid>
      <description>Одна из тёмных областей, в которые редко заглядывают дизайнеры — емейлы пользователям. Обычно это вотчина маркетологов. А зря</description>
      <content:encoded><![CDATA[<p>Одна из тёмных областей, в которые редко заглядывают дизайнеры — емейлы пользователям. Обычно это вотчина маркетологов. А зря, потому что письма от продукта или команды к пользователю — тоже интерфейс. А для людей, которые не используют сервис (зарегистрировались однажды и забыли) — это единственный интерфейс.</p>
<p>Дес Трейнор из Интеркома написал небольшую статью «A simple improvement to product announcements». Простое улучшение, о котором он говорит — писать разные письма для активных и неактивных пользователей.</p>
<p>Для активных: расскажите, как они могут получить больше от продукта (такие письма обычно и пишут).</p>
<p>Для неактивных совсем другое:</p>
<ul>
<li>представьтесь (они вас не знают),</li>
<li>объясните, что делает продукт (они давно забыли),</li>
<li>расскажите, зачем вы пишете,</li>
<li>мотивируйте дать вам ещё один шанс.</li>
</ul>
<p class="big">
<a href="https://blog.intercom.com/simple-improvement-product-mails/">A simple improvement to product announcements</a>
</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Человеческого фактора не существует</title>
      <link>https://antonz.ru/human-factor/</link>
      <pubDate>Mon, 27 Mar 2017 09:27:00 +0000</pubDate>
      
      <guid>https://antonz.ru/human-factor/</guid>
      <description>Виновата система, так что это «фактор системы» или «фактор интерфейса».</description>
      <content:encoded><![CDATA[<p>Когда случается авария из-за ошибки человека, говорят «человеческий фактор». А правильнее сказать — «фактор системы» или «фактор интерфейса».</p>
<p>Человек всегда действует наилучшим образом, исходя из своего понимания ситуации. Если он серьезно ошибся — значит, неправильно понял ситуацию. В случае с компьютерными интерфейсами виновата в этом система, не человек.</p>
<p>Сотрудник Додо-пиццы ошибся в настройках, и компания вернула клиентам 8 миллионов рублей за уже выполненные заказы. Виновата система: у человека в принципе не должно быть возможности запустить такой огромный возврат.</p>
<p>Я пять минут заполнял форму заказа, потом случайно что-то нажал, и форма обнулилась. Виноват сайт: должен автоматически сохранять введённые данные.</p>
<p>Мой знакомый включил не ту конфорку на плите и сжёг кастрюлю. Виноват проектировщик: расположение ручек должно соответствовать конфоркам.</p>
<p>Я опечатался в адресате и емейл ушёл не тому человеку. Я сразу заметил это, но было поздно — письмо отправлено. Виновата почтовая программа: любые действия должны быть обратимы. И кстати, «отозвать сообщение» в Аутлуке не работает.</p>
<p>В заблуждении человека виноват интерфейс. Поэтому:</p>
<ul>
<li>страхуйте людей от ошибок,</li>
<li>не теряйте пользовательские данные,</li>
<li>наглядно показывайте ситуацию,</li>
<li>помогайте исправить сделанное.</li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
<p class="figcaption">
<em>Обложка — <a href="https://xkcd.com/1700/">xkcd</a></em>
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Купить в 1 клик</title>
      <link>https://antonz.ru/1-click/</link>
      <pubDate>Thu, 23 Mar 2017 15:20:00 +0000</pubDate>
      
      <guid>https://antonz.ru/1-click/</guid>
      <description>Покупку одной кнопкой, без оформления заказа, придумал лично Джеф Безос, основатель Амазона. Придумал, поставил задачу, сделали. Презентуют.</description>
      <content:encoded><![CDATA[<p>Покупку одной кнопкой, без оформления заказа, придумал лично Джеф Безос, основатель Амазона. Придумал, поставил задачу команде, взяли в работу, сделали. Презентуют. Безос заходит на страницу книги, жмёт «купить в 1 клик» и… Получает окошко с подтверждением «Точно купить? Да / Нет».</p>
<p><img src="1-click.png" alt="Купить в 1 клик"></p>
<p>Джеф сожрал продакт-менеджера, а разработчиков заставил окошко убрать. Так на Амазоне появилась покупка в 1 клик.</p>
<p>А кнопка «купить в 1 клик», которая торчит в каждом втором интернет-магазине, на самом деле означает «перезвоните мне». М-м-маркетологи, м-м-мать.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Хороший продукт «прокачивает» пользователей</title>
      <link>https://antonz.ru/badass/</link>
      <pubDate>Thu, 16 Mar 2017 16:44:00 +0000</pubDate>
      
      <guid>https://antonz.ru/badass/</guid>
      <description>Каждый продуктолог знает, что приложение надо строить не от фич, а от сценариев использования. Кэти Сьерра предлагает сделать следующий шаг.</description>
      <content:encoded><![CDATA[<p><em>Это заметка из серии «60 секунд». В ней я публикую избранные короткие эссе, обычно со ссылкой на рекомендуемый материал. Больше таких заметок — <a href="https://t.me/dangry">в телеграме</a></em></p>
<p>Каждый продуктолог и дизайнер знает, что приложение надо строить не от фич, а от целевой аудитории и сценариев использования. А я на днях прочитал запись выступления Кэти Сьерры, где она предлагает сделать следующий шаг.</p>
<p>Кэти говорит: человек не просто хочет решить задачу. Он хочет стать лучше сам, стать крутым в некоторой области, стать экспертом.</p>
<p>Люди рассказывают о продукте, если он помог им почувствовать себя крутыми. У Тильды отличное «сарафанное радио», не потому что у нее вагон фич, а потому что она помогает любителю сделать профессиональный и красивый сайт за один день.</p>
<p>Востребованность продукта зависит от результатов его пользователей. Желанное приложение не просто решает задачу пользователя, а «прокачивает» его, делает экспертом.</p>
<p>Вот как сделать пользователя экспертом:</p>
<ol>
<li>
<p>Дать как можно больше примеров «как надо». Например, приложение для медитации Headspace полностью состоит из примеров: надеваешь наушники и делаешь, что говорят. И это намного быстрее обучает правильной медитации, чем любой другой подход.</p>
</li>
<li>
<p>Устроить практику из серии коротких упражнений с моментальной обратной связью и возрастающим уровнем сложности. Практика легко встраивается в обучающие приложения вроде тренажера английского, но с «обычными» приложениями сложнее. Наверно, для них подойдут обучающие мини-сессии, расставленные в подходящих местах продукта.</p>
</li>
<li>
<p>Нарисовать карту пути совершенствования, которая отвечает на вопрос «каких результатов я смогу добиться и когда». Тоже больше подходит для обучающих приложений, мне кажется. Для обычных приложений в голову приходят только программы лояльности. Например, издательство МИФ наглядно показывает путь постоянного покупателя к максимальной скидке в 15%.</p>
</li>
</ol>
<p>Я думаю, что идея о «прокачке» проходит не для каждого приложения. Например, не могу себе представить контекст, в котором хочет стать крутым пользователь Убера или антивируса Касперского. Но для многих продуктов это кажется хорошим подходом.</p>
<p>Если хотите сделать желанный продукт — помогите пользователю стать лучшей версией себя.</p>
<p class="big">
<a href="https://habrahabr.ru/post/231711/">Building the minimum Badass User</a>
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Редактура и голосовой интерфейс московского метро</title>
      <link>https://antonz.ru/metro-voice-interface/</link>
      <pubDate>Tue, 14 Mar 2017 07:11:00 +0000</pubDate>
      
      <guid>https://antonz.ru/metro-voice-interface/</guid>
      <description>Большой кусок интерфейса метро — голосовые объявления. С ними есть две большие проблемы.</description>
      <content:encoded><![CDATA[<p><img src="metro-voice-interface.png" alt="Голосовой интерфейс московского метро"></p>
<p class="figcaption"><a href="https://xkcd.com/1684/">xkcd</a></p>
<p>Большой кусок интерфейса метро — голосовые объявления. Они звучат в поездах и переходах, с их помощью метрополитен доносит до пассажиров всякие правильные мысли. С объявлениями есть две большие проблемы:</p>
<ol>
<li>Реклама. Её просто не должно быть — никто не имеет права гадить мне в мозг без моего согласия.</li>
<li>Плохой текст. О нём и хочу поговорить.</li>
</ol>
<p>Вы, может быть, слышали об инфостиле и проекте «пиши, сокращай» Максима Ильяхова. Там много пишут о вычистке текста от мусора. Так вот, объявления метрополитена состоят из мусора процентов на 90. Я езжу в метро каждый день и очень от этого страдаю.</p>
<p>Канцеляризмы и мусорные слова в тексте мешают, но при некотором навыке их легко отсеять при чтении. В голосовых объявлениях пропустить шлак невозможно, приходится каждый раз выслушивать такое:</p>
<blockquote>
<p>Уважаемые пассажиры, обращаем ваше внимание, что за нахождение в поезде, следующем в тупик, предусмотрена административная ответственность в соответствии с законодательством Российской Федерации.</p>
</blockquote>
<p>А хочется вместо этого слышать:</p>
<blockquote>
<p>Пора выходить! Поезд едет в депо.</p>
</blockquote>
<p>Вот моё правило для голосовых объявлений:</p>
<blockquote class="big">Коротко и по делу</blockquote>
<p>Написал серию статей, как применить правило в метро:</p>
<ul>
<li><a href="/metro-reason/">По техническим причинам</a></li>
<li><a href="/terminal-station/">Пурга о конечной станции</a></li>
<li><a href="/metro-brain-slug/">Мозговые слизни на эскалаторе</a></li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Главное правило выбора в интерфейсе</title>
      <link>https://antonz.ru/choice/</link>
      <pubDate>Thu, 09 Mar 2017 07:54:20 +0000</pubDate>
      
      <guid>https://antonz.ru/choice/</guid>
      <description>Каждый раз, когда вы просите пользователя сделать выбор — заставляете принимать решение. Это не всегда плохо.</description>
      <content:encoded><![CDATA[<p>Главное правило выбора из нескольких вариантов в интерфейсе сформулировал Джоэл Спольски 16 лет назад:</p>
<blockquote>
<p>Каждый раз, когда вы просите пользователя сделать выбор — заставляете принимать решение. Это не всегда плохо. Но точно плохо, если выбор не относится к задаче, которую решает человек. Лучше сделать выбор за пользователя везде, кроме его основной задачи.</p>
</blockquote>
<h2 id="второстепенная-задача--выбор-делает-программа">Второстепенная задача → выбор делает программа</h2>
<p>Делайте выбор за пользователя везде, где это не относится к его цели. Пример «как не надо»: когда в первый раз запускаешь приложение в макоси, она спрашивает:</p>
<figure>
    <img alt="Точно запустить приложение?" src="choice-confirm.png">
    <figcaption>Это приложение скачано из интернета. Точно запустить?</figcaption>
</figure>
<p>Такой выбор НЕ относится к моей цели, поэтому делать его я не хочу, и этого дурацкого окна в природе существовать не должно. (Отдельно оцените гениальность формулировки: «скачано из интернета», ну надо же! Откуда оно ещё могло взяться, самозародиться в недрах операционной системы что ли?)</p>
<details>
<p><summary>Если от предыдущего абзаца в вас бурлит негодование, нажмите сюда</summary></p>
    <p>Конечно, я в курсе, что в данном случае Эпл имеет в виду «скачана не из апстора». Но это ровно ничего не меняет. Смотрите сами:</p>
    <ul>
        <li>1. Апстор — это тоже интернет. Противопоставление между апстором и интернетом существует только в голове сотрудников Эпла.</li>
        <li>2. Противопоставление «апстор—интернет» можно было бы понять, если процессы установки приложения из апстора и вручную были полностью идентичны и отличались только последним шагом. Но они совершенно разные.</li>
        <li>3. Я знаю, что приложение из интернета. Алё, я сам его оттуда скачал.</li>
        <li>4. Человек в здравом уме и твердой памяти, который только что сознательно запустил приложение, не передумает и не нажмёт на «ой, не надо».</li>
        <li>5. Приложение «из интернета» не менее безопасно, чем приложение из апстора. Если бы оно было от неидентифицированного разработчика, макось вообще не дала бы его запустить (отдельная тема для разговора).</li>
    </ul>
    <p>Следовательно, для пользователя Эпловое предупреждение не имеет смысла.</p>
</details>
<p>Ещё пример «как не надо». Большинство магазинов умеют автоматически определять город посетителя по айпи-адресу. Но некоторые делают это так:</p>
<div class="row">
    <div class="col-xs-12 col-sm-10 col-md-6">
        <figure>
            <img alt="Ваш город — Москва?" src="choice-city-3.png">
            <figcaption>Не думаю, что задача сыграть в «угадайку» — основная для покупателя магазина</figcaption>
        </figure>
    </div>
</div>
<p>Хороший магазин определяет город <em>молча</em>. Логичный вопрос: что делать, если машина ошиблась и сделала неправильный выбор? Что, если город неправильный? Ну, тогда человек просто сам укажет правильный вариант, когда это потребуется — когда дело дойдёт до покупки. Ничего страшного.</p>
<p>Лучше угадать в 80% случаев и ошибиться в 20% (и дать возможность человеку исправить ошибку), чем в 100% случаев бесить людей неинтересным им выбором.</p>
<h2 id="основная-задача--выбор-делает-человек">Основная задача → выбор делает человек</h2>
<p>Если выбор напрямую относится к задаче пользователя — он полезен. Но всё равно хорошо выделить <em>основной</em> (по мнению программы) вариант. Например, Мейлчимп перед отправкой писем подсвечивает кнопку «Отправить», но рядом показывает серенькую «Запланировать» — на случай, если человек не хочет отправлять прямо сейчас.</p>
<p>Основной вариант — это либо <em>самый популярный</em>, либо <em>прошлый выбор</em>.</p>
<h3 id="самый-популярный-вариант">Самый популярный вариант</h3>
<p>По статистике использования или данным пользовательского тестирования. На карточке товара основное действие — добавить в корзину:</p>
<div class="row">
    <div class="col-xs-12 col-sm-10">
        <figure>
            <img alt="Самый популярный выбор" src="choice-primary.png" class="bordered">
            <figcaption>Основной вариант очевиден, но если человеку нужно отложить товар или добавить к сравнению — он догадается, как это сделать.</figcaption>
        </figure>
    </div>
</div>
<h3 id="прошлый-выбор">Прошлый выбор</h3>
<p>Выбор, который человек сделал раньше в аналогичной ситуации. Пользователь указал адрес при первом заказе — магазин использует его при следующих покупках:</p>
<div class="row">
    <div class="col-xs-12 col-sm-10">
        <figure>
            <img alt="Прошлый выбор" src="choice-autofill.png" class="bordered">
            <figcaption>Программа оставляет возможность изменить выбор — с прошлого раза обстоятельства могли измениться.</figcaption>
        </figure>
    </div>
</div>
<p>Пример на сочетание популярного варианта и прошлого выбора. Диалоговое окно печати:</p>
<div class="row">
    <div class="col-xs-12 col-sm-10 col-md-5">
        <figure>
            <img alt="Выбор параметров печати" src="choice-print.png" class="bordered">
        </figure>
    </div>
    <div class="col-xs-12 col-sm-10 col-md-6">
        <div class="figcaption">Принтер от прошлой печати. Страницы, количество копий и ориентация листа — умолчательные, наиболее типичные значения.</div>
        <br>
        <div class="figcaption">Возможно, программа не угадала с выбором, и пользователь хочет напечатать в ПДФ с альбомной ориентацией. Стоит ради этого блокировать кнопку «печатать», пока человек не указал принтер и остальные параметры? Нет, конечно. Если железяка ошиблась, человек исправит. Ничего страшного.</div>
    </div>
</div>
<h2 id="слишком-много-вариантов--выбор-делает-программа">Слишком много вариантов → выбор делает программа</h2>
<p>Иногда вариантов в основной задаче пользователя слишком много, поэтому выбор всё-таки приходится делать программе. Это характерно для медиа (новости, соцсети) и магазинов.</p>
<p>Обычно показывают «рекомендуемые» варианты на основе прошлых предпочтений пользователи (какие посты он лайкал или товары покупал). А поскольку люди не любят, когда им всё навязывают, программа оставляет иллюзию контроля (скрыть не понравившийся пост в Фейсбуке).</p>
<div class="row">
    <div class="col-xs-12 col-sm-6 col-md-4">
        <figure>
            <img alt="Иллюзия контроля ленты в Фейсбуке" src="choice-facebook.png">
        </figure>
    </div>
    <div class="col-xs-12 col-sm-6 col-md-6">
        <div class="figcaption">Иллюзия контроля над лентой фейсбука. Если выбрать вариант «Most Recent», фейсбук выключит «алгоритмическую» ленту и будет показывать все посты. Но недолго. Вскоре он молча вернёт настройку «Top Stories» и вас не спросит.</div>
    </div>
</div>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>Если вы проектируете обычные приложения, придерживайтесь правила Спольски:</p>
<ol>
<li>Делайте выбор за человека во второстепенных задачах.</li>
<li>Оставляйте ему выбор в основных задачах. Но подсвечивайте предпочтительный вариант.</li>
<li>В любой непонятной ситуации ориентируйтесь на прошлый выбор пользователя.</li>
</ol>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Если понравилась статья, подписывайтесь <span class="nowrap">на <i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
<figure>
    <img alt="Дизайнеры обсуждают юзабилити" src="choice-strip.png">
    <figcaption>
    <em>Обложка — <a href="https://xkcd.com/1804/">xkcd</a></em></figcaption>
</figure>
]]></content:encoded>
    </item>
    
    <item>
      <title>Правильные заметки к релизу</title>
      <link>https://antonz.ru/release-notes/</link>
      <pubDate>Wed, 08 Mar 2017 14:38:00 +0000</pubDate>
      
      <guid>https://antonz.ru/release-notes/</guid>
      <description>5 правил хороших заметок к релизу для апсторов.</description>
      <content:encoded><![CDATA[<p>На днях Ника Троицкая подняла тему пользы и шуточек в release notes. А сегодня я прочитал статью Роба Гила «As a Designer I want Better Release Notes», в которой он подробно и с примерами описал идеальные заметки к релизу для апсторов.</p>
<p>Вкратце:</p>
<ol>
<li>
<p>Первым абзацем — краткая суть изменений в релизе («добавили вход по отпечатку пальца»). Можно короткий список, если главных изменений несколько.</p>
</li>
<li>
<p>Не стесняйтесь написать, что весь релиз про исправление злого бага, если от него пострадали многие.</p>
</li>
<li>
<p>В конце оставьте адрес эл. почты для обратной связи. Роб говорит, это помогает от ругательных отзывов ツ</p>
</li>
<li>
<p>Явно разделите на секции: новые фичи, улучшения, багфиксы. Для подзаголовков используйте ПРОПИСНЫЕ. Для перечисления применяйте списки с булитами.</p>
</li>
<li>
<p>Добавьте немного настроения одной фразой (если хочется). Только не надо натужно шутить.</p>
</li>
</ol>
<p class="big">
<a href="https://uxdesign.cc/3e8c8c785231">As a Designer I want Better Release Notes</a>
</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Делайте пасхалки</title>
      <link>https://antonz.ru/easter-egg/</link>
      <pubDate>Tue, 28 Feb 2017 08:11:56 +0000</pubDate>
      
      <guid>https://antonz.ru/easter-egg/</guid>
      <description>Почему стоит закладывать «пасхальное яйцо» в каждый проект или даже отдельную задачу.</description>
      <content:encoded><![CDATA[<p>«Пасхальное яйцо» в программе — это такая неочевидная для других деталь, которая приятно греет вам сердце. Если потребитель заметит пасхалку — порадуется, а если нет — ничего страшного. Главное, вы знаете, что она есть.</p>
<p>Мне нравится закладывать пасхалки в каждый проект или даже отдельную задачу. Это не требует много времени, а результату придает какую-то особую душевность.</p>
<p>Пример: в ХФЛабс мы разрабатываем суровый корпоративный продукт для банков и страховых компаний. Я обычно пишу для него заметки к релизу. И в одном из релизов добавили новый тип документа, удостоверяющего личность: свидетельство о предоставлении временного убежища. Ну, я решил приложить картинку для наглядности:</p>
<figure>
  <img alt="Пасхалка с убежищем" src="easter-egg-1.png" class="img-bordered">
  <figcaption>Бедняга наконец-то получил документы.</figcaption>
</figure>
<p>Если читатель не заметит пасхалку, ничего — иллюстрация всё равно выполняет свою функцию. Но мне радостно знать, что она здесь ツ</p>
<p>Или ещё: в том же самом корпоративном продукте живёт котик. Это не слишком типично для энтерпрайзного софта, и если пользователи его находят — приятно удивляются.</p>
<figure>
  <img alt="Пасхалка с котом" src="easter-egg-2.png" class="img-bordered">
  <figcaption>Прикорнул <a href="http://hflabs.ru/products-services/common-client/functions/">на карточке клиента</a>.</figcaption>
</figure>
<p>Пасхалки можно встраивать в интерфейс, текст, изображения. Да даже в сугубо технические штуки. Например, на сайте «интерфейсов без шелухи» адреса страниц имеют особый смысл, заметит который один человек на миллион. А в глубине многомегабайтных исходников, в функции сборки программы, я как-то наткнулся на комментарий «make love, not WAR» (шутка будет понятна только джавистам).</p>
<p>По моей экспертной оценке, использование пасхалок повышает продолжительность жизни на 4,2%. Делайте пасхалки!</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Что-то пошло не так</title>
      <link>https://antonz.ru/oops/</link>
      <pubDate>Wed, 22 Feb 2017 13:12:00 +0000</pubDate>
      
      <guid>https://antonz.ru/oops/</guid>
      <description>Чуть ли не самая болезненная тема в проектировании интерфейсов — обработка ошибок. Чтобы сделать лучше, используйте простую эвристику для сообщений об ошибках.</description>
      <content:encoded><![CDATA[<p>Чуть ли не самая болезненная тема в проектировании интерфейсов — обработка ошибок. Во-первых, дизайнеры не любят о ней задумываться. Во-вторых, не могут предусмотреть всё многообразие проблемных ситуаций. В-третьих, на это вечно не хватает времени.</p>
<p>В результате дизайном сообщений об ошибках занимаются разработчики. Получается обычно плохо, потому что эти ребята мыслят с другой стороны экрана — их больше заботит система, а не пользователь.</p>
<p>Поэтому рекомендую подсунуть вашим знакомым разработчикам короткую вводную статью Рафаля Безымянного «How to Communicate Errors Well». Автор предлагает простую эвристику для сообщений об ошибках:</p>
<ol>
<li>Что случилось? На языке пользователя и как можно конкретнее (не «что-то пошло не так», и даже не «проблема с банковской картой» — а «не хватает денег на карте»).</li>
<li>Какие последствия? «Оплата не прошла, но деньги остались на карте».</li>
<li>Что человеку теперь делать? «Пополните карту и повторите попытку, оплатите Яндекс-деньгами или купите в рассрочку».</li>
</ol>
<p>Ну и понятно, что лучше всего ошибки предотвращать, а не обрабатывать их последствия. Но это уже другая история ツ</p>
<p class="big">
<a href="https://latenightcoding.co/how-to-write-good-error-messages/">How to Communicate Errors Well</a>
</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Что подарить дизайнеру интерфейсов</title>
      <link>https://antonz.ru/gift-for-designer/</link>
      <pubDate>Tue, 21 Feb 2017 08:42:44 +0000</pubDate>
      
      <guid>https://antonz.ru/gift-for-designer/</guid>
      <description>Я спросил 1300 дизайнеров о профессиональном подарке, который они больше всего хотят получить. И вот что они ответили.</description>
      <content:encoded><![CDATA[<p>UPD: а вот <a href="https://vc.ru/flood/55198">вариант 2019 года</a></p>
<p>Я спросил 1300 дизайнеров о профессиональном подарке, который они больше всего хотят получить. И вот что они ответили.</p>
<figure>
  <img alt="Лучший подарок дизайнеру" src="gift.png" class="img-bordered">
  <figcaption>Речь в опросе шла о подарках, которые существуют в электронном виде.</figcaption>
</figure>
<p>Сильнее всего дизайнеры мечтают о хорошей книге, хотя с радостью примут в подарок и обучающий курс. Намного меньше людей хотят получить программу или подписку на сервис.</p>
<p>А вот топ-3 подарков в каждой категории.</p>
<h2 id="книга">Книга</h2>
<div class="row">
<div class="col-xs-10 col-sm-4">
<figure>
  <a href="http://artgorbunov.ru/projects/book-ui/" class="img-inline">
  <img alt="Книга «Пользовательский интерфейс»" src="gift-book-birman.jpg">
  </a>
  <figcaption><a href="http://artgorbunov.ru/projects/book-ui/">Пользовательский интерфейс</a> Бирмана</figcaption>
</figure>
</div>
<div class="col-xs-10 col-sm-4">
<figure>
  <a href="http://artgorbunov.ru/projects/book-typography/" class="img-inline">
  <img alt="Книга «Типографика и вёрстка»" src="gift-book-gorbunov.jpg">
  </a>
  <figcaption><a href="http://artgorbunov.ru/projects/book-typography/">Типографика и вёрстка</a> Горбунова</figcaption>
</figure>
</div>
<div class="col-xs-10 col-sm-4">
<figure>
  <a href="http://www.mann-ivanov-ferber.ru/books/o-shrifte/" class="img-inline">
  <img alt="Книга «О шрифте»" src="gift-book-spiekermann-.jpg">
  </a>
  <figcaption><a href="http://www.mann-ivanov-ferber.ru/books/o-shrifte/">О шрифте</a> Шпикерманна</figcaption>
</figure>
</div>
</div>
<p>«<a href="http://artgorbunov.ru/projects/book-ui/">Пользовательский интерфейс</a>» — электронный учебник для всех, кто причастен к созданию продуктов. В книге последовательно раскрываются ключевые принципы хорошего интерфейса. Они работали двадцать лет назад и будут работать через двадцать лет. Поэтому каждый показан и на исторических, и на современных примерах.</p>
<p>«<a href="http://artgorbunov.ru/projects/book-typography/">Типографика и вёрстка</a>» — электронный учебник для дизайнеров, редакторов и разработчиков. Последовательно отвечает на вопрос <em>как</em>. Автор вводит принципы модульности и якорных объектов, правило внутреннего и внешнего. Затем шаг за шагом наглядно объясняет, как добиться аккуратной и плотной вёрстки сайтов, сервисов и СМИ.</p>
<p>«<a href="http://www.mann-ivanov-ferber.ru/books/o-shrifte/">О шрифте</a>» — это введение в типографику на простых и привычных примерах. Автор рассказывает, откуда взялось множество разных гарнитур, когда и как их использовать.</p>
<h2 id="курс">Курс</h2>
<div class="row">
<div class="col-xs-12 col-sm-4">
<figure>
  <a href="http://netology.ru/programs/ui-ux" class="img-inline">
  <img alt="Курс «Проектирование интерфейсов»" src="gift-course-netology.jpg">
  </a>
</figure>
</div>
<div class="col-xs-12 col-sm-8">
  <div>
  <a href="http://netology.ru/programs/ui-ux">Проектирование интерфейсов</a> от Нетологии
  </div>
  <div>Курс для начинающих, учит процессу проектирования от анализа требований до тестирования.
  </div>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-4">
<figure>
  <a href="https://skillbox.ru/motion/" class="img-inline">
  <img alt="Курс «UI-анимация»" src="gift-course-aic.jpg">
  </a>
</figure>
</div>
<div class="col-xs-12 col-sm-8">
  <div>
  <a href="https://skillbox.ru/motion/">UI-анимация</a> от AIC
  </div>
  <div>Учит создавать анимацию в интерфейсах и презентовать клиентам. Используются инструменты After Effects, Principal, Atomic.io и Webflow.
  </div>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-4">
<figure>
  <a href="http://imaxure7.projectorat.ru" class="img-inline">
  <img alt="Курс «Прототип интернет-магазина в Axure 7 с нуля»" src="gift-course-projectorat.jpg">
  </a>
</figure>
</div>
<div class="col-xs-12 col-sm-8">
  <div>
  <a href="http://imaxure7.projectorat.ru">Прототип интернет-магазина в Axure</a> от Проектората
  </div>
  <div>Учит основам работы с Axure на примере интернет-магазина. Автор с нуля создаёт прототип, попутно объясняя, как работают те или иные части Axure.
  </div>
</div>
</div>
<h2 id="инструмент">Инструмент</h2>
<div class="row start-xs center-sm between-sm">
<div class="col-xs-12 col-sm-3">
<figure>
  <a href="https://sketchapp.com" class="img-inline">
  <img alt="Sketch" src="gift-tool-sketch.jpg">
  </a>
  <figcaption><a href="https://sketchapp.com">Sketch</a></figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-3">
<figure>
  <a href="http://principleformac.com" class="img-inline">
  <img alt="Principle" src="gift-tool-principle.jpg">
  </a>
  <figcaption><a href="http://principleformac.com">Principle</a></figcaption>
</figure>
</div>
<div class="col-xs-12 col-sm-3">
<figure>
  <a href="http://www.adobe.com/ru/creativecloud.html" class="img-inline">
  <img alt="Adobe Creative Cloud" src="gift-tool-adobe.jpg">
  </a>
  <figcaption><a href="http://www.adobe.com/ru/creativecloud.html">Adobe Creative Cloud</a></figcaption>
</figure>
</div>
</div>
<p><a href="https://sketchapp.com">Sketch</a> — векторный редактор, специально созданный для дизайнеров интерфейсов. Многие специалисты перешли на него и забыли продукцию Adobe как страшный сон.</p>
<p><a href="http://principleformac.com">Principle</a> — инструмент прототипирования интерфейсов с упором на анимацию. Умный микс между Sketch, Keynote, Flash и After Effects.</p>
<p><a href="http://www.adobe.com/ru/creativecloud.html">Adobe Creative Cloud</a> — подписка на линейку продуктов Adobe для дизайнеров и художников. Photoshop, Lightroom, Illustrator, Adobe Premiere Pro, InDesign, Experience Design.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Теперь вы знаете, что подарить коллеге-дизайнеру. Или чем себя любимого порадовать ツ</p>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Говорите громче!</title>
      <link>https://antonz.ru/louder/</link>
      <pubDate>Tue, 14 Feb 2017 12:06:00 +0000</pubDate>
      
      <guid>https://antonz.ru/louder/</guid>
      <description>Как рассказать о проекте в интернете, чтобы вас услышали.</description>
      <content:encoded><![CDATA[<p>Есть одна проблема у людей, которые делают сайд-проекты: забывают рассказать о сделанном. Особенно выражена у программистов, но у дизайнеров тоже встречается.</p>
<p>Сделал человек годную штуку, молодец. Теперь надо бы помочь миру узнать о ней. Наш герой пишет в любимую соцсеть «я сделялъ», получает десять лайков от друзей и один комментарий. Всё.</p>
<p>Так бывает чаще всего. Но сегодня мне повезло наткнуться на контрпример: отличное и содержание, и подача работы.</p>
<div class="boxed" style="margin-bottom: .8em;">
<h3>Рассказ о проекте здорового человека</h3>
<p><a href="http://alexanderkatin.ru/">Александр Катин</a> разработал плагин для скетча, который задаёт простые пропорции для слоёв (1:1, 2:1, 4:3, 16:9).</p>
<p>Смотрите, что он сделал дальше:</p>
<ol>
  <li>Оформил <a href="https://github.com/lessthanzero/Formr">проект на гитхабе</a>.</li>
  <li>Сверстал <a href="https://readymag.com/sashakatin/527315/">промо-страницу</a>.</li>
  <li>Рассказал о проекте <a href="https://medium.com/sketch-app-sources/2fadac52c38a">в блоге</a>.</li>
</ol>
<a href="https://readymag.com/sashakatin/527315/" class="img-link"><img alt="Плагин Formr" src="louder.jpg"></a>
<p>Благодаря этому «еще один плагин» превратился в стоящую штуку, о которой хочется рассказывать.
</p>
</div>
<p>Эти три пункта — гигиенический минимум «пиара» собственной работы. А вот что еще можно сделать:</p>
<ul>
<li>Написать анонсы в профильные группы в соцсетях.</li>
<li>Написать ведущим профильных <a href="http://%D0%B4%D0%B5%D0%BC%D0%B8%D1%88.%D1%80%D1%84/mailbase.html">рассылок</a> и <a href="http://telegra.ph/Telegram-kanaly-pro-dizajn-produkty-i-strategiyu-07-18">телеграм-каналов</a>.</li>
<li>Написать редакторам сайтов, которые публикуют материалы по вашей теме (в случае с плагином для скетча — условный sketchapp.me).</li>
<li>Написать заметным в отрасли людям, которым сделанная штука может быть интересна.</li>
<li>Написать статью о проблеме, которую решает проект. Опубликовать на условном vc.ru.</li>
</ul>
<p>И да, на это уйдет куча времени. Больше, чем вы потратили на разработку проекта. И это не самая интересная работа для «творца». Но без этого ваша работа мало кому интересна.</p>
<p>Говорите громче!</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как взбодрить продакт-менеджера</title>
      <link>https://antonz.ru/product-cheer-up/</link>
      <pubDate>Mon, 13 Feb 2017 14:55:00 +0000</pubDate>
      
      <guid>https://antonz.ru/product-cheer-up/</guid>
      <description>У «долгоживущих» продакт-менеджеров со временем «замыливается» глаз. Чтобы бороться с этим, не обязательно менять сотрудников.</description>
      <content:encoded><![CDATA[<p>Главная проблема «долгоживущих» продакт-менеджеров и вообще любых сотрудников: со временем у человека «замыливается» глаз. Команда перестаёт видеть очевидные извне проблемы продукта и упускает возможности.</p>
<p>Чтобы бороться с этим эффектом, не обязательно менять сотрудников. Достаточно, чтобы периодически люди извне набегали на команду со своими идеями:</p>
<ul>
<li>владелец продукта, который хочет странного;</li>
<li>маркетолог, начитавшийся «30 свежайших трендов 2017 года»;</li>
<li>пользователи, которых бесят острые углы продукта;</li>
<li>конкуренты, которые глумятся над косяками в соцсетях.</li>
</ul>
<p>А задача продакта — быть открытым этому потоку, и выцеплять из него всё ценное.</p>
<p>Это сложно, потому что часто в ответ на предложение что-то изменить внутри поднимается волна гнева («да это дико! так нельзя!»). Такие моменты цените особенно — это моменты, когда вам пытаются порвать шаблон. Это шанс изменить продукт или процесс к лучшему.</p>
<p>О смене шаблона отлично рассказал Людвиг Быстроновский на лекции об интересе. Если не смотрели, рекомендую:</p>
<p class="big">
<a href="/interest/">Сделайте себе интересно</a>
</p>
<p>Хороший продакт ценит, когда ему рвут шаблон. А отличный — сам ищет такую возможность.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Программирование без интернета</title>
      <link>https://antonz.ru/programming-without-internet/</link>
      <pubDate>Fri, 10 Feb 2017 15:47:40 +0000</pubDate>
      
      <guid>https://antonz.ru/programming-without-internet/</guid>
      <description>Использование Stack Overflow размягчает мозг. Чтобы привести его в форму, используйте правило 5 минут без интернета.</description>
      <content:encoded><![CDATA[<figure>
  <img src="programming-without-internet.png">
  <figcaption><a href="https://xkcd.com/1758/">оригинал на xkcd</a></figcaption>
</figure>
<p>Топ-3 повседневных вопросов программиста:</p>
<ul>
<li>как сделать Х,</li>
<li>почему работает так, а не эдак,</li>
<li>как назвать переменную.</li>
</ul>
<p>С третьим вопросом всё понятно — он неразрешим в принципе. С первыми двумя интереснее.</p>
<p>Чтобы получить ответы, программисты девяностых читали исходники и руководства. Программисты двухтысячных начали активно гуглить. А затем в 2008 появился Stack Overflow, и стал «внешней памятью» для разработчиков. Теперь на 95% вопросов есть готовый ответ: первая ссылка из гугла на Стек.</p>
<h2 id="вчём-проблема-соstack-overflow">В чём проблема со Stack Overflow</h2>
<p>Вроде бы это хорошо: не надо полдня разбираться в причинах. Скопировал решение, вставил, работаем дальше. Но плохо то, что внешние решения проходят мимо головы. Когда человек в следующий раз столкнется с той же проблемой, он снова полезет на Стек. И снова. И снова.</p>
<p>Чужое решение не запоминается. Нет стимула разбираться, как оно устроено. Нет чувства удовлетворения, когда «заработало!». Не образуются в мозгу новые нейронные связи. А без этого нет и запоминания.</p>
<p>Дальше хуже. Когда злоупотребляешь готовыми ответами, перестаешь воспринимать аналогии и косвенные решения. Ищешь, чтобы прямо один-в-один было то, что тебе нужно. В долгой перспективе это тупик.</p>
<p>Да и разработка с постоянной беготнёй из кода в гугл — это не программирование, а ерунда какая-то.</p>
<h2 id="что-сэтим-делать">Что с этим делать</h2>
<p>Скачать документацию, чтобы была под рукой. Я рекомендую <a href="https://devdocs.io/">devdocs.io</a> — на выбор 130 языков и фреймворков, бесплатно.</p>
<p>Скачать исходники бинарных библиотек, которые используются в проекте. Актуально для языков вроде Java и C#. Толковые IDE умеют делать это самостоятельно.</p>
<p>Использовать <em>правило пяти минут</em>. Столкнулся с проблемой — пять минут пытаешься решить её без интернета. Разрешается использовать исходники, документацию и собственный мозг.</p>
<p>Для одноразовых задач правило пяти минут не действует. Если вы веб-разработчик, и вдруг вынуждены разбираться с багой компиляции lxml на OracleLinux — не начинайте с 800-страничного руководства, просто загуглите текст ошибки.</p>
<p>Пять минут без интернета можно превратить в десять или пятнадцать. Григорий Бакунов из Яндекса вообще рекомендует блокировать доступ к Stack Overflow на 45 минут каждого часа. Как по мне, это уже перебор.</p>
<p>Ещё по теме:</p>
<ul>
<li>Лекция Григория Бакунова «<a href="https://www.youtube.com/embed/h10qZGq36DE?start=5&amp;end=1228&amp;autoplay=1">Можно ли программировать без интернета</a>», 20 минут.</li>
<li>Выпуск подкаста Developer Tea <a href="https://spec.fm/podcasts/developer-tea/15165">Intentional Problem Solving</a>, 15 минут.</li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на <span class="nowrap"><i class="fas fa-kiwi-bird"></i> «<a href="tg://resolve?domain=ohmypy">Oh My Py</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Тяжелая правда о презентациях</title>
      <link>https://antonz.ru/slides/</link>
      <pubDate>Thu, 02 Feb 2017 16:04:00 +0000</pubDate>
      
      <guid>https://antonz.ru/slides/</guid>
      <description>Люди любят делиться презентациями. А зря.</description>
      <content:encoded><![CDATA[<p>Люди любят делиться презентациями. После каждой конференции организатор с трепетом выкладывает в соцсети пачку ПДФов, а люди не менее радостно репостят по всему фейсбуку и твитеру, и сохраняют в избранное. Я полагаю, что мотивация репостящего такая же, как с подборками «полезных ссылок» — человек думает, что презентация ему внезапно пригодится.</p>
<p>Тяжелая правда заключается в том, что презентация с конференции реально полезна только человеку, который слушал доклад. Потому что слайды дополняют выступление, сами по себе они — ничто. Поэтому мой вам совет:</p>
<ol>
<li>Наплюйте на презентации.</li>
<li>Сходите на доклад вживую или посмотрите запись.</li>
<li>По результатам напишите конспект и поставьте задачи в туду-лист.</li>
<li>Если не попали на доклад, а записи нет — см. пункт 1.</li>
</ol>
<p>Я знаю ровно одно исключение из правила: презентация «How to make Awesome Diagrams for your slides».</p>
<figure>
  <img alt="Как сделать приятные слайды" src="slides-font.jpg" class="img-bordered-thin">
  <figcaption>Один из советов — не мельчить</figcaption>
</figure>
<p></p>
<p>Вот почему её стоит посмотреть:</p>
<ol>
<li>Раскрывает тему, в которой «плавают» даже профессиональные дизайнеры — как рисовать схемы для презентаций. Люди постоянно забывают, что картинка проектора очень отличается от экранной. А тут все типичные ошибки разобраны и показано, как сделать хорошо.</li>
<li>Специально сделана не для выступления, а для чтения с экрана. Как статья, только с упором на визуальные образы.</li>
</ol>
<p>О чём рассказывает автор:</p>
<ul>
<li>какие линии и стрелки использовать;</li>
<li>как правильно показать иерархию и отношения между объектами;</li>
<li>как показать вложенность на сложных схемах;</li>
<li>сколько использовать цветов и каких;</li>
<li>какой взять шрифт.</li>
</ul>
<p>Автор сделал только одну ошибку — использовал SlideShare. Никогда его не берите, есть же прекрасный slides.com (к тому же, Росогород&hellip; ну вы в курсе).</p>
<p class="big">
<a href="http://www.slideshare.net/otikik/how-to-make-awesome-diagrams-for-your-slides">How to make Awesome Diagrams for your slides</a>
</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Конспект курильщика</title>
      <link>https://antonz.ru/summary/</link>
      <pubDate>Mon, 30 Jan 2017 11:44:57 +0000</pubDate>
      
      <guid>https://antonz.ru/summary/</guid>
      <description>Есть куча способов сделать плохой конспект книги, и только один — хороший.</description>
      <content:encoded><![CDATA[<p>Есть куча способов сделать плохой конспект книги, и только один — хороший.</p>
<h2 id="плохие-способы">Плохие способы</h2>
<ul>
<li><em>Выделить желтым <span class="text-highlight"> ключевые фразы </span></em> и благополучно забить на них. Выделяя маркером слова, вы чувствуете, будто уловили самое важное. Этим польза и ограничивается: больше никогда в жизни вы к выделенному не вернётесь.</li>
<li><em>Надергать цитат</em>. Надежда здесь на то, что перечитывая цитаты, по ассоциации вспомните что-то дельное. Не вспомните.</li>
<li>Написать длинный <em>список выводов без структуры и примеров</em>. Польза абстрактных идей околонулевая: если перечитывать их, придёте к выводу «ну да, и чего теперь».</li>
</ul>
<figure>
  <img class="bordered" alt="Конспект курильщика" src="summary-bad.png">
  <figcaption>Плохо: бесконечный список голых выводов или свалка из цитат.</figcaption>
</figure>
<h2 id="хороший-способ">Хороший способ</h2>
<ol>
<li>Записывайте выводы, но только те, что близки лично вам. Если с чем-то не согласны или не видите применения — в топку.</li>
<li>К каждому выводу добавляйте пример из жизни. Совсем хорошо, если не возьмете пример из книги, а по аналогии придумаете, как выглядела бы ситуация у вас.</li>
<li>Добавляйте осмысленные картинки.</li>
<li>Выделяйте разделы. Если считаете, что книга структурирована плохо (это часто бывает с американской бизнес-литературой) — придумайте свою структуру.</li>
<li>Поставьте в туду-лист задачи по записанному.</li>
</ol>
<figure>
  <img class="bordered" alt="Конспект здорового человека" src="summary-good.png">
  <figcaption>Хорошо: структура + выводы + примеры</figcaption>
</figure>
<p>Последний пункт — <em>поставить задачи в туду-лист</em> — самый важный. Даже идеальный конспект бесполезен, если в результате вы ничего не сделаете.</p>
<p>Придумайте, как изменить жизнь к лучшему, опираясь на прочитанное, и сформулируйте конкретное следующее действие:</p>
<blockquote>
<p>Проверить, чтобы текст ошибок на форме заказа отвечал на вопросы «что случилось» и «что мне с этим делать».</p>
</blockquote>
<blockquote>
<p>Показать макет страницы с тарифными планами Вике и Олегу и спросить, что им непонятно в описании тарифов.</p>
</blockquote>
<blockquote>
<p>Установить на телефон приложение Seven и опробовать завтра с утра.</p>
</blockquote>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Конспект здорового человека:</p>
<blockquote class="big">Книга → конспект с примерами → задачи в туду-листе</blockquote>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Нелогичный пользователь</title>
      <link>https://antonz.ru/irrational-user/</link>
      <pubDate>Mon, 23 Jan 2017 10:03:00 +0000</pubDate>
      
      <guid>https://antonz.ru/irrational-user/</guid>
      <description>Когнитивные искажения в приложении к дизайну продуктов.</description>
      <content:encoded><![CDATA[<p>The Irrational User Элвина Ся — лучшая прикладная статья о когнитивных искажениях из всех, что я пока встретил. Правда, всё равно не дотягивает до идеала: слишком много ложного «наукообразия», слишком мало применения к продуктом. Но кое-что есть. Советую пропускать введение и переходить сразу к разделу «Common cognitive biases to keep in mind when building products».</p>
<p>Практические выводы с моими примерами:</p>
<h2 id="собственное-мнение-уважают">Собственное мнение уважают</h2>
<p>Людям нравится, когда у продукта есть «мнение»: явно выраженная точка зрения на то, как делать правильно. Именно за счет выраженного мнения нишевый Simplenote (простые текстовые заметки с тегами и моментальной синхронизацией) оттяпал кусок аудитории у «универсального» Evernote. По этой же причине во время онбординга хорошо «провести за руку» пользователя по основному сценарию использования.</p>
<h2 id="сильные-эмоции-запоминаются">Сильные эмоции запоминаются</h2>
<p>Эффект пика: люди запоминают пиковый эмоциональный момент в работе с продуктом. Поэтому чем вычищать мелкие косяки, лучше так отполируйте главные фичи, чтобы они вызывали ощущение «ух ты, класс!». Особенно это касается онбординга, когда человек впервые использует продукт.</p>
<p>Например, приложение для медитации Headspace предлагает 10 бесплатных уроков, которые «вылизаны» настолько, что хочется рассказывать и рекомендовать друзьям. При этом качество платных уроков может быть ниже, но это уже не важно ツ</p>
<p>А Телеграм так быстро и безошибочно синхронизирует сообщения между разными девайсами, что после Скайпа это вызывает приятный шок. И ты легко прощаешь любые мелкие неудобства.</p>
<h2 id="когда-цель-рядом--стараются">Когда цель рядом — стараются</h2>
<p>Чем ближе цель, тем больше усилий готов приложить человек, чтобы её достичь. Поэтому показывайте пользователю маленькие, промежуточные цели и визуализируйте прогресс.</p>
<p>Очень здорово это делает сервис изучения слов Memrise. В нем заучивание каждого слова визуализировано как выращивание цветка (посадил семена → показался стебель → появились листья → тадам, распустился цветок! слово выучено). Плюс ежедневные цели, плюс еженедельное соревнование с друзьями — посмотрите, там много всего придумано.</p>
<p class="big">
<a href="https://medium.com/startup-grind/ad5f9fe7f59b">The Irrational User</a>
</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как собрать палитру из одного цвета</title>
      <link>https://antonz.ru/single-color-scheme/</link>
      <pubDate>Thu, 19 Jan 2017 15:36:00 +0000</pubDate>
      
      <guid>https://antonz.ru/single-color-scheme/</guid>
      <description>Вместо лирики о цветовых колёсах.</description>
      <content:encoded><![CDATA[<p>9 из 10 статей о работе с цветом в дизайне напоминают мне картинку «как нарисовать сову».</p>
<p>Сначала автор подробно и со вкусом рассказывает о HSB-модели и цветовом колесе. Наличие картинки с колесом строго обязательно, потому что без него статью не будут шарить и переводить, а если колесо в наличии — сразу видно: автор эксперт, статья стоящая.</p>
<p>Затем дело доходит до единственного вопроса, который на самом деле интересует читателя: «как мне подобрать палитру?», и тут автор стремительно сливается. Следует нечто невразумительное о комплементарных и смежных цветах, статья завершается отсылкой к генератору цветовых схем.</p>
<p>Приятное исключение — статья Эрика Кеннеди «Color in UI Design: A Practical Framework». Эрик пропустил лирику о колёсах, а вместо этого подробно ответил на один вопрос: как сделать из основного цвета красивую цветовую гамму.</p>
<p>Вот правила (но статью всё равно советую прочитать, в ней важные пояснения):</p>
<ul>
<li>
<p>Чтобы получить более темный оттенок: уменьшить яркость, увеличить насыщенность, чуть сдвинуть тон в сторону меньшей освещенности (0°, 120° или 240°)</p>
</li>
<li>
<p>Чтобы получить более светлый оттенок: увеличить яркость, уменьшить насыщенность, чуть сдвинуть тон в сторону большей освещенности (60°, 180°, 300°)</p>
</li>
</ul>
<p class="big">
<a href="https://medium.com/@erikdkennedy/e18cacd97f9e">Color in UI Design: A Practical Framework</a>
<br><small><a href="https://medium.com/usethics-doc/7d4f978b65c">на русском</a></small>
</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Единственная книга о продакт-менеджменте</title>
      <link>https://antonz.ru/only-productology-book/</link>
      <pubDate>Wed, 18 Jan 2017 10:20:00 +0000</pubDate>
      
      <guid>https://antonz.ru/only-productology-book/</guid>
      <description>Если вы дизайнер, разработчик или тестировщик, рекомендую прочитать ровно одну книгу по продакт-менеджменту: Intercom on Product Management</description>
      <content:encoded><![CDATA[<div class="row between-sm">
<div class="col-xs-12 col-sm-7">
<p>Если вы дизайнер, разработчик или тестировщик, рекомендую прочитать ровно одну книгу по продакт-менеджменту. Она удивительно толковая, при этом небольшая и бесплатная: Intercom on Product Management.</p>
<p>Книга учит:</p>
</div>
<div class="col-xs-10 first-xs col-sm-4 last-sm">
<a class="img-link" href="https://www.intercom.com/resources/books/intercom-product-management"><img alt="Intercom on Product Management" src="book.jpg"></a>
</div>
</div>
<ul>
<li>как сказать новой фиче «нет» (самый важный навык для любого, кто разрабатывает софт),</li>
<li>когда все-таки можно сказать ей «да»,</li>
<li>как сделать так, чтобы фичей пользовались, а не сложили на полку,</li>
<li>как улучшить существующие фичи,</li>
<li>как составить роадмап.</li>
</ul>
<p>Если вы начинающий продакт, тоже рекомендую.</p>
<p>Часто рекомендуют читать Inspired, Shipping Greatness или Hooked. Это всё хорошие книги для продактов. Но если хотите ровно одну книгу по продуктоводству — Intercom on Product Management.</p>
<p>ePub, Kindle, PDF. На английском. 65 страниц.</p>
<p>Раздают бесплатно, за емейл.</p>
<p class="big">
<a href="https://www.intercom.com/books/product-management">📖 Intercom on Product Management</a>
</p>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="fa fa-star-o color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Баг, не фича</title>
      <link>https://antonz.ru/bug-not-feature/</link>
      <pubDate>Mon, 16 Jan 2017 09:46:33 +0000</pubDate>
      
      <guid>https://antonz.ru/bug-not-feature/</guid>
      <description>Абсурдное поведение системы часто имеет логичное объяснение со стороны разработчиков. Но такая «логичность» — иллюзия.</description>
      <content:encoded><![CDATA[<p>Абсурдное поведение системы часто имеет логичное объяснение со стороны разработчиков. Под разработчиком имею в виду любого, кто смотрит «изнутри» — это может быть менеджер, дизайнер или тестировщик. Но такая «логичность» — иллюзия.</p>
<p>Захотел я в одном сервисе изменить имя в профиле. Было «Антон Жиянов», а я решил поставить просто «Антон», чтобы не так официально. Зашел, изменил, сохранил, получил ошибку:</p>
<p><img src="bug-not-feature-anton.png" alt="Имя «Антон» уже используется"></p>
<p>«Имя „Антон“ уже используется». Очевидный баг, верно? Ан нет.</p>
<p>Я написал разработчикам, и получил ответ основателя сервиса: это фича. Оказывается, некоторые злодеи-пользователи ставили себе имя «Администратор» и обманом входили в доверие более наивных пользователей. Мощное обоснование, а?</p>
<p>Со стороны понятно, что проблема «пользователи выдают себя за администраторов» не решается через «запретим людям иметь одинаковые имена». Но разработчику «изнутри» кажется, что всё логично.</p>
<p>К чему я это. Если вы только пришли в проект, самое время вскрывать нелепые «багофичи», пока у вас свежий взгляд. Выписывайте всё, что кажется странным. Расспрашивайте коллег о причинах. Думайте, как достичь цели по-человечески, без костылей.</p>
<p>А если вы на проекте давно, то не отметайте с ходу «глупые» вопросы новичков. Лучше задумайтесь — вдруг люди «снаружи» считают вашу фичу глупым багом?</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>2017</title>
      <link>https://antonz.ru/2017/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://antonz.ru/2017/</guid>
      <description></description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
    <item>
      <title>Сделайте себе интересно</title>
      <link>https://antonz.ru/interest/</link>
      <pubDate>Tue, 27 Dec 2016 13:28:57 +0000</pubDate>
      
      <guid>https://antonz.ru/interest/</guid>
      <description>Конспект лекции Людвига Быстроновского об интересе и контринтуитивном решении задач.</description>
      <content:encoded><![CDATA[<div class="row">
<div class="col-xs-12 col-md-10">
<p style="font-size: 1em"><em>Это конспект <a href="https://www.youtube.com/watch?v=CsFJzkNG5EY">лекции Людвига Быстроновского об интересе</a> и контринтуитивном решении задач. Людвиг рассказывает, когда возникает интерес, какие приемы помогают не потерять его, чем вреден «поток» и как разрыв шаблона приводит к успеху.</em></p>
</div>
</div>
<h2 id="нестарайтесь-инеищите-интерес-настороне">Не старайтесь и не ищите интерес на стороне</h2>
<blockquote>
<p>Плохой тамада очень старается сделать интересно, но получается ровно наоборот: он только всех раздражает.</p>
</blockquote>
<p>Не надо стараться «сделать себе интересно». Напряг в этом деле вызывает только скуку.</p>
<p>Не надо думать, что «интересно где-то там».</p>
<blockquote>
<p>Мозгу кажется, что интересно там, «где нас нет». Надоела работа? На другой наверняка будет лучше. Ведешь унылое существование? А вот когда был ребенком — как здорово было! (а дети, в свою очередь, считают, что самое интересное происходит во «взрослом» мире)</p>
</blockquote>
<p>Это ошибка. Самое интересное — здесь, только надо его увидеть. Да и не всегда получится «сбежать», резко изменив жизнь — может держать ипотека, трое детей  <del>или подписанный кровью контракт</del>.</p>
<h2 id="возьмите-сложную-задачу">Возьмите сложную задачу</h2>
<p>Чтобы стало интересно, нужна сложная задача. Сложнее, чем вы привыкли решать.</p>
<div class="row"><div class="col-xs-12 col-sm-8 article--big">
<p>Сравните две ситуации:</p>
<ol>
<li>Вы отправляетесь в кругосветное путешествие на год, чтобы развлечься.</li>
<li>Вы, как в фильме «<a href="https://www.kinopoisk.ru/film/6034/">Невероятная жизнь Уолтера Митти</a>», ищете по всему миру уникальную фотографию, понятия не имея, как это сделать.</li>
</ol>
<p>Какое приключение окажется интереснее?</p>
</div>
<div class="col-xs-8 col-sm-4"><figure><a class="img-inline" href="https://www.kinopoisk.ru/film/6034/"><img alt="Невероятная жизнь Уолтера Митти" src="interest-mitty.jpg" style="max-width: 200px;"></a></figure></div>
</div>
<p>Если вы понимаете, как решать задачу — становится неинтересно. Поэтому нужно что-то незнакомое:</p>
<blockquote>
<p> — Боже мой, как же я туда пойду? Я же ничего там не знаю!
— Отлично! Значит, тебе туда и дорога!</p>
</blockquote>
<h2 id="оставляйте-шансы-напобеду">Оставляйте шансы на победу</h2>
<p>При этом сложность не должна быть запредельной. Если вы понимаете, что шансов решить задачу нет, интерес пропадает. Если задача на грани возможного, но шансы есть — рождается кураж.</p>
<blockquote>
<p>Если 300 спартанцев должны остановить многотысячную армию персов в открытом поле — шансов ноль. Остается только уныло умереть.
Но в узком ущелье у них появилась возможность. И хотя решить задачу почти нереально, на кураже им это удалось.</p>
</blockquote>
<h2 id="постоянно-снижайте-напряг">Постоянно снижайте напряг</h2>
<blockquote>
<p>Задача тяжелая и не «идет». Значит, что? Еще поднажать! Работать по десять часов. Нет, по двенадцать! Без выходных! Думать только о задаче. Всё равно не получается? Думать больше, интенсивнее, яростнее!</p>
</blockquote>
<p>Так не работает. А работает ровно наоборот: решение сложной проблемы приходит, когда вы отдыхаете.</p>
<p>Снижайте напряг:</p>
<div class="row"><div class="col-xs-12 col-sm-8 article--big">
<ol>
<li>Не откладывайте задачу на последние дни перед дедлайном. Работайте над проблемой по 20 минут, но каждый день.</li>
<li>Сознательно закладывайте в план перерывы и нормальный сон.</li>
<li>Работайте с заказчиком без крупных сюрпризов. Вместо дедлайна на месяц или три — каждую неделю показывайте, что сделали.</li>
</ol></div>
<div class="col-xs-8 col-sm-4"><figure><a class="img-inline" href="https://www.headspace.com/"><img alt="Хедспейс для медитации" src="interest-meditate.jpg" style="max-width: 200px;"></a><figcaption>Самому Людвигу снижать напряг помогают <a href="https://www.headspace.com/">медитация</a>, спорт и путешествия.</figcaption></figure></div>
</div>
<p>Еще помогает не наказывать за ошибки. Где наказание, там возникает страх, а страх убивает интерес. Если же вместо наказания из ошибок делают выводы (как не повторить ту же ошибку или улучшить процесс) — это снижает напряг.</p>
<h2 id="будьте-осторожны-спотоком">Будьте осторожны с «потоком»</h2>
<p>В состоянии «потока» человек готов часами работать над задачей, не замечая ничего вокруг. Вроде бы это хорошо. Но если в вашу жизнь вместе с «потоком» приходит постоянный недосып, фаст-фуд и мегалитры кофе, то к черту такой поток.</p>
<p>Другая опасность «потока» в том, что он разделяет жизнь на «единственная офигенно интересная задача» и «остальной унылый шлак».</p>
<p>Лучше сознательно останавливайтесь и переключайте задачи. Так вас будет «переть» от всего, что вы делаете, а не только от чего-то одного.</p>
<h2 id="работайте-над-несколькими-задачами-циклично">Работайте над несколькими задачами циклично</h2>
<blockquote>
<p>Возьмем динамичный музыкальный клип. Он собран из четырех сцен: лес, ангар, бассейн, взлетное поле. Каждая сцена идет минуту. Если показывать их последовательно, зритель выключит клип через 30 секунд. Поэтому режиссер режет каждую сцену на кусочки по несколько секунд и перемешивает их: лес, ангар, бассейн, взлетное поле, лес, ангар&hellip; И зритель смотрит до конца.</p>
</blockquote>
<p>Возьмите четыре разных задачи или проекта и делайте их циклично:</p>
<ul>
<li>кусочек первой задачи;</li>
<li>кусочек второй;</li>
<li>третьей;</li>
<li>четвертой;</li>
<li>первой;</li>
<li>второй;</li>
<li>&hellip;</li>
</ul>
<p>Так ни одна из задач не осточертеет, а вы получите равномерный прогресс.</p>
<figure><img alt="Клип из выступления Людвига" src="interest-clip.jpg" style="border: 1px solid #908c85;"><figcaption>Выполняя рекомендацию Людвига, я сделал нарезку кадров из его выступления, чтобы вы не заскучали на длинной простыне текста.<figcaption></figure>
<p>Не старайтесь сразу организовать жизнь по единому расписанию. Заполняйте его постепенно: начните регулярно делать одно дело в неделю, добавьте еще одно, затем еще, и так далее.</p>
<p>Старайтесь включать в расписание задачи с физической активностью: бассейн, спортзал, велосипед.</p>
<h2 id="запланируйте-неожиданность">Запланируйте неожиданность</h2>
<p>Сюрприз приносит интерес и радость. Но не рассчитывайте, что он случится сам по себе.</p>
<blockquote>
<p>Человек — машина предсказаний. Если вам бросить мяч, вы поймаете его не там, где мяч находился в момент броска, а там, где ожидаете получить его через секунду.</p>
</blockquote>
<p>Каждую секунду мозг пытается предугадать, что случится в следующую секунду. Неожиданные для него события и создают сюрприз. Поэтому, чтобы получить сюрприз, используйте <em>генератор неожиданности</em>.</p>
<ul>
<li>Кто-то путешествует во всякие странные места, никогда не зная заранее, что там встретит.</li>
<li>Кто-то записывается в <a href="http://sportsection.moscow/">спортивную секцию</a>, где вид спорта становится для него сюрпризом (бац! тяжелоатлету достался балет).</li>
<li>Сам Людвиг не планирует заранее тему выступления. Например, для этого рассказа он попросил организаторов придумать ему тему.</li>
</ul>
<h2 id="удивите-себя">Удивите себя</h2>
<p>Все приемы, которые способны удивить, имеют в основе «а что, так можно было?». Это нечто странное, контринтуитивное.</p>
<blockquote>
<p>Вы привыкли на работе фигачить, пока фигачится. Вдруг прочитали о помидорном таймере: работать тайм-слотами по 20 минут, а между ними перерывы. Чудно, как это так — специально прерывать себя будильником? Попробовали, а и правда работает. Ух ты! А что, так можно было?</p>
</blockquote>
<p>Чтобы устроить себе интересную жизнь, выбирайте дикий, нелогичный, непривычный способ решения задачи. А когда привыкнете его использовать — сразу откажитесь. И выберите другой, не менее странный. Рвите шаблон самому себе.</p>
<blockquote class="big">Ключ к фонтану интереса — в контринтуитивности.</blockquote>
<p>Осторожно: смена шаблона раздражает вас самих и окружающих. Если в ответ на предложение что-то сделать внутри поднимается волна гнева («да это дико! так нельзя!») — это она, смена шаблона.</p>
<div class="row"><div class="col-xs-12 col-sm-8">
<blockquote><p>До 60-х годов 20 века спортсмены прыгали в высоту «перекидным» способом (оттолкнуться, перекинуть одну ногу, подтянуть вторую). А потом Дик Фосбери придумал прыгать спиной, последовательно перекидывая через перекладину голову, корпус, и наконец ноги.</p>
<p>Такой способ казался абсолютно диким («прыгать спиной вперед? чушь!»), но именно с ним Фосбери выиграл золотую медаль в 68 году и установил олимпийский рекорд. Теперь все спортсмены прыгают только способом фосбери-флоп.</p></blockquote>
</div>
<div class="col-xs-12 col-sm-4"><br><figure><img alt="Фосбери-флоп" src="interest-flop.jpg" style="max-width: 300px;"></a><figcaption>Идея прыгать спиной вперед в 60-х казалось абсурдом.</figcaption></figure></div>
</div>
<p>Предложите решение задачи, которое вызовет оторопь. «Поймайте» свой привычный ход мыслей и разорвите шаблон.</p>
<blockquote>
<p>Известный повар пишет книгу о готовке. Не идёт. Тогда он меняет тему и издает «300 способов испортить еду». Дико? Да. Но о книге с удовольствием пишут журналисты, а покупатели расхватывают в магазинах. Потому что автор разорвал шаблон и вызвал интерес.</p>
</blockquote>
<p>Неожиданный способ должен решать задачу. Если вы просто генерируете весёлый поток бреда, это не подойдет. Проверять работоспособность странной идеи хорошо на небольших прототипах, чтобы не потратить много времени и денег.</p>
<div class="row around-sm"><div class="col-xs-12 col-sm-8">
<div class="boxed">
<p><a href="https://www.youtube.com/embed/CsFJzkNG5EY?start=5103&end=5392&autoplay=1">Самые ядерные 5 минут лекции, где Людвиг рассказывает о разрыве шаблона</a>
</div><br></div>
</div>
<p>Не бойтесь предлагать людям странное. Да, убедить сложно. Но результат того стоит.</p>
<h2 id="ω-смешайте-приемы">Ω Смешайте приемы</h2>
<p>Чтобы сделать себе интересно, перемешайте приемы:</p>
<ul>
<li>Возьмите несколько сложных задач.</li>
<li>Работайте над ними кусочками, чередуйте.</li>
<li>Снижайте напряг: контрольные точки, перерывы, сон, спорт, медитация.</li>
<li>Используйте внешний генератор неожиданностей.</li>
<li>Ловите себя на привычном ходе мыслей, ломайте шаблон и предлагайте дикие решения.</li>
</ul>
<p>И наконец, не фокусируйтесь на интересе. Делайте всё перечисленное ради решения реальных задач, а не ради развлечения.</p>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтеась на <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как упростить пользователю жизнь</title>
      <link>https://antonz.ru/simplify-users-life/</link>
      <pubDate>Thu, 15 Dec 2016 09:25:00 +0000</pubDate>
      
      <guid>https://antonz.ru/simplify-users-life/</guid>
      <description>Хорошие продукты и интерфейсы упрощают жизнь. С этим обычно все согласны. Споры начинаются, когда придумывают, что и как упрощать.</description>
      <content:encoded><![CDATA[<p>Хорошие продукты и интерфейсы упрощают жизнь. С этим обычно все согласны. Споры начинаются, когда придумывают, что и как упрощать.</p>
<p>Например: есть сеть супермаркетов с доставкой на дом. Интерфейс — интернет-витрина, через которую люди заказывают продукты. Очевидное уже упростили: идти в магазин не надо, натыкал мышкой, картой оплатил, назавтра получил. Что дальше?</p>
<p>Дональд Норман, автор книги «Дизайн привычных вещей», выделяет четыре способа упростить задачу. Примерим на наш супермаркет и его лояльных клиентов — Валеру и Настю:</p>
<h2 id="снизить-умственную-нагрузку">Снизить умственную нагрузку</h2>
<p><em>Было:</em>
Валера каждый раз, как в первый раз, набирает корзину с помощью фильтров по категориям и поиска.</p>
<p><em>Стало:</em>
Магазин в первую очередь предлагает прошлые и «популярные» у Валеры товары. Если Валера каждый месяц заказывает бумажные полотенца, а тут вдруг забыл — напомнит. Предложит замену, если из ассортимента пропали любимые Валерины колбаски.</p>
<figure><img alt="Прошлые покупки" src="past-purchase.png"><figcaption>«Прошлые покупки», избранное, акции, новинки — эти разделы помогают покупателю не напрягать особо мозг. Еще помогает кнопка «повторить предыдущий заказ».</figcaption></figure>
<h2 id="показать-внутреннее-состояние">Показать внутреннее состояние</h2>
<p>У нашего супермаркета «окно» приезда курьера — два часа. Меньше ну никак не получается.</p>
<p><em>Было:</em>
Насте приходится эти два часа сидеть дома, как приклеенной, и гадать, когда явится курьер.</p>
<p><em>Стало:</em>
На сайте супермаркета Настя видит маршрут «своего» курьера на карте. Метки на маршруте — заказы и расположение курьера. По карте примерно понятно, когда курьер доберется до Насти, поэтому она спокойно планирует дела.</p>
<figure><img alt="Курьер на маршруте" class-"bordered" src="delivery-route.png"><figcaption>«Утконос» пытается показать курьера на маршруте, но делает это так топорно, что помощи клиенту никакой.</figcaption></figure>
<h2 id="взять-часть-задачи-насебя">Взять часть задачи на себя</h2>
<p><em>Было:</em>
Каждую пятницу Валера садится за компьютер, морщит мозг и заказывает продукты на неделю вперед. Ну, это в теории так. На практике Валера то вовсе забудет, то половину не закажет. Приходится потом бегать в магазин по соседству или баловать себя бутербродами с хлебом.</p>
<p><em>Стало</em>:
Магазин сам регулярно формирует заказ, с учетом Валериных вкусов, бюджета и желания хоть чуть-чуть сбавить пузо к лету. В пятницу присылает Валере емейл, Валера подтверждает жмаком кнопки, в субботу получает заказ.</p>
<h2 id="трансформировать-суть-задачи">Трансформировать суть задачи</h2>
<p>Понятно, что покупка продуктов для Насти — не самоцель. Цель у нее другая: вкусно и разнообразно питаться без вреда для фигуры и цвета лица, и не посвящать жизнь готовке. Поэтому теперь Настя выбирает готовое меню на неделю и получает расфасованный по блюдам заказ. Каждого продукта ровно столько, сколько необходимо. Для завтрака, обеда и ужина прилагается рецепт на 20–30 минут готовки. Удобно!</p>
<div class="row around-xs between-sm">
<div class="col-xs-12 col-sm-7"><figure><img alt="Меню на неделю" src="weekly-box-1.png"></figure></div>
<div class="col-xs-10 col-sm-5"><div class="figcaption">
По похожему принципу работают сервисы доставки еды на неделю — «Шефмаркет», «Партия еды» и другие.<br><br>
Но это только первый шаг, привязка к целям очень условная.</div>
</div>
</div>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Первый шаг — снизить умственную нагрузку — так или иначе осиливают все проектировщики.</p>
<p>Вторым — показать внутреннее состояние — в основном злоупотребляют: показывают «внутреннюю кухню» там, где она клиенту вообще не интересна.</p>
<p>Третий шаг — взять часть задачи на себя — это то, в чем хороший продукт опережает конкурентов.</p>
<p>Ну, а кто делает четвертый шаг — трансформирует суть задачи — срывает банк.</p>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как спроектировать удобный интерфейс для сложной предметной области</title>
      <link>https://antonz.ru/olga-romanova/</link>
      <pubDate>Thu, 01 Dec 2016 08:11:04 +0000</pubDate>
      
      <guid>https://antonz.ru/olga-romanova/</guid>
      <description>Ольга Романова из «Эльбы» — о сложных интерфейсах, иллюстрации и профессиональном росте.</description>
      <content:encoded><![CDATA[<div class="row">
<div class="col-xs-12 col-md-10">
<p style="font-size: 1em"><em>Сегодняшнее интервью — с Ольгой Коноваловой из «Эльбы». Ольга рассказывает, как спроектировать сложный UI и научиться иллюстрации с нуля. А еще делится гайдлайнами дизайна интерфейсов и стикерами с котами для телеграма ツ</em></p>
</div>
</div>
<h2 id="расскажи-осебе-вкратце-чем-занимаешься-где-инад-чем-работаешь-чем-увлекаешься-помимо-работы">Расскажи о себе вкратце: чем занимаешься, где и над чем работаешь, чем увлекаешься помимо работы</h2>
<div class="row"><div class="col-xs-12 col-sm-7"><p>Сейчас я проектирую интерфейсы в <a href="https://e-kontur.ru/">Эльбе</a>, это проект компании СКБ Контур. Компания крупная, в ней 4,5 тысячи человек, большая часть в Екатеринбурге. Эльба — небольшой проект, 25 человек.</p>
<p>Помимо работы увлекаюсь каллиграфией, леттерингом. Немного осваиваю иллюстрацию, какое-то время назад активно рисовала комиксы у себя в блоге, сейчас меньше, возможно, это временно и меня заново захватит :) Иногда пишу рецензии на книги.</p></div>
<div class="col-xs-8 col-sm-offset-1 col-sm-4"><figure><a class="img-inline" href="http://cat-in-cap.ru/"><img alt="Ольга Коновалова" src="oromanova-avatar.jpg" style="max-width: 200px;"></a><figcaption><a href="http://cat-in-cap.ru/">Ольга Коновалова</a><br>Иллюстрации в статье нарисованы Ольгой</figcaption></figure></div>
</div>
<h2 id="тыпроектируешь-интерфейсы-эльбы-вконтуре-расскажи-обэтом-проекте">Ты проектируешь интерфейсы Эльбы в Контуре. Расскажи об этом проекте?</h2>
<p>В Эльбе я полгода, а до этого 4,5 года проектировала Контур.Бухгалтерию. Сервис помогает предпринимателям и небольшим организациям вести свои дела и отчитываться перед государством. Это ведение бухгалтерии, понятное простым смертным. Не надо быть бухгалтером 80 уровня, чтобы разобраться.</p>
<figure>
    <img alt="Директор без Эльбы и с ней" src="oromanova-manager.jpg">
    <figcaption>Образ «директора без Контура» потряс бизнес-круги Екатеринбурга и чуть не привел к отставке главы региона (на самом деле нет).</figcaption>
</figure>
<p>Для директора бухгалтерия — это целый новый мир. Мы стараемся упрощать, чтобы пользователи даже не задумывались, как что в бухгалтерии работает, не нагружаем сложными знаниями и предметкой. Владельцы бизнеса занятые ребята, зачем им это. Лучше обойти непонятное, сделать как можно проще. Тут нет задачи обучить бухгалтерии, задача — как можно меньше с ней знакомить. Где-то о чем-то можно умолчать. Главное, чтобы директор вовремя сдавал отчетность, и легко решал свои рабочие задачи самостоятельно.</p>
<h2 id="эльба-известна-своим-удобным-ичеловечным-интерфейсом-как-вам-это-удается">Эльба известна своим удобным и человечным интерфейсом. Как вам это удается?</h2>
<p>Во-первых, мы достаточно хорошо знаем своего пользователя. В этом помогают юзабилити-тестирования, опросы, информация из техподдержки, аналитика и статистика.</p>
<p>На тестированиях показываем пользователю как кликабельные прототипы, так и работающий сервис. Иногда после тестирования концепция сильно меняется, прототип перерисовываем и заново тестим. Но чаще всего просто вносим правки, и макет идет в разработку.</p>
<figure>
    <img alt="Пользовательское тестирование" src="oromanova-usertesting.png">
    <figcaption>Простые гипотезы Ольга проверяет «коридорным» тестированием, штуки посложней — на исследованиях пользователей.</figcaption>
</figure>
<p>Техподдержка у Эльбы круглосуточная и качественно хорошая. Это тоже наше преимущество. Информация идет из звонков, с форм обратной связи, почты и с еще одного интересного инструмента — лайков. На каждой странице сервиса развешаны кнопочки: с пальцем вверх, пальцем вниз и конвертиком. Задумывалось это как быстрая обратная связь — нравится или нет. В жизни же пользователи пишут там любые свои вопросы, просьбы о помощи. То есть приходится активно мониторить и этот канал, а не просто изредка анализировать.</p>
<p>Второе, что помогает делать Эльбу удобной — это офигенная вовлеченность каждого члена команды во все, что происходит. Не только проектировщику и менеджеру есть дело до пользователя, каждый принимает активное участие в том, чтобы сделать Эльбу чуть лучше.</p>
<blockquote class="big">Мы делаем сервис, которым сами бы захотели пользоваться.</blockquote>
<p>Например, один тестировщик предложил запустить викторину с вопросами пользователям о нашем сервисе — чтобы понять, обо всей ли функциональности пользователи в курсе. Это важно, потому что можно делать кучу полезного, но если пользователи об этом плохо узнают, то грош цена нашим усилиям и всему сервису. В викторине были вопросы вроде «можно ли отправить счет на несколько почтовых адресов одновременно?». По итогам викторины пользователи получали подарок от Эльбы — бесплатное обслуживание на какой-то срок.</p>
<p>В-третьих, мы общаемся с пользователями довольно неформально, как общались бы в обычной жизни. От этого поддерживается ощущение дружелюбия, и что Эльба ближе к пользователю. Такими мы и хотим быть.</p>
<h2 id="как-тыпроектируешь-какой-утебя-процесс-как-проверяешь-гипотезы">Как ты проектируешь, какой у тебя процесс? Как проверяешь гипотезы?</h2>
<p>Когда хорошее решение нельзя реализовать, то просто накидываешь варианты по типу мозгового штурма. Каракули на листочках вполне годятся. Иногда бывает полезно спросить второго проектировщика, так идей будет больше. Или другого человека из команды. Любые ответы могут натолкнуть на хорошую мысль. Это то, что касается несложных небольших вещей, когда надо просто больше вариантов.</p>
<div class="row around-xs between-sm">
<div class="col-xs-12 col-sm-7"><p>
Если задача посложней и надо придумать что-то концептуальное, продумать сценарий новой большой задачи, одной головы явно мало. Тогда беру второго проектировщика, и уходим куда-нибудь, чтобы не отвлекал никто. Каждый рисует по задаче свои варианты решений, любые мысли на тему. Большая детализация экранов не нужна, достаточно ухватить только концепцию. Если возникают какие-то интересные мысли по конкретным вещам, тоже фиксируем. Лучше зарисовать все, что в голову придет, потом может пригодится.</p></div>
<div class="col-xs-10 col-sm-5"><figure><img alt="Ошибка выполнения" src="oromanova-error.png"><figcaption>Пользователю не важно, какие хитрые механизмы и алгоритмы спрятаны по ту сторону интерфейса. Важно, как ему в данный момент получить желаемое. Не грузите лишним.</figcaption></figure></div>
</div>
<p>Через полчасика, когда каждый «уже все», показываем друг другу, находим интересные решения в набросках друг друга и скрещиваем. Таким способом рождается больше хороших идей, чем когда сразу садишься и вдвоем думаешь мысли вслух. Помогает не упустить важное, интересное, не повлиять на ход мыслей второго, чтобы у каждого был шанс что-то привнести.</p>
<h2 id="тырисуешь-чудесные-иллюстрации-иактивно-применяешь-ихвжизни-воформлении-личного-сайта-набанковских-картах-ежедневниках-открытках-для-друзей-иродственников-кажется-иллюстрация-очень-много-для-тебя-значит-расскажи-обэтом-увлечении">Ты рисуешь чудесные иллюстрации и активно применяешь их в жизни: в оформлении личного сайта, на банковских картах, ежедневниках, открытках для друзей и родственников. Кажется, иллюстрация очень много для тебя значит. Расскажи об этом увлечении?</h2>
<p>Все началось с очень простых комиксов. Если у кого-то хватит терпения долистать мой блог до конца, то этот кто-то увидит там не очень симпатичные картинки. Дети в детском саду лучше рисуют, наверное :) Но это было забавно, мне было без разницы, как и кто это оценит. Я самовыражалась. Рисовала чуть ли не каждый день. А если что-то делать часто, это можно неплохо прокачать. Рука начинает линии ровней рисовать. Потом начинаешь интересоваться иллюстрациями других дизайнеров, пытаешься понять, на что стоит обращать внимание, что важно для персонажей. То есть все само. Интерес и любопытство движет всем.</p>
<figure>
    <img alt="Свинг — это танец" src="oromanova-dance.jpg">
    <figcaption>В фирменном стиле Ольга оформила  главную страницу своего сайта, <a href="http://cat-in-cap.ru/">получилось симпатично</a></figcaption>
</figure>
<p>Затем был двухдневный интенсив от <a href="http://stevesimpson.com/">Стива Симпсона</a> в Екатеринбурге. Мы рисовали этикетку на бутылку вина ко Дню Святого Патрика. Мне было страшно. Потому что там были настоящие иллюстраторы, а я тут со своими комиксами домашними :) Но все прошло хорошо, очень понравилось. Дальше я совсем осмелела и поехала на офигенный недельный курс в Италии, его преподавали разные иллюстраторы. Жили в кампусе Везувианского института гуманитарных наук. Ходили по городам, делали зарисовки, были на раскопках, в Помпеях, забирались к кратеру Везувия. В итоге мы научились рисовать обложку книги. Для меня там было много новых полезных знаний. И впечатлений море.</p>
<p>Потом я совсем случайно попала на курс по каллиграфии для начинающих ко <a href="https://vk.com/libermanschool_ekb">Льву Либерману</a>. Это тоже затянуло. После короткого курса пошла к нему же на годичный курс. Он еще в процессе, прошел только первый блок — античность. Сейчас хожу на леттеринг у того же преподавателя. А вчера у меня начался курс по коммерческой иллюстрации в <a href="https://kalachevaschool.ru/">школе Калачевой</a>.</p>
<p>Часто у меня интерес к чему-то растет из интереса к инструментам — охота попробовать перо или хитрый маркер, как ведет себя, что им можно сделать. Или из интереса «как это делают?», как в акварели какие-то эффекты — хочу повторить и научиться.</p>
<div class="row around-xs between-sm">
<div class="col-xs-12 col-sm-7"><p>Еще у меня случилась интересная история со <a href="http://cat-in-cap.ru/blog/all/stikery-telegram/">стикерами в Телеграме</a>. Нарисовала котов, выложила, а они как-то фантастически взлетели. Вообще не думала, что так будет. Сейчас они установлены у 18 тысяч человек. За все время люди отправили друг другу 135 тысяч стикеров. Второй пак с <a href="http://cat-in-cap.ru/blog/all/stikery-dlya-razrabotchikov/">котами для разработчиков</a> установлен у 16 тысяч человек.</p></div>
<div class="col-xs-10 col-sm-5"><img src="oromanova-sticker.png" alt="Кото-стикер для Телеграма"></div>
</div>
<p>Видно, что я много времени трачу на это все. Хотя цели продавать рукотворное у меня не было. Случается, что-то просят подписать, нарисовать. Те же <a href="http://cat-in-cap.ru/blog/tags/karty/">банковские карты</a>, открытки. Даже в Контуре иногда что-то случается порисовать. <a href="http://cat-in-cap.ru/blog/all/melovoy-letterring/">Меловую доску</a> с меню для кафе, шкафчики с посудой и едой на кухнях нового офиса. Чаще всего я с радостью соглашаюсь :)</p>
<h2 id="какие-инструменты-используешь-вработе-какие-твои-любимые">Какие инструменты используешь в работе? Какие твои любимые?</h2>
<p>Работа — это проектирование, и там прототипы в Sketch, ничего необычного. Общаемся с командой в Телеграме и устно. Бажики и мелкие задачки у нас в Ютреке. Трелло тоже иногда пригождается. Недавно увидели <a href="https://www.notion.so/">notion.so</a>, думаем, для чего может пригодится, понравился. А еще у Дропбокса сейчас что-то похожее появилось, Paper. В нем я писала ответы на вопросы этого интервью.</p>
<p>В каллиграфии мне полюбились брашпены, кистевая каллиграфия. Иллюстрации я рисовала маркерами, в основном Copic. Разных маркеров, кистей, перьев, чернил у меня много скопилось.</p>
<p><img src="oromanova-tools.jpg" alt="Маркеры, ручки и чернила"></p>
<h2 id="когда-проектируешь-рисуешь-вскетче-сразу-готовый-макет-интерфейса-совсеми-стилями-или-мокапы-если-мокапы-как-они-превращаются-винтерфейс">Когда проектируешь, рисуешь в Скетче сразу готовый макет интерфейса со всеми стилями или мокапы? Если мокапы, как они превращаются в интерфейс?</h2>
<p>Есть много рутинных задач, когда не надо что-то изобретать. Просто добавляется какая-то несложная вещь, и там без вариантов, как оно будет — и так все ясно. Тогда просто берешь старый прототип и добавляешь эту штуку на нужные экраны.</p>
<p>Если варианты есть и надо выбрать, то сначала бумага и карандаш. На бумаге хорошо думается, и это быстро. А потом уже Скетч. В Контуре есть библиотека контролов, в ней всякие кнопочки, поля со стилями.</p>
<figure>
    <img alt="Контур.Гайды" src="oromanova-guides.png">
    <figcaption>Контур.Гайды — требования к поведению и дизайну элементов пользовательского интерфейса.</figcaption>
</figure>
<p>Какое-то время назад в Контуре стало ясно, что негоже в каждом проекте делать все по-разному. Это продукты одной компании, должна быть узнаваемость, да и пользователь может купить несколько сервисов. Хорошо, когда одинаковые элементы выглядят похоже и находятся на привычных местах. А еще это экономия времени на разработку: каждый проект не изобретает велосипед, а берет контрол из особой библиотеки.</p>
<p>Поэтому стали стандартизировать разные контролы и даже поведение. Сделали <a href="https://guides.kontur.ru/">Контур.Гайды</a>: ключевые принципы проектирования, библиотеку контролов, иконки. Там же эталонная верстка контролов. Если кому-то наши стандарты пригодятся — мы только за. Знания надо шарить.</p>
<h2 id="что-помогает-тебе-профессионально-расти-как-дизайнеру">Что помогает тебе профессионально расти как дизайнеру?</h2>
<p>Постоянно смотреть по сторонам, замечать, что происходит. Замечать чужой опыт и формировать свой. Стараться мыслить нестандартно, выходить за рамки. Удивляться, испытывать интерес ко всему, задавать вопросы. Наслаждаться процессом, тем, что делаешь. Понимать, что ты на многое можешь влиять и от тебя многое может зависеть. Не оставаться в стороне, вмешиваться. Если что-то не получилось, пробовать снова и снова, не зацикливаться на неудачах. Пробовать другое или другими способами. Никогда не останавливаться. Движение — жизнь, не только в физическом плане, в развитии себя тоже.</p>
<h2 id="накого-изизвестных-людей-вотрасли-ориентируешься">На кого из известных людей в отрасли ориентируешься?</h2>
<p>Поглядываю за тем, что творится в Бюро Горбунова, в Студии Лебедева.</p>
<p>В Контуре мы все любим Максима Ильяхова. Он приезжал в Контур в 2013 году, провел трехдневный интенсив по инфостилю человек на 10. Я тоже была на этом курсе. Эффект потрясающий, сознание переворачивается. На прежние тексты смотреть не можешь, все косяки замечаешь и думаешь, как же я мог так писать. Интерфейсные тексты стали в разы лучше.</p>
<p>После этого курса знания о инфостиле передавались уже внутри Контура. У нас есть внутренняя соцсеть для сотрудников — Контур.Стафф, в ней есть интерфейс, где ребята пишут статьи. Так вот туда Игорь Луканин <a href="https://medium.com/@igorlukanin/43d04ef9d">прикрутил Главреда</a>. За пять месяцев средний балл статей вырос с 7,5 до 8. Мы воспылали радостью.</p>
<p>Еще недавно у нас был <a href="http://nobelfaik.livejournal.com/">Игорь Штанг</a>. Было очень интересно и полезно. <a href="http://ludwigbistronovsky.ru/waves/">Людвиг</a> тоже крутой. В Контуре он не был, но был в Екатеринбурге. Мне не выдалось к нему попасть, но я бы хотела.</p>
<figure>
    <img alt="Людвиг Быстроновский" src="oromanova-ludwig.jpg">
    <figcaption>Людвиг Быстроновский читает лекции по всей стране, и каждую <a href="http://ludwigbistronovsky.ru/lectures/">записывает на видео</a>. Многим дизайнерам нравится.</figcaption>
</figure>
<h2 id="какая-твоя-фишка-впроектировании-интерфейсов-прием-лайфхак-секрет">Какая твоя «фишка» в проектировании интерфейсов — прием, лайфхак, секрет?</h2>
<p>Не то, чтобы лайфхак, но есть одна полезность. Когда проектируешь, приходится очень много общаться. Иногда бывает общения больше, чем собственно рисования. Обсуждения задач, что и как сделать, в каком виде, в каком объеме, как что-то лучше починить, что оставить и не трогать, а что непременно надо поменять.</p>
<p>Договариваться приходится много, а люди бывают разные. Кто-то более эмоционален. Тогда бывает полезно не подключаться к этому и не отвечать в тон, а наоборот, как бы замедлить все. Брать паузы «на подумать», говорить спокойно и уверенно. Чем спокойней говоришь и чем больше рассудительности в ответах, тем быстрей собеседник начинает больше думать, а не эмоционировать. Обычно срабатывает.</p>
<p>Ну и еще важная вещь, надо понимать, почему собеседник на чем-то настаивает, надо влезать в его шкуру и пытаться это лечить. Вставать на его сторону и грести вместе.</p>
<h2 id="хочешь-дать-совет-или-напутствие-коллегам-дизайнерам">Хочешь дать совет или напутствие коллегам-дизайнерам?</h2>
<p>Чтобы больше всего вокруг всерьез увлекало и было интересным. От этого получаешь много удовольствия. И качество от того, чем увлекаешься, выше. В итоге выходит, что польза не только тебе, а еще миру вокруг. Вообще, проактивная позиция это хорошо. Когда не проходишь мимо какой-то фигни, а видишь, что можешь улучшить ее, берешь и делаешь. Делать мир чуть лучше — это круто.</p>
<div class="boxed">
<h3>Где подписаться на Ольгу</h3>
<ol>
<li>В блоге <a href="http://cat-in-cap.ru/blog/">статьи об интерфейсах, иллюстрациях и жизни</a>.</li>
<li>В инстаграме бывает <a href="https://www.instagram.com/cat_in_trap/">каллиграфия</a> и редко иллюстрации, но есть много кошек, так что осторожно :)</li>
<li>В твитере <a href="https://twitter.com/cat_in_cap">анонсы из блога</a>.</li>
</ol>
</div>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Больше классных статей — на канале <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</em></span></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Компания престарелых программистов</title>
      <link>https://antonz.ru/old-man-company/</link>
      <pubDate>Mon, 21 Nov 2016 05:39:00 +0000</pubDate>
      
      <guid>https://antonz.ru/old-man-company/</guid>
      <description>Как айтишники портятся после достижения критического возраста.</description>
      <content:encoded><![CDATA[<figure>
  <img alt="Престарелые программисты" src="old-man-company.jpg">
  <figcaption>Иллюстрация <a href="http://www.blakeloosli.com/index.html">Blake Loosli</a></figcaption>
</figure>
<p>На днях обедали с коллегой, и он бросил фразу, что мол стареет компания — всё меньше молодых сотрудников. Я тогда не придал значения, а сейчас огляделся по сторонам и понял — да, точно.</p>
<p>Ужас же, что творится. Большинство коллег уже пожилые, приближаются к 30 годам — этому критическому для айтишников возрасту. А некоторые, страшно сказать, уже и перевалили за него. Нет, так-то живы остались, внешне нормально сохранились, речь разборчивая, песок сыпется умеренно. Но о каких инновационных проектах может идти речь в таком коллективе? О каких свежих идеях и дерзких решениях, а?</p>
<p>Я на примере поясню, чтобы вы поняли безнадежность ситуации. У нас в офисе никто не вваливает с горящими глазами по 80 часов в неделю без выходных. Никто не засыпает за компом и не жрет энергетики, потому что выходные провел за хакатоном. Не звучат в коридорах слова «дизайн-мышление», «диджитал» и «трэкшн». Не обсуждают стартапы и уход за бородой. Черт возьми, да сотрудники даже снэпчатом не пользуются!</p>
<p>Отдельно пара примеров для программистов. Ребята, представляете, мы докер не используем. Да что докер, мы даже реакт не используем. Да что реакт, у нас в проектах встречаются бэкбон и джейквери. Да что джейквери, мы вообще по большей части на джаве пишем. Да даже питон у нас ВТОРОЙ ВЕРСИИ, понимаете вы это? Разве об этом я мечтал ребенком?</p>
<p>Не знаю, что с этим делать и как работать в компании престарелых. Вот поделился с вами и вроде легче стало.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как найти программиста: единственный рабочий метод</title>
      <link>https://antonz.ru/find-developer/</link>
      <pubDate>Wed, 28 Sep 2016 08:08:32 +0000</pubDate>
      
      <guid>https://antonz.ru/find-developer/</guid>
      <description>Гарантирую: вы никогда не слышали о таком способе поиска программистов. Но только он и работает. Прочитайте и добавьте в закладки, пригодится.</description>
      <content:encoded><![CDATA[<ol>
<li>Прежде всего, проверьте рабочее место программиста. Больше всего шансов найти его за монитором. Изредка программист может быть под столом, ковыряться в системном блоке.</li>
<li>Если слышите голоса от кофемашины — проверьте там. Программисты любят общаться за кофе с другими программистами. Кто-то пьет вместо кофе чай, а особо отличившиеся — воду. Некоторые просто сидят на диванчике.</li>
<li>К сожалению, некоторых программистов стоит поискать в курилке. Не курит? Тогда он в туалете. Со смартфоном это может быть надолго.</li>
<li>Один раз в день программист найдется в столовой или кафе. Моих знакомых программистов можно найти в столовой аж дважды за день.</li>
<li>Ненулевая вероятность найти программиста за компьютером рядом с другим программистом, где они на пару доламывают фичу или кроваво рефакторят модуль.</li>
<li>Склонный к спорту программист висит на турнике, играет в настольный теннис или аэрохоккей. Программист-киберспорстмен в это время рубится в футбол на приставке.</li>
<li>Если ничего из перечисленного не помогло, призовите программиста в корпоративном чате.</li>
<li>Когда чат молчит, небо закрыли кроваво-красные облака, идет дождь из пепла и ядовитых жаб, а программиста все нет — позвоните ему на мобильный.</li>
</ol>
<p>Если вы не нашли программиста по этому методу, напишите <a href="https://twitter.com/nalgeon">в твитер</a>, и я верну вам деньги.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как совмещать дизайн и разработку</title>
      <link>https://antonz.ru/nick-babich/</link>
      <pubDate>Wed, 14 Sep 2016 11:23:30 +0000</pubDate>
      
      <guid>https://antonz.ru/nick-babich/</guid>
      <description>Николай Бабич о разработке, гайдлайнах и UX Planet</description>
      <content:encoded><![CDATA[<div class="row">
<div class="col-xs-12 col-sm-10">
<p style="font-size: 1em"><em>Сегодняшнее интервью — с Николаем Бабичем, известным дизайнером и автором статей, который оказался не совсем дизайнером ツ</em></p>
</div>
</div>
<h3 id="расскажи-осебе-вкратце-чемзанимаешься-где-инад-чем-работаешь-чемувлекаешься-помимо-работы">Расскажи о себе вкратце: чем занимаешься, где и над чем работаешь, чем увлекаешься помимо работы?</h3>
<div class="row"><div class="col-xs-12 col-sm-7">
<p>Ты не поверишь, но я программист :–) Причем достаточно далеко нахожусь от фронтенда и проектирования UI, занимаюсь приложением для бекенда. В работе, как и в жизни, люблю чередовать вещи. Заниматься постоянно бекендом тяжко, и в качестве разнообразия у меня wireframing и прототипирование (как веб, так и мобильные приложения).</p></div>
<div class="col-xs-8 col-sm-offset-1 col-sm-4"><figure><a class="img-inline" href="http://babich.biz"><img alt="Николай Бабич" src="nickbabich-avatar.jpg" style="max-width: 200px;"></a><figcaption><a href="http://babich.biz">Николай Бабич</a></figcaption></figure></div>
</div>
<p>Работаю в компании RingCentral (занимаемся телефонией), больше всего работаю с людьми. Я тренер для молодых кадров, воспитываю и взращиваю новые таланты. Образую команды, которые дальше идут по департаментам, поэтому общения много. Работа занимает значительную часть времени, но забавно, что работой я её не воспринимаю — это как часть жизни, которая вдохновляет.</p>
<p>Живу в Санкт-Петербурге.</p>
<h3 id="что-вдизайне-для-тебя-самое-интересное-зачто-любишь-эту-профессию">Что в дизайне для тебя самое интересное? За что любишь эту профессию?</h3>
<p>Для меня дизайн в целом это все. В буквальном смысле. Я большой фанат архитектуры, автомобильного дизайна и одежды. С детства любой предмет оцениваю с точки зрения эстетики. Для меня важно, чтобы не было лишних деталей и все было хорошо подобрано.</p>
<p>Саму профессию люблю за многогранность: в другой профессии невозможно проявить себя так, как в дизайне. Вижу твое удивление и предвкушаю вопрос «но ты же разработчик». Отвечу так: разработка кода и прототипирование тоже дизайн. Так что в разработке я тоже в своей тарелке :–)</p>
<h3 id="насайтеhttpbabichbiz-тыпубликуешь-статьи-опроектировании-интерфейсов-для-веба-имобильных-устройств-чем-все-таки-тысейчас-занимаешься"><a href="http://babich.biz">На сайте</a> ты публикуешь статьи о проектировании интерфейсов для веба и мобильных устройств. Чем все-таки ты сейчас занимаешься?</h3>
<p>Занимаюсь и вебом, и мобильными, причем по всему миру. Вот некоторые проекты, в которых я помогал:</p>
<ul>
<li>приложение <a href="https://itunes.apple.com/fr/app/baby-sittor/id1015021247?l=en&amp;mt=8">для родителей и нянь</a>;</li>
<li>сайт <a href="https://pycker.com/">развлекательной платформы</a>;</li>
<li>сервис <a href="https://www.realthread.com/">рубашек на заказ</a> — сейчас работаем над новой версией.</li>
</ul>
<figure>
    <img alt="Real Thread" class="bordered" src="nickbabich-realthread.jpg">
    <figcaption>Real Thread — «рубашка на заказ» во Флориде</figcaption>
</figure>
<h3 id="ятак-понял-это-фриланс-как-находишь-заказчиков">Я так понял, это фриланс. Как находишь заказчиков?</h3>
<p>Чаще находят меня они, а не я их :–) Если проект интересный, я однозначно пытаюсь помочь, и поработать вместе над улучшением продукта. Чаще это изучение user flow и консультации (как сделать удобный UI), но и прототипирование тоже в долгий ящик не откладываю. Редко делаю разработку для сайд-проектов, потому что она требует большего фокуса, на это не хватает времени.</p>
<h3 id="тыпишешь-только-наанглийском-почему">Ты пишешь только на английском. Почему?</h3>
<p>Для меня это возможность практиковать навыки письменного языка. До блога практика была в основном разговорной, так что переход на написание статей позволил структурировать мысли и навыки письма. Когда пишешь на другом языке, вынужден продумывать одну и ту же мысль дважды — первый раз на русском, второй — уже на английском, это помогает четче излагать.</p>
<p>Можно сказать, что написание статьи на английском для меня как урок языка. Еще плюс английского: публика более требовательная (на английском гораздо больше статей, читателям есть из чего выбирать), поэтому сам себя подстегиваешь писать что-то интересное.</p>
<h3 id="расскажи-освоем-проекте-ux-planethttpsuxplanetorg">Расскажи о своем проекте <a href="https://uxplanet.org">UX Planet</a></h3>
<p>Честно сказать — в начале я ничего не планировал. Просто хотел создать небольшой блог для дизайнеров и инженеров, которые стремятся делать продукты лучше. Когда начал публиковать первые статьи, был немного обескуражен — количество прочтений постоянно росло.</p>
<div class="row"><div class="col-xs-12 col-sm-8">
<p><a class="img-link" href="https://uxplanet.org"><img alt="UX Planet" class="bordered" src="nickbabich-uxplanet.jpg"></a></p></div><div class="col-xs-12 col-sm-4"><div class="figcaption">«Небольшой блог» превратился в проект с 400 тысяч посещений в месяц</div></div>
</div>
<p>Сейчас в блоге 20 тысяч читателей, и для меня это показатель того, что люди очень заинтересованы в теме UX. Это вдохновляет! Отдельное спасибо всем, кто помогает делать UX Planet лучше — авторам публикаций и комментариев (в особенности друзьям из студий <a href="http://tubikstudio.com/blog/">Tubik</a> и <a href="https://icons8.com/blog/">icons8</a> — Марина и Саша — вы крутые!)</p>
<h3 id="откуда-тыберешь-материалы-для-статей">Откуда ты берешь материалы для статей?</h3>
<p>Гайдлайны большой тройки (Эпл, Гугл и Майкрософт), срез других материалов по теме, и свои мысли. Все это слито в единое целое. Гайдлайны беру как основу. Они сильно заточены под платформу, а я стремлюсь писать про UX в целом — поэтому адаптирую для более широкой аудитории. Читаю UX-исследования (например, исследование <a href="http://4ourth.com">Стивена Хубера</a>, как люди взаимодействуют с тач-экранами). Общаюсь с авторами исследований, чтобы убедиться, что правильно понял их мысль.</p>
<h3 id="засчет-чего-растешь-как-дизайнер-что-посоветуешь-коллегам">За счет чего растешь как дизайнер? Что посоветуешь коллегам?</h3>
<p>Вдохновение. Наверное, это самый лучший совет.</p>
<blockquote class="big">Меня вдохновляют многие вещи, но больше вещей вдохновляют люди.</blockquote>
<p>Поэтому, чтобы получить вдохновение — работаю с людьми, которые вдохновляют меня на что-то большее.</p>
<h3 id="какие-инструменты-используешь-вработе-какие-твои-любимые">Какие инструменты используешь в работе? Какие твои любимые?</h3>
<p>Я ужасно консервативен в выборе инструментов, поэтому использую стандартный набор дизайнера от Adobe. Что касается любимых тулов: так как я постоянно вовлечен в разработку, очень понравились <a href="https://sympli.io">Sympli</a> и <a href="https://zeplin.io">Zeplin</a> (недавно делал по ним <a href="https://www.smashingmagazine.com/2016/08/pixel-perfect-specifications-without-the-headaches/">обзор на Smashing Magazine</a>). Оба нацелены на трансляцию макета дизайна в код (по сути, интерактивная спецификация).</p>
<h3 id="покажи-скриншот-экрана-своего-смартфона">Покажи скриншот экрана своего смартфона</h3>
<p>Смартфон у меня только для звонков, а пользуюсь в основном планшетом. Постоянно пользуюсь Pinterest и Adobe Comp, чуть меньше InVisionApp и Marvel.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><img alt="Планшет Николая" src="nickbabich-tablet.jpg"></div>
<div class="col-xs-12 col-sm-10 col-md-4"><div class="figcaption">Solar стоит для вида и вдохновения (мне просто нравится созерцание оранжевой иконки <nobr>¯\_(ツ)_/¯</nobr></div></div>
</div>
<h3 id="тыпрототипируешь-прямо-напланшете-насколько-это-удобно">Ты прототипируешь прямо на планшете? Насколько это удобно?</h3>
<p>Не сказал бы что прямо очень удобно, но терпимо. Если работаешь в дороге, проще сделать на планшете, а дома уже переносить на мак. Вообще, прототипировать начинаю на бумаге, потом уже переношу в Adobe Comp, XD, Photoshop.</p>
<h3 id="какие-книги-рекомендуешь-коллегам">Какие книги рекомендуешь коллегам?</h3>
<p>Три любимые:</p>
<div class="row">
<div class="col-xs-8 col-sm-4"><a class="img-link" href="https://www.amazon.com/dp/B00FRSNHIW"><img src="microintercations.jpg"></a></div>
<div class="col-xs-8 col-sm-4"><a class="img-link" href="https://www.amazon.com/dp/B00MFPZ9UY"><img src="face-1.jpg"></a></div>
<div class="col-xs-8 col-sm-4"><a class="img-link" href="https://www.amazon.com/dp/B00E257T6C"><img src="design-everyday-things.jpg"></a></div>
</div>
<div class="row">
<div class="col-xs-8 col-sm-4"><div class="figcaption"><a href="https://www.amazon.com/dp/B00FRSNHIW">Microinteractions</a>: Designing with Details, Ден Саффер</div></div>
<div class="col-xs-8 col-sm-4"><div class="figcaption"><a href="https://www.amazon.com/dp/B00MFPZ9UY">About Face</a>: The Essentials of Interaction Design, Алан Купер</div></div>
<div class="col-xs-8 col-sm-4"><div class="figcaption"><a href="https://www.amazon.com/dp/B00E257T6C">The Design of Everyday Things</a>, Дон Норман</div></div>
</div>
<h3 id="вкаких-профессиональных-сообществах-состоишь-какие-посещаешь-конференции">В каких профессиональных сообществах состоишь? Какие посещаешь конференции?</h3>
<p>Ух, сложный вопрос. Наверно, правильным ответом будет — ни в каких. Дело в том, что я могу причислять себя к активным участникам сообщества, если веду там работу, а просто состоять в сообществе для меня мало :–) Конференции в основном «про UX», в октябре буду выступать на <a href="http://push-conference.com/2016/">Push Conference</a> в Мюнхене.</p>
<h3 id="что-тебя-больше-всего-огорчает-вотрасли-ивколлегах">Что тебя больше всего огорчает в отрасли и в коллегах?</h3>
<p>Нежелание учитывать чужой опыт — когда видишь, что одни и те же ошибки повторяются из раза в раз.</p>
<p>Люди игнорируют пользовательский опыт: создают продукт, только сами и могут пользоваться. Или нарушают паттерны проектирования так, что от это страдает продукт. Из последних примеров:</p>
<ul>
<li>«Гамбургерное» меню ради двух (!) пунктов внутри;</li>
<li>отсутствие прогресс-индикатора для задачи, которая выполняется 3 минуты (пользователь волком воет и хочет айфон выкинуть за это время).</li>
</ul>
<h3 id="хочешь-что-нибудь-сказать-коллегам-дизайнерам-совет-или-напутствие">Хочешь что-нибудь сказать коллегам-дизайнерам? Совет или напутствие?</h3>
<p>То же самое, что говорю себе: занимайся тем, что нравится больше всего, и находи вдохновение в том, что делаешь.</p>
<h3 id="где-натебя-подписаться">Где на тебя подписаться?</h3>
<div class="row">
<div class="col-xs-12 col-sm-5">
<p>Мой твиттер <a href="https://twitter.com/101babich">@101babich</a>. Публикую ссылки на свои статьи и другие интересные ресурсы.</p></div>
<div class="col-xs-12 col-sm-6">
<p>Если нужна помощь в проектировании интерфейса — пишите на <a href="mailto:nick@babich.biz">nick@babich.biz</a></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Надмозги в метро: конечная станция</title>
      <link>https://antonz.ru/terminal-station/</link>
      <pubDate>Mon, 12 Sep 2016 08:49:41 +0000</pubDate>
      
      <guid>https://antonz.ru/terminal-station/</guid>
      <description>Когда надмозгов изгнали из перевода фильмов, их приютил московский метрополитен. Берем острую редакторскую бритву и идем править объявления в метро.</description>
      <content:encoded><![CDATA[<p>Когда надмозгов изгнали из перевода фильмов, их с радостью приютил московский метрополитен. Постоянные читатели блога помнят, как мы <a href="/fixing-escalator-announcement">чинили объявление про эскалатор</a>. Сегодня — объявление на конечной станции.</p>
<p>Раньше на конечной пассажиров подгоняло казенное объявление:</p>
<blockquote>
<p>Уважаемые пассажиры! Поезд дальше не идет, просьба выйти из вагона.</p>
</blockquote>
<p>Не идеально, но жить можно. Увы, пару месяцев назад очередной мозговой слизень дотянулся до лакомого затылка метрошного чиновника, и теперь объявление звучит так:</p>
<blockquote class="big">
Уважаемые пассажиры,
обращаем ваше внимание,
что за нахождение в поезде,
следующем в тупик,
предусмотрена административная ответственность
в соответствии с законодательством
Российской Федерации.
</blockquote>
<p>Серьезно, они эту пургу прямо каждый раз проговаривают.</p>
<p>Дорогой метрополитен! Я понимаю, тебе хочется пригрозить людям, чтобы они в страхе бежали из вагонов. Это плохая идея: адекватные пассажиры и так выходят, а спящим и пьяным твои унылые завуалированные угрозы безразличны.</p>
<p>Если так уж хочется угрожать, то хотя бы говорите прямым текстом:</p>
<blockquote class="big">Поезд едет в депо. Кто останется в вагоне, заплатит штраф.</blockquote>
<p>Конечно, лучше обойтись без угроз. Хорошо подействует короткая и хлесткая фраза — у нее, по крайней мере, есть шанс пробудить спящих:</p>
<blockquote class="big">Пора выходить! Поезд едет в депо.</blockquote>
<p>Запускать объявление стоит после паузы, когда большинство пассажиров уже вышли — чего их зря дергать.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Интерфейсы в энтерпрайзе и прокачка дизайнера</title>
      <link>https://antonz.ru/mike-ozornin/</link>
      <pubDate>Thu, 01 Sep 2016 06:56:41 +0000</pubDate>
      
      <guid>https://antonz.ru/mike-ozornin/</guid>
      <description>Интервью с Михаилом Озорниным — дизайнером интерфейсов для мрачных мужчин в костюмах.</description>
      <content:encoded><![CDATA[<div class="row">
<div class="col-xs-12 col-md-10">
<p style="font-size: 1em"><em>Я решил запустить серию интервью с дизайнерами интерфейсов. Не супер-звездами, а обычными ребятами, которые работают над коммерческими и массовыми продуктами и сервисами. Сегодня пилотный выпуск с Михаилом Озорниным.</em></p>
</div>
</div>
<h3 id="расскажи-осебе-вкратце-чемзанимаешься-где-инад-чем-работаешь-чемувлекаешься-помимо-работы">Расскажи о себе вкратце: чем занимаешься, где и над чем работаешь, чем увлекаешься помимо работы?</h3>
<div class="row"><div class="col-xs-12 col-sm-7">
<p>Я был разработчиком, системным аналитиком, менеджером проектов, а потом пришел в проектирование и дизайн. Сейчас — дизайнер интерфейсов в <a href="https://www.ptsecurity.ru">Positive Technologies</a>. Спорим, вы о ней не слышали? Обычно её не знает никто за пределами рынка информационной безопасности, а ИБ-специалисты знают все поголовно.</p></div>
<div class="col-xs-8 col-sm-offset-1 col-sm-4"><figure><a class="img-inline" href="http://mikeozornin.ru"><img alt="Михаил Озорнин" src="mikeozornin-avatar-1.jpg" style="max-width: 200px;"></a><figcaption><a href="http://mikeozornin.ru">Михаил Озорнин</a></figcaption></figure></div>
</div>
<p>Делаю интерфейсы для этих самых ИБ-специалистов. Это те люди, которые вынуждают вас придумывать сложные пароли, а потом еще и менять их каждые 43 дня. Они обычно не могут выбирать программы, которыми пользуются на работе (корпоративное ПО же), но тоже хотят удобных и понятных интерфейсов. Я проектирую разные сканеры, системы анализа поведения, сбора и анализа событий.</p>
<p>Вырос в Екатеринбурге, переехал в Москву.</p>
<p>Люблю велосипеды (в городах) и путешествия, предпочту Амстердам или Питер вместо Пхукета или Бали.</p>
<h3 id="что-вдизайне-для-тебя-самое-интересное-зачто-любишь-эту-профессию">Что в дизайне для тебя самое интересное? За что любишь эту профессию?</h3>
<p>Мне нравится мысль, что я хотя бы немного делаю мир более упорядоченным, проще и эстетичней. Этакая борьба со вторым началом термодинамики. Радуюсь, когда я приношу решение и реакция «оу, а так можно было?». Такое, правда, бывает очень и очень нечасто.</p>
<h3 id="тыпишешь-насайте-что-занимаешься-дизайном-интерфейсов-для-сложных-продуктов-расскажи-осамом-крутом-проекте">Ты пишешь на сайте, что занимаешься дизайном интерфейсов для сложных продуктов. Расскажи о самом крутом проекте.</h3>
<p>С этим сложно. Рынок корпоративных программных продуктов часто далек от хорошего дизайна. (Вот Артём Локи немного <a href="http://www.lowkee.com/all/sever/">пишет про это</a>). Соберусь и напишу пост для тех, кто не знаком, что такое корпоративное ПО (апдейт: <a href="http://mikeozornin.ru/blog/all/why-enterprise-software-so-bad-design/">написал</a>).</p>
<p>Приходится заниматься не только дизайном, но и воспитывать своих коллег, чтобы они переходили от задач «вставь чекбокс» к «придумай решение вот такой задачи». Небыстро, но получается. У дизайнеров уже есть авторитет в командах, их слушают, на них не забивают.</p>
<figure>
    <img alt="Max Patrol" src="mikeozornin-maxpatrol.png" class="img-bordered-thin">
    <figcaption>MaxPatrol — один из продуктов Positive Technologies, где работает Михаил</figcaption>
</figure>
<p>Вот что приходится применять:</p>
<ul>
<li>продавать идею менеджеру продукта,</li>
<li>продавать заказчику, чтобы он заказал фичу у менеджера,</li>
<li>договориться с тестировщиками, чтобы завели баг, часто их баги рассматривают лучше, чем просто пожелания,</li>
<li>договориться с менеджером последить за разработкой, чтобы разгрузить его, некоторые соглашаются,</li>
<li>иногда договариваться в обход всех прямо с разработчиками. Когда уже сделано, все сразу понимают, что так и надо было.</li>
</ul>
<p>Многие компании не показывают скриншоты продуктов, наша, как правило, тоже. Публично моих продуктов вроде не было. Но поверьте, там мало чего интересного.</p>
<h3 id="что-посоветуешь-начинающим-дизайнерам-как-лучше-всего-прокачаться-впрофессии">Что посоветуешь начинающим дизайнерам, как лучше всего прокачаться в профессии?</h3>
<ol>
<li>Пройти школу <a href="http://artgorbunov.ru/school/">бюро Горбунова</a>, см. следующий вопрос.</li>
<li>Поработать с хорошим арт-директором или ведущим дизайнером. У меня этого способа в жизни не было, но учеба показала, что он очень круто помогает.</li>
<li>Очень помогает устраивать себе марафоны. Делать каждый день какую-то штуку: за неделю нарисовать 300 иконок, сверстать 100 ценников или придумывать и рисовать по мобильному приложению в день. Есть даже такой марафон <a href="http://www.dailyui.co">Daily UI</a>, я подписался, но сразу бросил — понял, что не смогу держать темп.</li>
<li>Перестать читать статьи «23 правила построения сайтов» и прочитать оригиналы в книгах.</li>
<li>Учить английский, почти все хорошее публикуется или только на английском, или сначала на английском. На русском или не переводят, или переводят плохо.</li>
<li>Научиться немного верстать и программировать: так будет проще найти общий язык с разработчиками, да и просто в жизни поможет не делать вручную всякую рутину.</li>
</ol>
<h3 id="тызакончил-школу-бюро-горбунова-что-скажешь-оней">Ты закончил школу бюро Горбунова. Что скажешь о ней?</h3>
<p>Через месяц после окончания я написал пост «<a href="http://mikeozornin.ru/blog/all/9-mesyacev-v-shkole-stazhyorov-byuro/">9 месяцев в Школе стажёров Бюро</a>», в котором описал результаты и мнение. Я перечитал его сейчас и в общей оценке до сих пор согласен. Единственное, что для «продуктового дизайнера» там маловато про продукт: исследования, гипотезы, прототипы, ЭмВиПи. Я немного зря тогда употребил этот термин. Не хватало типографики не на макроуровне, а на уровне шрифтов.</p>
<p>В общем, это были самые полезные 9 месяцев для меня как дизайнера. Не жалею, и если бы вернулся в то время, пошел бы снова и на этот раз постарался получить от школы больше.</p>
<h3 id="какие-инструменты-используешь-вработе-какие-изних-считаешь-безупречными">Какие инструменты используешь в работе? Какие из них считаешь безупречными?</h3>
<p>У меня всё как и у всех: скетч, бумажный блокнот, <a href="https://atom.io">атом</a>, альфред, мейл.апп, скриншотилка и скайп. Безупречных среди них нет.</p>
<div class="row">
<div class="col-xs-12 col-md-offset-1 col-md-5">
Скетч: не потому, что Фотошоп — плохой, я просто не умею им пользоваться. Я долго пользовался файрворксом, но потом стало ясно что в нем нет будущего. Скетч — это нормально сделанный файрворкс.<br><br>
Не представляю себе скетч без <a href="https://evilmartians.com/chronicles/compo-sketch">Компо</a>, <a href="https://www.invisionapp.com/craft">Крафта</a> и ещё пары плагинов.
</div>
<div class="col-xs-12 col-md-5">
<a href="https://www.alfredapp.com">Альфред</a> распробовал только месяца полтора назад (до этого не пошел), сейчас без него неудобно. Число моих сниппетов и воркфлоу медленно растёт.
</div>
</div>
<p>Последние несколько месяцев вынужденно не пользуюсь Мейл.аппом, он перестал нормально работать с Эксченджем. Жду релиза Сиерры — в ней починили обратно.</p>
<h3 id="какие-книги-больше-всего-рекомендуешь-коллегам">Какие книги больше всего рекомендуешь коллегам?</h3>
<p>Я согласен со входным списком <a href="http://artgorbunov.ru/school/">Школы дизайнеров</a>:</p>
<figure>
    <img class="img-bordered" alt="Список литературы" src="mikeozornin-books.png">
    <figcaption>Список литературы школы Горбунова</figcaption>
</figure>
<p>Еще раз посмотрел свои оценки на Лайвлибе, всё так. Все эти книги стоит прочитать. Некоторые лучше, некоторые хуже, но все нужны.
Начать с Нормана и Раскина (пропустить окончание про Кэнон Кэт), потом Тафти. По верстке: Мюллер-Брокманн больше академическая, для жизни полезней Харровер.</p>
<p>Что я бы добавил:</p>
<ul>
<li>«<a href="http://store.artlebedev.ru/book/typography/osnovy-stilya-v-tipografike/">Основы стиля в типографике</a>» Брингхёрста,</li>
<li>«<a href="http://store.artlebedev.ru/books/calligraphy/obraztsy-shriftov/">Образцы шрифтов</a>» Чихольда,</li>
<li>«<a href="http://www.mann-ivanov-ferber.ru/books/paperbook/remote-office-not-required/">Ремоут</a>» от 37 Signals,</li>
<li>«<a href="http://www.piter.com/collection/all/product/interfeys-osnovy-proektirovaniya-vzaimodeystviya-4-e-izd-2">Об интерфейсе</a>» Купера,</li>
<li>«<a href="https://bookmate.com/books/wl7IfIqp">100 фактов</a>, которые нужно знать о людях» Сьюзан Вайншенк (перевод названия на русский — катастрофа).</li>
</ul>
<h3 id="вкаких-профессиональных-сообществах-состоишь-какие-посещаешь-конференции">В каких профессиональных сообществах состоишь? Какие посещаешь конференции?</h3>
<p>Так вышло, что в сообществах ни в каких не состою: подписан на <a href="https://www.facebook.com/uxrussia/">UX Russia</a>, но там давно нет жизни, числюсь в «<a href="http://usefulclub.ru">Полезном клубе</a>», но там тоже мало что происходит.</p>
<p>Из конференций иногда хожу на <a href="http://wud.ru">WUD</a> или <a href="http://dribbblemeetup.ru">Dribble Meetup</a>, когда оказываюсь в городе. К UX Russia отношусь скептически: последние две, на которых был, были очень откровенно плохие.</p>
<p>Ценю, когда конференции выкладывают видео, смотрю доклады на удвоенной скорости.</p>
<h3 id="что-тебя-больше-всего-огорчает-вотрасли-ивколлегах">Что тебя больше всего огорчает в отрасли и в коллегах?</h3>
<p>Мне тяжело работать с людьми, у которых сильно <a href="http://mikeozornin.ru/blog/all/principy-2/">отличаются принципы</a>. Отсутствие 1–2 из принципов усложняет совместную работу, отсутствие нескольких делает совместную работу маловероятной.</p>
<p>Огорчают постоянные статьи «10 лучших способов сделать хороший дизайн». Ещё больше удручает, если это плохой перевод английских статей. Я не верю, что без английского языка сейчас можно как-то существовать в мире.</p>
<h3 id="хочешь-что-нибудь-сказать-коллегам-дизайнерам-совет-или-напутствие">Хочешь что-нибудь сказать коллегам-дизайнерам? Совет или напутствие?</h3>
<p>Делайте хорошо и не делайте плохо :–)</p>
<h3 id="где-натебя-подписаться">Где на тебя подписаться?</h3>
<p>Я недавно переехал на новый блог, читать можно там: <a href="http://mikeozornin.ru/blog/">mikeozornin.ru/blog</a></p>
<div class="boxed">
<h3>Как подписаться на блог Михаила</h3>
<ol>
<li>Заходить и проверять новые посты. Способ для гиперответственных, я так не умею.</li>
<li>Через РСС (самый <a href="http://ilyabirman.ru/meanwhile/all/rss-subscription/">правильный способ</a>). Добавьте адрес <code>http://mikeozornin.ru/blog/</code> в свою РСС-читалку (например, Фидли или Риидер) и все будет ОК.</li>
<li>По почте. Вставьте <code>http://mikeozornin.ru/blog/</code> в <a href="https://blogtrottr.com/">blogtrottr.com</a>, сервис будет присылать посты на почту.</li>
<li><a href="http://facebook.com/mike.ozornin">В фейсбуке</a>. Посты там все, но иногда там пишу что-то другое.</li>
<li><a href="http://twitter.com/mikeozornin">В твиттере</a>. Кроме постов там будет много всякого, в том числе не самого интересного.</li>
</ol>
</div>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Специально для подписчиков канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Горелый и его последний дизайн-линч</title>
      <link>https://antonz.ru/o-tawa-toki/</link>
      <pubDate>Wed, 24 Aug 2016 09:27:59 +0000</pubDate>
      
      <guid>https://antonz.ru/o-tawa-toki/</guid>
      <description>Смерть стартапа: как мы с Горелым линчевали интерфейсы и что из этого вышло</description>
      <content:encoded><![CDATA[<p>В апреле 2015 года я запустил <a href="http://dangry.ru">Дизайн-линчер</a> — аудит юзабилити сайта от обычного посетителя и профессионального дизайнера. Сегодня закрываю услугу аудита и пишу об уроках, которые для себя вынес.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8">
<figure class="image">
    <a href="http://dangry.ru/toki" class="img-inline">
    <img class="img-bordered" alt="Промо дизайн-линчера" src="toki-promo.png">
    </a>
    <figcaption>— Один из лучших кейсов в маркетинге, что я видел<br><em>&nbsp;&nbsp;&nbsp;&nbsp;из отзыва заказчика</em></figcaption>
</figure>
</div>
</div>
<h2 id="урок-первый-минимальный-прототип-работает">Урок первый: «минимальный прототип» работает</h2>
<p>Сервис аудита состоял из трех частей:</p>
<ul>
<li>витрина: сайт и форма приема заявок;</li>
<li>админка для управления заявками;</li>
<li>мини-биржа для координации рецензентов.</li>
</ul>
<p>Если реально все это разрабатывать — займет месяцы и стоить будет сотни тысяч рублей. Поэтому я сделал так:</p>
<ol>
<li>Сверстал статичный сайт с формой заявки.</li>
<li>Приделал оплату через <a href="https://money.yandex.ru/get/">Яндекс-деньги</a> в сто строчек на джаваскрипте.</li>
<li>Взял готовую бесплатную админку у <a href="http://parse.com/">Парса</a>.</li>
<li>Для взаимодействия с рецензентами завел секретную группу в Фейсбуке.</li>
</ol>
<figure class="image">
    <img class="img-bordered" alt="Три составляющие аудита" src="toki-insa.jpg">
    <figcaption>Заявка + админка + рецензенты = сервис аудита</figcaption>
</figure>
<p>Все. Система оказалась настолько удачной, что мне не пришлось менять ее до самого конца. А благодаря минимальным затратам на разработку сервис сразу вышел в плюс.</p>
<h2 id="урок-второй-никто-неценит-бесплатный-труд">Урок второй: никто не ценит бесплатный труд</h2>
<p>Первые месяцы сервис был полностью бесплатным — я проверял, как работает идея. Рецензенты трудились на голом энтузиазме (святые люди!).</p>
<p>Типичный отзыв заказчика того периода:</p>
<blockquote class="big">— Спасибо! Все понравилось) Успехов вам! <del>Счастья, здоровья, держитесь там</del>
</blockquote>
<p>На первый взгляд, дело шло отлично — куча заявок и дым коромыслом. Но по отзывам клиентов я понял, что люди не ценят «бесплатные» результаты. Энтузиазм рецензентов тоже быстро затухал. Поэтому я перешел на платную модель, и все стало хорошо.</p>
<h2 id="урок-третий-правдоруб-матершинник-решает">Урок третий: правдоруб-матершинник решает</h2>
<p>Сервисов UX-аудита много. Дизайн-линчер особенный: у него был Горелый. Это такой посетитель, который беспощаден к сайту и не стесняется в выражениях. Если честно, ради него я все и начинал <span class="nowrap">(ノಠ益ಠ)ノ</span></p>
<div class="row">
<div class="col-xs-12 col-md-10">
<div class="boxed">
<h3>Случайные цитаты из Горелого</h3>
<p>«Компактный размер — гигантские возможности». Наверно, это сайт психологической помощи мужчинам с маленьким х♥ем. А нет. «IP-ТЕЛЕФОНИЯ ДЛЯ ВАШЕГО БИЗНЕСА ПОД КЛЮЧ ОТ 19 000 РУБ». Гигантские возможности понятно — можно ЗВОНИТЬ (вау). А у чего компактный размер?</p>
<p>«индивидуальность отождествляет качество». Эээ. И чо? Во-первых, ни·уя подобного: индивидуальность качество не отождествляет. Во-вторых, что мне с этим высказыванием делать? Распечатать и в рамку на стену повесить?</p>
<p>Ладно. Заполнил, нажал на «заказать». И знаете что? Кнопка пропала, бл·дь такая. Ну юмористы, сссука, такого еще не встречал ٩◔̯◔۶</p>
<p>Наберите воздуха побольше и длинно, разнообразно, с чувством выматеритесь. Сделали? Вот это и есть моя рецензия.</p>
</div>
</div>
</div>
<p>Так вот, Горелый стал неистово популярен: половина заказчиков выбирали его вместо обычного посетителя. Пришлось поднять цену втрое, а то бедняга не справлялся.</p>
<p>Горелый так пришелся всем по душе, что благодаря ему о Дизайн-линчере даже <a href="https://biz360.ru/materials/vypuskay-gorelogo-kak-protestirovat-svoy-sayt-na-vmenyaemost/">в журнале</a> написали.</p>
<h2 id="урок-четвертый-без-толковых-рецензентов-никуда">Урок четвертый: без толковых рецензентов никуда</h2>
<p>Сервис аудита сайтов хорош настолько, насколько хороши рецензенты, которые пишут отзывы. У Дизайн-линчера подобралась небольшая, но сильная команда:</p>
<img class="img-bordered" alt="Рецензенты, вы лучше всех" src="toki-who.jpg">
<div class="row margin-bottom">
<div class="col-xs-12 col-sm-10 col-md-offset-1 col-md-7">
<div class="figcaption">— Рецензия отличная: согласны с 95% замечаний, а 80% мы в силу своей неопытности просто не видели. Сайт на комплексной поддержке — встречаемся с исполнителями и устраиваем разбор полетов.<br><em>из отзыва заказчика</em></div>
</div>
</div>
<p>Ребята, спасибо вам огромное! Без вас бы ничего и не было. Я сам пару раз заказывал аудит: рецензии открывают глаза на серьезные проблемы, которые до этого не замечал.</p>
<p>Заказчики почти всегда оставались довольны: на 300 рецензий был один возврат денег. И люди присылали на удивление много отзывов.</p>
<h2 id="почему-язакрыл-дизайн-линчера">Почему я закрыл «Дизайн-линчера»</h2>
<p>Логичное развитие для сервиса аудитов — больше рецензентов, больше заказов. Но я так и не смог на это пойти. Если даю клиенту рецензию, хочу лично отвечать за качество — значит, должен сам проверять каждый отзыв. Понятно, что так не масштабируешься.</p>
<p>Второй путь — сделать биржу с взаимным контролем рецензентов, автоматической проверкой рецензий по эвристическим признакам, рейтингами — можно много чего накрутить, чтобы держать нормальное качество. Но я понял, что биржу делать мне просто не интересно. Все-таки я гик, и хочу делать более технологические штуки.</p>
<p>Третий путь — остаться маленькими, но серьезно повысить ценник, до уровня полноценного UX-консалтинга. Но это противоречило моей исходной идее о доступном для всех UX-аудите.</p>
<p>В итоге, получился чемодан без ручки — нести неудобно, бросить жалко. Я все же решил бросить.</p>
<h2 id="горелого-нет-нотело-его-жует">Горелого нет, но тело его жует</h2>
<p>Мы больше не рецензируем сайты. Но за полтора года «под зонтиком» сервиса вырос новый проект — <a href="https://t.me/dangry"><strong>Интерфейсы без шелухи</strong></a>. Это заметки о продуктоводстве, здравом смысле и разработке софта. Без переводов, копипасты и унылых статей про «38 рекомендаций дизайнеру для создания потрясающего UX».</p>
<p>Что-то кончается, что-то начинается, как говорил пан Сапковский. И начинается самое интересное ツ</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Чеклист хорошего дизайн-портфолио</title>
      <link>https://antonz.ru/design-portfolio/</link>
      <pubDate>Tue, 16 Aug 2016 08:13:46 +0000</pubDate>
      
      <guid>https://antonz.ru/design-portfolio/</guid>
      <description>Каким должно быть портфолио дизайнера, чтобы пригласили на собеседование.</description>
      <content:encoded><![CDATA[<p>Недавно прочел интересную статью в блоге Биханса — в ней эксперты из крупных дизайн-студий и Яндекса рассказали, что для них важно видеть <a href="https://medium.com/behancerussia/8645b61a530d">в портфолио соискателя</a> на вакансию дизайнера.</p>
<p>Статья достаточно сумбурная, поэтому я извлек из нее чеклист хорошего (по мнению экспертов) портфолио.</p>
<p>Проверьте себя:</p>
<ol>
<li>В портфолио только лучшие и релевантные вакансии работы. Не слишком много, 5–10 штук.</li>
<li>На карточке проекта описаны цели, аудитория и проблемы заказчика. И презентовано ваше решение: как добились результата с помощью дизайна.</li>
<li>Нет эскизов, промежуточных макетов и «как я <del>встретил вашу маму</del> пришел к этому». Если хотите описать процесс решения задачи, вынесите его на отдельную страницу (см. «процесс» в портфолио Студии Лебедева или «ведро» у Бюро Горбунова). Или напишите в блог.</li>
<li>Рассказано, какую часть работы лично вы сделали в проекте.</li>
<li>Написано, что ваша работа дала заказчику, что у него изменилось к лучшему.</li>
<li>Портфолио доступно в онлайне: биханс, тильда, личный сайт. Не архив в почте и не ПДФ.</li>
</ol>
<div class="boxed">
<p><strong>Примеры классных описаний для портфолио</strong></p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <p>Пос-кредит (<a href="https://www.artlebedev.ru/pos-credit/">краткое</a> / <a href="https://www.artlebedev.ru/pos-credit/process/">процесс</a>)</p>
    <p>Брейн4Нет (<a href="https://www.artlebedev.ru/b4n/interface/">краткое</a> / <a href="https://www.artlebedev.ru/b4n/interface/process/">процесс</a>)</p>
    <p><a href="https://pavlova.cc/cases/crtsb/">Центр речевых технологий</a></p>
    <p><a href="http://sobakapav.ru/portfolio/smartdeal/">SmartDeal</a></p>
</div>
<div class="col-xs-12 col-sm-6">
    <p><a href="https://pavlova.cc/cases/solar/">Solar Staff</a></p>
    <p><a href="https://ilyabirman.ru/projects/securige/">Секьюридж</a></p>
    <p><a href="https://bureau.ru/projects/fxpro-markets/">Маркетс</a></p>
</div>
</div>
</div>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Бизнес как игра</title>
      <link>https://antonz.ru/biznes-kak-igra/</link>
      <pubDate>Tue, 14 Jun 2016 09:54:23 +0000</pubDate>
      
      <guid>https://antonz.ru/biznes-kak-igra/</guid>
      <description>100 эвристик «хорошо-плохо» по управлению, продажам, работе с магазинами и маркетингу. От создателей «Мосигры» Сергея Абдульманова и Дмитрия Кибкало.</description>
      <content:encoded><![CDATA[<p>Руководители «Мосигры» — Сергей Абдульманов и Дмитрий Кибкало — написали книгу о своем опыте развития сети магазинов настольных игр. Мосигра славится человечным отношением к клиентом, а Абдульманов — легким слогом, так что книга получилась интересной.</p>
<div class="row around-xs">
<div class="col-xs-10 col-sm-4">
    <a class="img-link" href="http://www.mann-ivanov-ferber.ru/books/biznes-kak-igra/"><img alt="Ричард Хипп" src="biznes-kak-igra.png"></a>
</div>
<div class="col-xs-12 col-sm-7">
<p>Формат такой: 100 эвристик «хорошо-плохо» по управлению, продажам, работе с магазинами и маркетингу. С примерами. Примеров, впрочем, не хватает, из-за чего некоторые советы выглядят как «лучше быть здоровым и богатым, чем бедным и больным». В остальном книга хорошая. Читается вообще влет — вот бы все нон-фикшн авторы умели писать как Абдульманов.</p>
</div>
</div>
<p>Раздел об управлении показался мне очевидным. Про магазины полезно, но только если планируете их открывать. А вот последняя часть — о маркетинге — заинтересовала больше всего.</p>
<p>Выписал несколько заметок.</p>
<h3 id="уберите-возможность-для-ошибки-излоупотребления">Уберите возможность для ошибки и злоупотребления</h3>
<p>Универсальное правило, одинаково подходит для интерфейсов, сотрудников и контрагентов:</p>
<ul>
<li>не кричать на пользователя ошибками после отправки заказа, а деактивировать кнопку «отправить», если что-то не так;</li>
<li>уволился сотрудник — заблокировать учетные записи;</li>
<li>заметили лазейку в договоре — исправить, а не надеяться, что партнер ей не воспользуется.</li>
</ul>
<h3>Цепляйтесь к локомотиву</h3>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p>Конкурентное преимущество для среднего бизнеса — люди-локомотивы в команде. Локомотив не ждет команды сверху, он сам толкает процессы в компании и создает правильную движуху.</p>
</div>
<div class="col-xs-10 col-sm-4">
  <figure>
    <a class="img-link" href="https://twitter.com/milfgard"><img style="max-width: 200px;" alt="Сергей Абдульманов" src="biznes-kak-igra-milfgard.jpg"></a>
    <figcaption>Cергей Абдульманов — локомотив «Мосигры»</figcaption>
  </figure>
</div>
</div>
<h3 id="считайте-свою-выгоду-анечужую">Считайте свою выгоду, а не чужую</h3>
<p>Компания провела совместную рекламную компанию с партнером. Затраты пополам — по 500К, продажи компании — 1М, продажи партнера — 3М. Несправедливо!</p>
<p>К черту справедливость, её не существует. Компания заработала 100% от вложенного, вот это важно.</p>
<p>Та же ошибка встречается в быту: завидовать соседу проще и приятнее, чем оценивать собственные успехи.</p>
<h3 id="удивляйте-вмелочах">Удивляйте в мелочах</h3>
<p>Базовый уровень — уважать покупателя и приносить пользу. Продвинутый — превзойти ожидания. Так люди становятся постоянными клиентами и адвокатами бренда.</p>
<blockquote>
<p>Ситуация: человек спрашивает игру, ее нет в магазине, но есть у конкурента. Продавец рассказал об этом и нарисовал, как пройти. Клиент запомнил такое обращение и в следующий раз за настольной игрой пришел в Мосигру.</p>
</blockquote>
<p>Впечатление о компании у клиента складывается из мелочей. Когда нет явных «косяков» — это ОК, не более того. Когда вдобавок много приятных мелочей, рождается подсознательное ощущение, что все правильно и хорошо.</p>
<div class="row around-sm">
<div class="col-xs-12 col-sm-10">
<figure>
<a class="img-link" href="http://www.mosigra.ru/Face/Show/medved/rules/">
<img alt="Правила игры «Медвед»" src="biznes-kak-igra-gameplay.jpg">
</a>
<figcaption>Прежде чем выпускать игру в продажу, сотрудники сами играют в нее и пишут понятную инструкцию с фотографиями.</figcaption>
</figure>
</div>
</div>
<p>Не жадничайте в мелочах. На конкурентом рынке преимущество складывается из «избыточных» частей, которые хочется снести ради оптимизации затрат. Не делайте этого.</p>
<blockquote>
<p>Мосигра тратит миллион рублей в год на бесплатные пакеты. Они большие, прочные, красивые и служат годами.</p>
</blockquote>
<h3 id="поставьте-круглые-цены-изаметные-скидки">Поставьте круглые цены и заметные скидки</h3>
<p>Цены на «999» — неуважение к клиенту, и для многих показатель развода. 990 — лучше, а еще лучше — 950.</p>
<p>Точно так же раздражают «скидки» на 10-20 рублей. Поэтому Мосигра сделала робота, который зачеркивает старую цену и ставит новую, только если разница больше 50 рублей.</p>
<p>У скидки хорошо писать разницу между старой и новой ценой, чтобы человек не напрягал зря мозг:</p>
<blockquote>
<p>950₽ было
870₽ стало
экономия 80₽</p>
</blockquote>
<h3 id="признавайте-ошибки">Признавайте ошибки</h3>
<p>В бизнесе «лажают» все. А крупные компании постоянно находятся на грани публичного скандала: слишком много движущихся частей, много внимания в прессе и соцсетях. Разница в том, как компании реагируют на провалы.</p>
<p>Авторы советуют в кризис быть максимально открытыми. Расскажите первыми о проблеме и плане решения — тем самым погасите волну негатива на всходе.</p>
<p>Если вы что-то капитально сломали — напишите в твиттер (фейсбук, вконтакт — ваш основной канал). Пусть клиенты знают, что происходит и чего ожидать.</p>
<h3 id="поговорите-склиентом-после-покупки">Поговорите с клиентом после покупки</h3>
<div class="row around-xs between-sm">
<div class="col-xs-12 col-sm-7">
<p>Иногда у человека наступает «постпродажный шок» — купил под влиянием порыва и теперь думает, зачем он это сделал. Лучший способ предотвратить — дать больше фактов до продажи: описание, фотографии, отзывы, гарантия возврата, «пощупать» перед покупкой.</p>
<p>А Мосигра еще иногда делает <em>постпродажный звонок</em>: сотрудник узнает, играл ли уже покупатель и понравилась ли игра. Если чувствует, что человек недоволен, рассказывает, где и как вернуть игру. Помогает разобраться в правилах, если что-то непонятно. И не пытается ничего продать! Это приятно удивляет клиентов, а компании дает обратную связь.</p>
</div>
<div class="col-xs-10 col-sm-4">
    <figure>
    <a class="img-link" href="http://www.mosigra.ru/">
    <img alt="Емейлы топ-менеджеров Мосигры" src="biznes-kak-igra-contacts.png"></a>
    <figcaption>На сайте «Мосигры» выложены емейлы всех топ-менеджеров. Сравните с другими магазинами, которые форму обратной связи за капчей прячут.</figcaption>
</figure>
</div>
</div>
<h3 id="цельтесь-впотребность-анедемографию">Цельтесь в потребность, а не демографию</h3>
<p>Целевая аудитория продукта определяется не социально-демографическими показателям (мужчина 25–45 лет из Москвы), а потребностью (хочу, чтобы ребенок вырос инженером, как в игровой форме привить «технический» подход?).</p>
<p>Хорошее описание продукта показывает, как человек решит свою «боль» с помощью продукта.</p>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Ссылки по теме:</p>
<ul>
<li><a href="http://www.mann-ivanov-ferber.ru/books/biznes-kak-igra/">Книга на сайте издательства</a></li>
<li><a href="https://twitter.com/milfgard">Твиттер Сергея Абдульманова</a></li>
<li><a href="http://www.mosigra.ru/">Сайт «Мосигры»</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Ричард Хипп и SQLite</title>
      <link>https://antonz.ru/richard-hipp/</link>
      <pubDate>Mon, 30 May 2016 09:07:30 +0000</pubDate>
      
      <guid>https://antonz.ru/richard-hipp/</guid>
      <description>История SQLite — базы данных, которая популярнее всех остальных вместе взятых.</description>
      <content:encoded><![CDATA[<p>Ричард Хипп — создатель SQLite, самой распространенной в мире базы данных.</p>
<div class="row">
<div class="col-xs-12 col-sm-7">
<p>В 2001 году Ричард разрабатывал приложение по контракту. В качестве базы в проекте использовался Информикс. Он был кривовато настроен, и иногда падал — тогда приложение не работало. При этом база использовалась только на чтение. Ричард подумал — а зачем тогда клиент-серверная СУБД? Сделал свою встроенную базу — SQLitе, с базовой поддержкой SQL — и приложение перестало зависеть от сервера.</p>
</div>
<div class="col-xs-6 col-sm-offset-1 col-sm-4">
  <figure>
    <img alt="Ричард Хипп" src="richard-hipp.jpg">
    <figcaption>Ричард Хипп, автор SQLite</figcaption>
  </figure>
</div>
</div>
<p>О себе Ричард говорит «I am not a database guy». При этом SQLite более распространена, чем остальные базы данных вместе взятые. Она встроена везде: линукс, макось, виндоус (с 10 версии), андроид, айось, виндофон. Это самая популярная в мире библиотека после <abbr title="Используется для сжатия данных">zlib</abbr>.</p>
<p>До середины двухтысячных Ричард разрабатывал SQLite один. А в 2007, когда SQLite уже была повсеместно распространена, к нему пришли из Симбиан и предложили поддержать деньгами. Мотив был прагматичный: увеличить «<abbr title="Скольких разработчиков собьет автобус, прежде чем остановится разработка">автобусный коэффициент</abbr>», чтобы не остаться без техподдержки и обновлений в случае чего. С тех пор над SQLite работает команда из трех человек, а их труд оплачивает консорциум. Сейчас в нем Мозилла, Фейсбук, Блумберг и другие серьезные ребята.</p>
<p>Хотя SQLite использует самую либеральную открытую лицензию — public domain — некоторые юристы ее не признают и хотят бумагу с печатью. Таким Ричард продает лицензии. Остальные используют SQLite бесплатно и как хотят, без ограничений.</p>
<p>У SQLite нет внешних зависимостей. Вообще нет. А когда понадобилась система контроля версий, Ричард написал свою (Фоссил). Синдром изобретателя колеса, как признает сам автор ツ Но начинающим разработчикам Ричард советует использовать существующие библиотеки — время для «сделай все сам» прошло.</p>
<p>Ричард не берется судить, как долго SQLite останется популярной. Но даже если новые технологии вроде персистентной памяти снимут потребность в классических СУБД, SQLite будет с нами еще долго — очень уж глубоко укоренилась. Команда разработки расходиться не планирует аж до 2050 года: в 2010 году Эйрбас заключил контракт на сопровождение SQLite для лайнера A380 на 40 лет.</p>
<p><a href="https://changelog.com/podcast/201">Выпуск подкаста Changelog с Ричардом Хиппом</a></p>
<p><a href="https://www.sqlite.org/index.html">Сайт SQLite</a></p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на канал <span class="nowrap"><i class="fas fa-database"></i> «<a href="https://t.me/sqliter">SQLite на практике</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>«Психбольница» Купера 20 лет спустя: цели и сценарии</title>
      <link>https://antonz.ru/asylum-2/</link>
      <pubDate>Mon, 23 May 2016 09:38:09 +0000</pubDate>
      
      <guid>https://antonz.ru/asylum-2/</guid>
      <description>Вторая часть «обезжиренного» конспекта книги Алана Купера «Психбольница в руках пациентов». Я убрал очевидное и воду, оставил пользу и примеры.</description>
      <content:encoded><![CDATA[<p><em>Это вторая часть «обезжиренного» конспекта книги Алана Купера «Психбольница в руках пациентов». Я убрал очевидное и воду, оставил пользу и примеры, добавил домашнее задание.</em></p>
<div class="boxed">
<h3>Краткое содержание <a href="/asylum/">первой части</a></h3>
<p>Чтобы продукт получился по-настоящему классным, он должен быть человечным. «Модный» интерфейс ≠ человечный интерфейс. Необходимое условие привлекательного продукта — проектирование под реальных пользователей. Инструмент проектирования — персонажи.</p>
<p>У персонажа есть имя, биография, привычки, цели и навыки. Имя и биография — вымышленные, всё остальное — настоящее, от реальных пользователей.</p>
<p>Чтобы сделать интерфейс под персонажа, голого описания недостаточно. Понадобятся ещё цели (ради чего человек использует продукт) и сценарии (как он добивается целей с помощью продукта).</p>
</div>
<h2 id="персонажи-ицели">Персонажи и цели</h2>
<p>Сложно оценить, насколько хорош интерфейс, если не понять, ради чего люди будут его использовать. Лента фейсбука показывает не все посты в хронологическом порядке, а только избранные по хитрому алгоритму. Это хорошо или плохо?</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<p>Ответ зависит от целей пользователя:</p>
<p>— Зачем ему лента?<br>
— Чтобы прочитать что-нибудь интересное и быть в курсе, что там у знакомых новенького.</p>
<p>Тогда хронология не нужна, она не приближает к цели. Что нужно, так это влезть человеку в голову, понять, что прямо сейчас привлечет его внимание, и показать в ленте. Ровно это и пытается сделать фейсбук — значит, решение хорошее.</p>
</div>
<div class="col-xs-8 col-sm-4">
  <figure>
    <img class="img-bordered" alt="Лента фейсбука" src="asylum-facebook.png">
    <figcaption>Где мои котики, фейсбук?</figcaption>
  </figure>
</div>
</div>
<p>Купер разделяет цели на личные и практические.</p>
<p><em>Личные</em> цели всегда одни и те же, с каким бы интерфейсом человек ни работал:</p>
<ul>
<li>не чувствовать себя глупо;</li>
<li>не ошибаться;</li>
<li>не наработать лишнего;</li>
<li>развлечься или хотя бы не страдать от скуки.</li>
</ul>
<p>Если программа препятствует личным целям, она никогда не будет привлекать и радовать человека. Её потолок — унылая посредственность.</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <figure class="image">
        <img alt="Микрософт Ворд" src="asylum-word.png">
        <figcaption>Ворд умеет все, что требуется. Но постоянно заставляет чувствовать себя идиотом. Не верите — поработайте со списками. </figcaption>
    </figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure class="image">
        <img alt="Микрософт Эксель" src="asylum-excel.png">
        <figcaption>На удивление, Эксель намного приятней. Простые диаграммы, быстрые фильтры, адекватно угадывает формулы.</figcaption>
    </figure>
</div>
</div>
<p><em>Практические</em> цели говорят о пользе для человека или компании, на которую он работает:</p>
<ul>
<li>больше продавать тем, кто раньше уже купил;</li>
<li>спланировать проект так, чтобы не напортачить потом со сроками;</li>
<li>сбросить лишний вес.</li>
</ul>
<p>Практические цели — это мостик от персонажей к функциям программы. Определили персонажа и его цели → описали сценарии, которые к этим целям приводят → нарисовали под них интерфейс.</p>
<h2 id="сценарии">Сценарии</h2>
<p>Сценарии описывают, как человек использует продукт, чтобы добиться целей.</p>
<p><em>Повседневные</em> сценарии пользователь проходит каждый день. Помните Мишу из первой части, который решил сбросить вес за 7 минут в день? Так вот:</p>
<blockquote style="border: none; padding: 1em 2em; margin-left: 0; margin-bottom: 1em;">
<div class="row">
<div class="col-xs-12 col-sm-8">
Теперь каждое утро после подъема Миша, зевая, делает несколько махов руками и наклонов, для разминки. Затем открывает на айфоне приложение и одним тыком запускает тренировку.<br>
<br>
12 упражнений по 30 секунд на каждое. Отдых между упражнениями — 10 секунд. Чтобы Миша не запутался, приложение ему помогает: на экране анимированный человечек показывает технику упражнения, а из динамика тренер отсчитывает время и свистит в свисток.<br>
<br>
Первые дни Миша поглядывает на экран, а потом ориентируется уже только на слух. К концу тренировки сердце ощущается где-то в районе ушей, так что Миша доволен: методика действует. Через месяц делает ремень туже на одну дырку и рекомендует воркаут друзьям и знакомым.
</div>
<div class="col-xs-6 col-sm-4">
<img class="img-bordered" alt="Миша" src="asylum-7minutes.png">
</div>
</div>
</blockquote>
<p>Повседневных сценариев у персонажа обычно один или два. Проектировщик уделяет им больше всего внимания и оптимизирует интерфейс, чтобы сценарии проходили с минимальным количеством телодвижений.</p>
<p>Повседневные сценарии часто поддерживают «короткие пути»: клавиатурные шорткаты, хитрые жесты на телефонах, шаблоны действий, значения по умолчанию из «вчера».</p>
<blockquote class="big">Фокус — на повседневных сценариях</blockquote>
<p>Кроме повседневных сценариев, Купер еще выделяет обязательные и экзотические.</p>
<p><em>Обязательные</em> сценарии выполняют редко, но неукоснительно: сдать квартальный отчет, настроить переадресацию почты на время отпуска, продлить банковский депозит еще на год. Поскольку сценарии редкие, дизайнер не оптимизирует их по количеству действий и не «вылизывает» мельчайшие детали. Но закладывает больше подсказок и следит, чтобы человек понимал последствия каждого действия — ведь в прошлый раз он проходил сценарий давно и уже забыл, что к чему.</p>
<p><em>Экзотические</em> сценарии выполняют единицы процентов пользователей: купить книгу за биткоины, восстановить сайт из резервной копии месячной давности, временно разблокировать банковскую карту, чтобы в чужой стране не остаться совсем без денег. Интерфейс такие сценарии поддерживает, и ладно — сильно заботиться об удобстве не обязательно. Совсем экзотику можно вовсе не выносить в интерфейс, а отдать на откуп техподдержке: пользователю проще решить вопрос с живым человеком, а разработчикам не придется тащить лишнюю функциональность.</p>
<h2 id="человечность">Человечность</h2>
<p>Проектирование через персонажей, цели и сценарии — необходимое, но не достаточное условие привлекательного продукта. Чтобы радовать людей, интерфейсу придется стать <em>человечным</em>.</p>
<p>Люди склонны наделять программы человеческими качествами. Глючный и тормозной интернет-магазин покупатель воспринимает как вонючего и тупого продавца в магазине офлайновом. Напротив, человек ответит добром, если чувствует: программа делает все, чтобы ему было хорошо. Пользователь простит баги и недочеты, даст обратную связь, рекомендует друзьям.</p>
<div class="row around-sm">
<div class="col-xs-12 col-sm-10">
<figure>
    <img class="bordered" alt="Симплноут" src="asylum-simplenote-1.png">
    <figcaption>Пару лет назад <a href="https://simplenote.com/">Симплноут</a> сошел с ума и начал иногда терять данные при синхронизации. Я простил его и ждал, пока починят — только потому, что до этого продукт успел меня очаровать.</figcaption>
</figure>
</div>
</div>
<p>Чтобы стать привлекательным, интерфейс, как деловой партнер, должен быть толковым, надежным и приятным в общении. Вот что конкретно это значит:</p>
<h3 id="запоминать-привычки-человека">Запоминать привычки человека</h3>
<p>Если сегодня я настроил онлайн-радио на джазовую волну, то завтра возобновить вещание с нее же. А когда делаю второй заказ в магазине — подставить адрес доставки и способ оплаты от предыдущего заказа.</p></p>
<h3 id="учитывать-контекст-исообщать-оботклонениях">Учитывать контекст и сообщать об отклонениях</h3>
<p>Если я покупаю электронные весы, предложить добавить в заказ подходящие батарейки. Если обычно заказываю бытовую химию по мелочи, а тут вдруг положил в корзину 50 литров клея для плитки, аккуратно поинтересоваться — нет ли ошибки? Если из-за проблем в банке платежи идут два дня вместо обычных пяти минут — сообщить мне заранее, до оплаты, чтобы я мог передумать и оплатить яндекс-деньгами.</p></p>
<h3 id="решать-проблемы-самостоятельно">Решать проблемы самостоятельно</h3>
<p>Если платеж не прошел из-за технической ошибки, поставить в очередь и сообщить мне (а не отвалиться «извините, что-то пошло не так»). Если телефон указан как 916.345.85.59 или в середине емейла затесался пробел, привести к «каноническому» виду самостоятельно.</p></p>
<div class="row around-sm">
<div class="col-xs-12 col-sm-10">
<figure>
    <img class="bordered" alt="Дадата" src="asylum-dadata-2.png">
    <figcaption><a href="https://dadata.ru/">Дадата</a> делает из огрызков яблоки: автоматически приводит в нормальный вид ФИО, телефоны и адреса; исправляет ошибки и восстанавливает недостающее.</figcaption>
</figure>
</div>
</div>
<h3 id="поддерживать-черновики-ипромежуточные-состояния-процесса">Поддерживать черновики и промежуточные состояния процесса</h3>
<p>Если я на ¾ заполнил анкету на банковскую карту, а потом заметил, что забыл паспорт — сохранить как черновик, не передавать пока клеркам. Но дать мне возможность завтра продолжить с места, где сейчас остановился.</p></p>
<h3 id="быть-незаметным">Быть незаметным</h3>
<div class="row">
<div class="col-xs-12 col-sm-8">
<p>Вот приложение, чтобы разблокировать автомобиль. Зима, минус десять и метель. Вы подходите к машине. Стягиваете с руки перчатку и выуживаете из кармана телефон. Жмете на кнопку, чтобы загорелся экран. Разблокируете телефон по отпечатку пальца. Жмете на кнопку «домой». Тычете в иконку приложения. Ждете, пока загрузится. Наконец, жмете на «разблокировать двери». Удо-о-обно.</p>
<p>А теперь так: вы подходите к автомобилю, он распознает вас по датчику в брелке и сам разблокирует двери. Интерфейса нет, но функция его выполняется.</p>
</div>
<div class="col-xs-8 col-sm-4">
<img alt="Разблокировка автомобиля" src="asylum-unlock.png">
</div>
</div>
<p>Из этой же серии — автоматическое определение города покупателя в интернет-магазине, умная поисковая строка вместо кучки фильтров, иконка календаря c сегодняшним числом. Чем меньше интерфейса, тем лучше.</p>
<h2 id="ωрезюме-ипрактика">Ω Резюме и практика</h2>
<p>Цели персонажа объясняют, <em>ради чего</em> использовать ваш продукт. Сценарии рассказывают, <em>как</em> человек это делает.</p>
<p>Хороший проектировщик до мелочей прорабатывает повседневные сценарии, потому что именно они формируют впечатление от продукта.</p>
<p>Чтобы интерфейс из «ну, неплохо» перешел в «ух ты, класс!», ему придется стать человечным:</p>
<ul>
<li>запоминать привычки человека,</li>
<li>самостоятельно решать проблемы,</li>
<li>быть незаметным.</li>
</ul>
<h3 id="домашнее-задание">Домашнее задание</h3>
<p>Возьмите ключевого персонажа из предыдущего домашнего задания. Выпишите его цели и один повседневный сценарий. За счет чего сценарий приближает персонажа к цели? Каких человечных черт не хватает интерфейсу на каждом шаге?</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь <span class="nowrap">на <i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Мозговой слизень атаковал городскую навигацию</title>
      <link>https://antonz.ru/slug-navigation/</link>
      <pubDate>Wed, 18 May 2016 10:39:00 +0000</pubDate>
      
      <guid>https://antonz.ru/slug-navigation/</guid>
      <description>После победы над метро мозговой слизень перебрался в мэрию и расставил на улицах указатели. Вот что из этого вышло.</description>
      <content:encoded><![CDATA[<p>После <a href="/fixing-escalator-announcement/">победы над метро</a> мозговой слизень перебрался в мэрию. Теперь на перекрестках Москвы ставят вот такие указатели:</p>
<p><img src="slug-school.jpg" alt="ГБОУ ГПБОУ ДОУ ОМНОНОМ"></p>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <p><img alt="ЗБС УПРЛС № 23" src="slug-zbs.jpg"></p>
</div>
<div class="col-xs-12 col-sm-6">
<div class="figcaption">
<p>ГБОУ Школа № 967</p>
<p>ГКУ СДР № 23</p>
<p>МАУ ДО СОЦ КД «БЕРЕЗКА»</p>
<p>ЗБС УПРЛС № 111</p>
</div>
</div>
</div>
<p>Предположим, в спальных районах действительно нечего писать на указателях, кроме детских садов и школ (хм). Но <em>как</em> это написано.</p>
<p>Я сейчас буду предельно жесток. Большего идиотизма&hellip; погодите, пришел человек из мэрии&hellip; хм, что-то ползет по затылку&hellip; ой! Так вот, я говорю — молодцы в мэрии. Мне реально важно понимать, что там не дом ребенка, а государственное казенное учреждение. Не школа, а государственное бюджетное образовательное учреждение.</p>
<p>Но есть недоработка. Я заметил, что на домах таблички остались старые, неинформативные:</p>
<p><img src="slug-street.jpg" alt="Улица Молодцова"></p>
<p>Просто «улица Молодцова, 2А» — это как вообще? Следует исправить:</p>
<ul>
<li>ОАТД ГМ улица Молодцова, КСТД № 2 ЛИТ А</li>
<li>Объект административно-территориального деления города Москвы улица Молодцова, капитальное сооружение типа «дом» № 2 литер А</li>
</ul>
<p>Надеюсь, что новые таблички просто не успели развесить, и скоро мы их увидим.</p>
<p>Еще по теме:</p>
<ul>
<li>Студия Лебедева <a href="http://www.artlebedev.ru/everything/moscow/street-signs/">анонсирует указатели</a></li>
<li>Тема Лебедев пишет, <a href="http://tema.livejournal.com/2149952.html">что из этого получилось</a></li>
</ul>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Слизни не пройдут: <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>«Психбольница» Купера 20 лет спустя</title>
      <link>https://antonz.ru/asylum/</link>
      <pubDate>Mon, 16 May 2016 10:00:22 +0000</pubDate>
      
      <guid>https://antonz.ru/asylum/</guid>
      <description>Обезжиренный конспект классической книги по UX, с примерами и домашним заданием.</description>
      <content:encoded><![CDATA[<p>Почти двадцать лет назад Алан Купер написал скандальную книгу о пользовательских интерфейсах — «Психбольница в руках пациентов». Мнения в индустрии о ней несколько, кхм, противоречивые — из-за резкого тона и яростной критики, с которой Алан обрушился на разработчиков и менеджеров. Но в книге много дельного: это признают даже противники метода «персонажей», который предлагает Купер.</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<p>Мне фиолетовы категоричные высказывания автора: чего-чего, а провокаторов в интернете хватает. В книге напрягало другое: безбрежный океан воды, банальностей, самоповторов и консалтинговых заклинаний, в которых Купер утопил суть. Из-за этого рекомендовать книгу новичкам в дизайне не хочется — чего ради им терять столько времени впустую.</p>
<p>Но мысли-то в книге дельные! Самому иногда хочется к ним вернуться, только чтобы не продираться через толщу воды. В результате я решил книжку «обезжирить»:
</p>
</div>
<div class="col-xs-12 col-sm-4">
<a class="img-link" href="https://www.amazon.com/Inmates-Are-Running-Asylum-Products-ebook/dp/B000OZ0N62"><img src="asylum.jpg" alt="Психбольница в руках пациентов"></a>
</div>
</div>
<ul>
<li>убрать всё, в чем не вижу практической пользы;</li>
<li>не потерять примеры;</li>
<li>опубликовать конспект в блоге.</li>
</ul>
<p>Конспект пригодится тем, кто Купера не читал (бонус: теперь можно и не читать) и тем, кто хочет освежить материал.</p>
<p>Статья получилась большая, поэтому я разбил её на две части:</p>
<ol>
<li>Сложность и персонажи (то, что вы сейчас читаете)</li>
<li><a href="/asylum-2">Цели и сценарии</a></li>
</ol>
<h2 id="чем-сложнее-тем-хуже">Чем сложнее, тем хуже</h2>
<p>Чем больше действий надо совершить, чтобы применить функцию, тем меньше людей захотят это делать.</p>
<blockquote>
<p>Переключаться между каналами телевизора просто, все это делают. Добавить новый канал — уже сложнее. А заставить телевизор записать передачу в 13:40 без инструкции невозможно — и этой функцией никто не пользуется. В результате современный телевизор использует ничтожное количество возможностей: переключать каналы и регулировать звук.</p>
</blockquote>
<div class="row">
<div class="col-xs-12 col-sm-6">
    <figure class="image">
        <img class="img-bordered" alt="Как записать программу?" src="asylum-tv-1.png">
        <figcaption>Как записать программу?</figcaption>
    </figure>
</div>
<div class="col-xs-12 col-sm-6">
<figure class="image">
        <img class="img-bordered" alt="Элементарно" src="asylum-tv-2.jpg">
        <figcaption>По-прежнему «элементарно», как и 20 лет назад</figcaption>
    </figure>
</div>
</div>
<p>Иногда в оправдание сложности интерфейса приводят пример с автомобилями:</p>
<blockquote>
<p>Человек учится четыре месяца, прежде чем получает право самостоятельно водить. В чем проблема потратить день на освоение программы?</p>
</blockquote>
<p>Но единственная причина, почему люди специально учатся вождению — высокая цена ошибки. Ошибка за рулем приводит к увечьям и смерти. Если бы не это — люди учились водить методом тыка, как учатся Экселю.</p>
<blockquote class="big">Сложный интерфейс = плохой интерфейс
</blockquote>
<p>Другое возражение — про корпоративные программы: бухгалтерию, ЦРМ, складской учет.</p>
<blockquote>
<p>Сотрудникам платят за работу с этим софтом, так что пусть страдают, тоже мне неженки.</p>
</blockquote>
<p>Действительно, выбора у сотрудников нет, поэтому работать будут. Но всё сэкономленное на разработке неудобной программы будет растрачено:</p>
<ul>
<li>на техподдержку,</li>
<li>исправление ошибок,</li>
<li>обучение новых сотрудников из-за высокой текучки,</li>
<li>оплату неэффективной работы людей с программой, которую они ненавидят.</li>
</ul>
<h2 id="без-человечности-хорошо-неполучится">Без человечности хорошо не получится</h2>
<p>Продукт должен «закрывать» потребность целевой аудитории. Это факт. Должен решать задачи пользователя. Тоже верно. Но есть ещё одно качество — человечность.</p>
<p>Если продукт не привлекает, человек всё равно <em>может</em> им пользоваться. Если нет других альтернатив или его заставляют по работе. Но от такого продукта человек сбежит при первой возможности.</p>
<blockquote>
<p>Компания Адоб годами выпускала посредственный графический редактор Фотошоп. И вроде бы даже дизайнеры уже привыкли рисовать в нем интерфейс. Но как только появился Скетч, который <em>был создан</em> для проектирования интерфейсов, десятки тысяч дизайнеров переметнулись к нему.</p>
</blockquote>
<blockquote class="big">Бесчеловечный продукт = посредственный продукт
</blockquote>
<p>Если же продукт привлекает, пользователь простит ему мелкие грешки и шероховатости. А если человек в восторге от программы — начнет «продавать» её другим.</p>
<blockquote>
<p>Хрестоматийный пример привлекательного продукта — айфон: религиозная одержимость фанатов настолько общеизвестна, что над ней даже шутить перестали. Ещё примеры человечности: гуглопочта, Тесла, Рокетбанк.</p>
</blockquote>
<figure class="image">
    <img alt="Рокетбанк" src="asylum-rocket-1.png">
    <figcaption>Клиенты так лояльны к Рокетбанку, что легко простили ему некрасивую историю <a href="https://vc.ru/p/rocket-situation">с Интеркоммерцем</a></figcaption>
</figure>
<p>Красивой обертки недостаточно, чтобы сделать интерфейс человечным. Придется ещё с самого начала проектировать его под конкретных живых людей из вашей целевой аудитории. Купер называет их <em>персонажами</em>.</p>
<h2 id="персонажи-фокусируют-нареальных-людях">Персонажи фокусируют на реальных людях</h2>
<p>Персонажи — не совсем реальные люди. Если поговорить с несколькими представителями целевой аудитории продукта, вы заметите у них общие черты, потребности, цели. Добавьте вымышленное имя и подробности биографии — и получите персонажа.</p>
<blockquote style="border: none; padding: 1em 2em; margin-left: 0; margin-bottom: 1em;">
<div class="row">
<div class="col-xs-12 col-sm-8">
Миша, 42 года, продает стройматериалы для дорогих коттеджей. В юности тягал штангу, а с годами все больше налегал на пиво вместо «железа» и к сорока годам ощутимо раздобрел. Немного переживает по этому поводу: не так, чтобы снова серьезно заняться спортом, но что-то сделать хочет.<br><br>
Краем уха в курилке услышал о программе тренировок «воркаут за 7 минут»: несколько минут в день интенсивно потеешь, а результат как от часовой тренировки в зале. Миша заинтересовался, нашёл приложение в аппсторе и скачал.
</div>
<div class="col-xs-6 col-sm-4 col-md-offset-1 col-md-3">
<img alt="Миша" src="asylum-misha.jpg">
<div class="figcaption">Миша суровый</div>
</div>
</div>
</blockquote>
<p>Чем больше вы узнаёте предметную область, тем точнее становятся персонажи.</p>
<p>Для небольшой системы персонаж будет один, для крупной несколько. Но чем больше персонажей, тем запутаннее интерфейс — так что не увлекайтесь. Купер пишет, что круче всего проектировать для единственного пользователя, завоевать всего 10 % потенциальной аудитории, но зато вызывать у них стопроцентный восторг. Пример Apple показывает, что это действительно иногда работает :–)</p>
<p>Распространенная ошибка: персонаж-покупатель вместо персонажа-пользователя.</p>
<blockquote>
<p>Решение о покупке ЦРМ принимает директор по продажам. Логично под него и проектировать интерфейс, верно? Купер возражает: лучше проектировать для конечного пользователя — продавца.</p>
<p>Если продавцы работают с ЦРМ продуктивно, то это успех и для начальника. А если продавцы от программы плюются и ведут сделки «под столом», то получается бардак, от которого директор пострадает первым. Это не значит, что потребности директора надо игнорировать, но ключевой персонаж — продавец.</p>
</blockquote>
<p>Есть ещё один тонкий момент. Критики Купера обычно говорят: «да вы поглядите на этого чудака, он предлагает <em>выдумывать</em> персонажей». Конечно, это не так — Купер не предлагает брать описание «с потолка». Из выдуманного у персонажа — имя и забавные детали биографии. Остальное: потребности, привычки, навыки, где и когда человек работает с продуктом — всё настоящее. А имя и биографию выдумывают, чтобы не обидеть случайно реальных людей, на которых персонаж удивительно похож.</p>
<blockquote class="big">Пока не поговорите с реальными пользователями, не получите персонажа
</blockquote>
<h2 id="больше-всего-внимания-ключевым-персонажам">Больше всего внимания — ключевым персонажам</h2>
<p>Не каждому персонажу нужен отдельный интерфейс. Начальник отдела спокойно использует интерфейс ЦРМ, спроектированный для продавца. Дизайнер скрепя сердце рисует интерфейс в фотошопе. Администратор группы в фейсбуке смотрит на ленту постов через ту же амбразуру, что и все остальные.</p>
<p>Но для некоторых персонажей без отдельного интерфейса не обойтись. Маркетолог запускает через ЦРМ рекламные компании, и интерфейс продавца ему не подходит. Архитектор фотошопом ну никак не обойдётся. Разработчику нужна АПИ-консоль фейсбука, а не лента.</p>
<p>Таких персонажей Купер называет <em>ключевыми</em>.</p>
<p>Хорошо, когда ключевой персонаж один. Плохой знак, если их больше трёх: возможно, вы охватили одной программой слишком много.</p>
<figure class="image">
    <img alt="Оракл Ебизнес Сьют" src="asylum-oebs-2.png">
    <figcaption>Это ОЕБС — Оракл Ебизнес Сьют. Программа автоматизирует в одном интерфейсе ВСЕ бизнес-процессы: бухгалтерия, учёт, закупки, кадры, склад, управление проектами,… Благодаря этому в ней не работает НИЧЕГО. <br><br>Настоящую работу клеркам приходится вести рядом, в экселе и специализированных программах, а в ОЕБС перебивать результаты для руководства. Поскольку руководство ОЕБСом пользоваться тоже не может, специальные люди вытаскивают для них отчеты в эксель. Не шучу, реально так работает. Сотрудники ОЕБС <em>ненавидят</em>.</figcaption>
</figure>
<blockquote class="big">Ключевому персонажу — отдельный интерфейс
</blockquote>
<p>Ключевым персонажам дизайнер уделяет больше всего времени при проектировании интерфейса, на то они и ключевые.</p>
<p>Чтобы сделать интерфейс под персонажа, голого описания недостаточно. Понадобятся ещё цели (ради чего человек использует продукт) и сценарии (как он добивается целей с помощью продукта). О целях и сценариях — <a href="/asylum-2/">во второй части статьи</a>.</p>
<h2 id="ωрезюме-и-практика">Ω Резюме и практика</h2>
<p>Если экономить время на проектировании интерфейса, продукт получится сложным. Сложные продукты всех бесят, а компании теряют на них деньги.</p>
<p>Чтобы продукт получился по-настоящему классным, он должен быть человечным. «Модный» интерфейс ≠ человечный интерфейс. Необходимое условие привлекательного продукта — проектирование под реальных пользователей. Инструмент проектирования — персонажи.</p>
<p>У персонажа есть имя, биография, привычки, цели и навыки. Имя и биография — вымышленные, всё остальное — настоящее, от реальных пользователей.</p>
<p>Ключевых персонажей обычно не больше трех, иначе продукт получится сложным.</p>
<h3 id="домашнее-задание">Домашнее задание</h3>
<p>Возьмите продукт, над которым сейчас работаете, и выберите для него одного ключевого персонажа. Только чур не фантазировать: если слабо представляете пользователей, сначала побеседуйте с ними. Теперь найдите подходящее фото и опишите персонажа в трех абзацах: кто он, чем живет, чего хочет. Зачем ему продукт? В каких условиях человек с ним работает? Сколько времени с ним проводит?</p>
<h2 id="продолжениеasylum-2"><a href="/asylum-2/">Продолжение</a></h2>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь <span class="nowrap">на <i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как привести дела в порядок без Дэвида Аллена и СМС</title>
      <link>https://antonz.ru/jedi/</link>
      <pubDate>Tue, 26 Apr 2016 08:30:16 +0000</pubDate>
      
      <guid>https://antonz.ru/jedi/</guid>
      <description>Люди действуют ради получения сиюминутного удовольствия. Ни черта не способны удержать в голове. Живут в постоянной неопределенности. И это нормально.</description>
      <content:encoded><![CDATA[<p>Я знаю три способа управления задачами:</p>
<ol>
<li>
<p>По наитию. Иногда что-то куда записывать, эпизодически заносить дела в календарь, остальное запоминать (и забывать). Неплохо работает для фрилансеров — люди привыкли, что они факапят все на свете. Для остальных быстро превращает жизнь в боль.</p>
</li>
<li>
<p>По умной книжке. Прочитать что-нибудь о продуктивности от мэтров: Глеба Архангельского, Дэвида Аллена, Брайана Трейси — они учат <em>правильно жить</em>. Круто изменить жизнь, продержаться две недели, забросить и разочароваться.</p>
</li>
<li>
<p>Понять и простить. Понять, что <em>правильно жить</em> не получится — человек не робот. Простить собственные недостатки. Научиться их использовать, чтобы все-таки нормально управляться с делами.</p>
</li>
</ol>
<p>Работает только третий способ. Учит ему Максим Дорофеев, он называет такой путь «джедайской техникой». Джедайская техника признает, что:</p>
<ul>
<li>люди большую часть времени действуют ради получения сиюминутного удовольствия;</li>
<li>ни черта не способны удержать в голове и вообще устают от мыслей;</li>
<li>существуют в состоянии вечной неопределенности.</li>
</ul>
<p><img src="jedi-monkey-2.png" alt="Обезьяна сиюминутного удовольствия"></p>
<p>Это нормально и естественно. Больше того, эти «слабости» — основа для простой и надежной системы доведения дел до конца. Простой — потому что сложная тупо не работает. Надежной — потому что построена на примитивных правилах и инструментах.</p>
<p>Максим учит:</p>
<ol>
<li>Разгружать память и минимизировать «повторные мысли».</li>
<li>Правильно формулировать задачи и планировать без зауми.</li>
<li>Уменьшать вредные переключения.</li>
<li>Держать под рукой полезную информацию.</li>
<li>Регулярно проводить «техобслуживание» системы.</li>
</ol>
<div class="row">
<div class="col-xs-12 col-sm-8">
<p>Чтобы освоить джедайскую технику, лучше всего прочитать книгу или посмотореть вебинар:</p>
<ul>
  <li><a href="https://www.mann-ivanov-ferber.ru/books/dzhedajskie-texniki/">Книга «Джедайские техники»</a></li>
  <li><a href="https://www.youtube.com/watch?v=jt3_sq8LQYM">Вебинар</a></li>
  <li></li>
</ul>
</div>
<div class="col-xs-12 col-sm-2 col-sm-offset-1 hidden-mobile">
<a href="https://www.mann-ivanov-ferber.ru/books/dzhedajskie-texniki/" class="img-link"><img alt="Книга «Джедайские техники»" src="jedi-book.png"></a>
</div>
</div>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Законы робототехники в интерфейсе</title>
      <link>https://antonz.ru/laws/</link>
      <pubDate>Tue, 12 Apr 2016 11:15:02 +0000</pubDate>
      
      <guid>https://antonz.ru/laws/</guid>
      <description>Хороший интерфейс, как робот из рассказов Азимова, подчиняется трем законам.</description>
      <content:encoded><![CDATA[<p>Интерфейс — это способ, которым человек решает свою задачу:</p>
<ul>
<li>войти в квартиру (интерфейс — дверь);</li>
<li>сообщить машинисту поезда о пожаре (переговорная панель);</li>
<li>найти на карте аэропорта ближайший туалет (информационный киоск).</li>
<li>купить цветы в интернет-магазине (форма заказа).</li>
</ul>
<p>Для человека интерфейс — это внешность и наблюдаемое поведение, а не внутреннее устройство. Пользователь не задумывается о том, как работает механизм или программа изнутри, пока она справляется со своими задачами.</p>
<div class="padded">
    <figure class="image">
        <img class="img-bordered-thin" alt="Яндекс" src="laws-yandex.png">
        <figcaption>Поиск Яндекса — это сложнейшая программа, которая работает на тысячах серверов. Но кого это волнует, когда все знают, что Яндекс — это такая страничка, где быстро можно найти то, что нужно.</figcaption>
    </figure>
</div>
<p>В проектировании интерфейсов вагон и маленькая тележка правил разной степени универсальности. В то же время, мне нравится выделять три базовых закона, о которых лучше всегда помнить. Из них выводятся все остальные.</p>
<p>Оригинальные законы робототехники придумал писатель-фантаст Айзек Азимов. В рассказах Азимова они защищали людей от произвола машин. А у нас помогут людям не страдать от кривых интерфейсов.</p>
<h2 id="1-ненавредить">№ 1. Не навредить</h2>
<p>Компьютер не может причинить данным человека вред или своим бездействием допустить, чтобы они пострадали.</p>
<h3 id="нетерять-данные-пользователя">Не терять данные пользователя</h3>
<p>♞ Человек пять минут вводил реквизиты в квитанцию на оплату, а потом нажал на «Отправить» и получил ошибку:</p>
<p><img src="laws-something-gone-wrong.jpg" alt="Что-то пошло не так"></p>
<p>Человек нажимает на «повторить попытку», и…</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p>
    <em>Плохо</em><br>
    Программа открывает пустую форму, пользователь вводит реквизиты заново.
</p>
</div>
<div class="col-xs-12 col-sm-6">
<p>
    <em>Лучше</em><br>
    Программа показывает форму с заполненными реквизитами, ровно как она была до отправки.
</p>
</div>
</div>
<h3 id="неперекладывать-начеловека-заботу-осохранности-данных">Не перекладывать на человека заботу о сохранности данных</h3>
<p>Ленивая программа заставляет человека указывать, когда и что сохранять. Забыл сохранить? Ну, твои проблемы.</p>
<p>♞ Человек дописал статью в текстовом редакторе и решил его закрыть. Реакция программы:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p>
    <em>Плохо</em><br>
    В документе «Мой документ 132» есть несохранённые изменения. Сохранить их? Да / нет / справка
</p>
</div>
<div class="col-xs-12 col-sm-6">
<p>
    <em>Лучше</em><br>
    (молча автоматически сохраняет после каждого изменения)
</p>
</div>
</div>
<figure class="image">
    <img class="img-bordered" alt="Автосохранение" src="laws-autosave.png">
    <figcaption>Гуглодокументы моментально сохраняют любые изменения</figcaption>
</figure>
<p>Ленивая программа не несёт ответственности за технические ошибки. Заботливая — страхует от них.</p>
<p>♞ В результате технического сбоя личный дневник в облачном хранилище затёрся версией пятилетней давности. Реакция сервиса:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p>
    <em>Плохо</em><br>
    Яндекс.Диск: «Извини, дружище. Надеюсь, у тебя есть бэкапы. Лично я прошлые версии не храню».
</p>
</div>
<div class="col-xs-12 col-sm-6">
<p>
    <em>Лучше</em><br>
    Дропбокс: «Хочешь восстановить дневник, как он был до этого досадного происшествия? Нет проблем».
</p>
</div>
</div>
<h3 id="помнить-привычки-человека">Помнить привычки человека</h3>
<p>Равнодушная программа — как бестолковый сотрудник техподдержки: всегда начинает спрашивать «с чистого листа». Пользователь не барин, может и по второму разу то же самое сделать, и по третьему. Заботливая программа помнит предпочтения человека и старается их учитывать.</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p>
    <em>Плохо</em><br>
    «Яндекс.Музыка» при старте всегда открывает раздел «подборки». Ей всё равно, что я никогда не слушал эти подборки и не собираюсь.
</p>
</div>
<div class="col-xs-12 col-sm-6">
<p>
    <em>Лучше</em><br>
    Открывать раздел, на котором пользователь остановился в прошлый раз. В моём случае это сохранённые треки. Ещё лучше — включать тот же трек, на котором я прервал прослушивание.
</p>
</div>
</div>
<h2 id="2-невыносить-мозг">№ 2. Не выносить мозг</h2>
<p>Компьютер должен решать задачу пользователя, а не выносить мозг по пустякам. Программа не должна впустую тратить время человека или заставлять его выполнять действия сверх необходимых.</p>
<h3 id="незаставлять-человека-думать">Не заставлять человека думать</h3>
<p>Все, что может делать машина самостоятельно — она должна делать, не вмешивая человека. Помнить промежуточные результаты вычислений, пересчитывать американские размеры одежды в европейские, определять город и индекс, красиво форматировать номер банковской карты.</p>
<p>Для второстепенных задач хорошая программа делает выбор автоматически:</p>
<ul>
<li>Вместо того, чтобы заставлять человека придумывать «логин» — использует электронную почту. Даёт войти через соцсети, многим так удобнее.</li>
<li>Вместо «введите номер телефона в формате 7xxxxxxxxxx» — разрешает свободный ввод и форматирует номер автоматически.</li>
<li>Вместо того, чтобы с каждой покупкой запрашивать ФИО, адрес и телефон — подставляет их из предыдущего заказа.</li>
</ul>
<figure class="image">
    <img alt="Вход по эл. почте" src="laws-mif-1.png">
    <figcaption>«<a href="http://www.mann-ivanov-ferber.ru/">Манн, Иванов и Фербер</a>» пускают в личный кабинет по эл. почте без логина и пароля</figcaption>
</figure>
<h3 id="решать-конечную-задачу-анепромежуточную">Решать конечную задачу, а не промежуточную</h3>
<p>Хороший робот решает задачу человека, а не ту, что выдумал программист. Если в интернет-магазине покупатель видит «заказ отправлен», этого недостаточно — цель еще не достигнута.</p>
<p>Так лучше:</p>
<blockquote>
<p>Мы приняли заказ. Менеджер перезвонит через полчаса, чтобы согласовать доставку.</p>
</blockquote>
<p>Так тоже хорошо:</p>
<blockquote>
    <p>Мы приняли заказ. Сегодня воскресенье, поэтому менеджер перезвонит насчёт доставки завтра с 10 до 11.</p>
    <p>Для тех, кто любит покупать в выходные и праздники, у нас бывают скидки. Подпишитесь <u>на рассылку</u>, чтобы их не пропустить.</p>
</blockquote>
<h3 id="незаставлять-человека-ждать">Не заставлять человека ждать</h3>
<p>Компьютер не должен заставлять человека ждать. Ритм взаимодействия устанавливает пользователь.</p>
<blockquote>
<p>Если интернет-магазин десять секунд грузит десяток скриптов веб-аналитики, чата, обратного звонка, виджетов с акциями и черта лысого в сухарях, а я в это время сижу перед экраном и жду, когда увижу карточку товара — то мне такой магазин не нужен.</p>
</blockquote>
<p>Программа не имеет права оставить человека в неизвестности:</p>
<blockquote>
<p>Отправил заказ, а она крутит индикатором ожидания, типа «не видишь что ли — работаю». А сама тихо и навсегда сломалась.</p>
</blockquote>
<p>Если приказ человека не выполнен, робот обязан немедленно сказать об этом:</p>
<blockquote>
<p>Нет интернета. Мы не успели передать заказ в магазин, но сохранили его на этой странице. Так что когда интернет появится, вы сможете отправить заказ одной кнопкой — заново вводить ничего не придётся.</p>
</blockquote>
<h2 id="3-общаться-по-человечески">№ 3. Общаться по-человечески</h2>
<p>Плохой интерфейс говорит языком программиста: с удовольствием делится подробностями, как у него всё внутри устроено и что сломалось. Решений он не предлагает — человек умный, сам разберётся. Хороший интерфейс, напротив <em>по-человечески говорит в чём дело</em> и помогает справиться с проблемой:</p>
<p>♞ Человек пытается войти в интернет-банк и видит сообщение:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p>
    <em>Плохо</em><br>
    В целях безопасности подтверждение операции невозможно. Обратитесь в Телефонный центр.
</p>
</div>
<div class="col-xs-12 col-sm-6">
<p>
    <em>Лучше</em><br>
    Кажется, вы сменили SIM-карту. Ответьте на пару вопросов, чтобы получить доступ к интернет-банку: позвоните +7 495 223-23-23 или напишите <u>в чат</u>.
</p>
</div>
</div>
<p>Плохой интерфейс требует, и тем самым бесит человека. Хороший — <em>объясняет пользу</em>, и тем самым убеждает:</p>
<p>♞ На форме заказа цветов в интернет-магазине пользователь дошёл до поля «Телефон». Под полем надпись:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p>
    <em>Плохо</em><br>
    Телефон — обязательное поле
</p>
</div>
<div class="col-xs-12 col-sm-6">
<p>
    <em>Лучше</em><br>
    Курьер позвонит за час до приезда
</p>
</div>
</div>
<p>Плохой интерфейс многословно и путано объясняет. Хороший — <em>наглядно показывает</em>.</p>
<p>♞ В CRM-системе появилась новая возможность. Пора рассказать о ней пользователю:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p>
    <em>Плохо</em><br>
    Система ускоряет заполнение сведений о компании с помощью функций подсказок для реквизитов юридических лиц. Продвинутые возможности полнотекстового поиска делают возможным указание всех сведений за считанные секунды.
</p>
</div>
<div class="col-xs-12 col-sm-6">
<p>
    <em>Лучше</em><br>
    <img alt="Картинка лучше тысячи слов" src="laws-new-feature.png">
</p>
</div>
</div>
<p>Плохой интерфейс учит человека, как правильно жить. Хороший — <em>молча делает, но предупреждает</em> о неприятных последствиях:</p>
<div class="row">
<div class="col-xs-12 col-sm-6">
<p>
    <em>Плохо</em><br>
    Вы задали элемент запрета разрешений. Элементы запрета имеют более высокий приоритет, чем элементы разрешения. Это означает, что пользователь, являющийся членом двух групп, одна из которых имеет разрешение, а другой это разрешение запрещено, не будет иметь это разрешения. Продолжить выполнение операции? Да / нет
</p>
</div>
<div class="col-xs-12 col-sm-6">
<p>
    <em>Лучше</em><br>
    Вы добавили Виктора Васильева в группу «Читатели», и поэтому он не сможет редактировать статьи. Если это не то, чего вы хотели — <u>уберите его из группы</u>.
</p>
</div>
</div>
<p>А ещё хороший интерфейс называет вещи своими именами и не коверкает язык:</p>
<ul>
<li>Программа для книжного магазина работает с книгами и открытками, а не «объектами учета».</li>
<li>В туду-листе осталось «23 задачи», а не «задач: 23»</li>
</ul>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<h2 id="запомнить">Запомнить</h2>
<p>Если вы никогда ничего больше не прочитаете о проектировании интерфейсов, но примете и начнёте применять три закона робототехники в своих программах — пользователи будут слать вам лучи благодарности вместо проклятий.</p>
<p>Эти «законы» — просто здравый смысл. То же самое, что вы ожидаете от смышлёного коллеги:</p>
<ul>
<li>Не подставлять и не пакостить.</li>
<li>Работать на совесть и решать проблемы самостоятельно.</li>
<li>Внятно доносить свою мысль и адекватно общаться.</li>
</ul>
<p>Следующая статья цикла:</p>
<p class="big">
<a href="/simple-ui">Что делает интерфейс простым</a>
</p>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Главный секрет фронтенд-разработки</title>
      <link>https://antonz.ru/frontend-secret/</link>
      <pubDate>Wed, 30 Mar 2016 08:44:16 +0000</pubDate>
      
      <guid>https://antonz.ru/frontend-secret/</guid>
      <description>Бурления в джаваскрипт-разработке вызывают беспокойство у фронтендеров. Беда в том, что большинство ребят не знают главный секрет.</description>
      <content:encoded><![CDATA[<p>Бурный рост фреймворков, библиотек и подходов в джаваскрипт-разработке вызывает объяснимое беспокойство у моих знакомых фронтендеров.</p>
<p>Беда в том, что большинство ребят в веб-разработке очень молодые и не знают главный секрет новых тулов:</p>
<blockquote class="big">
  Они все сдохнут. И очень скоро.
</blockquote>
<p>Поэтому, если вы начинающий разработчик — не переживайте. Выдохните. Закройте эти пятьдесят вкладочек в браузере с «полезными ссылками для веб-разработчика». Отпишитесь от еженедельных рассылок. Не читайте в твитере гуру веб-разработки, они пишут не для вас. Не тратьте время на холиварные статьи на Хабре.</p>
<p>Возьмите проверенный надёжный инструмент. Возьмите фреймворк, который уже используют в компании. Возьмите Вью, или Реакт, или прости господи, Ангуляр — то, на чём уже вовсю пишут ваши коллеги. Спокойно разрабатывайте, без душевных метаний по сторонам. Найдите опытного профи среди коллег и учитесь у него. Неспешно читайте книги про то, как все устроено.</p>
<p>Изучайте обратную связь от пользователей, а не статьи про очередной «более лучший» способ писать чертов CSS.</p>
<p>Возвращайтесь через два года посмеяться над трупами своих врагов.</p>
<p>Что вам понадобится:</p>
<ul>
<li>Книги про «как все устроено» (бесплатные):
<ul>
<li><a href="http://eloquentjavascript.net/">Eloquent JavaScript</a>, Marijn Haverbeke</li>
<li><a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/">Learning JavaScript Design Patterns</a>, Addy Osmani</li>
<li><a href="https://learn.javascript.ru">Современный учебник JavaScript</a>, Илья Кантор</li>
</ul>
</li>
<li>Крутой коллега</li>
<li>Здоровый пофиг на все модное</li>
</ul>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>В свободное время — заглядывайте в <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Пристрелите фичу</title>
      <link>https://antonz.ru/shoot-the-feature/</link>
      <pubDate>Tue, 22 Mar 2016 08:08:20 +0000</pubDate>
      
      <guid>https://antonz.ru/shoot-the-feature/</guid>
      <description>Пока не слишком поздно.</description>
      <content:encoded><![CDATA[<p>Фич всегда слишком много, а денег и времени — недостаточно. Вы и сами это знаете, если разрабатываете софт для реального мира, а не страны пресветлых эльфов. Трагическое несовершенство жирных фич и тощих сроков каждый разрешает для себя сам, но некоторые способы сильно лучше других.</p>
<p>Вот какие варианты усекновения фич мне встречались.</p>
<h2 id="снять-сзабега">Снять с забега</h2>
<p>Капитанский совет: перед тем, как отдавать функцию в разработку, проверьте — может она вовсе не нужна? Ориентируйтесь на ценность для потребителя. Три простых правила:</p>
<ul>
<li>если фичу не просят каждый месяц, она не нужна;</li>
<li>если фичу просят <a href="https://antonz.ru/users-not-backlog/">не те, кто будет ей пользоваться</a> — она бесполезна;</li>
<li>если даже по оптимистичным прогнозам вы заработаете на фиче меньше, чем потратите на разработку — выкиньте ее.</li>
</ul>
<figure>
  <img alt="Снять с забега" class="img-bordered" src="dear-fucking-google.png">
  <figcaption>Наивные пользователи просят <a href="https://www.change.org/p/google-keep-google-reader-running">вернуть гугл-ридер</a></figcaption>
</figure>
<h2 id="поставить-заглушку">Поставить заглушку</h2>
<p>Если снять фичу с забега не хватает духа, а вкладываться в реализацию страшно, поставьте заглушку.</p>
<blockquote>
<p>Статическая картинка — вместо сложной адаптивной верстки.</p>
</blockquote>
<blockquote>
<p>Промо-страница с формой сбора электронной почты — вместо полноценного приложения.</p>
</blockquote>
<blockquote>
<p>Кнопка «отменить подписку», которая открывает чат с техподдержкой — вместо автоматической отписки.</p>
</blockquote>
<p>Соберите статистику использования и обратную связь — потом решите, что делать с фичей дальше.</p>
<h2 id="упростить">Упростить</h2>
<p>Все любят усложнять: заказчики, аналитики, разработчики. Поэтому если у вас есть требования к системе, можете быть уверены — они переусложнены. Когда сроки кусают за попу, самое время радикально упрощать.</p>
<p>Вариант первый: решить задачу другим, более простым способом. Часто это замена большой и умной бизнес-логики на ручной труд оператора.</p>
<blockquote>
<p>Медицинская клиника: вместо интеллектуального алгоритма автоматического подбора врача по симптомам — кнопка «Заказать звонок». Сотрудник легко справится, причем лучше любого алгоритма.</p>
</blockquote>
<figure>
  <img alt="Упростить" class="img-bordered" src="simplify.png">
  <figcaption>Победитель среди форм записи на прием к врачу — <a href="http://artgorbunov.ru/bb/soviet/20140825/">чат с девушкой из регистратуры</a></figcaption>
</figure>
<p>Вариант второй: предусмотреть только основной сценарий, удобный для большинства случаев. И не поддерживать более редкие альтернативы.</p>
<blockquote>
<p>CRM-система: сортировать заказы в списке по дате создания. Менять сортировку нельзя. 3% пользователей страдают, а остальным как-то пофиг.</p>
</blockquote>
<h2 id="изолировать-изменения">Изолировать изменения</h2>
<p>Способ подходит, если вы делаете улучшенную версию старой унылой системы. Тогда, если не успеваете исправить все — измените один участок, не трогая смежные.</p>
<blockquote>
<p>Интернет-банк: причесать внешний вид личного кабинета, а функциональность не менять.</p>
</blockquote>
<blockquote>
<p>Сайт компании: сделать новую главную страницу, остальные оставить как были.</p>
</blockquote>
<blockquote>
<p>Интернет-магазин: починить ужасную форму заказа, не трогая карточку товара и регистрацию.</p>
</blockquote>
<figure>
  <img alt="Изолировать изменения" class="img-bordered" src="zabbix.png">
  <figcaption>Система мониторинга серверов <a href="https://habrahabr.ru/company/zabbix/blog/277265/">Заббикс 3</a> стала визуально опрятнее, а функциональность не изменилась</figcaption>
</figure>
<h2 id="замести-под-ковер">Замести под ковер</h2>
<p>У зрелой программы всегда есть участки, которыми нормальный человек без мата пользоваться не в состоянии (у сложных систем такие участки обычно составляют ≈90%, но это отдельный разговор).</p>
<p>Просветленные дизайнеры и аналитики про такие куски знают и мечтают их переделать. Если получается — хорошо. Но если не успеваете, попробуйте скрыть плохую часть, чтобы снизить ее отравляющее влияние на остальную систему.</p>
<blockquote>
<p>CRM-система: старый неудобный интерфейс работы с историей обращений клиента спрятан за кнопкой <em>История</em> на новой удобной карточке клиента.</p>
</blockquote>
<h2 id="отложить-напотом">Отложить на потом</h2>
<p>Вообще сейчас не делать, перенести на следующую итерацию. Слабый вариант: поскольку фичи нет вовсе, бизнес-задача не решена, и заказчик страдает.</p>
<p>Часто до отложенных фич дело не доходит никогда. Проверьте свой бэклог, если не верите.</p>
<h2 id="впихнуть-невпихуемое">Впихнуть невпихуемое</h2>
<p>Любимый способ криворукого управленца. Урезать тестирование, поработать 60 часов в неделю, срочно нанять еще пять разработчиков, молча продолбать сроки, выпустить неработающую функцию, а потом с каменным лицом допиливать — вариантов много. Не делайте так.</p>
<figure>
  <img alt="Впихнуть невпихуемое" src="cram-2.jpg">
  <figcaption>Помните: при попытке впихнуть невпихуемое выпихивается ранее впихнутое<figcaption>
</figure>
<h2 id="ω-план-действий">Ω План действий</h2>
<ol>
<li>Начните с потребностей, которые закрывает фича. Если их нет, выкидывайте.</li>
<li>Упрощайте реализацию и изолируйте изменения. Старайтесь сохранить пользу для потребителя.</li>
<li>Если все равно не влезает — заметите под ковер.</li>
<li>Отложите, если не осталось других вариантов.</li>
<li>Никогда не впихивайте невпихуемое.</li>
</ol>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Оглянуться вокруг, чтобы не налажать</title>
      <link>https://antonz.ru/look-around/</link>
      <pubDate>Tue, 15 Mar 2016 08:14:00 +0000</pubDate>
      
      <guid>https://antonz.ru/look-around/</guid>
      <description>Осмотритесь. Войдите в одну реку дважды. Подавите первую реакцию. Кушайте кашу по утрам.</description>
      <content:encoded><![CDATA[<p>Я почти не читаю книги про личную продуктивность-эффективность, но пару недель назад попалась на глаза одна. Питер Брегман, «<a href="http://www.mann-ivanov-ferber.ru/books/paperbook/18-minutes">18 минут</a>».</p>
<div class="row">
<div class="col-xs-12 col-sm-8">
<p>272 страницы в печатной версии. <em>Восемнадцать</em> минут. <em>Двести семьдесят две</em> страницы. Отличная иллюстрация современной душеспасительной бизнес-литературы.</p>
<p>На удивление, первая глава в книге оказалась толковая, если отжать воду. Брегман пишет о том, как за рутиной и опытом не потерять адекватную картину мира.</p>
</div>
<div class="col-xs-12 col-sm-3">
<img src="18-minutes.png" alt="Питер Брегман, «18 минут»">
</div>
</div>
<h3 id="1-осмотритесь">1. Осмотритесь</h3>
<blockquote>
<p>Kodak так хорошо продавала пленку 100 лет, что в ее картину мира просто не укладывалась цифровая фотография. В результате компания обанкротилась.</p>
</blockquote>
<p>Замедлитесь и посмотрите вокруг: как изменилась ситуация? Не ищите подтверждения тому, в чем уверены; изучите контраргументы и новую информацию. В споре услышьте оппонента вместо того, чтобы доказывать его неправоту.</p>
<h3 id="2-войдите-водну-реку-дважды">2. Войдите в одну реку дважды</h3>
<blockquote>
<p>У вас есть склочный сотрудник, который отравляет весь коллектив. Выгнать жаль: компания прилично вложилась в его обучение. Спросите себя: приняли бы вы его на работу, зная, насколько он «токсичен»? Если нет, расстаньтесь с ним немедленно.</p>
</blockquote>
<p>Мысленно начните с начала: вы бы начали делать то, что <em>делаете сейчас</em>, зная то, что <em>знаете сейчас</em>? Если нет — прекратите это делать.</p>
<h3 id="3-подавите-первую-реакцию">3. Подавите первую реакцию</h3>
<blockquote>
<p>Звонит разъяренный клиент и с ходу начинает орать в трубку. Спонтанная реакция — «наехать» на него в ответ. Но какой вам нужен результат? Если потерять клиента — смело орите. Но если решить проблему и нормализовать отношения — проявите эмпатию и спокойно узнайте причину раздражения.</p>
</blockquote>
<p>Сделайте паузу перед тем, как отреагировать на событие, которое подключает ваши эмоции. Достаточно 5 секунд. Какой результат хотите получить? Действуйте, исходя из него.</p>
<p>Я заметил, что сам постоянно наступаю на эти «грабли», и вижу то же у других: ехать по колее легко и приятно. Теперь стараюсь отлавливать привычные паттерны поведения и «пробую их на зуб»:</p>
<ul>
<li>не изменилась ли ситуация?</li>
<li>действительно ли хочу продолжать делать то, что привык?</li>
<li>реагирую на автомате или действую на результат?</li>
</ul>
<p>Попробуйте. Это необычно, но забавно.</p>
<p><em>Есть что добавить? Пишите в <a href="https://twitter.com/nalgeon">твитер</a></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>2016</title>
      <link>https://antonz.ru/2016/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://antonz.ru/2016/</guid>
      <description></description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
    <item>
      <title>Бэклогом управляют пользователи</title>
      <link>https://antonz.ru/users-not-backlog/</link>
      <pubDate>Fri, 03 Jul 2015 05:55:03 +0000</pubDate>
      
      <guid>https://antonz.ru/users-not-backlog/</guid>
      <description>Слушайте пользователей, но остерегайтесь ловушек: крикунов и поднятия рук.</description>
      <content:encoded><![CDATA[<p><img src="users-not-backlog.png" alt="Пользователи управляют разработкой Интернет эксплорера"></p>
<p>Давным-давно, когда я только начал рулить проектами, попалась на глаза книга <a href="https://basecamp.com/gettingreal">Getting Real</a>. Книга о продуктовой разработке, а я занимался заказной, поэтому большая часть информации прошла мимо. Но одна вещь запомнилась.</p>
<blockquote>
<p>Что делать с этими запросами [на новые фичи]? Где хранить? Как управлять? Не надо ничего делать. Просто прочитайте и отбросьте их.</p>
</blockquote>
<p>Все во мне протестовало против этого. Как это — отбрасывать? А записать в бэклог? А приоритизировать? А планировать и перепланировать каждый месяц?</p>
<p>Вот что ответили на это авторы:</p>
<blockquote>
<p>Пусть клиенты будут вашей памятью. Если это действительно стоящая функция, они будут напоминать, пока вы ее не сделаете.</p>
</blockquote>
<p>Прошли годы. Я перешел в HFlabs и поработал над парой крупных продуктов: «<a href="https://hflabs.ru/uniform-client/">Единым клиентом</a>» и «<a href="https://dadata.ru/">Дадатой</a>». И на себе убедился, что авторы книги были правы: если пользователям действительно чего-то не хватает, они говорят об этом постоянно.</p>
<p>Но тут есть две ловушки.</p>
<h2 id="первая-ловушка-нетот-человек">Первая ловушка: не тот человек</h2>
<p>Пришел ИТ-архитектор и говорит: «Давайте встроим в CRM чат. Как удобно будет начальнику отдела продаж командовать в чате продавцами!» И так понравилась архитектору мысль, что приходит каждую неделю и рассказывает про этот чат. Стоит добавить фичу?</p>
<p>Я не знаю. Но если прогуляться до отдела продаж, то можно выяснить, что продавцы сидят в одной комнате вместе с начальником. И орут друг другу погромче, если что-то прям совсем срочное. А если не совсем, так у них есть скайп.</p>
<p>Штука в том, что ИТ-архитектор вне контекста, в котором будет использоваться фича. Поэтому его голос тут не решает.</p>
<h2 id="вторая-ловушка-голосование-поднятием-рук">Вторая ловушка: голосование поднятием рук</h2>
<p>В Дадате есть <a href="https://dadata.userecho.com/">форум</a>, куда люди пишут идеи новых фич. А другие за них голосуют. Чем больше за фичу голосов, тем она полезнее. А значит, хорошо бы поскорей реализовать. Да?</p>
<p>Не всегда. Иногда работает так:</p>
<ul>
<li>
<p>Зашел Валера на Дадату, ввел свой адрес и заметил, что сервис дом и квартиру-то нашел, а вот этаж не определил. Хорошо бы угадывать этаж! Завел идею на форум.</p>
</li>
<li>
<p>Через неделю Валера снова зашел на форум. Что-то никто не голосует за идею. Написал коллегам: «помогите, проголосуйте «за». Пятеро соседей по кабинету зашли на форум и жмакнули «+1».</p>
</li>
<li>
<p>Зашла на форум Маша. Видит среди идей «определять этаж». Хорошая фича? Ну вроде неплохая. И голосов много за нее. Вот и Маша проголосовала.</p>
</li>
<li>
<p>Такими темпами через месяц фича в топе.</p>
</li>
</ul>
<p>Видите, в чем подвох?</p>
<p>Голосование лайком ничего не говорит о пользе фичи для человека. Нужно определение этажа коллеге Валеры? Нет, просто друг попросил проголосовать «за». А Маше? Не особо, но почему не поставить плюсик.</p>
<p>Вот когда у человека есть жизненный сценарий, в котором фича принесет ощутимую пользу конкретно ему — тогда его голос имеет вес.</p>
<p class="text-centered">⌘ ⌘ ⌘</p>
<p>Чтобы не попасть в ловушку пользовательского управления разработкой, достаточно понять:</p>
<ol>
<li>Пользователя. Кто он? Для чего использует продукт? Говорит за себя или за того парня?</li>
<li>Сценарий. Как человек использует продукт? Какую проблему не получается решить? Почему?</li>
</ol>
<p>Хороший способ понять человека и сценарий использования — наблюдать и задавать вопросы. Хлопотно, не всегда результативно, плохо масштабируется. Но точно лучше, чем мерить только по головам или слушать самых громких.</p>
<p>Ещё почитать: глава <a href="https://basecamp.com/gettingreal/05.7-forget-feature-requests">Forget Feature Requests</a> из книги Getting Real.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Донат — зло</title>
      <link>https://antonz.ru/donate/</link>
      <pubDate>Tue, 28 Apr 2015 08:37:20 +0000</pubDate>
      
      <guid>https://antonz.ru/donate/</guid>
      <description>Есть секретный способ сделать отличный софт и при этом выглядеть нищебродом. Это донат. И вот почему.</description>
      <content:encoded><![CDATA[<p>Есть секретный способ сделать отличный софт и при этом выглядеть нищебродом. Сейчас расскажу.</p>
<p>Используйте донат. Просите пожертвовать небольшую денюжку. Клянчите скромные суммы у пользователей. Разместите кнопку для пожертвований на сайте. Добавьте жалобную ссылку в письмо. Разместите личное обращение основателя. <del>Снимите шляпу и сделайте жалобные глаза.</del></p>
<p>Пойти этим путем легко. Некоторые люди сами предложат: «Вы такие клевые! Как бы вам помочь материально?» Но донат — это слезы:</p>
<ul>
<li>часть людей просьба пожертвовать раздражает;</li>
<li>некоторые обещают себе заплатить позже, а потом забудут;</li>
<li>остальные снисходительно проигнорируют.</li>
</ul>
<p>Ах да, еще 0,004% бросят-таки монетку:</p>
<p><img src="https://pbs.twimg.com/media/B_IU3yZU8AIipiB.png" alt="Щедрые жертвователи"></p>
<p>Если программа создает ценность для пользователей — так сделайте ее платной! Или оставьте бесплатной, если это осознанное решение: вы хотите приносить пользу безвозмездно. Но не надо выпрашивать деньги «на поддержку проекта».</p>
<p>Плохо:</p>
<figure class="image">
    <img src="donate-1.png" alt="Главред просит денег" class="img-bordered">
    <figcaption>Главред просит прислать денег</figcaption>
</figure>
<p>Лучше:</p>
<figure class="image">
    <img src="donate-2.png" alt="Орфограмка стеснительно предлагает платный тариф" class="img-bordered">
    <figcaption>Орфограмка стеснительно предлагает платный тариф</figcaption>
</figure>
<p>Хорошо:</p>
<figure class="image">
    <img src="donate-3.png" alt="Фидбин обещает удовольствие от чтения за 30 баксов в год" class="img-bordered">
    <figcaption>Фидбин обещает удовольствие от чтения за 30 баксов в год</figcaption>
</figure>
<p>Платный сервис помогает потребителю осознать его ценность. Бесплатный греет душу халявой. Донат — ставит в положение прохожего, который подает милостыню убогому попрошайке. Не используйте донат.</p>
<p>P. S. Донат встречается еще в играх и в жизни (благотворительность). Но это другая история.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Как не написать простыню</title>
      <link>https://antonz.ru/longread/</link>
      <pubDate>Wed, 01 Apr 2015 11:43:53 +0000</pubDate>
      
      <guid>https://antonz.ru/longread/</guid>
      <description>В статьях часто встречается эффект «простыни». Чтобы его побороть, редактор визуально упрощает текст и помогает читателю понять, чем он интересен.</description>
      <content:encoded><![CDATA[<p><em>По лекции Максима Ильяхова</em></p>
<p>Если вы пишете статьи или тексты для сайтов, то наверняка сталкивались с эффектом «простыни» — равномерно залитой текстом страницы:</p>
<p><img src="helpers-nothing.png" alt="Простыня текста"></p>
<p>Простыня — это плохо. Стена текста угнетает, человеку неохота приниматься за чтение.</p>
<p>Задача редактора — визуально упростить текст и помочь читателю понять, чем он интересен. Прежде всего, редактор подключает <em>воздух</em> (поля вокруг текста).</p>
<p><img src="helpers-margin.png" alt="Поля вокруг текста"></p>
<p>Статья выглядит намного легче, но о чем она? Составить быстрое представление о сути текста помогут <em>заголовки</em>:</p>
<p><img src="helpers-headers.png" alt="Заголовки"></p>
<p>В простейшем случае этим можно и ограничиться. Но иногда редактор хочет «оживить» статью и привлечь внимание читателя к отдельным фрагментам. Для этого хорошо использовать:</p>
<h3 id="иллюстрации-иподписи-кним">Иллюстрации и подписи к ним</h3>
<p><img src="helpers-image.png" alt="Иллюстрация"></p>
<h3 id="набор-внесколько-колонок">Набор в несколько колонок</h3>
<p><img src="helpers-columns.png" alt="Колонки"></p>
<h3 id="заметки-наполях">Заметки на полях</h3>
<p><img src="helpers-note.png" alt="Примечание"></p>
<h3 id="фактоиды">Фактоиды</h3>
<p>Фактоиды — краткие количественные утверждения по теме абзаца.</p>
<p><img src="helpers-factoid.png" alt="Фактоид"></p>
<h3 id="цитаты-героев-текста-иэкспертов">Цитаты героев текста и экспертов</h3>
<p><img src="helpers-quote.png" alt="Цитата"></p>
<h3 id="отсылки-кдругим-статьям">Отсылки к другим статьям</h3>
<p>Чтобы «проложить мостик» к другому материалу по теме, редактор ставит его анонс на плашке рядом с основным текстом:</p>
<p><img src="helpers-aside.png" alt="Анонс"></p>
<p>Аналогичным форматом можно пускать примечания, не связанные напрямую с текстом.</p>
<p class="text-centered">
⌘ ⌘ ⌘
</p>
<p>Внутри- и затекстовые элементы оформления хороши до тех пор, пока их не станет слишком много. Используйте не больше 4–5 приемов, иначе статья превращается в набор разобщенных блоков, которые борятся за внимание читателя.</p>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Специально для подписчиков канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>По техническим причинам</title>
      <link>https://antonz.ru/metro-reason/</link>
      <pubDate>Tue, 10 Mar 2015 11:58:21 +0000</pubDate>
      
      <guid>https://antonz.ru/metro-reason/</guid>
      <description>Не объясняйте проблемы техническими причинами. Люди хотят знать другое — что произошло, когда закончится и как с этим жить.</description>
      <content:encoded><![CDATA[<p>Любую проблему метрополитен объясняет пассажирам техническими причинами:</p>
<blockquote>
<p>По техническим причинам, поезда следуют с увеличенными интервалами.</p>
<p>По техническим причинам, движение поездов между станциями Беговая и Таганская временно остановлено. Пользуйтесь городским наземным транспортом.</p>
<p>По техническим причинам, отправление поезда задерживается.</p>
</blockquote>
<p>Сотрудники метро считают важным в объявлении прежде всего подчеркнуть, что причины технические (вдруг подумают на религиозные), а уж потом переходить к сути дела.</p>
<p>Дорогой метрополитен! Пассажирам неважно, технические причины или гуманитарные. Даже если станция закрылась во славу Аполлона, это не тронет черствую душу пассажира. Ему важно знать:</p>
<ul>
<li>что произошло,</li>
<li>когда оно закончится,</li>
<li>как с этим жить.</li>
</ul>
<p>Поэтому смело убирайте фиговый листочек технических причин:</p>
<blockquote>
<p>Следующий поезд будет через 15 минут. Чтобы доехать до кольцевой линии, садитесь на бесплатный автобус «М» от станции Алексеевская.</p>
<p>Не ходят поезда между станциями Беговая и Таганская. Пользуйтесь бесплатным автобусом «ТТ», отправляется каждые 2 минуты. Поезда запустим через 3 часа.</p>
<p>Отправимся через 5 минут. Послушайте пока балет «Лебединое озеро».</p>
</blockquote>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="tg://resolve?domain=dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Специалисты, которых никто не любит</title>
      <link>https://antonz.ru/experts/</link>
      <pubDate>Tue, 03 Feb 2015 08:00:34 +0000</pubDate>
      
      <guid>https://antonz.ru/experts/</guid>
      <description>Все любят специалистов, правда? Профессиональных автомехаников, врачей и сотрудников техподдержки. Они придут и молча исправят все. Ну, не совсем.</description>
      <content:encoded><![CDATA[<p>Все любят специалистов, правда? Профессиональных автомехаников, врачей и сотрудников техподдержки. Когда барахлит двигатель, колет в боку, а порнобаннер во весь экран не дает писать докладную записку, они придут и молча исправят все.</p>
<p>Ну, не всегда. Мои знакомые специалисты иногда впадают в одну из двух крайностей:</p>
<ol>
<li>Считают специалистами всех вокруг.</li>
<li>Принимают других людей за слабоумных.</li>
</ol>
<p>В обоих случаях они раздражают окружающих и сами страдают от непонимания.</p>
<h2 id="считает-специалистами-всех-вокруг">Считает специалистами всех вокруг</h2>
<blockquote>
<p>— У меня с интернетом фигня какая-то.</p>
<p>(специалист пять минут сосредоточенно щелкает клавишами)</p>
<p>— Все понятно. У вас в хостах прописаны левые айпи, они проксируют траф и инжектят айфреймы с малварью в код страниц.</p>
</blockquote>
<p>Когда собеседник слышит это, он видит специалиста так:</p>
<figure class="image">
    <img src="octopus.jpg">
    <figcaption><a href="http://www.montereybayaquarium.org/animals-and-experiences">montereybayaquarium.org</a></figcaption>
</figure>
<h2 id="считает-других-идиотами">Считает других идиотами</h2>
<blockquote>
<p>— Доктор, у меня живот болит.</p>
<p>— Раздевайтесь.</p>
<p>(пять минут сосредоточенно мнет и простукивает живот)</p>
<p>— Все понятно. Попьете неделю вот эти таблетки, затем повторный прием.</p>
</blockquote>
<p>Такому специалисту человек не поверит. Ничего не спросил, ничего не объяснил. Сам, наверно, не понимает, в чем проблема.</p>
<figure class="image">
    <img src="dr-house.jpg">
    <figcaption><a href="http://esmateria.com/2014/02/07/el-doctor-house-salva-a-su-primer-paciente-en-la-vida-real/">esmateria.com</a></figcaption>
</figure>
<p>Конечно, примеры утрированные, но похожие диалоги я встречаю и в жизни. В результате специалисты костерят «тупых» клиентов, а те считают их высокомерными или некомпетентными.</p>
<p>Все, кто читают этот пост — специалисты в своей области. Вы изучаете профессиональную литературу, общаетесь на форумах и конференциях, вникаете в тонкости предмета. Но пожалуйста, думайте о тех, для кого вы работаете.</p>
<p>Научитесь объяснять неспециалистам сложные вещи простыми словами (да, придется поступиться точностью!). Будьте терпеливы и снисходительны к их «глупым» вопросам. Интересуйтесь их мнением (только не спрашивайте, что делать).</p>
<p>Ценность специалиста определяет взгляд со стороны. Взгляд <em>не</em>специалиста.</p>
<p><em>Обложка — <a href="https://xkcd.com/1855/">xkcd</a></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>2015</title>
      <link>https://antonz.ru/2015/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://antonz.ru/2015/</guid>
      <description></description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
    <item>
      <title>Чиним объявление про эскалатор в метро</title>
      <link>https://antonz.ru/fixing-escalator-announcement/</link>
      <pubDate>Tue, 14 Oct 2014 07:15:04 +0000</pubDate>
      
      <guid>https://antonz.ru/fixing-escalator-announcement/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>Как помочь метрополитену с его <a href="/2014/09/29/metro-brain-slug/">объявлением про эскалатор</a>?</p>
<h2 id="1-чиним-суконный-язык">1. Чиним суконный язык</h2>
<blockquote>
<p>— Эскалатор — техническое средство повышенной опасности.</p>
</blockquote>
<blockquote>
<p>— Находясь на эскалаторе, стойте справа, лицом по направлению движения. Проходите слева, держась за поручень.</p>
</blockquote>
<p>Стойте справа, проходите слева. Держитесь за поручень. Смотрите вперед.</p>
<blockquote>
<p>— В условиях увеличенного пассажиропотока, по указанию работников метрополитена заполняйте левую и правую стороны ступеней эскалаторного полотна.</p>
</blockquote>
<p>В час пик становитесь по двое на ступеньку, слева и справа.</p>
<blockquote>
<p>— Будьте внимательны при сходе с эскалатора: готовьтесь к нему заранее и не задерживайтесь.</p>
</blockquote>
<blockquote>
<p>— При сходе с эскалатора поднимайте сумки-тележки и полы длинной одежды во избежание их попадания в движущееся полотно эскалатора.</p>
</blockquote>
<p>Когда сходите с эскалатора, приподнимайте юбки, плащи и пальто.</p>
<blockquote>
<p>— Малолетних детей держите за руку или на руках.</p>
</blockquote>
<blockquote>
<p>— Не оставляйте детей без присмотра на эскалаторе.</p>
</blockquote>
<p>Держите детей за руку или на руках.</p>
<blockquote>
<p>— При пользовании эскалатором запрещается:</p>
<ul>
<li>бежать по эскалатору и обгонять впереди идущих пассажиров;</li>
<li>бросать различные предметы на лестничное полотно и балюстраду  эскалатора;</li>
<li>наступать на ограничительную линию на ступенях эскалатора;</li>
<li>прислоняться к неподвижным частям эскалатора;</li>
<li>ставить сумки на ступени и поручень эскалатора;</li>
<li>сидеть на ступенях эскалатора.</li>
</ul>
</blockquote>
<p>Не бегите. Не сидите. Не мусорите. Не прислоняйтесь к эскалатору. Держите сумки на весу.</p>
<h2 id="2-выкидываем-лишнее">2. Выкидываем лишнее</h2>
<p>Фраза про «по двое на ступеньку» имеет смысл в контексте («в час пик»). Будем запускать ее только с пульта дежурного, по кнопке.</p>
<p>Аналогично с «не бегите, не сидите, не мусорите, держите сумки». Увидели нарушителя — проиграли сообщение.</p>
<p>«Стойте справа, проходите слева, смотрите вперед» — естественное поведение пассажиров. На всякий случай тоже вешаем его на кнопку, массовый тупняк случается.</p>
<p>Самое важное оставляем:</p>
<blockquote>
<p>На эскалаторе:</p>
<ul>
<li>держитесь за поручень;</li>
<li>держите детей за руку или на руках;</li>
<li>когда сходите, приподнимайте юбки и плащи.</li>
</ul>
</blockquote>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Метро и слизни</title>
      <link>https://antonz.ru/metro-brain-slug/</link>
      <pubDate>Mon, 29 Sep 2014 21:03:13 +0000</pubDate>
      
      <guid>https://antonz.ru/metro-brain-slug/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>Мозговой слизень атаковал средний менеджмент московского метро. В результате они записали и прокручивают звуковое объявление несчастным пассажирам, пока те поднимаются на эскалаторе.</p>
<p>Цитирую полностью:</p>
<blockquote>
<p>Эскалатор — техническое средство повышенной опасности.</p>
<p>Находясь на эскалаторе, стойте справа, лицом по направлению движения. Проходите слева, держась за поручень.</p>
<p>В условиях увеличенного пассажиропотока, по указанию работников метрополитена заполняйте левую и правую стороны ступеней эскалаторного полотна.</p>
<p>Будьте внимательны при сходе с эскалатора: готовьтесь к нему заранее и не задерживайтесь.</p>
<p>При сходе с эскалатора поднимайте сумки-тележки и полы длинной одежды во избежание их попадания в движущееся полотно эскалатора.</p>
<p>Малолетних детей держите за руку или на руках.</p>
<p>Не оставляйте детей без присмотра на эскалаторе.</p>
<p>При пользовании эскалатором запрещается:</p>
<ul>
  <li>бежать по эскалатору и обгонять впереди идущих пассажиров;</li>
  <li>бросать различные предметы на лестничное полотно и балюстраду эскалатора;</li>
  <li>наступать на ограничительную линию на ступенях эскалатора;</li>
  <li>прислоняться к неподвижным частям эскалатора;</li>
  <li>ставить сумки на ступени и поручень эскалатора;</li>
  <li>сидеть на ступенях эскалатора.</li>
</ul>
</blockquote>
<p>А вот как сократить слизнепростыню до одного абзаца:</p>
<h2 id="1-чиним-суконный-язык">1. Чиним суконный язык</h2>
<blockquote>
<p> Эскалатор — техническое средство повышенной опасности.</p>
</blockquote>
<blockquote>
<p> Находясь на эскалаторе, стойте справа, лицом по направлению движения. Проходите слева, держась за поручень.</p>
</blockquote>
<p>Стойте справа, проходите слева. Держитесь за поручень. Смотрите вперед.</p>
<blockquote>
<p> В условиях увеличенного пассажиропотока, по указанию работников метрополитена заполняйте левую и правую стороны ступеней эскалаторного полотна.</p>
</blockquote>
<p>В час пик становитесь по двое на ступеньку, слева и справа.</p>
<blockquote>
<p> Будьте внимательны при сходе с эскалатора: готовьтесь к нему заранее и не задерживайтесь.</p>
</blockquote>
<blockquote>
<p> При сходе с эскалатора поднимайте сумки-тележки и полы длинной одежды во избежание их попадания в движущееся полотно эскалатора.</p>
</blockquote>
<p>Когда сходите с эскалатора, приподнимайте юбки, плащи и пальто.</p>
<blockquote>
<p> Малолетних детей держите за руку или на руках.</p>
</blockquote>
<blockquote>
<p> Не оставляйте детей без присмотра на эскалаторе.</p>
</blockquote>
<p>Держите детей за руку или на руках.</p>
<blockquote>
<p> При пользовании эскалатором запрещается:</p>
<ul>
<li>бежать по эскалатору и обгонять впереди идущих пассажиров;</li>
<li>бросать различные предметы на лестничное полотно и балюстраду эскалатора;</li>
<li>наступать на ограничительную линию на ступенях эскалатора;</li>
<li>прислоняться к неподвижным частям эскалатора;</li>
<li>ставить сумки на ступени и поручень эскалатора;</li>
<li>сидеть на ступенях эскалатора.</li>
</ul>
</blockquote>
<p>Не бегите. Не сидите. Не мусорите. Не прислоняйтесь к эскалатору. Держите сумки на весу.</p>
<h2 id="2-выкидываем-лишнее">2. Выкидываем лишнее</h2>
<p>Фраза про «по двое на ступеньку» имеет смысл в контексте («в час пик»). Будем запускать ее только с пульта дежурного, по кнопке.</p>
<p>Аналогично с «не бегите, не сидите, не мусорите, держите сумки». Увидели нарушителя — проиграли сообщение.</p>
<p>«Стойте справа, проходите слева, смотрите вперед» — естественное поведение пассажиров. На всякий случай тоже вешаем его на кнопку, массовый тупняк случается.</p>
<p>Самое важное оставляем:</p>
<blockquote>
<p>На эскалаторе:</p>
<ul>
<li>держитесь за поручень;</li>
<li>держите детей за руку или на руках;</li>
<li>когда сходите, приподнимайте юбки и плащи.</li>
</ul>
</blockquote>
<br>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>Заметка из телеграм-канала <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Миф о сложности Oracle Database</title>
      <link>https://antonz.ru/oracle-myth/</link>
      <pubDate>Sun, 21 Sep 2014 16:19:42 +0000</pubDate>
      
      <guid>https://antonz.ru/oracle-myth/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>Участвовали когда-нибудь в разработке корпоративного софта? Тогда вы знаете, что Оракл — это такая мегасложная система управления базами данных. Разработчик приложения, которое читает и пишет данные в БД Оракл, имеет минимум 3 года опыта и сертификат. Этого недостаточно, поэтому приложение тормозит уже на 10 пользователях и 5000 записей в базе. Чтобы оптимизировать производительность или настроить БД, нужен совсем другой человек. У него 15 лет стажа, 50 сертификатов и непривлекательные залысины с бифокальными очками.</p>
<p>Вся эта сложность — чушь собачья. Она успешно культивируется компанией Оракл, авторами книг «Основы выполнения SELECT из таблицы DUAL» на 1500 страниц и нерадивыми разработчиками, которые не умеют и не хотят нормально работать с БД. Доходит до смешного: Том Кайт, эксперт и гуру, в своей 800-страничной книге про архитектуру оракла в качестве предусловия требует прочитать 400-страничный булшит под названием Oracle Concepts.</p>
<p>Чтобы разрабатывать приложения любой сложности (ладно, кроме биллинга МТС и процессинга Сбербанка) и знать о работе СУБД больше, чем 90% людей в индустрии, достаточно выполнить шаги:</p>
<ol>
<li>Освоить основы реляционных БД и SQL: курсы Стенфорда <a href="https://www.edx.org/course/modeling-and-theory">Modeling and Theory</a> и <a href="https://www.edx.org/course/databases-5-sql">SQL</a> — 1 месяц.</li>
<li>Разобраться, как работают <a href="http://use-the-index-luke.com/sql/preface">индексы</a> — 1 месяц.</li>
<li>Понять архитектуру БД Оракла: посмотреть <a href="http://youtu.be/yk8esAZKz4k">10-минутное видео</a> и прочитать главу «Developing Successfull Oracle Applications» из книги <a href="https://www.amazon.com/dp/1430262982/">Expert Oracle Database Architecture</a> — 1 день.</li>
<li>(необязательно) Чтобы приобрести виртуальные залысины, прочитать книгу <a href="http://www.amazon.com/Oracle-Core-Essential-Internals-Developers-ebook/dp/B006C9EN1U/">Oracle Core</a>, в ней всего 250 страниц, в отличие от. Еще 1–3 месяца.</li>
</ol>
<p>И каждый шаг закрепить практикой. Все, вы восхитительны.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Дольки для Рашми</title>
      <link>https://antonz.ru/shares-for-rashmi/</link>
      <pubDate>Thu, 03 Jul 2014 09:27:36 +0000</pubDate>
      
      <guid>https://antonz.ru/shares-for-rashmi/</guid>
      <description></description>
      <content:encoded><![CDATA[<p><img src="sharing.jpg" alt=""></p>
<p>В прошлой статье мы рассмотрели <a href="/2014/06/27/gamify/">6 шагов</a> проектирования игрофицированной системы по Кевину Вербаху. А сегодня применим этот подход в действии.</p>
<p>Вот какую задачу поставил профессор Вербах перед студентами на <a href="https://www.coursera.org/course/gamification">курсе по геймификации</a>:</p>
<blockquote>
<p>С вами связалась Рашми Сингх, CEO компании ShareAll — одной из ведущих в области совместного потребления (если не знаете, что это, взгляните на статью в журнале <a href="http://www.economist.com/news/leaders/21573104-internet-everything-hire-rise-sharing-economy">Economist</a>). Она просит вас спроектировать для нее геймифицированную систему, которая позволит бизнесу ShareAll выйти на новый уровень.</p>
<p>Миссия компании — сделать совместное использование продуктов и сервисов настолько же распространенным, как обычные покупки. ShareAll идет по пути, проложенному AirBnB, Buzzcar и Uber. Но в отличие от них, не фокусируется на конкретном продукте (машины, недвижимость и т.д.), а предлагает универсальную платформу для совместного использования любого продукта или сервиса.</p>
<p>Помимо этого, ShareAll разработала глобальную виртуальную валюту (Дольки), которую можно использовать для покупки любых активов в системе. Дольки можно менять на реальные деньги, а пользователи могут зарабатывать их, делясь своими ресурсами или выполняя задания для других людей.</p>
<p>Чтобы топ-менеджерам компании не пришлось ездить на кредитных «фокусах», ShareAll взимает небольшую комиссию с каждой транзакции в системе (при создании, трате или обмене Долек). Сингх говорит, что компания заботится об окружающей среде и социальном процветании (сейчас это модно). Но ShareAll — коммерческая компания, поэтому на первом месте, конечно же, прибыли.</p>
<p>Ну вот и все. «Я верю в геймификацию. И верю в тебя», — говорит Рашми, пронзительно глядя вам прямо в глаза. «Через неделю у меня собрание совета директоров, так что ты уж не подведи!»</p>
</blockquote>
<p>Ладно, поможем Сингх заработать на личный самолет. Мой вариант ниже.</p>
<h2 id="1-определите-бизнес-цели">1. Определите бизнес-цели</h2>
<p>Основная цель — радикально увеличить прибыль ShareAll. Раз Сингх хочет вывести бизнес на новый уровень, прицелимся на рост годового дохода в 3–5 раз.</p>
<p>Увеличение прибыли требует соответствующего роста активности пользователей, выраженной в обороте Долек. Поскольку компания получает процент с каждой транзакции, чем больше Долек генерируется, обменивается и тратится — тем выше доход ShareAll.</p>
<p>Чтобы добиться увеличения оборота, мы должны нарастить пользовательскую базу и подстегнуть активность каждого конкретного пользователя.</p>
<h2 id="2-опишите-целевое-поведение">2. Опишите целевое поведение</h2>
<p>Чтобы получить больше зарегистрированных пользователей, ShareAll придется здорово вложиться в маркетинг (маркетинговые кампании, реклама, вот это все). Здесь не будем вдаваться в подробности — маркетинг за рамками нашего проекта. Вместо этого сфокусируемся на построении геймифицированной системы поверх существующих сервисов ShareAll. Такая система позволит одновременно стимулировать активность существующих пользователей и улучшить виральность — проникновение среди потенциальной аудитории — благодаря исключительному UX системы.</p>
<p>Повысить оборот Долек на пользователя можно, поощряя следующее поведение:</p>
<ol>
<li>Использование основных сервисов (делиться ресурсами, потреблять их, выполнять задания других пользователей).</li>
<li>Использование вспомогательных сервисов.</li>
<li>Предоставление дополнительной информации о себе.</li>
<li>Обратная связь по другим пользователям.</li>
<li>Продвижение системы в соцсетях.</li>
</ol>
<p>Последние три активности не дают прямого дохода (так как не создают новых транзакций с Дольками). Но благодаря им растет лояльность пользователей, а следовательно, повышается виральность системы (необходимое условие для столь желанного роста пользовательской базы).</p>
<p>Чтобы измерять наш прогресс в достижении основной цели (увеличении дохода), будем отслеживать единственную внутриигровую метрику: ежемесячный оборот долек.</p>
<h2 id="3-опишите-игроков">3. Опишите игроков</h2>
<p>Суть идеи ShareAll — сотрудничество, а не соревнование. Поэтому ожидаю, что типичный наш пользователь — социальщик по Бартлу (socializer). В то же время он немного и манчкин (achiever), поскольку человек с высоким игровым рейтингом получает от системы больше прочих (подробности в следующем разделе).</p>
<p>ShareAll наиболее привлекательна для следующих демографических категорий:</p>
<ul>
<li>
<p><em>Молодежь</em> (студенты колледжей): возраст до 25 лет, холостые, с низким доходом, обладают высокой активностью. В терминах игры они в основном потребители (используют ресурсы, предоставленные другими).</p>
</li>
<li>
<p><em>Семейные пары без детей</em>: возраст до 30–35 лет, средний или высокий доход, высокая активность. Они и поставщики ресурсов, и их потребители.</p>
</li>
<li>
<p><em>Семьи с детьми</em>: возраст 30–50 лет, средний или высокий доход, активность в основном локальная. Они в основном поставщики ресурсов для совместного использования.</p>
</li>
</ul>
<h2 id="4-разработайте-циклы-деятельности">4. Разработайте циклы деятельности</h2>
<p>Система будет основана на двух концепциях: Дольки и Репутация. Дольки — это универсальная игровая валюта, уже разработанная ShareAll, поэтому не будем останавливаться на ней. Репутация же — основная мера статуса пользователя и индикатор его прогресса в игре. Измеряется она в «репутационных баллах».</p>
<p>Система поощряет желаемое поведение пользователя, награждая его баллами, и отбивает охоту «быть плохишом», снимая баллы за вредное поведение. Игрок же мотивирован зарабатывать баллы, поскольку высокая репутация дает разные «плюшки» в игре.</p>
<h3 id="41-цикл-вовлечения">4.1 Цикл вовлечения</h3>
<p>Каждый новый игрок начинает с небольшой положительной репутацией (500 баллов), и может дальше зарабатывать очки:</p>
<ul>
<li>Предоставлять ресурсы для других людей (например, машину, велосипед, место на парковке).</li>
<li>Использовать ресурсы, предоставленные другими (например, арендовать доску для серфинга).</li>
<li>Выполнять задания от других игроков (к примеру, найти редкую запчасть или доставить скоропортящиеся деликатесы).</li>
</ul>
<p>За каждое такое действие игрок получает определенное количество репутационных баллов. Оно складывается из:</p>
<ol>
<li>Фиксированной суммы за выполнение действия (100 баллов).</li>
<li>Поощрения за обратную связь по второму участнику (каждое действие в игре задействует двух людей — поставщика и потребителя) — еще 100 баллов. Отзыв может быть негативным (обозначает неприемлемое поведение второго игрока) или положительным (оценка «нормально», «хорошо» или «отлично» в зависимости от удовлетворенности игрока).</li>
<li>Премии по результатам обратной связи от второго игрока (0 баллов, если он не оставил отзыв, 100 за «нормально», 200 за «хорошо» и 300 за «отлично»).</li>
</ol>
<p>Если игрок получил за свои действия отрицательный отзыв второго участника, то он не получает баллов вообще. Более того, его общая репутация снижается на 500 баллов.</p>
<p>Рассмотрим пример: Дженни арендует велосипед у Майка на 5 дней. Она возвращает велик вовремя и в отличном состоянии, так что Майк полностью удовлетворен сделкой и ставит оценку «отлично». Дженни со своей стороны не очень-то довольна: байк оказался не настолько хорош, как расписывал его Майк, поэтому она оценивает сделку как «нормальную».</p>
<p>В таком случае Майк получает: 100 баллов за сделку + 100 за отзыв о Дженни + 100 за оценку «нормально» от Дженни = 300 баллов. А Дженни получает 100 + 100 + 300 = 500 баллов.</p>
<p>Как видите, такой подход поощряет активность игроков, сотрудничество и высокое качество услуг, предоставляемых игроком. Награждать за «хорошее поведение» важно, так как именно оно формирует общее впечатление игроков от системы. И в конечном счете увеличивает оборот Долек (а следовательно, и общий доход компании).</p>
<p>Но что мотивирует игроков зарабатывать репутационные баллы?</p>
<p>Прежде всего, набор очков происходит естественным образом при использовании основных сервисов системы (предоставление и потребление ресурсов), что согласуется с потребностями самого игрока.</p>
<p>Затем, у игрока с высокой репутацией больше шансов заинтересовать других, поскольку она показывает, что человек заслуживает доверия. Плюс к тому, игроки с высокой репутацией находятся выше в результатах поиска и различных внутриигровых рейтингах.</p>
<p>Наконец, высокая репутация сама по себе предоставляет дополнительные «плюшки» (см. концепцию уровней в следующем разделе).</p>
<h3 id="42-цикл-прогресса">4.2 Цикл прогресса</h3>
<p>Когда игрок набирает достаточное количество баллов репутации, он переходит на следующий уровень. В системе предусмотрено несколько десятков уровней, чтобы левел-апы случались достаточно часто.</p>
<p>Вместе с левел-апом игрок получает бонус (подобранный с учетом его предпочтений, насколько они известны системе). Для начальных уровней это может быть купон или скидка на товар либо услугу. На более высоких уровнях — награда, предоставляющая новые возможности (доступ к VIP-залу в аэропорту, сниженная комиссия за игровые транзакции, размещение игрока на главной странице сайта, бесплатные часы юридических консультаций и т.п.)</p>
<p>Чтобы облегчить продвижение на первых уровнях, система советует игроку, что можно предпринять для заработка репутации и левел-апа (некоторые примеры таких действий есть в разделе 6).</p>
<h2 id="5-не-забудьте-про-удовольствие">5. Не забудьте про удовольствие</h2>
<p>Циклы деятельности, описанные выше, в основном полагаются на внешнюю мотивацию. Но это не вся история.</p>
<p>Чтобы поддержать чувство сопричастности, как важную составляющую внутренней мотивации, система дает возможность игрокам благодарить друг друга (виртуальные подарки, поощряющие комментарии, добавление во френды в фейсбуке).</p>
<p>Следующее, что делает игру более привлекательной — это сопоставление интересов. Пользователь может указать свои предпочтения в музыке, книгах, хобби, религиозные или политические взгляды. И тогда для некоторых активностей (таких как сдача комнаты в аренду или совместные поездки на автомобиле) система будет подбирать других игроков со схожими предпочтениями, чтобы общение было приятным и интересным.</p>
<p>И еще один фактор — это понимание того, что игроки «несут добро миру» (например, совместное использование автомобилей улучшает экологию). Для таких полезных активностей система описывает игроку позитивный эффект, который его действия будут иметь для окружающей среды, экономики и общества — это может стать сильным внутренним мотиватором для многих людей.</p>
<h2 id="6-используйте-подходящий-инструментарий">6. Используйте подходящий инструментарий</h2>
<p>В разделе 4 мы уже рассмотрели основную механику игры. Здесь же вкратце перечислим дополнительные игровые элементы, которые поддерживают мотивацию и циклы деятельности:</p>
<ul>
<li>
<p><em>Заполненность профиля</em>. Чем больше информации о себе сообщил игрок, тем выше его репутация.</p>
</li>
<li>
<p><em>Верификация</em>. В любой момент игрок может верифицировать свою учетную запись (привязкой к фейсбуку, подтверждением номера телефона, адреса или водительских прав). Чем «сильнее» верификация, тем больше очков зарабатывает игрок.</p>
</li>
<li>
<p><em>Страховка</em>. Чтобы защитить свое имущество от кражи и вандализма, игрок может приобрести страховку (она к тому же предоставляет бонусные баллы репутации).</p>
</li>
<li>
<p><em>Обмен Долек</em>. Покупка и продажа Долек за реальные деньги предоставляют дополнительные очки репутации.</p>
</li>
<li>
<p><em>Продвижение в соцсетях</em>. Пользователь может заработать дополнительные баллы, просто упомянув о системе в соцсетях.</p>
</li>
<li>
<p><em>Комбо</em>. Игрок получает в несколько раз больше баллов репутации за комбинирование достижений (к примеру, за получение 3 подряд оценок «отлично» или за предоставление более 5 ресурсов для совместного использования).</p>
</li>
</ul>
<p>Как я упоминал раньше, геймифицированная система будет построена на базе существующей инфраструктуры ShareAll, которая включает всю основную неигровую функциональность. Технически потребуется доработать систему следующим образом:</p>
<ul>
<li>Реализовать описанные выше игровые фичи.</li>
<li>Подготовить мобильные приложения для всех основных платформ (iOS, Android, Windows).</li>
</ul>
<p class="text-centered">⌘&nbsp;⌘&nbsp;⌘</p>
<p>Ну вот и все! Спасибо, что осилили такое количество букв и дочитали до этого места. Насколько мне известно, Рашми уже не работает в ShareAll, променяв ее на одну из компаний топ-100. Но задумка была неплохая, согласитесь :-)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Геймифицируй это!</title>
      <link>https://antonz.ru/gamify/</link>
      <pubDate>Fri, 27 Jun 2014 07:34:23 +0000</pubDate>
      
      <guid>https://antonz.ru/gamify/</guid>
      <description></description>
      <content:encoded><![CDATA[<p><img src="gamify.jpg" alt="Геймифицируй!"></p>
<p>Сегодня — про то, как проектировать геймифицированные системы. Хайп по этой теме спал, так что можно поговорить серьезно.</p>
<p>По всем канонам, я должен был бы для начала расписать теоретические основы игрофикации. Разумеется, я этого делать не буду. Ненавижу, когда базовые определения, история развития, области применения, описание преимуществ, и прочая лабудень отжирает место у практики. Поэтому к делу.</p>
<p>Ну ладно, дам одно определение. <em>Геймификация</em> — это <del>ачивки, бейджи и левелапы</del> использование игровых элементов и техник проектирования игр в неигровом контексте.</p>
<p>Как подсказывает ваше богатое воображение, «неигровой конктекст» — это все, начиная от очередной унылой социальной сети и заканчивая развитием полезной привычки бегать по утрам, интенсивно закусывая живым йогуртом.</p>
<p>Умный дядька <a href="https://www.coursera.org/instructor/~347">Кевин Вербах</a> предложил простую модель игрофикации любой системы из 6 шагов. Я проверил, она удобная и работает. Попробуйте и вы :-)</p>
<h2 id="1-определите-бизнес-цели">1. Определите бизнес-цели</h2>
<p>Ответьте себе на простой вопрос: для чего вам геймификация? Какие положительные результаты она принесет в случае успеха?</p>
<p>Выделите все цели, которых хотите добиться. Обоснуйте их, определив, почему важна каждая (что, не можете ответить? ну тогда выкиньте ее).</p>
<p>Ранжируйте цели по степени важности. Все то, что является промежуточным шагом, а не целью — удалите.</p>
<p><img src="goals.jpg" alt="Грустно играть без цели"></p>
<h2 id="2-опишите-целевое-поведение">2. Опишите целевое поведение</h2>
<p>Какого поведения вы ожидаете от игроков? Как это поведение приближает вас к цели (прямо или косвенно)? Как вы будете оценивать — соответствует поведение ожидаемому или нет? Да, тут нужны количественные метрики.</p>
<p>Опишите желаемое поведение как можно конкретнее. Затем сформулируйте критерии достижения ваших целей в терминах поведения игроков.</p>
<p>Наконец, определите аналитические показатели, которые показывают прогресс в достижении целей. Например, объем внутриигровых транзакций в час или ежедневное количество активных игроков от общего их числа.</p>
<h2 id="3-опишите-игроков">3. Опишите игроков</h2>
<p>Кто эти люди, которые будут участвовать? Какое отношение они имеют к вам (клиенты, коллеги, профессиональные сообщества, друзья)?</p>
<p>Теперь классифицируйте их. Например так:</p>
<ul>
<li>Демографический, географический, социальный профиль.</li>
<li>Классификация по <a href="http://gamemotiv.ru/klassifikatsiya-igrokov-po-teorii-bartla/">Бартлу</a>.</li>
</ul>
<p>По итогам классификации сегментируйте игроков и для каждой из групп определите подходящую мотивацию.</p>
<p>Назначьте персону (аватара) для каждой группы. Используйте их при проектировании, чтобы смоделировать реакции игроков.</p>
<p><img src="players.jpg" alt="Игроки демонстрируют ожидаемое поведение"></p>
<h2 id="4-разработайте-циклы-деятельности">4. Разработайте циклы деятельности</h2>
<p>Эти циклы описывают, как именно вы будете мотивировать игроков.</p>
<h3 id="цикл-вовлечения">Цикл вовлечения</h3>
<p>Какую обратную связь вы будете использовать? За счет чего она будет мотивировать игроков?</p>
<p>Цикл вовлечения можно описать как последовательность <em>Мотивация</em> → <em>Действие</em> → <em>Обратная связь</em> на уровне отдельного игрока.</p>
<p>Вы пытаетесь мотивировать человека на желаемое для вас поведение. Он выполняет те или иные действия и получает обратную связь, которая усиливает его мотивацию на выполнение новых поступков. И так далее.</p>
<h3 id="цикл-прогресса">Цикл прогресса</h3>
<p>Как будут прогрессировать игроки в вашей системе? Как вы будете поддерживать новых игроков на первоначальных этапах, чтобы не отпугнуть их? Как поддерживать интерес у более опытных, чтобы они не потеряли мотивацию?</p>
<p><img src="progression.jpg" alt="Прогресс не измерить деньгами"></p>
<h2 id="5-не-забудьте-про-удовольствие">5. Не забудьте про удовольствие</h2>
<p>Скажите, а стали бы люди участвовать в вашей игре, если исключить всю внешнюю мотивацию? Нет? Ну тогда никакая игровая механика вам не поможет.</p>
<p>Вы должны очень четко ответить себе: какие аспекты игры могут мотивировать игроков даже без награды? Что сможет доставить им <em>подлинную</em> радость и удовольствие?</p>
<h2 id="6-используйте-подходящий-инструментарий">6. Используйте подходящий инструментарий</h2>
<p>Это «техническая» составляющая геймификации. Обратили внимание, что она идет последней? Самая распространенная ошибка — начать с этого шага, и им же ограничиться. Не повторяйте ее, проработайте в деталях все предыдущие уровни!</p>
<p>Здесь вы решаете, какие элементы игры будете использовать (все эти бейджи, соревнования, ресурсы, подарки, уровни, очки, квесты, турнирные таблицы и виртуальные товары). И как эти элементы будут взаимодействовать в динамике для поддержания придуманных вами циклов деятельности.</p>
<p>Ну и здесь же определяются технологии реализации геймифицированной системы (веб, мобильные приложения, интеграция с соцсетями, использование носимых устройств, и тому подобное).</p>
<p class="text-centered">
⌘ ⌘ ⌘
</p>
<p>Продолжение:</p>
<p class="big">
<a href="/shares-for-rashmi">Геймификация в действии: дольки для Рашми</a>
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Картоха, урлы и состояние</title>
      <link>https://antonz.ru/urls-state-potatoes/</link>
      <pubDate>Thu, 15 May 2014 20:44:26 +0000</pubDate>
      
      <guid>https://antonz.ru/urls-state-potatoes/</guid>
      <description></description>
      <content:encoded><![CDATA[<p><img src="potato.jpg" alt="Картинка для привлечения внимания"></p>
<p>Если вы разрабатываете веб-приложение, то рано или поздно столкнетесь с проблемой сохранения текущего состояния системы для пользователя.</p>
<p>Например, вы продаете через интернет элитный картофель. Покупатель заходит на сайт и первым делом настраивает условия отбора картофелин: строго из Боливии или ЮАР, урожая 2013 года, размер клубня от 3 до 7 см, желательно в форме морского тюленя. Получает список из 300 позиций (да, в ЮАР очень популярна картоха в форме тюленя), нарезанный на 6 страниц из 50 элементов каждая. Переходит на 3 страницу, открывает карточку картофелины и застывает в немом восхищении на несколько секунд. А потом случайно нажимает на рефреш страницы. Как поступит ваше приложение?</p>
<h2 id="весь-мир-насилья-мыразрушим">Весь мир насилья мы разрушим</h2>
<p>Если вы не стали заморачиваться с состоянием, то текущий контекст благополучно потеряется, а пользователя перекинет на главную страницу, где он с негодованием уставится на аршинный заголовок <strong>КАРТОХА ТУТ!</strong></p>
<p>Яркий представитель подобных приложений — <a href="https://www.google.com/calendar">гугл-календарь</a>. Как бы вы не перемещались по календарю, какие бы фильтры не накладывали — урл всегда сохраняет свой изначальный вид:</p>
<pre><code>https://www.google.com/calendar/render
</code></pre>
<p>Обновляете страницу — и календарь радостно сбрасывает вас на текущую неделю. Скопировали урл и отправили другу как ссылку на событие? Ну да, ну да.</p>
<h2 id="все-понимаю-сказать-немогу">Все понимаю, сказать не могу</h2>
<p>Некоторые сервисы, которые помнят, что на дворе уже десятые годы XXI века, запоминают состояние на клиенте (в куках или локал-сторадже). Это решает проблему с рефрешем страницы, но поставить закладку у вас все равно не получится.</p>
<p>Плюс такой подход создает классическую проблему с конфликтующими изменениями состояния. Я открыл две вкладки браузера, зашел на ваш картофельный сайт, и в одной вкладке ищу «картофель молодой», а в другой — «ботва разлапистая». Какой из запросов сохраним?</p>
<h2 id="что-вурле-тебе-моем">Что в урле тебе моем?</h2>
<p>Еще со времен, когда динамическая природа веб-сайтов ограничивалась тегом BLINK, хорошим тоном считается хранить состояние в урле. Такой урл хоть в почту, хоть в закладки — восстановить контекст по нему не проблема.</p>
<p>Хороший пример — <a href="https://www.google.com">гугл-поиск</a>. Посмотрите, как скурпулезно он сохранил все параметры расширенного поиска, которые я задал:</p>
<pre><code>https://www.google.com/search?
q=allintext: +google+sucks&amp;lr=lang_en&amp;
cr=countryUS&amp;hl=en&amp;tbs=qdr: y,lr: lang_1en,
ctr: countryUS&amp;ei=NsAIS_WATCin5youDAYANdnigh1&amp;
start=10&amp;sa=N&amp;biw=1090&amp;bih=963&amp;cad=cbv&amp;
sei=WtF_isThisS4iT
</code></pre>
<p>Кстти, обртите внмние, как пргрмсты в гугле озбочн крткстью: все эти «tbs», «qdr», «sa», «biw». Збс, првд? Буквы в интернете надо экономить, а то вон IP-адреса уже закончились.</p>
<p>Хранение состояния в урле делает каждую вкладку браузера полностью автономной — нет общих данных в куках или локальном хранилище. Это упрощает жизнь разработчику, а пользователю не срывает башню от загадочных глюков системы.</p>
<h2 id="месье-знает-толк-визвращениях">Месье знает толк в извращениях</h2>
<p>Иногда хранить контекст в урле — это слишком просто. Я встречал следующие вариации:</p>
<ul>
<li>Список хранит свое состояние, но как только переходим к элементу списка — он открывается в отдельной вкладке (так не надо заморачиваться с возвратом к списку). Это <a href="https://drive.google.com/">гугл-документы</a>.</li>
<li>Урл содержит все нужное состояние, но при попытке открыть его в другом браузере приложение падает с необработанным исключением (привет, <a href="https://www.atlassian.com/software/jira">Джира</a>!).</li>
<li>Все состояние в урле кодировано в Base64, чтобы враг не догадался.</li>
</ul>
<h2 id="ω-итого">Ω Итого</h2>
<ol>
<li>Умейте сохранять и восстанавливать контекст прозрачно для пользователя.</li>
<li>Храните состояние в урле и не морочьте мне голову.</li>
<li>КАРТОХА РУЛИТ.</li>
</ol>
<p><img src="potato-rules.jpg" alt="Картоха рулит!"></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Ваш лучший друг, анонимус</title>
      <link>https://antonz.ru/your-anonymous-friend/</link>
      <pubDate>Fri, 18 Apr 2014 16:35:31 +0000</pubDate>
      
      <guid>https://antonz.ru/your-anonymous-friend/</guid>
      <description></description>
      <content:encoded><![CDATA[<p><img src="omg-contact-form.png" alt="Форма обратной связи"></p>
<p>Вы только что запустили свой стартап. Он классный, всем нужен, решает самые насущные проблемы потенциальной аудитории (ну, вы так думаете), выглядит сногсшибательно и супер-удобен в использовании.</p>
<p>Проходит день, неделя, месяц, три… Да, посещаемость неплохая. Да, пользовательская база растет. Но хочется большего. Как понять, чего не хватает вашим пользователям? Какие их потребности сервис не охватывает? Что делать неудобно? А что наоборот, сделано здорово, и менять ни в коем случае не стоит?</p>
<p>Лучшее, что вы можете сделать прямо сейчас — это разрешить анонимную обратную связь (вопросы, идеи, багрепорты) от пользователей.</p>
<p><a href="http://habrahabr.ru/post/219523/">подробности на Хабре</a></p>
<h2 id="возражения">Возражения</h2>
<p>Два основых возражения от противников анонимного фидбека:</p>
<ol>
<li>Сразу нападут боты-спамеры.</li>
<li>А как же связаться с пользователем, если он анонимный?!</li>
</ol>
<p>Ну и ответы тоже понятны:</p>
<ol>
<li>Проблемы ботов у маленьких проектов просто не существует.</li>
<li>Если пользователь захочет, чтобы вы с ним связались — уж он оставит свои контакты, не сомневайтесь.</li>
</ol>
<p>А вообще жду, когда сервисы обратной связи додумаются, что отделение спама от нормальных сообщений — это их забота, а не клиента. Почтовики к этому пришли, придут и они.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Гик тоже хочет красиво</title>
      <link>https://antonz.ru/geek-as-a-human-being/</link>
      <pubDate>Tue, 08 Apr 2014 21:57:41 +0000</pubDate>
      
      <guid>https://antonz.ru/geek-as-a-human-being/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>Давайте откровенно.</p>
<p>Мы, гики, как все нормальные люди любим простые и удобные интерфейсы.</p>
<p>Культ командной строки — это не от хорошей жизни. Мы выбираем легкий путь и стараемся не оперировать визуальными образами, ведь гору невнятного текста проще выдать, чем напрячься на одну понятную картинку. Но это не значит, что мы не радуемся хорошему дизайну.</p>
<p>Так вот. Есть такой блоговый движок — Wordpress, вы, наверно, знаете. Он классный, поддерживает кучу фич, подходит под любой мыслимый сценарий использования. Вордпресс — это выбор сотен тысяч блогеров, и уж конечно, он достаточно хорош и для вас. Правда ведь?</p>
<p>А ничего подобного. Выглядит он вот так, просто и профессионально:
<img src="hey-wordpress.png" alt="Лаконичный вордпресс"></p>
<p>Я очень люблю такие интерфейсы. Когда вижу их, хочется обнять авторов и плакать, ведь у них такая трудная жизнь.
<img src="free-hugs.jpg" alt="Обнимашки создателям вордпресса"></p>
<p>Только пользоваться Вордпрессом не хочется.</p>
<p>Конечно, я не один такой. В 2013 году <a href="https://www.kickstarter.com/projects/johnonolan/ghost-just-a-blogging-platform">Джон О&rsquo;Нолан</a> собрал на Кикстартере £200,000 на разработку блог-платформы Ghost, на 785% перевыполнив первоначальную цель инвестиций. А всего-то он обещал:</p>
<ol>
<li>Удобный интерфейс, не перегруженный лишними функциями и идеально подходящий для автора.</li>
<li>Навороченный красивый дашборд с толково организованной информацией.</li>
</ol>
<p>За два скриншота измученные ворпрессом гики заплатили 200 тысяч фунтов:</p>
<p><img src="ghost-1.jpg" alt="Писательский интерфейс для гуманоида"></p>
<p><img src="ghost-2.jpg" alt="Дашборд для привлечения инвестиций"></p>
<p>А все потому, что гик — тоже человек. И создатель Госта человек. А автор вордпресса — кальмар.</p>
<p>P.S. Осенью 2013 года Джон О&rsquo;Нолан реализовал первый макет и запустил платформу <a href="https://ghost.org/">Ghost</a>. Все остальные фичи, включая дашборд, он радостно слил. Но это уже совсем другая история.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>2014</title>
      <link>https://antonz.ru/2014/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://antonz.ru/2014/</guid>
      <description></description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
    <item>
      <title>Дизайн интерфейсов для нормальных людей</title>
      <link>https://antonz.ru/good-ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://antonz.ru/good-ui/</guid>
      <description>В интернетах много пишут о кнопках и чекбоксах и мало — как спроектировать удобный интерфейс. Исправим это.</description>
      <content:encoded><![CDATA[<p>В интернетах много пишут о кнопках и чекбоксах и мало — как спроектировать удобный интерфейс. Поэтому я собрал цикл статей о базовых (практических!) принципах хорошего UI.</p>
<p>Лучше всего читать по порядку.</p>
<h2 id="1-законы-робототехники-в-интерфейсеhttpsantonzrulaws">1. <a href="https://antonz.ru/laws/">Законы робототехники в интерфейсе</a></h2>
<p>Три главных принципа: не навредить, не выносить мозг, общаться по-человечески.</p>
<h2 id="2-что-делает-интерфейс-простымhttpsantonzrusimple-ui">2. <a href="https://antonz.ru/simple-ui/">Что делает интерфейс простым</a></h2>
<p>У человека в голове есть представление о том, как устроена ваша программа — ментальная модель. «Стихийная» модель не получится хорошей, поэтому лучше спроектируйте её.</p>
<h2 id="3-как-человек-решает-задачи-в-интерфейсеhttpsantonzruuser-actions">3. <a href="https://antonz.ru/user-actions/">Как человек решает задачи в интерфейсе</a></h2>
<p>Человек взаимодействует с интерфейсом, чтобы решить конкретную задачу. Происходит это в три шага: сформулировать задачу, выполнить действие, оценить результат. Если все три шага проходят гладко — интерфейс своё дело сделал.</p>
<h2 id="4-ошибки-и-человеческий-факторhttpsantonzruhuman-factor">4. <a href="https://antonz.ru/human-factor/">Ошибки и человеческий фактор</a></h2>
<p>Когда случается авария из-за ошибки человека, говорят «человеческий фактор». А правильнее сказать — «фактор системы» или «фактор интерфейса».</p>
<h2 id="5-выборhttpsantonzruchoice">5. <a href="https://antonz.ru/choice/">Выбор</a></h2>
<p>Каждый раз, когда вы просите пользователя сделать выбор — заставляете принимать решение. Это не всегда плохо. Но точно плохо, если выбор не относится к задаче, которую решает человек.</p>
<h2 id="6-как-организовать-информациюhttpsantonzruno-more-latch">6. <a href="https://antonz.ru/no-more-latch/">Как организовать информацию</a></h2>
<p>Когда в следующий раз будете проектировать экран с множеством однотипных объектов, не выбирайте вариант организации «по умолчанию» — абы как или по алфавиту. Есть варианты лучше.</p>
<div class="row">
<div class="col-xs-12 col-sm-10 col-md-8"><p><em>И подписывайтесь на <span class="nowrap"><i class="far fa-star color-sin"></i> «<a href="https://t.me/dangry">Интерфейсы без шелухи</a>»</span></em></p></div>
</div>
]]></content:encoded>
    </item>
    
  </channel>
</rss>