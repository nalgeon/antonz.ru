<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sqlite on Антон Жиянов</title>
    <link>https://antonz.ru/tags/sqlite/</link>
    <description>Recent content in sqlite on Антон Жиянов</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Fri, 05 Nov 2021 11:14:51 +0000</lastBuildDate><atom:link href="https://antonz.ru/tags/sqlite/rss" rel="self" type="application/rss+xml" />
    <item>
      <title>Табличные выражения SQL</title>
      <link>https://antonz.ru/cte/</link>
      <pubDate>Fri, 05 Nov 2021 11:14:51 +0000</pubDate>
      
      <guid>https://antonz.ru/cte/</guid>
      <description>Прием № 1, чтобы писать хорошие читаемые SQL-запросы — это табличные выражения (CTE). Люди их боятся, а зря. Давайте разберемся за три минуты, читать увесистую книгу по SQL или проходить курсы не придется.
Проблема Допустим, у нас есть таблица продаж по месяцам за два года:
┌──────┬───────┬───────┬──────────┬─────────┐ │ year │ month │ price │ quantity │ revenue │ ├──────┼───────┼───────┼──────────┼─────────┤ │ 2019 │ 1 │ 60 │ 200 │ 12000 │ │ 2019 │ 2 │ 60 │ 660 │ 39600 │ │ 2019 │ 3 │ 60 │ 400 │ 24000 │ │ 2019 │ 4 │ 60 │ 300 │ 18000 │ │ 2019 │ 5 │ 60 │ 440 │ 26400 │ │ 2019 │ 6 │ 60 │ 540 │ 32400 │ │ 2019 │ 7 │ 60 │ 440 │ 26400 │ │ 2019 │ 8 │ 60 │ 440 │ 26400 │ │ 2019 │ 9 │ 60 │ 250 │ 15000 │ │ 2019 │ 10 │ 60 │ 420 │ 25200 │ │ .</description>
    </item>
    
    <item>
      <title>SQLite-песочница в браузере</title>
      <link>https://antonz.ru/sqlime/</link>
      <pubDate>Tue, 28 Sep 2021 21:13:03 +0000</pubDate>
      
      <guid>https://antonz.ru/sqlime/</guid>
      <description>Чего мне всегда не хватало, так это аналога JSFiddle для SQLite. Онлайн-песочницы, в которой можно быстро проверить SQL-запрос и поделиться с другими.

Вот чего хотелось:
 Возможность загрузить готовую базу, а не писать SQL для создания таблиц. Подключать как локальные базы, так и удаленные (по url). Сохранять базу и запросы в облаке. Бесплатно и без регистрации. Свежайшая версия SQLite. Минимализм.  В итоге сделал такую песочницу сам:
 демка с пустой базой; пример заполненной базы; исходники.</description>
    </item>
    
    <item>
      <title>Найти группы похожих объектов с помощью SQL</title>
      <link>https://antonz.ru/sql-groups/</link>
      <pubDate>Sun, 06 Jun 2021 14:47:53 +0000</pubDate>
      
      <guid>https://antonz.ru/sql-groups/</guid>
      <description>Бывает, есть множество объектов с разными свойствами, и хочется идентифицировать группы похожих:
 объединить людей с одинаковым ФИО и адресами-телефонами в клиентской базе; сегментировать покупателей магазина по товарам, которые они приобрели; определить персоны в зависимости от сценариев, по которым люди взаимодействуют с сервисом.      Давайте посмотрим, как решить эту задачу на «голом» SQL.
Постановка задачи Рассмотрим на конкретном примере. Есть таблица attributes с атрибутами пользователей:
┌─────────┬─────────┐ │ user_id │ attr │ ├─────────┼─────────┤ │ 1 │ alpha │ │ 1 │ beta │ │ 2 │ beta │ │ 2 │ gamma │ │ 3 │ delta │ │ 3 │ epsilon │ │ 4 │ delta │ │ 4 │ zeta │ │ 5 │ alpha │ │ 5 │ zeta │ │ 6 │ iota │ │ 7 │ iota │ │ 7 │ kappa │ │ 8 │ kappa │ │ 8 │ lambda │ └─────────┴─────────┘ Хотим объединить пользователей в группы.</description>
    </item>
    
    <item>
      <title>Оконные функции: скользящие агрегаты</title>
      <link>https://antonz.ru/window-rolling/</link>
      <pubDate>Thu, 13 May 2021 14:06:22 +0000</pubDate>
      
      <guid>https://antonz.ru/window-rolling/</guid>
      <description>Это пятая, заключительная статья из серии Оконные функции в картинках. Рекомендую не просто читать, а проходить курс — с ним знания превратятся в навыки.
Скользящие агрегаты — это те же сумма и среднее. Только рассчитывают их не по всем элементам набора, а более хитрым способом.
Разберемся на примерах. Здесь возьмем другую табличку — expenses. Она показывает доходы и расходы одного из сотрудников (пусть это будет Марина) за 9 месяцев 2020 года:</description>
    </item>
    
    <item>
      <title>Оконные функции: агрегация</title>
      <link>https://antonz.ru/window-aggregate/</link>
      <pubDate>Thu, 29 Apr 2021 14:44:36 +0000</pubDate>
      
      <guid>https://antonz.ru/window-aggregate/</guid>
      <description>Это четвертая статья из серии Оконные функции в картинках. Рекомендую не просто читать, а проходить курс — с ним знания превратятся в навыки.
Агрегация — это когда мы считаем суммарные или средние показатели. Например, среднюю зарплату по каждому региону или количество золотых медалей у каждой страны в зачете Олимпийских игр.
Мы будем агрегировать данные по сотрудникам из таблички employees:
┌────┬──────────┬────────┬────────────┬────────┐ │ id │ name │ city │ department │ salary │ ├────┼──────────┼────────┼────────────┼────────┤ │ 11 │ Дарья │ Самара │ hr │ 70 │ │ 12 │ Борис │ Самара │ hr │ 78 │ │ 21 │ Елена │ Самара │ it │ 84 │ │ 22 │ Ксения │ Москва │ it │ 90 │ │ 23 │ Леонид │ Самара │ it │ 104 │ │ 24 │ Марина │ Москва │ it │ 104 │ │ 25 │ Иван │ Москва │ it │ 120 │ │ 31 │ Вероника │ Москва │ sales │ 96 │ │ 32 │ Григорий │ Самара │ sales │ 96 │ │ 33 │ Анна │ Москва │ sales │ 100 │ └────┴──────────┴────────┴────────────┴────────┘  сумма по секции, фильтрация, описание окна, функции агрегации.</description>
    </item>
    
    <item>
      <title>Оконные функции: смещение</title>
      <link>https://antonz.ru/window-offset/</link>
      <pubDate>Mon, 19 Apr 2021 09:49:43 +0000</pubDate>
      
      <guid>https://antonz.ru/window-offset/</guid>
      <description>Это третья статья из серии Оконные функции в картинках. Рекомендую не просто читать, а проходить курс — с ним знания превратятся в навыки.
Сравнение со смещением — это когда мы смотрим, в чем разница между соседними значениями. Например, сравниваем страны, которые занимают 5 и 6 место в мировом рейтинге ВВП — сильно ли отличаются? А если сравнить 1 и 6 место?
Сюда же попадают задачи, в которых мы сравниваем значение из набора с границами набора.</description>
    </item>
    
    <item>
      <title>Всем SQL</title>
      <link>https://antonz.ru/lets-sql/</link>
      <pubDate>Tue, 06 Apr 2021 10:58:56 +0000</pubDate>
      
      <guid>https://antonz.ru/lets-sql/</guid>
      <description>Помню, лет десять назад американские СМИ захватила идея, что «каждый должен научиться программировать». Повсеместно открывались буткампы из серии «от нуля до сеньор-разработчика за 10 дней», и даже президент США делал вид, что учится писать на джаваскрипте.
Я не уверен, что программирование нужно прямо так уж всем. И точно не стоит всем бросаться учить джаваскрипт: для автоматизации повседневной работы есть более подходящие языки.
А вот что имеет смысл освоить — так это прикладной анализ данных.</description>
    </item>
    
    <item>
      <title>Оконные функции: ранжирование</title>
      <link>https://antonz.ru/window-ranking/</link>
      <pubDate>Mon, 05 Apr 2021 08:48:00 +0000</pubDate>
      
      <guid>https://antonz.ru/window-ranking/</guid>
      <description>Это вторая статья из серии Оконные функции в картинках. Рекомендую не просто читать, а проходить курс — с ним знания превратятся в навыки.
В этой части будем решать задачу ранжирования. Ранжирование — это всевозможные рейтинги, начиная от призеров чемпионата мира по плаванию и заканчивая Forbes 500. Мы же будем ранжировать сотрудников компании.
Будем работать с игрушечной таблицей employees, вот такой:
┌────┬──────────┬────────┬────────────┬────────┐ │ id │ name │ city │ department │ salary │ ├────┼──────────┼────────┼────────────┼────────┤ │ 11 │ Дарья │ Самара │ hr │ 70 │ │ 12 │ Борис │ Самара │ hr │ 78 │ │ 21 │ Елена │ Самара │ it │ 84 │ │ 22 │ Ксения │ Москва │ it │ 90 │ │ 23 │ Леонид │ Самара │ it │ 104 │ │ 24 │ Марина │ Москва │ it │ 104 │ │ 25 │ Иван │ Москва │ it │ 120 │ │ 31 │ Вероника │ Москва │ sales │ 96 │ │ 32 │ Григорий │ Самара │ sales │ 96 │ │ 33 │ Анна │ Москва │ sales │ 100 │ └────┴──────────┴────────┴────────────┴────────┘  рейтинг зарплат, рейтинг зарплат по департаментам, группы по зарплате, функции ранжирования.</description>
    </item>
    
    <item>
      <title>Оконные функции в картинках</title>
      <link>https://antonz.ru/window-functions/</link>
      <pubDate>Mon, 15 Mar 2021 09:20:42 +0000</pubDate>
      
      <guid>https://antonz.ru/window-functions/</guid>
      <description>Нет более обманчивого раздела SQL, чем «оконные функции». Когда слышишь эти слова, думаешь «наверно, просто придумали какие-то дополнительные функции».
Если вкратце — оконные функции помогают делать классные аналитические отчеты без участия «экселя». Хотите посчитать процент продаж по месяцам от общих продаж за год? Оконные функции. Разделить маркетинговые каналы на эффективные и неэффективные? Оконные функции. Выбрать топ-10 клиентов по каждому сегменту? Тоже они.
Я прочитал несколько десятков статей «для начинающих», которые объясняли, что такое оконные функции.</description>
    </item>
    
    <item>
      <title>Собираем открытые данные с GitHub Actions</title>
      <link>https://antonz.ru/github-actions-scraping/</link>
      <pubDate>Fri, 12 Mar 2021 14:12:59 +0000</pubDate>
      
      <guid>https://antonz.ru/github-actions-scraping/</guid>
      <description>GitHub Actions чаще всего используют для сборки и тестов, но вообще сервис подходит для любой автоматизации.
В этой заметке я расскажу:
 как собрать данные из API, опубликовать датасет на гитхабе, и автоматически актуализировать.  В результате получится идеальный инструмент для сбора и публикации открытых данных.
Будем работать с API станций метро, которое предоставляет HeadHunter. Я буду приводить фрагменты конфига для GitHub Actions, а в конце дам ссылку на готовый репозиторий.</description>
    </item>
    
  </channel>
</rss>
