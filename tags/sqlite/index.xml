<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sqlite on Антон Жиянов</title><link>https://antonz.ru/tags/sqlite/</link><description>Recent content in sqlite on Антон Жиянов</description><generator>Hugo -- gohugo.io</generator><language>ru-ru</language><lastBuildDate>Wed, 12 Jan 2022 15:15:00 +0000</lastBuildDate><atom:link href="https://antonz.ru/tags/sqlite/index.xml" rel="self" type="application/rss+xml"/><item><title>Гибкие типы данных в SQLite</title><link>https://antonz.ru/sqlite-types/</link><pubDate>Wed, 12 Jan 2022 15:15:00 +0000</pubDate><guid>https://antonz.ru/sqlite-types/</guid><description>Люди часто не понимают, что за ерунда происходит в SQLite с типами данных. Давайте разберемся.
SQLite использует пять типов:
INTEGER — целые числа, REAL — действительные числа, TEXT — строки, BLOB — бинарные данные, NULL — пустое значение. Пока ничего необычного (только типов маловато по сравнению с другими СУБД).
А как вам такое:
SQLite может хранить данные любого типа — вне зависимости от того, какой тип указан на столбце.</description></item><item><title>Все расширения для SQLite</title><link>https://antonz.ru/sqlean/</link><pubDate>Tue, 04 Jan 2022 11:30:00 +0000</pubDate><guid>https://antonz.ru/sqlean/</guid><description>Мне очень нравится SQLite. Это миниатюрная встраиваемая база, которая отлично подходит как для исследовательского анализа данных, так и в качестве хранилища для небольших приложений (писал об этом, не буду повторяться).
Но есть у нее один недостаток: маловато встроенных функций по сравнению с PostgreSQL или Oracle. К счастью, авторы заложили в SQLite механизм расширений, на котором можно сделать почти все что угодно. В результате интернет заполнен обрывочными расширениями, которые добавляют функцию-другую.</description></item><item><title>Быстрый поиск похожих слов на SQL</title><link>https://antonz.ru/similar-words/</link><pubDate>Thu, 02 Dec 2021 13:30:00 +0000</pubDate><guid>https://antonz.ru/similar-words/</guid><description>В этой статье разберемся, как быстро найти похожее слово в огромном словаре. Сначала рассмотрим наивное решение, потом сконструируем быстрое, а в конце посмотрим на готовое.
Предположим, мы хотим исправлять опечатки в поисковых запросах или сообщениях чата. Человек вводит «абривиатура», мы исправляем на «аббревиатура», «рассчет» → «расчет», «дороаг» → «дорога». Посмотрим, как решить такую задачу на SQL.
Я буду использовать SQLite. Но аналогичный подход сработает с любой СУБД или языком программирования (если интересно — дайте знать, сделаю примеры на Python).</description></item><item><title>Что нового в SQLite 3.37</title><link>https://antonz.ru/sqlite-3-37/</link><pubDate>Sun, 28 Nov 2021 15:25:00 +0000</pubDate><guid>https://antonz.ru/sqlite-3-37/</guid><description>В отличие от 3.35, релиз 3.37 принес не так много изменений. Но среди них — одно из важнейших за всю историю: «строгий» режим таблиц, в котором движок следит, чтобы данные в столбце соответствовали типу.
Возможно, теперь SQLite перестанут называть «джаваскриптом в мире СУБД» ツ Но давайте по порядку.
подробности на Хабре</description></item><item><title>Табличные выражения SQL</title><link>https://antonz.ru/cte/</link><pubDate>Fri, 05 Nov 2021 11:14:51 +0000</pubDate><guid>https://antonz.ru/cte/</guid><description>Прием № 1, чтобы писать хорошие читаемые SQL-запросы — это табличные выражения (CTE). Люди их боятся, а зря. Давайте разберемся за три минуты, читать увесистую книгу по SQL или проходить курсы не придется.
Проблема Допустим, у нас есть таблица продаж по месяцам за два года:
┌──────┬───────┬───────┬──────────┬─────────┐ │ year │ month │ price │ quantity │ revenue │ ├──────┼───────┼───────┼──────────┼─────────┤ │ 2019 │ 1 │ 60 │ 200 │ 12000 │ │ 2019 │ 2 │ 60 │ 660 │ 39600 │ │ 2019 │ 3 │ 60 │ 400 │ 24000 │ │ 2019 │ 4 │ 60 │ 300 │ 18000 │ │ 2019 │ 5 │ 60 │ 440 │ 26400 │ │ 2019 │ 6 │ 60 │ 540 │ 32400 │ │ 2019 │ 7 │ 60 │ 440 │ 26400 │ │ 2019 │ 8 │ 60 │ 440 │ 26400 │ │ 2019 │ 9 │ 60 │ 250 │ 15000 │ │ 2019 │ 10 │ 60 │ 420 │ 25200 │ │ .</description></item><item><title>SQLite-песочница в браузере</title><link>https://antonz.ru/sqlime/</link><pubDate>Tue, 28 Sep 2021 21:13:03 +0000</pubDate><guid>https://antonz.ru/sqlime/</guid><description>Чего мне всегда не хватало, так это аналога JSFiddle для SQLite. Онлайн-песочницы, в которой можно быстро проверить SQL-запрос и поделиться с другими.
Вот чего хотелось:
Возможность загрузить готовую базу, а не писать SQL для создания таблиц. Подключать как локальные базы, так и удаленные (по url). Сохранять базу и запросы в облаке. Бесплатно и без регистрации. Свежайшая версия SQLite. Минимализм. В итоге сделал такую песочницу сам:
демка с пустой базой; пример заполненной базы; исходники.</description></item><item><title>Найти группы похожих объектов с помощью SQL</title><link>https://antonz.ru/sql-groups/</link><pubDate>Sun, 06 Jun 2021 14:47:53 +0000</pubDate><guid>https://antonz.ru/sql-groups/</guid><description>Бывает, есть множество объектов с разными свойствами, и хочется идентифицировать группы похожих:
объединить людей с одинаковым ФИО и адресами-телефонами в клиентской базе; сегментировать покупателей магазина по товарам, которые они приобрели; определить персоны в зависимости от сценариев, по которым люди взаимодействуют с сервисом. Давайте посмотрим, как решить эту задачу на «голом» SQL.
Постановка задачи Рассмотрим на конкретном примере. Есть таблица attributes с атрибутами пользователей:
┌─────────┬─────────┐ │ user_id │ attr │ ├─────────┼─────────┤ │ 1 │ alpha │ │ 1 │ beta │ │ 2 │ beta │ │ 2 │ gamma │ │ 3 │ delta │ │ 3 │ epsilon │ │ 4 │ delta │ │ 4 │ zeta │ │ 5 │ alpha │ │ 5 │ zeta │ │ 6 │ iota │ │ 7 │ iota │ │ 7 │ kappa │ │ 8 │ kappa │ │ 8 │ lambda │ └─────────┴─────────┘ Хотим объединить пользователей в группы.</description></item><item><title>Оконные функции: скользящие агрегаты</title><link>https://antonz.ru/window-rolling/</link><pubDate>Thu, 13 May 2021 14:06:22 +0000</pubDate><guid>https://antonz.ru/window-rolling/</guid><description>Это пятая, заключительная статья из серии Оконные функции в картинках. Рекомендую не просто читать, а проходить курс — с ним знания превратятся в навыки.
Скользящие агрегаты — это те же сумма и среднее. Только рассчитывают их не по всем элементам набора, а более хитрым способом.
Разберемся на примерах. Здесь возьмем другую табличку — expenses. Она показывает доходы и расходы одного из сотрудников (пусть это будет Марина) за 9 месяцев 2020 года:</description></item><item><title>Оконные функции: агрегация</title><link>https://antonz.ru/window-aggregate/</link><pubDate>Thu, 29 Apr 2021 14:44:36 +0000</pubDate><guid>https://antonz.ru/window-aggregate/</guid><description>Это четвертая статья из серии Оконные функции в картинках. Рекомендую не просто читать, а проходить курс — с ним знания превратятся в навыки.
Агрегация — это когда мы считаем суммарные или средние показатели. Например, среднюю зарплату по каждому региону или количество золотых медалей у каждой страны в зачете Олимпийских игр.
Мы будем агрегировать данные по сотрудникам из таблички employees:
┌────┬──────────┬────────┬────────────┬────────┐ │ id │ name │ city │ department │ salary │ ├────┼──────────┼────────┼────────────┼────────┤ │ 11 │ Дарья │ Самара │ hr │ 70 │ │ 12 │ Борис │ Самара │ hr │ 78 │ │ 21 │ Елена │ Самара │ it │ 84 │ │ 22 │ Ксения │ Москва │ it │ 90 │ │ 23 │ Леонид │ Самара │ it │ 104 │ │ 24 │ Марина │ Москва │ it │ 104 │ │ 25 │ Иван │ Москва │ it │ 120 │ │ 31 │ Вероника │ Москва │ sales │ 96 │ │ 32 │ Григорий │ Самара │ sales │ 96 │ │ 33 │ Анна │ Москва │ sales │ 100 │ └────┴──────────┴────────┴────────────┴────────┘ сумма по секции, фильтрация, описание окна, функции агрегации.</description></item><item><title>Оконные функции: смещение</title><link>https://antonz.ru/window-offset/</link><pubDate>Mon, 19 Apr 2021 09:49:43 +0000</pubDate><guid>https://antonz.ru/window-offset/</guid><description>Это третья статья из серии Оконные функции в картинках. Рекомендую не просто читать, а проходить курс — с ним знания превратятся в навыки.
Сравнение со смещением — это когда мы смотрим, в чем разница между соседними значениями. Например, сравниваем страны, которые занимают 5 и 6 место в мировом рейтинге ВВП — сильно ли отличаются? А если сравнить 1 и 6 место?
Сюда же попадают задачи, в которых мы сравниваем значение из набора с границами набора.</description></item></channel></rss>