<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Все записи блога on Антон Жиянов</title>
    <link>https://antonz.ru/posts/</link>
    <description>Recent content in Все записи блога on Антон Жиянов</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Fri, 05 Nov 2021 11:14:51 +0000</lastBuildDate><atom:link href="https://antonz.ru/posts/rss" rel="self" type="application/rss+xml" />
    <item>
      <title>Табличные выражения SQL</title>
      <link>https://antonz.ru/cte/</link>
      <pubDate>Fri, 05 Nov 2021 11:14:51 +0000</pubDate>
      
      <guid>https://antonz.ru/cte/</guid>
      <description>Прием № 1, чтобы писать хорошие читаемые SQL-запросы — это табличные выражения (CTE). Люди их боятся, а зря. Давайте разберемся за три минуты, читать увесистую книгу по SQL или проходить курсы не придется.
Проблема Допустим, у нас есть таблица продаж по месяцам за два года:
┌──────┬───────┬───────┬──────────┬─────────┐ │ year │ month │ price │ quantity │ revenue │ ├──────┼───────┼───────┼──────────┼─────────┤ │ 2019 │ 1 │ 60 │ 200 │ 12000 │ │ 2019 │ 2 │ 60 │ 660 │ 39600 │ │ 2019 │ 3 │ 60 │ 400 │ 24000 │ │ 2019 │ 4 │ 60 │ 300 │ 18000 │ │ 2019 │ 5 │ 60 │ 440 │ 26400 │ │ 2019 │ 6 │ 60 │ 540 │ 32400 │ │ 2019 │ 7 │ 60 │ 440 │ 26400 │ │ 2019 │ 8 │ 60 │ 440 │ 26400 │ │ 2019 │ 9 │ 60 │ 250 │ 15000 │ │ 2019 │ 10 │ 60 │ 420 │ 25200 │ │ .</description>
    </item>
    
    <item>
      <title>Справочник адресов России</title>
      <link>https://antonz.ru/fias/</link>
      <pubDate>Sun, 24 Oct 2021 17:02:08 +0000</pubDate>
      
      <guid>https://antonz.ru/fias/</guid>
      <description>Не все знают, что в России есть Великий Справочник Адресов, в который свято веруют все чиновники (да и не только они). Расскажу о нём немного. Без официальной нуднятины, только задорные факты из жизни.
Справочник адресов называется «ФИАС» (федеральная информационная адресная система) или «ГАР» (государственный адресный реестр) — это одно и то же. Раньше назывался «КЛАДР» (классификатор адресов). Технически поддерживает его налоговая, а данные о домах и улицах вносят местные чиновники по всей стране.</description>
    </item>
    
    <item>
      <title>Вы являетесь дизайнеру в страшном сне</title>
      <link>https://antonz.ru/tinkoff-signin/</link>
      <pubDate>Thu, 07 Oct 2021 13:49:33 +0000</pubDate>
      
      <guid>https://antonz.ru/tinkoff-signin/</guid>
      <description>Интернет-банк Тинькова при входе встречает многозначительной надписью:
  Вы являетесь держателем продуктов Тинькофф Банка. При входе по номеру телефона, в целях безопасности, введите пароль.  Я, конечно, не UX-писатель, но это жуть какая кривая формулировка. Давайте попробуем улучшить.
1. Формулируем по-человечески Меняем суконный язык банковских безопасников на нормальную речь.
Вы являетесь держателем продуктов Тинькофф Банка. При входе по номеру телефона, в целях безопасности, введите пароль.
↓  Вы — клиент Тинькофф Банка.</description>
    </item>
    
    <item>
      <title>SQLite-песочница в браузере</title>
      <link>https://antonz.ru/sqlime/</link>
      <pubDate>Tue, 28 Sep 2021 21:13:03 +0000</pubDate>
      
      <guid>https://antonz.ru/sqlime/</guid>
      <description>Чего мне всегда не хватало, так это аналога JSFiddle для SQLite. Онлайн-песочницы, в которой можно быстро проверить SQL-запрос и поделиться с другими.

Вот чего хотелось:
 Возможность загрузить готовую базу, а не писать SQL для создания таблиц. Подключать как локальные базы, так и удаленные (по url). Сохранять базу и запросы в облаке. Бесплатно и без регистрации. Свежайшая версия SQLite. Минимализм.  В итоге сделал такую песочницу сам:
 демка с пустой базой; пример заполненной базы; исходники.</description>
    </item>
    
    <item>
      <title>Как хранят данные в браузере</title>
      <link>https://antonz.ru/browser-storage/</link>
      <pubDate>Sun, 26 Sep 2021 09:36:07 +0000</pubDate>
      
      <guid>https://antonz.ru/browser-storage/</guid>
      <description>Поговорим о том, как люди хранили данные в браузере, от мохнатой древности до нашего времени.
1. Куки Первые инженеры, едва переодевшись из шкур в неопрятные свитера, попытались использовать родной и привычный HTTP-протокол. Проблема в том, что он не хранит состояние (stateless) — пять запросов от Алисы выглядят точно так же, как пять запросов от пяти разных людей.
Что же делать? В любой непонятной ситуации придумывай костыль! Так появились куки (cookie). Это пары строк (ключ — значение), которые браузер гоняет на сервер с каждым запросом.</description>
    </item>
    
    <item>
      <title>Признать проблему</title>
      <link>https://antonz.ru/acknowledge/</link>
      <pubDate>Thu, 09 Sep 2021 10:32:08 +0000</pubDate>
      
      <guid>https://antonz.ru/acknowledge/</guid>
      <description>Иногда продукты работают хуже, чем могли бы, потому что команда отказывается признавать проблемы. Давайте посмотрим, как это бывает.
Письма о заказе Представьте ситуацию. Вы работаете в крупном маркетплейсе. Люди делают на маркетплейсе заказы, он доставляет. А по факту доставки одного заказа присылает шесть писем:
    Заказ доставлен Электронный чек по 1-й части заказа Электронный чек по 2-й части заказа Электронный чек по 3-й части заказа Электронный чек по 4-й части заказа Вы довольны доставкой?</description>
    </item>
    
    <item>
      <title>Почтовые адреса в интерфейсе</title>
      <link>https://antonz.ru/postal-address/</link>
      <pubDate>Mon, 06 Sep 2021 14:32:41 +0000</pubDate>
      
      <guid>https://antonz.ru/postal-address/</guid>
      <description>Моя вынужденно-любимая тема! Поговорим о том, как работать с почтовыми адресами в интерфейсах. Вот что я об этом думаю (1–3 обязательно, 4–6 по необходимости и возможности):
1. Спрашивать адрес одним полем Не мучайте людей, заставляя их вводить «регион», «город», «населенный пункт» и «улицу». Достаточно одного поля с автодополнением от Дадаты, Яндекса или хотя бы Гугла.
  2. Автоматически определять индекс У нас не США, люди часто не помнят свой почтовый индекс.</description>
    </item>
    
    <item>
      <title>Что должно быть в письме о заказе</title>
      <link>https://antonz.ru/order-confirmation/</link>
      <pubDate>Thu, 15 Jul 2021 15:57:34 +0000</pubDate>
      
      <guid>https://antonz.ru/order-confirmation/</guid>
      <description>Если продаете товары с доставкой курьером — наверняка отправляете клиентам емейл или смс после того, как заказ оформлен. Все так делают.
Но не у всех это письмо полезно клиенту.
Плохо Например, «Деликатеска» присылает такую простыню:
 Здравствуйте, вам нужно больше читать, поэтому вот    Тут и правила всего на свете, и мое имя и телефон (спасибо, а то вечно забываю), и бесконечный список заказанных товаров (на скриншоте я его обрезал), и даже призыв защитить природу в финале.</description>
    </item>
    
    <item>
      <title>Дурная кровь</title>
      <link>https://antonz.ru/bad-blood/</link>
      <pubDate>Thu, 08 Jul 2021 15:06:18 +0000</pubDate>
      
      <guid>https://antonz.ru/bad-blood/</guid>
      <description>Прочитал бестселлер о компании Theranos, которая обещала делать сотни анализов по одной капле крови из пальца, а на деле построила масштабнейшую мистификацию, равную которой современная экономика высоких технологий еще не видела.
До этого я читал немало увлекательных биографий людей и компаний, но «Дурная кровь» — нечто особенное. Это натуральный блокбастер, невозможно оторваться. И там чистый голливуд, как будто нарочно придумали захватывающую историю — вот только все это было на самом деле.</description>
    </item>
    
    <item>
      <title>Разбор текста по шаблону на Python</title>
      <link>https://antonz.ru/parse/</link>
      <pubDate>Sat, 19 Jun 2021 17:24:59 +0000</pubDate>
      
      <guid>https://antonz.ru/parse/</guid>
      <description>Все знают, как в питоне форматировать текст по шаблону:
import datetime as dt date = dt.date(2020, 11, 20) who = &amp;#34;Френк&amp;#34; count = 42 tmpl = &amp;#34;{:%Y-%m-%d}: {}и его {:d}друга вылетели в Копенгаген&amp;#34; &amp;gt;&amp;gt;&amp;gt; tmpl.format(date, who, count) &amp;#39;2020-11-20: Френк и его 42 друга вылетели в Копенгаген&amp;#39; А благодаря библиотеке parse от Ричарда Джонса, с такой же легкостью можно разбирать текст обратно по переменным:
import parse tmpl = &amp;#34;{:ti}: {}и его {:d}друга вылетели в Копенгаген&amp;#34; txt = &amp;#34;2020-11-20: Френк и его 42 друга вылетели в Копенгаген&amp;#34; &amp;gt;&amp;gt;&amp;gt; date, who, count = parse.</description>
    </item>
    
    <item>
      <title>Современный HTTP-клиент для Python</title>
      <link>https://antonz.ru/httpx/</link>
      <pubDate>Sat, 12 Jun 2021 17:21:00 +0000</pubDate>
      
      <guid>https://antonz.ru/httpx/</guid>
      <description>Мало у какого языка такая нажористая стандартная библиотека, как у питона. Но все равно для работы с HTTP люди пользуются сторонним пакетом requests.
А я вот отказался от него в пользу замечательного httpx от Тома Кристи. Синхронный и асинхронный интерфейсы, поддержка wsgi/asgi, плюс все фичи requests — и совместимость с ним!
Можно заменить requests → httpx, и все продолжит работать:
&amp;gt;&amp;gt;&amp;gt; import httpx &amp;gt;&amp;gt;&amp;gt; r = httpx.get(&amp;quot;http://httpbingo.org/json&amp;quot;) &amp;gt;&amp;gt;&amp;gt; r.status_code 200 &amp;gt;&amp;gt;&amp;gt; r.</description>
    </item>
    
    <item>
      <title>Найти группы похожих объектов с помощью SQL</title>
      <link>https://antonz.ru/sql-groups/</link>
      <pubDate>Sun, 06 Jun 2021 14:47:53 +0000</pubDate>
      
      <guid>https://antonz.ru/sql-groups/</guid>
      <description>Бывает, есть множество объектов с разными свойствами, и хочется идентифицировать группы похожих:
 объединить людей с одинаковым ФИО и адресами-телефонами в клиентской базе; сегментировать покупателей магазина по товарам, которые они приобрели; определить персоны в зависимости от сценариев, по которым люди взаимодействуют с сервисом.      Давайте посмотрим, как решить эту задачу на «голом» SQL.
Постановка задачи Рассмотрим на конкретном примере. Есть таблица attributes с атрибутами пользователей:
┌─────────┬─────────┐ │ user_id │ attr │ ├─────────┼─────────┤ │ 1 │ alpha │ │ 1 │ beta │ │ 2 │ beta │ │ 2 │ gamma │ │ 3 │ delta │ │ 3 │ epsilon │ │ 4 │ delta │ │ 4 │ zeta │ │ 5 │ alpha │ │ 5 │ zeta │ │ 6 │ iota │ │ 7 │ iota │ │ 7 │ kappa │ │ 8 │ kappa │ │ 8 │ lambda │ └─────────┴─────────┘ Хотим объединить пользователей в группы.</description>
    </item>
    
    <item>
      <title>Универсальные оповещения на Python</title>
      <link>https://antonz.ru/notifiers/</link>
      <pubDate>Sat, 05 Jun 2021 15:00:00 +0000</pubDate>
      
      <guid>https://antonz.ru/notifiers/</guid>
      <description>Есть куча способов отправлять уведомления — от проверенного SMTP и удобного Telegram до смс и специальных приложений для мобилок вроде Pushover.
Обычно для этого используют 3rd-party библиотеку соответствующего провайдера. Но есть более удобный способ — пакет notifiers от Ора Карми. Он предоставляет простой универсальный интерфейс для отправки сообщений через любой сервис.
Например, через телеграм:
import notifiers token = &amp;#34;bot_token&amp;#34; chat_id = 1234 tg = notifiers.get_notifier(&amp;#34;telegram&amp;#34;) tg.notify(message=&amp;#34;Привет!&amp;#34;, token=token, chat_id=chat_id) Поддерживается аж 16 провайдеров, а интерфейс один — метод .</description>
    </item>
    
    <item>
      <title>Главный критерий хорошего кода</title>
      <link>https://antonz.ru/good-code/</link>
      <pubDate>Wed, 02 Jun 2021 07:27:39 +0000</pubDate>
      
      <guid>https://antonz.ru/good-code/</guid>
      <description>Хороший код — понятный и непрожорливый до ресурсов. Давайте поговорим об этом.
Время на понимание Главный критерий хорошего кода — это время T, которое требуется не-автору, чтобы разобраться в коде. Причем разобраться не на уровне «вроде понятно», а достаточно хорошо, чтобы внести изменения и ничего не сломать.
Чем меньше T, тем лучше код.
Допустим, Нина и Витя реализовали одну и ту же фичу, а вы хотите ее доработать. Если разберетесь в коде Нины за 10 минут, а в коде Вити за 30 минут — код Нины лучше.</description>
    </item>
    
    <item>
      <title>Счетчик для огромных коллекций на Python</title>
      <link>https://antonz.ru/bounter/</link>
      <pubDate>Sun, 30 May 2021 08:34:00 +0000</pubDate>
      
      <guid>https://antonz.ru/bounter/</guid>
      <description>В стандартной библиотеке есть класс Counter. Он отлично подходит, чтобы считать количество объектов разных типов. Но что делать, если объектов миллиарды, и счетчик просто не помещается в оперативную память?
Поможет bounter — это счетчик, который предоставляет схожий интерфейс, но внутри построен на вероятностных структурах данных. За счет этого он занимает в 30–250 раз меньше памяти, но может (слегка) привирать.
from bounter import bounter counts = bounter(size_mb=128) counts.update([&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;]) &amp;gt;&amp;gt;&amp;gt; counts.</description>
    </item>
    
    <item>
      <title>Поэлементно сравнить коллекции в Python</title>
      <link>https://antonz.ru/compare-sets/</link>
      <pubDate>Tue, 25 May 2021 21:16:27 +0000</pubDate>
      
      <guid>https://antonz.ru/compare-sets/</guid>
      <description>Однажды мы уже смотрели, как множества помогают быстро проверить, входит ли элемент в коллекцию.
Конечно, это не единственная возможность. Множества в питоне идеально подходят, чтобы поэлементно сравнивать коллекции.
Допустим, мы ведем учет посетителей:
jan = [&amp;#34;Питер&amp;#34;, &amp;#34;Клер&amp;#34;, &amp;#34;Френк&amp;#34;] feb = [&amp;#34;Френк&amp;#34;, &amp;#34;Зоя&amp;#34;, &amp;#34;Дуглас&amp;#34;] mar = [&amp;#34;Клер&amp;#34;, &amp;#34;Питер&amp;#34;, &amp;#34;Зоя&amp;#34;] И хотим узнать, кто приходил в январе и феврале. Нет ни малейшего желания писать вложенный цикл с перебором jan и feb. Намного приятнее (и быстрее) использовать множества.</description>
    </item>
    
    <item>
      <title>Планировщик задач на Python</title>
      <link>https://antonz.ru/schedule/</link>
      <pubDate>Sat, 22 May 2021 08:31:00 +0000</pubDate>
      
      <guid>https://antonz.ru/schedule/</guid>
      <description>В стандартной библотеке есть встроенный планировщик задач (а чего вообще в ней нет?). Подробно расскажу в другой раз, но в целом он, скажем так, не слишком юзер-френдли.
Поэтому Дэн Бэйдер сделал schedule — «планировщик для людей». Смотрите, какой милый:
import schedule import time def job(): print(&amp;#34;I&amp;#39;m working...&amp;#34;) schedule.every().hour.do(job) schedule.every(5).to(10).minutes.do(job) schedule.every().day.at(&amp;#34;10:30&amp;#34;).do(job) while True: schedule.run_pending() time.sleep(1) Ноль зависимостей, чистый и великолепно документированный код, примеры на все случаи жизни.
Заметка из телеграм-канала  «Oh My Py»</description>
    </item>
    
    <item>
      <title>«Отнаследовать» функцию от существующей в Python</title>
      <link>https://antonz.ru/functools-partial/</link>
      <pubDate>Tue, 18 May 2021 09:33:53 +0000</pubDate>
      
      <guid>https://antonz.ru/functools-partial/</guid>
      <description>Допустим, у нас есть список важных гостей. Он в легком беспорядке:
data = [ &amp;#34;4 - Дуглас&amp;#34;, &amp;#34;2 - Клер&amp;#34;, &amp;#34;11 - Зоя&amp;#34;, &amp;#34;1 - Френк&amp;#34;, &amp;#34;31 - Питер&amp;#34;, ] Отсортируем:
&amp;gt;&amp;gt;&amp;gt; sorted(data) [&amp;#39;1 - Френк&amp;#39;, &amp;#39;11 - Зоя&amp;#39;, &amp;#39;2 - Клер&amp;#39;, &amp;#39;31 - Питер&amp;#39;, &amp;#39;4 - Дуглас&amp;#39;] Порядка не прибавилось — sorted() не знает, что здесь нужна числовая сортировка, а не алфавитная. Поможем ему:
def _key(src): parts = src.partition(&amp;#34; - &amp;#34;) return int(parts[0]) &amp;gt;&amp;gt;&amp;gt; sorted(data, key=_key) [&amp;#39;1 - Френк&amp;#39;, &amp;#39;2 - Клер&amp;#39;, &amp;#39;4 - Дуглас&amp;#39;, &amp;#39;11 - Зоя&amp;#39;, &amp;#39;31 - Питер&amp;#39;] Так хорошо!</description>
    </item>
    
    <item>
      <title>Естественная сортировка на Python</title>
      <link>https://antonz.ru/natsort/</link>
      <pubDate>Sat, 15 May 2021 08:28:00 +0000</pubDate>
      
      <guid>https://antonz.ru/natsort/</guid>
      <description>Это #пакетик — еженедельная рубрика о полезных и интересных пакетах на Python.
Мой сегодняшний выбор — пакет Сета Мортона natsort, который сортирует строки привычным для человека образом.
Допустим, у нас есть список важных гостей. Он в легком беспорядке:
data = [ &amp;#34;4 - Дуглас&amp;#34;, &amp;#34;2 - Клер&amp;#34;, &amp;#34;11 - Зоя&amp;#34;, &amp;#34;1 - Френк&amp;#34;, &amp;#34;31 - Питер&amp;#34;, ] Отсортируем:
&amp;gt;&amp;gt;&amp;gt; sorted(data) [&amp;#39;1 - Френк&amp;#39;, &amp;#39;11 - Зоя&amp;#39;, &amp;#39;2 - Клер&amp;#39;, &amp;#39;31 - Питер&amp;#39;, &amp;#39;4 - Дуглас&amp;#39;] Порядка не прибавилось ツ А вот как будет с natsort:</description>
    </item>
    
    <item>
      <title>Оконные функции: скользящие агрегаты</title>
      <link>https://antonz.ru/window-rolling/</link>
      <pubDate>Thu, 13 May 2021 14:06:22 +0000</pubDate>
      
      <guid>https://antonz.ru/window-rolling/</guid>
      <description>Это пятая, заключительная статья из серии Оконные функции в картинках. Рекомендую не просто читать, а проходить курс — с ним знания превратятся в навыки.
Скользящие агрегаты — это те же сумма и среднее. Только рассчитывают их не по всем элементам набора, а более хитрым способом.
Разберемся на примерах. Здесь возьмем другую табличку — expenses. Она показывает доходы и расходы одного из сотрудников (пусть это будет Марина) за 9 месяцев 2020 года:</description>
    </item>
    
    <item>
      <title>Второй язык для питониста</title>
      <link>https://antonz.ru/python-plus-one/</link>
      <pubDate>Sun, 09 May 2021 12:15:13 +0000</pubDate>
      
      <guid>https://antonz.ru/python-plus-one/</guid>
      <description>Если вы давно и хорошо знаете питон, некоторые моменты в нем могут напрягать. Например, необходимость начинать каждый новый проект с создания виртуального окружения и установки пачки тулов вроде black, pylint и pytest. Или отсутствующий рефакторинг и частые ошибки из-за динамической типизации. Или убоговатая асинхронность и костыль в виде GIL.
Если у вас так — возможно, пора освоить второй язык. Логично выбрать вариант без питонячих недостатков: статически типизированный, с готовым тулингом, продуманной асинхронностью и параллелизмом.</description>
    </item>
    
    <item>
      <title>Видение, эмпатия, смелость</title>
      <link>https://antonz.ru/thoughts-on-flash/</link>
      <pubDate>Thu, 06 May 2021 16:19:04 +0000</pubDate>
      
      <guid>https://antonz.ru/thoughts-on-flash/</guid>
      <description>Одиннадцать лет назад, весной 2010 года, Adobe Flash был на пике популярности. Adobe построил вокруг этого поделия аж целую платформу, с прицелом на мобильные устройства и встраиваемое ПО.
Флеш был так успешен, что Microsoft еще в 2007 году выкатила конкурента — аналогичную хреновину под названием Silverlight. Борьба намечалась нешуточная.
Apple, владея стремительно набирающей популярность iOS, не могла остаться в стороне. И анонсировала собственную альтернативу флешу — iSlate. Аналогичный шаг сделал и Google.</description>
    </item>
    
    <item>
      <title>Оконные функции: агрегация</title>
      <link>https://antonz.ru/window-aggregate/</link>
      <pubDate>Thu, 29 Apr 2021 14:44:36 +0000</pubDate>
      
      <guid>https://antonz.ru/window-aggregate/</guid>
      <description>Это четвертая статья из серии Оконные функции в картинках. Рекомендую не просто читать, а проходить курс — с ним знания превратятся в навыки.
Агрегация — это когда мы считаем суммарные или средние показатели. Например, среднюю зарплату по каждому региону или количество золотых медалей у каждой страны в зачете Олимпийских игр.
Мы будем агрегировать данные по сотрудникам из таблички employees:
┌────┬──────────┬────────┬────────────┬────────┐ │ id │ name │ city │ department │ salary │ ├────┼──────────┼────────┼────────────┼────────┤ │ 11 │ Дарья │ Самара │ hr │ 70 │ │ 12 │ Борис │ Самара │ hr │ 78 │ │ 21 │ Елена │ Самара │ it │ 84 │ │ 22 │ Ксения │ Москва │ it │ 90 │ │ 23 │ Леонид │ Самара │ it │ 104 │ │ 24 │ Марина │ Москва │ it │ 104 │ │ 25 │ Иван │ Москва │ it │ 120 │ │ 31 │ Вероника │ Москва │ sales │ 96 │ │ 32 │ Григорий │ Самара │ sales │ 96 │ │ 33 │ Анна │ Москва │ sales │ 100 │ └────┴──────────┴────────┴────────────┴────────┘  сумма по секции, фильтрация, описание окна, функции агрегации.</description>
    </item>
    
    <item>
      <title>​Шпаргалки как альтернатива man</title>
      <link>https://antonz.ru/cheat-sh/</link>
      <pubDate>Fri, 23 Apr 2021 10:46:01 +0000</pubDate>
      
      <guid>https://antonz.ru/cheat-sh/</guid>
      <description>Я вечно забываю синтаксис линуксовых утилит вроде grep, sed и find. Есть команда man, которая показывает документацию по утилите, но для меня она совершенно бесполезна — никогда не получается найти то, что нужно (возможно, это только я такой тупой).
Поэтому был бесконечно счастлив, когда на днях нашел приятную альтернативу от Игоря Чубина — «шпаргалки» с конкретными примерами. Чтобы их включить, достаточно добавить такую функцию в .bashrc:
function cht() { curl &amp;quot;cht.</description>
    </item>
    
    <item>
      <title>Оконные функции: смещение</title>
      <link>https://antonz.ru/window-offset/</link>
      <pubDate>Mon, 19 Apr 2021 09:49:43 +0000</pubDate>
      
      <guid>https://antonz.ru/window-offset/</guid>
      <description>Это третья статья из серии Оконные функции в картинках. Рекомендую не просто читать, а проходить курс — с ним знания превратятся в навыки.
Сравнение со смещением — это когда мы смотрим, в чем разница между соседними значениями. Например, сравниваем страны, которые занимают 5 и 6 место в мировом рейтинге ВВП — сильно ли отличаются? А если сравнить 1 и 6 место?
Сюда же попадают задачи, в которых мы сравниваем значение из набора с границами набора.</description>
    </item>
    
    <item>
      <title>Книга по визуализации данных</title>
      <link>https://antonz.ru/dataviz-guide/</link>
      <pubDate>Sun, 11 Apr 2021 08:37:39 +0000</pubDate>
      
      <guid>https://antonz.ru/dataviz-guide/</guid>
      <description>На днях я наткнулся на идеальное руководство по инфографике и визуализации данных:
 основано на работах Эдварда Тафти и Стивена Фью; подробное, но не слишком многословное (150 страниц); практичное и с кучей примеров (197 иллюстраций).  Книга рассказывает, как строить понятные отчеты и дашборды, на основе которых люди смогут принимать решения:
 Как сформулировать и донести сообщение. Как выбрать подходящую диаграмму. Как должен выглядеть каждый элемент диаграммы. Как избежать визуального мусора и повысить информационную плотность.</description>
    </item>
    
    <item>
      <title>Всем SQL</title>
      <link>https://antonz.ru/lets-sql/</link>
      <pubDate>Tue, 06 Apr 2021 10:58:56 +0000</pubDate>
      
      <guid>https://antonz.ru/lets-sql/</guid>
      <description>Помню, лет десять назад американские СМИ захватила идея, что «каждый должен научиться программировать». Повсеместно открывались буткампы из серии «от нуля до сеньор-разработчика за 10 дней», и даже президент США делал вид, что учится писать на джаваскрипте.
Я не уверен, что программирование нужно прямо так уж всем. И точно не стоит всем бросаться учить джаваскрипт: для автоматизации повседневной работы есть более подходящие языки.
А вот что имеет смысл освоить — так это прикладной анализ данных.</description>
    </item>
    
    <item>
      <title>Оконные функции: ранжирование</title>
      <link>https://antonz.ru/window-ranking/</link>
      <pubDate>Mon, 05 Apr 2021 08:48:00 +0000</pubDate>
      
      <guid>https://antonz.ru/window-ranking/</guid>
      <description>Это вторая статья из серии Оконные функции в картинках. Рекомендую не просто читать, а проходить курс — с ним знания превратятся в навыки.
В этой части будем решать задачу ранжирования. Ранжирование — это всевозможные рейтинги, начиная от призеров чемпионата мира по плаванию и заканчивая Forbes 500. Мы же будем ранжировать сотрудников компании.
Будем работать с игрушечной таблицей employees, вот такой:
┌────┬──────────┬────────┬────────────┬────────┐ │ id │ name │ city │ department │ salary │ ├────┼──────────┼────────┼────────────┼────────┤ │ 11 │ Дарья │ Самара │ hr │ 70 │ │ 12 │ Борис │ Самара │ hr │ 78 │ │ 21 │ Елена │ Самара │ it │ 84 │ │ 22 │ Ксения │ Москва │ it │ 90 │ │ 23 │ Леонид │ Самара │ it │ 104 │ │ 24 │ Марина │ Москва │ it │ 104 │ │ 25 │ Иван │ Москва │ it │ 120 │ │ 31 │ Вероника │ Москва │ sales │ 96 │ │ 32 │ Григорий │ Самара │ sales │ 96 │ │ 33 │ Анна │ Москва │ sales │ 100 │ └────┴──────────┴────────┴────────────┴────────┘  рейтинг зарплат, рейтинг зарплат по департаментам, группы по зарплате, функции ранжирования.</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://antonz.ru/episode-7/</link>
      <pubDate>Sun, 04 Apr 2021 22:47:00 +0000</pubDate>
      
      <guid>https://antonz.ru/episode-7/</guid>
      <description>Об уникальной нереляционной in-memory базе, написанной одним из самых талантливых разработчиков современности.
 Introduction to Redis
Data types, Pub/Sub, Streams
Исходники
Блог Сальваторе
Поддержать подкаст + бонусы</description>
    </item>
    
    <item>
      <title>GitHub Actions</title>
      <link>https://antonz.ru/episode-6/</link>
      <pubDate>Fri, 26 Mar 2021 16:44:06 +0000</pubDate>
      
      <guid>https://antonz.ru/episode-6/</guid>
      <description>О невероятно мощном бесплатном сервисе автоматизации любых задач от Гитхаба.
 Кросс-платформенная сборка с GitHub Actions
Собираем открытые данные с GitHub Actions
Introduction to GitHub Actions
Поддержать подкаст + бонусы</description>
    </item>
    
    <item>
      <title>awsm.css</title>
      <link>https://antonz.ru/episode-5/</link>
      <pubDate>Fri, 19 Mar 2021 10:08:55 +0000</pubDate>
      
      <guid>https://antonz.ru/episode-5/</guid>
      <description>О замечательной библиотеке для всех, кто не фанатеет от html-верстки.
 awsm.css на гитхабе
Описание и примеры
Поддержать подкаст + бонусы</description>
    </item>
    
    <item>
      <title>Начни с примера</title>
      <link>https://antonz.ru/start-with-example/</link>
      <pubDate>Mon, 15 Mar 2021 14:37:23 +0000</pubDate>
      
      <guid>https://antonz.ru/start-with-example/</guid>
      <description>Главное правило для всех, кто пишет обучающие статьи, курсы и вообще что угодно для начинающих:
Начинайте с примеров, черт возьми  Например, вы решили учить людей SQL. И первым делом подсовываете им такую замечательную схему SQL-запроса:
Не, ну, а чо. Пусть сразу системному подходу учатся, правда?
Нет.
Начните с простых примерчиков. Расскажите про большую эксельку, которую можно фильтровать и сортировать. Покажите примитивные запросы на табличке из 10 записей. Нарисуйте элементарные картинки или сделайте гифку.</description>
    </item>
    
    <item>
      <title>Оконные функции в картинках</title>
      <link>https://antonz.ru/window-functions/</link>
      <pubDate>Mon, 15 Mar 2021 09:20:42 +0000</pubDate>
      
      <guid>https://antonz.ru/window-functions/</guid>
      <description>Нет более обманчивого раздела SQL, чем «оконные функции». Когда слышишь эти слова, думаешь «наверно, просто придумали какие-то дополнительные функции».
Если вкратце — оконные функции помогают делать классные аналитические отчеты без участия «экселя». Хотите посчитать процент продаж по месяцам от общих продаж за год? Оконные функции. Разделить маркетинговые каналы на эффективные и неэффективные? Оконные функции. Выбрать топ-10 клиентов по каждому сегменту? Тоже они.
Я прочитал несколько десятков статей «для начинающих», которые объясняли, что такое оконные функции.</description>
    </item>
    
    <item>
      <title>Ошибки в API</title>
      <link>https://antonz.ru/episode-4/</link>
      <pubDate>Sun, 14 Mar 2021 14:07:02 +0000</pubDate>
      
      <guid>https://antonz.ru/episode-4/</guid>
      <description>Как лучше всего возвращать информацию об ошибках в API.
 How do you know what&#39;s gone wrong when your API request fails?
RFC 7807. Problem Details for HTTP APIs
Библиотеки для разных языков
HTTP Status Codes
Поддержать подкаст + бонусы</description>
    </item>
    
    <item>
      <title>Собираем открытые данные с GitHub Actions</title>
      <link>https://antonz.ru/github-actions-scraping/</link>
      <pubDate>Fri, 12 Mar 2021 14:12:59 +0000</pubDate>
      
      <guid>https://antonz.ru/github-actions-scraping/</guid>
      <description>GitHub Actions чаще всего используют для сборки и тестов, но вообще сервис подходит для любой автоматизации.
В этой заметке я расскажу:
 как собрать данные из API, опубликовать датасет на гитхабе, и автоматически актуализировать.  В результате получится идеальный инструмент для сбора и публикации открытых данных.
Будем работать с API станций метро, которое предоставляет HeadHunter. Я буду приводить фрагменты конфига для GitHub Actions, а в конце дам ссылку на готовый репозиторий.</description>
    </item>
    
    <item>
      <title>JSON:API</title>
      <link>https://antonz.ru/episode-3/</link>
      <pubDate>Fri, 05 Mar 2021 07:18:00 +0000</pubDate>
      
      <guid>https://antonz.ru/episode-3/</guid>
      <description>Сегодня поговорим об API. Не просто о REST + JSON, а о спецификации JSON:API для сложных и долгоживущих систем.
 Спецификация JSON:API 1.0
JSON API — работаем по спецификации
REST vs JSON:API vs GraphQL
Поддержать подкаст + бонусы</description>
    </item>
    
    <item>
      <title>Что нового в SQLite 3.35</title>
      <link>https://antonz.ru/sqlite-3-35/</link>
      <pubDate>Wed, 03 Mar 2021 13:09:26 +0000</pubDate>
      
      <guid>https://antonz.ru/sqlite-3-35/</guid>
      <description>В новых релизах разработчики SQLite часто перебирают движок так и сяк, а для внешнего наблюдателя ничего особо не меняется. 2020 год стал приятным исключением — добавили кучу приятных фич для пользователей, вроде вычисляемых столбцов, UPDATE FROM и великолепного .mode box в консоли.
Есть все шансы, что 2021 год продолжит традицию. Вот что сделали в релизе 3.35 (вышел 12 марта):
 Математические функции ‼️ Удаление столбцов ❗ Возврат обработанных строк для DELETE, INSERT и UPDATE (выражение RETURNING).</description>
    </item>
    
    <item>
      <title>Моментальный поиск</title>
      <link>https://antonz.ru/episode-2/</link>
      <pubDate>Wed, 03 Mar 2021 07:15:00 +0000</pubDate>
      
      <guid>https://antonz.ru/episode-2/</guid>
      <description>Что такое индекс в базе данных и как он работает. Никакой магии!
 Анатомия индекса
Поддержать подкаст + бонусы</description>
    </item>
    
    <item>
      <title>Слишком простое решение</title>
      <link>https://antonz.ru/too-simple/</link>
      <pubDate>Tue, 02 Mar 2021 14:19:02 +0000</pubDate>
      
      <guid>https://antonz.ru/too-simple/</guid>
      <description>Хорошие продакты, дизайнеры и инженеры любят простые решения — при условии, что они подходят пользователям. Но иногда можно сделать даже проще, чем думаешь.
Пример из жизни. Мы в «Дадате» в основном работаем с юрлицами, а эти ребята умеют платить только по счету.
Мне в свое время категорически не хотелось тратить время на модуль выставления счетов, поэтому прошерстил весь рунет в поисках подходящего сервиса. Нашел миллион сайтов с конструкторами счетов, но только один с API — «Финолог».</description>
    </item>
    
    <item>
      <title>Комментарии в блоге через GitHub</title>
      <link>https://antonz.ru/comments-via-github/</link>
      <pubDate>Mon, 01 Mar 2021 10:54:35 +0000</pubDate>
      
      <guid>https://antonz.ru/comments-via-github/</guid>
      <description>Если к блогу подключают комментарии — обычно используют мерзкий Disqus, тормозной и увешенный трекерами. Есть и более легкие варианты, вроде HyperComments или anycomment. Но Джереми Данье сделал идеальный вариант для гиков — плагин utterances с комментариями через GitHub Issues.
Читатели комментируют на сайте как обычно, а комментарии хранятся прямо в гитхабе. На каждую страницу сайта автоматом заводится отдельная задачка в репозитории. Чтобы комментировать, требуется авторизоваться через гитхаб — так что никакого спама.</description>
    </item>
    
    <item>
      <title>Используй индекс, Люк!</title>
      <link>https://antonz.ru/episode-1/</link>
      <pubDate>Sun, 28 Feb 2021 07:12:00 +0000</pubDate>
      
      <guid>https://antonz.ru/episode-1/</guid>
      <description>О лучшей книге для тех, кто уже знает SQL и хочет понять, как заставить запросы работать быстро.
 Бесплатная книга онлайн
Книга на Амазоне
Поддержать подкаст + бонусы</description>
    </item>
    
    <item>
      <title>Сегодня я узнал</title>
      <link>https://antonz.ru/podcast/</link>
      <pubDate>Sun, 28 Feb 2021 07:02:00 +0000</pubDate>
      
      <guid>https://antonz.ru/podcast/</guid>
      <description>Запустил подкаст о программировании и продуктах. Главные принципы:
 Никакой пустой болтовни. Никаких рассуждений об очередном айфоне, цене биткойна или что там Маск написал в твитере. Только практические штуки. В каждом выпуске — одна тема, которую можно взять и сразу применять на работе или в жизни. Очень короткие эпизоды — пять минут или около того. Не хочу долго занимать эфир, да и вообще длинных подкастов уже достаточно.  Выходит раз в неделю или чаще.</description>
    </item>
    
    <item>
      <title>Простое против легкого</title>
      <link>https://antonz.ru/simple-made-easy/</link>
      <pubDate>Fri, 26 Feb 2021 12:55:15 +0000</pubDate>
      
      <guid>https://antonz.ru/simple-made-easy/</guid>
      <description>9 лет назад в докладе «Simple Made Easy» Рич Хикки рассказал о разнице между простым (simple) и легким (easy) в разработке софта. Стремление к простым программам (в противоположность легким) — самый важный, наверное, принцип разработки. И при этом совершенно непопулярный.
 Simple — это о внутреннем устройстве программы, ее архитектуре. У простых программ мало внутренних зависимостей, движущихся частей, настроек. Антипод простой программы — сложная. Простая программа или сложная — это объективная характеристика.</description>
    </item>
    
    <item>
      <title>Кросс-платформенная сборка с GitHub Actions</title>
      <link>https://antonz.ru/github-actions/</link>
      <pubDate>Thu, 11 Feb 2021 13:34:09 +0000</pubDate>
      
      <guid>https://antonz.ru/github-actions/</guid>
      <description>Если проект живет на GitHub, можно за десять минут настроить авто-сборку под основные операционные системы — Windows, Linux и macOS.
Раньше для сборки почти всегда использовали Travis CI, многие по инерции и сейчас так делают. Но есть способ лучше — GitHub Actions.
GitHub Actions — невероятно мощный бесплатный сервис автоматизации любых задач. Грубо говоря, вы выполняете свой код на серверах Гитхаба и делаете там все, что заблагорассудится. Звучит диковато, но открывает бездну возможностей.</description>
    </item>
    
    <item>
      <title>Медиана вместо среднего</title>
      <link>https://antonz.ru/median/</link>
      <pubDate>Mon, 08 Feb 2021 17:26:26 +0000</pubDate>
      
      <guid>https://antonz.ru/median/</guid>
      <description>Данные часто описывают с помощью среднего значения:
 средний рост человка, средняя оценка фильма, среднегодовой курс $.  И часто вместо среднего лучше подходит медиана и процентили. Только никто их не любит.
Сделал в честь этих ребят картинки:
      Если хотите узнать больше о медиане, процентилях и 1% матстатистики, которого достаточно в 90% случаев — записывайтесь на курс:
SQLite для аналитики Курс расскажет, как использовать SQLite для прикладного анализа данных.</description>
    </item>
    
    <item>
      <title>Как сделать нормальный поиск</title>
      <link>https://antonz.ru/search-as-a-service/</link>
      <pubDate>Fri, 29 Jan 2021 09:26:42 +0000</pubDate>
      
      <guid>https://antonz.ru/search-as-a-service/</guid>
      <description>У магазинов, госсайтов, СМИ и даже жирных блогов часто есть поиск. Качество его обычно варьируется от «ужасно» (когда напилили сами) до «на троечку» (когда используют встроенный в CMS).
Проблема в том, что поиск — это сложно. Не, включить механизм полнотекстового поиска в БД или прикрутить Elasticsearch — как раз легко. А вот сделать нормальный релевантный поиск — непросто. Релевантный — это когда на первых местах в выдаче именно то, что имел в виду человек, а не фигня какая-то.</description>
    </item>
    
    <item>
      <title>Как создать таблицу на 1М записей одним запросом</title>
      <link>https://antonz.ru/random-table/</link>
      <pubDate>Tue, 26 Jan 2021 10:44:34 +0000</pubDate>
      
      <guid>https://antonz.ru/random-table/</guid>
      <description>Допустим, вы хотите проверить, как поведет себя запрос на большой таблице — но такой таблицы под рукой нет. Если СУБД умеет в рекурсию, это не проблема: кучу данных можно нагенерить одним запросом. Поможет в этом конструкция WITH RECURSIVE.
Я буду использовать SQLite, но похожие запросы сработают в PostgreSQL и других СУБД. WITH RECURSIVE поддерживается в MariaDB 10.2+, MySQL 8.0+, PostgreSQL 8.4+ и SQLite 3.8+. Oracle 11.2+ и SQL Server 2005+ поддерживают рекурсивные запросы, но без ключевого слова RECURSIVE.</description>
    </item>
    
    <item>
      <title>Дизайн интерфейсов для нормальных людей</title>
      <link>https://antonz.ru/good-ui/</link>
      <pubDate>Tue, 26 Jan 2021 06:15:22 +0000</pubDate>
      
      <guid>https://antonz.ru/good-ui/</guid>
      <description>В интернетах много пишут о кнопках и чекбоксах и мало — как спроектировать удобный интерфейс. Поэтому я собрал цикл статей о базовых (практических!) принципах хорошего UI.
Лучше всего читать по порядку.
1. Законы робототехники в интерфейсе Три главных принципа: не навредить, не выносить мозг, общаться по-человечески.
2. Что делает интерфейс простым У человека в голове есть представление о том, как устроена ваша программа — ментальная модель. «Стихийная» модель не получится хорошей, поэтому лучше спроектируйте её.</description>
    </item>
    
    <item>
      <title>Более быстрая лошадь</title>
      <link>https://antonz.ru/faster-horse/</link>
      <pubDate>Thu, 21 Jan 2021 12:08:37 +0000</pubDate>
      
      <guid>https://antonz.ru/faster-horse/</guid>
      <description>Продуктоводы любят цитировать Генри Форда:
 Если бы я спросил у людей, чего они хотят, они бы попросили более быструю лошадь [а не автомобиль]
 Вывод делается такой, что пользователи, мол, сами не знают, чего им надо.
Кажется, в этой байке очень мало хорошего:
 «Если бы спросил, они бы попросили». Да откуда ты знаешь? Спроси сначала — мало ли, вдруг ответы тебя удивят. Допустим, реально ответили, что нужна «более быстрая лошадь».</description>
    </item>
    
    <item>
      <title>Сила комментария</title>
      <link>https://antonz.ru/comments/</link>
      <pubDate>Mon, 18 Jan 2021 11:30:06 +0000</pubDate>
      
      <guid>https://antonz.ru/comments/</guid>
      <description>Комментарий в интерфейсе — это необязательное текстовое поле. В комментарии человек указывает любую дополнительную информацию, которая кажется ему важной:
 На карточке клиента: за что предоставили скидку 20% На форме заказа: что в дверь звонить не надо В тикете техподдержки: ссылка на обсуждение в багтрекинге  Комментарии в интерфейсах недооценены. Аналитики, дизайнеры, программисты — все мы любим и умеем систематизировать информацию. Поэтому любой объект в интерфейсе представляем как набор полей с конкретным назначением: наименование, почтовый индекс, стоимость.</description>
    </item>
    
    <item>
      <title>SQLite для аналитики</title>
      <link>https://antonz.ru/sqlite-course/</link>
      <pubDate>Tue, 12 Jan 2021 11:45:44 +0000</pubDate>
      
      <guid>https://antonz.ru/sqlite-course/</guid>
      <description>Я сделал интерактивный курс по прикладному анализу данных в SQLite. В этой заметке расскажу о нем и покажу, что внутри.
Аналитики, разработчики и тестировщики часто работают с наборами данных. Посчитать статистику продаж в разных измерениях, преобразовать и «почистить» JSON неудобной структуры, найти проблемы в 500-мегабайтном логе nginx — похожие задачи приходится решать постоянно.
Чтобы проанализировать или преобразовать данные, часто используют Excel или библиотеки вроде pandas. Это неплохие инструменты: Excel удобен для самых простых задач, а pandas отлично подойдёт, как только вы посвятите ему первые 1000 часов.</description>
    </item>
    
    <item>
      <title>Аптайм на статус-странице</title>
      <link>https://antonz.ru/status-page/</link>
      <pubDate>Fri, 08 Jan 2021 15:06:47 +0000</pubDate>
      
      <guid>https://antonz.ru/status-page/</guid>
      <description>Есть такая штука у облачных сервисов — «статус-страница». Это отдельный, независимый от основного сайт, на котором написано, работает основной сервис или нет.
Статус-страница полезна, когда основной сервис свалился под ддос-атакой или от веселого пятничного обновления. Так пользователям есть куда пойти, чтобы понять масштаб проблемы и ход решения.
У большинства сервисов статус-страница сделана по такому шаблону:
 Общий статус (работает / нет) Статус отдельных сервисов (сайт, мобильное приложение, API, &amp;hellip;) Список инцидентов.</description>
    </item>
    
    <item>
      <title>Мой личный бойкот</title>
      <link>https://antonz.ru/boycott/</link>
      <pubDate>Thu, 24 Dec 2020 14:02:48 +0000</pubDate>
      
      <guid>https://antonz.ru/boycott/</guid>
      <description>Я стараюсь не участвовать в массовых кампаниях осуждения, которые полюбили СМИ и соцсети в последние пять лет. Слишком часто бывает, что в моменте, в пылу обвинений теряются важные детали, которые меняют суть дела. Да и в целом жить без хейта полезнее для здоровья.
Из этого правила есть исключение: господин, который долгое время возглавлял федеральную службу по огораживанию интернета. Время от времени встречаю его упоминания в СМИ (сейчас господин уже на новом месте работы), и каждый раз меня бомбит.</description>
    </item>
    
    <item>
      <title>Задачка об итераторе на Python</title>
      <link>https://antonz.ru/iter-with-sentinel/</link>
      <pubDate>Mon, 10 Aug 2020 11:11:02 +0000</pubDate>
      
      <guid>https://antonz.ru/iter-with-sentinel/</guid>
      <description>На днях я предложил читателям телеграм-канала Oh My Py задачку об итераторе с ограничениями. Давайте её разберём.
Условия задачи Допустим, вы основали модный HR-стартап, который подбирает идеальные коллективы сотрудников. Дело это нелёгкое, так что начали с простой эвристики:
 Любой коллектив идеален, пока в нём не появляется Френк
 Подготовили интеллектуальный алгоритм, который предлагает сотрудника:
import random names = [&amp;#34;Френк&amp;#34;, &amp;#34;Клер&amp;#34;, &amp;#34;Зоя&amp;#34;, &amp;#34;Питер&amp;#34;, &amp;#34;Лукас&amp;#34;] def employee(): name = random.choice(names) return name Остался последний шаг — разработать нечто под названием employeficator(), что и будет подбирать дружный коллектив.</description>
    </item>
    
    <item>
      <title>Python. Грамотно работать с любым диапазоном</title>
      <link>https://antonz.ru/range/</link>
      <pubDate>Fri, 07 Aug 2020 12:50:42 +0000</pubDate>
      
      <guid>https://antonz.ru/range/</guid>
      <description>Все знают, что range() в питоне используется, когда нужно что-то сделать сколько-то раз:
&amp;gt;&amp;gt;&amp;gt; for i in range(3, 0, -1): ... print(i) 3 2 1 Но не все знают, что range — это коллекция (что? да!), вполне себе полноценная:
&amp;gt;&amp;gt;&amp;gt; seq = range(10, 100) &amp;gt;&amp;gt;&amp;gt; len(seq) 90 &amp;gt;&amp;gt;&amp;gt; 52 in seq True &amp;gt;&amp;gt;&amp;gt; seq[10] 20 И даже так:
&amp;gt;&amp;gt;&amp;gt; max(seq) 99 &amp;gt;&amp;gt;&amp;gt; seq.index(31) 21 &amp;gt;&amp;gt;&amp;gt; seq.count(42) 1 И так тоже:</description>
    </item>
    
    <item>
      <title>Python. Проверить, входит ли элемент в коллекцию</title>
      <link>https://antonz.ru/element-in-collection/</link>
      <pubDate>Thu, 30 Jul 2020 16:05:51 +0000</pubDate>
      
      <guid>https://antonz.ru/element-in-collection/</guid>
      <description>Предположим, вы ведёте реестр монет. В нём записаны монетки всех времён, стран и достоинств. На вашем сайте любой может проверить, есть ли та или иная монета в реестре, и если нет — добавить её.
Как проверить, есть ли монета в реестре?
Список: очень, очень медленно Можно так:
coins = [&amp;#34;1 aud&amp;#34;, &amp;#34;5 ars&amp;#34;, &amp;#34;1 byn&amp;#34;, &amp;#34;10 ghs&amp;#34;] def has(coin): return coin in coins &amp;gt;&amp;gt;&amp;gt; has(&amp;#34;1 byn&amp;#34;) True &amp;gt;&amp;gt;&amp;gt; has(&amp;#34;20 cny&amp;#34;) False Конечно, так делать нехорошо.</description>
    </item>
    
    <item>
      <title>Плохая и хорошая документация языка</title>
      <link>https://antonz.ru/language-doc/</link>
      <pubDate>Mon, 06 Jul 2020 09:08:48 +0000</pubDate>
      
      <guid>https://antonz.ru/language-doc/</guid>
      <description>Язык Go не отличается красотой. Кто-то называет его «намеренно простым», кто-то уродливым. Но с чем у Go действительно всё классно — так это с документацией. Там много хорошего, но вот главное, на мой взгляд:
 A Tour of Go — интерактивное введение в язык. Effective Go — книга о том, как писать идиоматичный код на Go. Ссылки из документации на исходники каждой функции стандартной библиотеки (например, Max).  Для сравнения я взял топ-10 языков из StackOverflow Developer Survey и посмотрел, как у них дела с этими тремя пунктами.</description>
    </item>
    
    <item>
      <title>Зачем читать исходники стандартной библиотеки</title>
      <link>https://antonz.ru/checkcache/</link>
      <pubDate>Tue, 30 Jun 2020 16:27:34 +0000</pubDate>
      
      <guid>https://antonz.ru/checkcache/</guid>
      <description>Я как-то писал, что в документацию питона добавили ссылки на исходники модулей. Читать их не только увлекательно, но и полезно.
Помните linecache.getline() из прошлого поста, который выбирает строчку файла по номеру?
&amp;gt;&amp;gt;&amp;gt; linecache.getline(&amp;#34;answers.txt&amp;#34;, 3) &amp;#39;Проверили, проблема на вашей стороне&amp;#39; Модуль не случайно называется linecache. При первом обращении к файлу linecache записывает его содержимое в кеш (в глобальную переменную cache). Именно из кеша getline() и выбирает строку по номеру. Благодаря кешу второй и следующие вызовы уже не читают файл и отрабатывают моментально.</description>
    </item>
    
    <item>
      <title>Python. Прочитать произвольную строку из файла</title>
      <link>https://antonz.ru/linecache/</link>
      <pubDate>Wed, 17 Jun 2020 12:57:43 +0000</pubDate>
      
      <guid>https://antonz.ru/linecache/</guid>
      <description>Предположим, вы решили разработать продвинутого саппорт-бота. В нём будет машин лёнинга до самых краёв, так что человек почти не понадобится. К сожалению, неотложные дела отвлекли ваше внимание, и вы делегировали задачу Френку.
Прямо скажем, это было не лучшее решение. Тупая и ленивая скотина придумала, что достаточно заготовить файл с универсальными ответами на все случаи жизни, и на каждый вопрос отвечать случайной фразой:
# answers.txt Перезагрузите ваше устройство, пожалуйста Проверили, проблема на вашей стороне Спасибо, займёмся этим позже Наши технические возможности исчерпаны Простой, надёжный алгоритм.</description>
    </item>
    
    <item>
      <title>Python. Отрезать строке голову и хвост</title>
      <link>https://antonz.ru/removeprefix/</link>
      <pubDate>Tue, 09 Jun 2020 11:47:38 +0000</pubDate>
      
      <guid>https://antonz.ru/removeprefix/</guid>
      <description>В Python 3.9 строке добавили методы, которые удаляют префикс и суффикс:
&amp;gt;&amp;gt;&amp;gt; &amp;#34;Френк и семечки&amp;#34;.removeprefix(&amp;#34;Френк и &amp;#34;) &amp;#39;семечки&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#34;Френк и семечки&amp;#34;.removesuffix(&amp;#34; и семечки&amp;#34;) &amp;#39;Френк&amp;#39; Во время обсуждения PEP разгорелся нешуточный спор. Сначала автор предложил названия cutprefix() и cutsuffix(), но сообществу не понравился глагол cut. Альтернативой предложили strip, trim и remove, долго и мучительно обсуждали, наконец остановились на remove.
Конечно, именование переменных и методов — первая неразрешимая проблема программирования (вторая, как вы знаете — устаревание кеша).</description>
    </item>
    
    <item>
      <title>Красавица и чудовище. Обработка ошибок в Go</title>
      <link>https://antonz.ru/go-errors/</link>
      <pubDate>Thu, 04 Jun 2020 14:11:07 +0000</pubDate>
      
      <guid>https://antonz.ru/go-errors/</guid>
      <description>Роб Пайк сказал об ошибках в го:
 Explicit error checking forces the programmer to think about errors — and deal with them — when they arise.
 Это правда. Но не вся.
Допустим, я хочу прочитать список целых чисел из текстового файла. Вот как можно сделать это на питоне:
def read_numbers(filename): return [int(line.strip()) for line in open(filename)] Или, в более процедурном стиле:
def read_numbers(filename): numbers = [] for line in open(filename): num = int(line.</description>
    </item>
    
    <item>
      <title>Как человек решает задачи в интерфейсе</title>
      <link>https://antonz.ru/user-actions/</link>
      <pubDate>Tue, 19 May 2020 08:10:30 +0000</pubDate>
      
      <guid>https://antonz.ru/user-actions/</guid>
      <description>Это третья часть цикла статей о проектировании интерфейсов для не-дизайнеров. Предыдущая: Что делает интерфейс простым
Человек взаимодействует с интерфейсом, чтобы решить конкретную задачу. Происходит это в три шага:
 Сформулировать задачу. Я подписан на один канал в Телеграме. Он хороший, но надоел оповещениями. Хочу их отключить. Выполнить действие. Полагаю, это делается где-то в самом канале. Захожу в ленту, тыкаю на канал. Вижу внизу большую кнопку Mute. Ага, это наверняка она. Нажимаю.</description>
    </item>
    
    <item>
      <title>Не законы, а говно</title>
      <link>https://antonz.ru/legislation/</link>
      <pubDate>Sat, 16 May 2020 14:45:35 +0000</pubDate>
      
      <guid>https://antonz.ru/legislation/</guid>
      <description>Законодательство — огромная запутанная система, которая с годами только усложняется: принимаются новые законы, в старые вносят поправки, забывают убрать устаревшие нормы. В некоторых странах это добро наслаивается уже столетиями. Законы превратились в пифий, которых нормальные люди вообще не понимают. Существует целый штат жрецов-юристов, которые поясняют простым смертным, что к чему.
Можно было бы считать, что это нормально. Если бы у человечества не было другой области сравнимой сложности — программной инженерии. Умные ребята давно придумали, как бороться со сложностью программных систем.</description>
    </item>
    
    <item>
      <title>Ссылки на телеграм в вебе</title>
      <link>https://antonz.ru/telegram-links/</link>
      <pubDate>Fri, 15 May 2020 11:17:43 +0000</pubDate>
      
      <guid>https://antonz.ru/telegram-links/</guid>
      <description>Телеграм разблокировали в июне 2020 года, так что теперь можно ставить обычные ссылки и не заморачиваться. Но если что — вы знаете, что делать.
В рунете заблокирован домен t.me, через который работают ссылки на телеграм. Сервисы-заменители (t-do.ru и прочие) напичканы рекламой и в любой момент могут перестать работать. Используйте лучше нативные ссылки — они гарантированно работают на любом устройстве, где установлен телеграм. И никакой Роскомнадзор ничего с этим не сделает.</description>
    </item>
    
    <item>
      <title>Как сделать классный Python-пакет</title>
      <link>https://antonz.ru/packaging/</link>
      <pubDate>Fri, 15 May 2020 07:58:16 +0000</pubDate>
      
      <guid>https://antonz.ru/packaging/</guid>
      <description>Версия от апреля 2021 года
Бывает, напишешь какую-нибудь полезную утилиту на питоне, и хочется поделиться ей с коллегами. Лучший способ для этого — сделать пакет (package): он устанавливается одной командой и спасает от копипасты.
Если вы, как и я раньше, думаете, что создание пакетов в питоне — большая головная боль, то знайте, что это не так. Чтобы не быть голословным, я сделал это пошаговое руководство. Три основных шага и несколько вспомогательных, со ссылками на гитхаб.</description>
    </item>
    
    <item>
      <title>Что делает интерфейс простым</title>
      <link>https://antonz.ru/simple-ui/</link>
      <pubDate>Tue, 12 May 2020 08:46:38 +0000</pubDate>
      
      <guid>https://antonz.ru/simple-ui/</guid>
      <description>Это вторая часть цикла статей о проектировании интерфейсов для не-дизайнеров. Предыдущая: Законы робототехники в интерфейсе
Дизайнеры, программисты, маркетологи — все, кто причастен к разработке продукта — считают, что пользователь работает с программой сосредоточенно, вдумчиво и аккуратно. Досадное заблуждение.
На самом деле, за внимание человека конкурирует целая куча отвлекалок:
 Окружение: коллеги на работе, дети дома, машины и пешеходы на улице. Насущные дела: отчёт должен быть готов через 10 минут, от сковороды уже воняет гарью, мерзко пиликает напоминалка о встрече.</description>
    </item>
    
    <item>
      <title>Автоматизация задач в Python-проекте</title>
      <link>https://antonz.ru/makefile/</link>
      <pubDate>Tue, 05 May 2020 15:16:48 +0000</pubDate>
      
      <guid>https://antonz.ru/makefile/</guid>
      <description>Когда разрабатываешь библиотеку или приложение, всегда найдутся задачи, которые выполняешь изо дня в день:
 проверить код линтерами, прогнать тесты с замером покрытия, запустить в докере, &amp;hellip;  JS-разработчикам повезло (ха): у них в package.json есть специальная секция scripts для таких штук:
{ ... &amp;quot;scripts&amp;quot;: { &amp;quot;format&amp;quot;: &amp;quot;prettier --write \&amp;quot;src/**/*.ts\&amp;quot;&amp;quot;, &amp;quot;lint&amp;quot;: &amp;quot;tslint -p tsconfig.json&amp;quot;, &amp;quot;test&amp;quot;: &amp;quot;jest --coverage --config jestconfig.json&amp;quot;, }, ... } Для Питона ничего подобного не предусмотрено. Можно, конечно, сделать по sh-скрипту на каждую задачу, но это замусоривает каталог проекта, да и хотелось бы все такие задачи держать вместе.</description>
    </item>
    
    <item>
      <title>Юлия → Iuliia. Всё о транслитерации</title>
      <link>https://antonz.ru/iuliia/</link>
      <pubDate>Wed, 29 Apr 2020 08:15:40 +0000</pubDate>
      
      <guid>https://antonz.ru/iuliia/</guid>
      <description>Транслитерация — это запись кириллических слов латиницей (Анна → Anna, Самара → Samara). Её используют в загранпаспортах, водительских удостоверениях, трансграничной доставке, библиотечных каталогах и множестве других международных процессов.
Так вышло, что я недавно окунулся в эту тему, а в Википедии она раскрыта слабо. Поэтому расскажу, что к чему (спойлер — если вы думаете, что с транслитерацией всё плохо, то на самом деле всё ещё хуже).
Кто виноват Транслит — это хрестоматийная ситуация «у нас 14 плохих стандартов, давайте придумаем ещё один».</description>
    </item>
    
    <item>
      <title>Вахтёр-бухгалтер управляет компанией</title>
      <link>https://antonz.ru/little-accountant-syndrome/</link>
      <pubDate>Tue, 14 Apr 2020 15:22:52 +0000</pubDate>
      
      <guid>https://antonz.ru/little-accountant-syndrome/</guid>
      <description>Удивительно, как во многих компаниях бухгалтеры позволяют себе затягивать и блокировать бизнес-решения. Сплошь и рядом бухгалтерия хочет странного — не потому, что требует закон или налоговая, а потому что просто она так привыкла работать.
Бухгалтер считает нормальным заблокировать оплату, которую запрашивает бизнес-подразделение, потому что счёт на оплату не удовлетворяет его эстетическим критериям.
Например, в счёте нет реквизитов плательщика (а бухгалтер, видимо, не знает реквизитов своей компании). Или — о ужас — счёт без мокрой печати и подписи кровью.</description>
    </item>
    
    <item>
      <title>Каменный век безопасности</title>
      <link>https://antonz.ru/data-privacy/</link>
      <pubDate>Wed, 28 Aug 2019 09:42:44 +0000</pubDate>
      
      <guid>https://antonz.ru/data-privacy/</guid>
      <description>Наши данные утекают. Время от времени вы читаете в новостях, как условное РЖД выставило в открытый доступ базу на 700 тысяч человек, но проблема гораздо шире.
Данные текут постоянно, у больших и маленьких организаций. У госорганов, ментов, банков, страховых, больниц, магазинов, авиакомпаний. Если бы проблемы с приватностью данных отслеживали как заболевания, ВОЗ бы уже трубила о мировой пандемии. И дальше будет только хуже.
Проблема в том, что мы все выросли без привычки гигиены данных.</description>
    </item>
    
    <item>
      <title>Python. Создать словарь по списку ключей</title>
      <link>https://antonz.ru/dict-from-keys/</link>
      <pubDate>Tue, 09 Jul 2019 14:07:20 +0000</pubDate>
      
      <guid>https://antonz.ru/dict-from-keys/</guid>
      <description>Предположим, вы сделали робота для общественных пространств. Он будет помогать людям.
Вы решаете, что полезно собирать статистику добрых дел — что и сколько раз робот сделал. Для этого удобно использовать счётчик, ключами которого будут названия действий, а значениями — количество выполнений.
Робот постоянно учится новым полезным активностям, так что набор дел не фиксированный. Он хранится в списке:
actions = [ &amp;#34;махать флагом&amp;#34;, &amp;#34;чесать котов&amp;#34;, &amp;#34;смешить детей&amp;#34;, &amp;#34;рвать шаблоны&amp;#34;, ] Как бы из этого списка сделать счётчик?</description>
    </item>
    
    <item>
      <title>Python. Пронумеровать элементы коллекции</title>
      <link>https://antonz.ru/enumerate/</link>
      <pubDate>Tue, 02 Jul 2019 14:10:00 +0000</pubDate>
      
      <guid>https://antonz.ru/enumerate/</guid>
      <description>Одна уважаемая компания заказала вам разработку теста для соискателей на позицию «дизайнер продукта». Есть список вопросов с вариантами ответа:
survey = { &amp;#34;Чем известен Джони Айв?&amp;#34;: [ &amp;#34;Придумал анимированные эмодзи&amp;#34;, &amp;#34;Снялся в фильме про белую комнату&amp;#34;, &amp;#34;Изобрёл мышку с зарядкой в пузе&amp;#34;, ], &amp;#34;Почему важно надувать щёки?&amp;#34;: [ ... ], &amp;#34;Сколько у вас статей про дизайн-системы?&amp;#34;: [ ... ], } Вы написали код, который показывает на экране каждый вопрос с вариантами ответа:</description>
    </item>
    
    <item>
      <title>Быстрый язык ≠ быстрый код</title>
      <link>https://antonz.ru/fast-language/</link>
      <pubDate>Mon, 01 Jul 2019 08:15:04 +0000</pubDate>
      
      <guid>https://antonz.ru/fast-language/</guid>
      <description>Получил такой комментарий на заметку про быстрый и медленный алгоритмы:
 Мне кажется, тут не совсем корректное сравнение. sorted оптимизированная и написана на С, в то время как insort — просто питоновская функция. Она гоняет питоновские структурки и при любом раскладе будет работать медленно.
 Это вообще популярная точка зрения, что если что-то написано на «быстром» языке, то оно уж всяко будет быстрее, чем написанное на «медленном».
Конечно же, это не так.</description>
    </item>
    
    <item>
      <title>Python. Cортировать в конце или держать отсортированным?</title>
      <link>https://antonz.ru/sorted-puzzle/</link>
      <pubDate>Sat, 29 Jun 2019 07:55:19 +0000</pubDate>
      
      <guid>https://antonz.ru/sorted-puzzle/</guid>
      <description>На днях я предложил подписчикам канала Oh My Py такую задачку:
 Допустим, вы пишете программу, которой на вход последовательно, одно за другим, приходят числа. Ваша задача — накапливать их как-то, а потом, когда числа перестанут приходить — вернуть отсортированный список. Как думаете, что будет работать быстрее:
 Складывать приходящие числа в неупорядоченную кучу, отсортировать в конце. Постоянно поддерживать отсортированный список (с помощью bisect), в конце просто вернуть его.    Вот результаты голосования:</description>
    </item>
    
    <item>
      <title>Python. Быстро найти элемент коллекции</title>
      <link>https://antonz.ru/bisect/</link>
      <pubDate>Wed, 26 Jun 2019 16:44:00 +0000</pubDate>
      
      <guid>https://antonz.ru/bisect/</guid>
      <description>Френк решил открыть магазин диковинок. Прайс-лист огромный, приведу только несколько позиций:
from collections import namedtuple Product = namedtuple(&amp;#34;Product&amp;#34;, (&amp;#34;price&amp;#34;, &amp;#34;name&amp;#34;)) products = [ Product(1500, &amp;#34;живой багет&amp;#34;), Product(3300, &amp;#34;мельница для сыра&amp;#34;), Product(6500, &amp;#34;костюм картошки&amp;#34;), Product(9900, &amp;#34;беспилотная сова&amp;#34;), ] Магазин открылся, торговля идёт бойко, но есть проблемка. Покупатели донимают вопросом «у меня есть X рублей, какую самую дорогую дичь я могу купить за эту сумму?».
Френк очень плохо считает (неудивительно для голубя), поэтому требуется наша помощь.</description>
    </item>
    
    <item>
      <title>Python. Узнать день недели 40 лет назад</title>
      <link>https://antonz.ru/calendar/</link>
      <pubDate>Tue, 25 Jun 2019 13:15:00 +0000</pubDate>
      
      <guid>https://antonz.ru/calendar/</guid>
      <description>Есть в питоне модуль calendar. Лично я ожидал от него крутых фич по работе с датами, которые не влезли в datetime.
На деле он занимается форматированием календарей в HTML (именно то, что требуется в стандартной библиотеке любого языка) и предоставляет гениальные методы вроде itermonthdays, itermonthdays2, itermonthdays3 и itermonthdays4 (оцените богатство выбора, прямо как на воскресной ярмарке).
Но есть в нём и полезные функции. Например, узнать день недели для любой даты в прошлом или будущем:</description>
    </item>
    
    <item>
      <title>Python. Создать полный дубль коллекции</title>
      <link>https://antonz.ru/deepcopy/</link>
      <pubDate>Mon, 24 Jun 2019 17:02:00 +0000</pubDate>
      
      <guid>https://antonz.ru/deepcopy/</guid>
      <description>У нас ответственная миссия: запустить в космос автомобиль. Сначала подготовим инфраструктуру — собственно машину и мега-пушку:
from dataclasses import dataclass @dataclass class Car: brand: str model: str driver: str class SpaceCannon: def launch(self, cars): car = cars[0] print(f&amp;#34;{car.brand}{car.model}driven by {car.driver}sent to space!&amp;#34;) Проверим:
car = Car(brand=&amp;#34;Tesla&amp;#34;, model=&amp;#34;Roadster&amp;#34;, driver=&amp;#34;Starman&amp;#34;) cars = [car] cannon = SpaceCannon() cannon.launch(cars) Tesla Roadster driven by Starman sent to space! Работает!
Как всякий уважающий себя космический завод, наш умеет копировать машины.</description>
    </item>
    
    <item>
      <title>Копировать у конкурентов</title>
      <link>https://antonz.ru/feature-copy/</link>
      <pubDate>Sat, 15 Jun 2019 14:06:52 +0000</pubDate>
      
      <guid>https://antonz.ru/feature-copy/</guid>
      <description>Шансы на то, что вы делаете уникальный продукт — мизерные. У любого сервиса наверняка есть конкуренты и аналоги. А значит, можно и нужно подсматривать у лучших из них.
Удивительно, что не все этим пользуются. Вот, например, сериальный сервис «Амедиатека». Даже далёкие от темы люди знают, что самый популярный в мире аналог — «Нетфликс». Казалось бы, заплати $10, посмотри, как у них всё устроено, и перенимай хорошие решения. Но нет.
Могу ещё понять, что у ребят не работает нормально синхронизация: заходишь в приложение на айпаде и не видишь, какие серии уже посмотрел с компа.</description>
    </item>
    
    <item>
      <title>О продуктоводстве</title>
      <link>https://antonz.ru/productology/</link>
      <pubDate>Mon, 11 Mar 2019 09:59:57 +0000</pubDate>
      
      <guid>https://antonz.ru/productology/</guid>
      <description>7 лет опыта разработки и развития облачного B2B-сервиса в одной статье.
Привет! Я Антон Жиянов, техлид в dadata.ru. Разрабатываю опенсорс, веду курсы, пишу про Python, SQL, открытые данные и облачные сервисы (много всего).
Пара слов о «Дадате», чтобы задать контекст. Облачный B2B, основное использование — через API, маленькая распределённая команда, несколько десятков тысяч пользователей.
Ничего не буду писать о метриках, гроус-хакинге, касдеве, эджайле, митапах и других традиционных развлечениях продактов. Во-первых, вы это лучше меня знаете.</description>
    </item>
    
    <item>
      <title>Задачка: айти-вахтёр</title>
      <link>https://antonz.ru/watchman-puzzle/</link>
      <pubDate>Thu, 21 Feb 2019 12:13:51 +0000</pubDate>
      
      <guid>https://antonz.ru/watchman-puzzle/</guid>
      <description>По моим наблюдениям, разработчики (и дизайнеры, в меньшей степени) очень любят запрещать. Я это называю «синдром айти-вахтёра».
Например, есть известная коллективная блог-площадка. Там можно голосовать за статьи, и если случайно ткнуть на голосовалку дважды, получаешь суровое:
 Повторное голосование запрещено
 А если нажать много раз — будет чудесная картина, которая изображена на скриншоте. Присмотритесь, у каждого сообщения есть собственный прогресс-бар обратного отсчёта. Инженерный дизайн ツ
  Вопрос: Как бы вы поступили с этим сообщением?</description>
    </item>
    
    <item>
      <title>Python. Сегодня == сейчас</title>
      <link>https://antonz.ru/today-is-now/</link>
      <pubDate>Tue, 19 Feb 2019 12:32:15 +0000</pubDate>
      
      <guid>https://antonz.ru/today-is-now/</guid>
      <description>В каждом языке есть участки, которые не особо удались создателям. Для большинства языков, созданных до двухтысячных годов, камнем преткновения стала работа со временем.
Питон — не исключение. Возьмём функцию, которая сравнивает дату-время с точностью до минуты:
from datetime import datetime, timezone def equal(dt1, dt2): return dt1.replace(second=0, microsecond=0) == \ dt2.replace(second=0, microsecond=0) И сравним «сегодня» и «сейчас»:
&amp;gt;&amp;gt;&amp;gt; equal(datetime.today(), datetime.now()) True Оказывается, это одно и то же ツ Метод today() возвращает не начало дня, как можно было бы ожидать, а текущий момент времени.</description>
    </item>
    
    <item>
      <title>Python. Обработать заявки с учётом приоритетов</title>
      <link>https://antonz.ru/heapq/</link>
      <pubDate>Mon, 18 Feb 2019 13:35:18 +0000</pubDate>
      
      <guid>https://antonz.ru/heapq/</guid>
      <description>Если система обрабатывает заявки, редко бывает, что все они одинакового веса. Чаще встречаются разные приоритеты: клиенты бывают обычные и VIP, баги бывают минорные и критические, заказы бывают «до 1000 ₽» и «10000+ ₽».
Если приоритетов нет, обслуживать заявки просто: кто раньше пришёл, того раньше и обслужили (first in, first out — FIFO). С приоритетами сложнее: более важные заявки должны идти вперёд, но среди заявок с одинаковым приоритетом по-прежнему должен действовать принцип FIFO.</description>
    </item>
    
    <item>
      <title>Открытка несовершенным людям</title>
      <link>https://antonz.ru/imperfect/</link>
      <pubDate>Sun, 17 Feb 2019 13:31:04 +0000</pubDate>
      
      <guid>https://antonz.ru/imperfect/</guid>
      <description>Если вы не используете тайм-менеджмент и техники повышения эффективности. Если вы не читаете по книге в неделю. Если вы не медитируете и не повышаете свою осознанность. Если вы не занимаетесь нетворкингом, не посещаете митапы и конференции, не ведёте видеоблог, подкаст и стримы.
Если вы не ходите в спортзал по три раза в неделю. Если вы не бегаете марафоны и не стремитесь осилить Iron Man. Если вы не катаетесь на лыжах, борде, скейте, кайте, байке и самокате.</description>
    </item>
    
    <item>
      <title>Тарифный план «свяжитесь с нами»</title>
      <link>https://antonz.ru/pricing-contact-us/</link>
      <pubDate>Mon, 11 Feb 2019 13:18:13 +0000</pubDate>
      
      <guid>https://antonz.ru/pricing-contact-us/</guid>
      <description>Облачные сервисы для бизнеса обычно делают несколько тарифов с понятной ценой и один топовый в стиле «свяжитесь с нами».
 Вот «Интерком» предлагает «chat with us»     А вот Airtable рисует звёздочки вместо ценника    У «Дадаты» тоже так было:
 Свяжитесь с нами, чтобы узнать, сколько стоит получить все-все фичи  Не берусь судить, насколько такой подход хорош или плох в общем случае. Наверняка, у «Интеркома» и «Эйртейбла» он оправдан.</description>
    </item>
    
    <item>
      <title>Python. Выбрать топ-k элементов списка</title>
      <link>https://antonz.ru/heapq-nlargest/</link>
      <pubDate>Mon, 11 Feb 2019 10:32:16 +0000</pubDate>
      
      <guid>https://antonz.ru/heapq-nlargest/</guid>
      <description>Сегодня новое соревнование — граждане города выбирают самое наглое животное. Результаты опроса поступили в виде неупорядоченного списка пар «количество голосов — участник»:
contenders = [ (31, &amp;#34;индюк&amp;#34;), (22, &amp;#34;крыса&amp;#34;), (79, &amp;#34;кот&amp;#34;), (98, &amp;#34;голубь&amp;#34;), (13, &amp;#34;собака&amp;#34;), (95, &amp;#34;енот&amp;#34;), (15, &amp;#34;хомяк&amp;#34;), ] Осталось, как обычно, выбрать трёх победителей. Как насчёт такого:
&amp;gt;&amp;gt;&amp;gt; sorted(contenders)[-3:] [(79, &amp;#39;кот&amp;#39;), (95, &amp;#39;енот&amp;#39;), (98, &amp;#39;голубь&amp;#39;)] Неплохо. Но, как вы помните, сортировка списка занимает O(n log n) операций. Жирновато, чтобы просто выбрать топ-3 элемента.</description>
    </item>
    
    <item>
      <title>Python. Объединить отсортированные списки в один</title>
      <link>https://antonz.ru/heapq-merge/</link>
      <pubDate>Mon, 04 Feb 2019 10:26:00 +0000</pubDate>
      
      <guid>https://antonz.ru/heapq-merge/</guid>
      <description>Предположим, вы решили провести чемпионат мира по оглаживанию собак. Кто погладит больше всех шерстяных волчар за день, тот и победил. Участники не смогли собраться вместе, поэтому каждый город провёл независимое состязание и прислал результат:
washington = [ (99, &amp;#34;Френк&amp;#34;), (80, &amp;#34;Клер&amp;#34;), (73, &amp;#34;Зоя&amp;#34;) ] moscow = [ (90, &amp;#34;Валера&amp;#34;), (88, &amp;#34;Мария&amp;#34;), (50, &amp;#34;Анатолий&amp;#34;) ] beijing = [ (123, &amp;#34;Чан&amp;#34;), (109, &amp;#34;Пинг&amp;#34;), (70, &amp;#34;Ки&amp;#34;), ] Теперь ваша задача — выбрать трёх призёров.</description>
    </item>
    
    <item>
      <title>Python. Кортеж здорового человека</title>
      <link>https://antonz.ru/namedtuple/</link>
      <pubDate>Fri, 01 Feb 2019 11:52:24 +0000</pubDate>
      
      <guid>https://antonz.ru/namedtuple/</guid>
      <description>Эта статья — об одном из лучших изобретений Python: именованном кортеже (namedtuple). Мы рассмотрим его приятные особенности, от известных до неочевидных. Уровень погружения в тему будет нарастать постепенно, так что, надеюсь, каждый найдёт для себя что-то интересное. Поехали!
Введение Наверняка вы сталкивались с ситуацией, когда нужно передать несколько свойств объекта одним куском. Например, информацию о домашнем питомце: тип, кличка и возраст.
Часто создавать отдельный класс под это дело лень, и используют кортежи:</description>
    </item>
    
    <item>
      <title>Python. Из десятичной дроби — в обычную</title>
      <link>https://antonz.ru/float-as-integer-ratio/</link>
      <pubDate>Sat, 26 Jan 2019 15:42:48 +0000</pubDate>
      
      <guid>https://antonz.ru/float-as-integer-ratio/</guid>
      <description>У класса float есть прекрасный метод as_integer_ratio(), который представляет десятичную дробь в виде обычной — пары «числитель, знаменатель»:
&amp;gt;&amp;gt;&amp;gt; (0.25).as_integer_ratio() (1, 4) &amp;gt;&amp;gt;&amp;gt; (0.5).as_integer_ratio() (1, 2) &amp;gt;&amp;gt;&amp;gt; (0.75).as_integer_ratio() (3, 4) Так вот. Никогда им не пользуйтесь ツ Потому что:
&amp;gt;&amp;gt;&amp;gt; (0.2).as_integer_ratio() (3602879701896397, 18014398509481984) Виной всему стандарт представления дробных чисел IEEE 754, который реализует float.
Используйте Decimal:
&amp;gt;&amp;gt;&amp;gt; from decimal import Decimal &amp;gt;&amp;gt;&amp;gt; Decimal(&amp;quot;0.2&amp;quot;).as_integer_ratio() (1, 5) Уверен, вы и так это знаете.</description>
    </item>
    
    <item>
      <title>Python. Хранить последние N объектов</title>
      <link>https://antonz.ru/deque-maxlen/</link>
      <pubDate>Fri, 25 Jan 2019 09:06:58 +0000</pubDate>
      
      <guid>https://antonz.ru/deque-maxlen/</guid>
      <description>Допустим, вы пишете систему учёта посетителей для музея изящных искусств в Хиросиме (не спрашивайте). Одно из требований безопасников — команда tail, которая показывает трёх последних визитёров. Как её реализовать?
Конечно, можно складывать всех прибывших в список и по запросу выдавать из него последние 3 элемента:
TAIL_COUNT = 3 visitors = [] def handle(visitor): visitors.append(visitor) def tail(): return visitors[-TAIL_COUNT:] handle(&amp;quot;Питер&amp;quot;) handle(&amp;quot;Клер&amp;quot;) handle(&amp;quot;Френк&amp;quot;) handle(&amp;quot;Кен Чан&amp;quot;) handle(&amp;quot;Гоу Чан&amp;quot;) &amp;gt;&amp;gt;&amp;gt; visitors [&#39;Питер&#39;, &#39;Клер&#39;, &#39;Френк&#39;, &#39;Кен Чан&#39;, &#39;Гоу Чан&#39;] &amp;gt;&amp;gt;&amp;gt; tail() [&#39;Френк&#39;, &#39;Кен Чан&#39;, &#39;Гоу Чан&#39;] Но как-то не очень правильно хранить всех посетителей только ради того, чтобы показывать последних трёх, верно?</description>
    </item>
    
    <item>
      <title>Задачка: «очистить» vs «удалить»</title>
      <link>https://antonz.ru/empty-vs-delete-puzzle/</link>
      <pubDate>Thu, 24 Jan 2019 12:24:40 +0000</pubDate>
      
      <guid>https://antonz.ru/empty-vs-delete-puzzle/</guid>
      <description>На скриншоте интерфейс управления почтовыми ящиками. В контекстном меню есть действия Empty (очистить ящик) и Delete (удалить ящик). Я постоянно их путаю, и удаляю ящики, вместо того, чтобы очистить.
Вопрос: Как минимально изменить интерфейс, чтобы уменьшить вероятность ошибки?
Решение Вот результаты голосования подписчиков:
 Победитель — убрать Delete в настройки    Я согласен с большинством — лучше убрать Delete в настройки. Удаление почтового ящика — редкая операция, ей нечего делать в контекстном меню.</description>
    </item>
    
    <item>
      <title>Python. Подвох в функции sum()</title>
      <link>https://antonz.ru/sum-gotcha/</link>
      <pubDate>Mon, 21 Jan 2019 11:49:29 +0000</pubDate>
      
      <guid>https://antonz.ru/sum-gotcha/</guid>
      <description>Сидите вы на работе и смотрите на дневную статистику по заявкам разных типов:
monday = {&amp;quot;question&amp;quot;: 1, &amp;quot;problem&amp;quot;: 3, &amp;quot;idea&amp;quot;: 2} tuesday = {&amp;quot;problem&amp;quot;: 5, &amp;quot;idea&amp;quot;: 1} wednesday = {&amp;quot;question&amp;quot;: 2, &amp;quot;problem&amp;quot;: 2} Задача — посчитать агрегированную статистику за все дни. Всё вроде понятно. Тут подходит тимлид и говорит, что если решите задачу однострочником, он подарит вам жёлтую резиновую уточку.
Устоять перед этим решительно невозможно.
     Словари → счётчики Сначала от словарей надо перейти к счётчикам.</description>
    </item>
    
    <item>
      <title>Python. Операции со статистикой</title>
      <link>https://antonz.ru/collections-counter-sum/</link>
      <pubDate>Sat, 19 Jan 2019 08:39:13 +0000</pubDate>
      
      <guid>https://antonz.ru/collections-counter-sum/</guid>
      <description>Вернёмся к примеру со статистикой по заявкам разных типов. Вот данные о вопросах, проблемах и идеях за три дня:
monday = {&amp;quot;question&amp;quot;: 1, &amp;quot;problem&amp;quot;: 3, &amp;quot;idea&amp;quot;: 2} tuesday = {&amp;quot;problem&amp;quot;: 5, &amp;quot;idea&amp;quot;: 1} wednesday = {&amp;quot;question&amp;quot;: 2, &amp;quot;problem&amp;quot;: 2} Как бы посчитать агрегированную статистику? Можно так, конечно:
def add_day(day_stats, stats): for key, value in day_stats.items(): stats[key] += value return stats stats = {&amp;quot;question&amp;quot;: 0, &amp;quot;problem&amp;quot;: 0, &amp;quot;idea&amp;quot;: 0} stats = add_day(monday, stats) stats = add_day(tuesday, stats) stats = add_day(wednesday, stats) stats {&#39;question&#39;: 3, &#39;problem&#39;: 10, &#39;idea&#39;: 3} Но вы наверняка догадываетесь, что это не наш метод.</description>
    </item>
    
    <item>
      <title>Почему стоит вести блог только на собственном домене</title>
      <link>https://antonz.ru/custom-domain-blogging/</link>
      <pubDate>Thu, 10 Jan 2019 07:52:36 +0000</pubDate>
      
      <guid>https://antonz.ru/custom-domain-blogging/</guid>
      <description>Послушал очередной выпуск «Подлодки» — про личный бренд разработчика. Ребята там обсуждают разные каналы общения с аудиторией: доклады, подкасты, соцсети, блоги.
Я со многим не согласен. Почти со всем ツ Но если по докладам и подкастам Егору и компании явно виднее, то по блоггингу не могу промолчать.
Егор говорит:
 Не стоит с самого начала париться и заводить стенделон-блог, потому что можете убить много времени.
 Дальше ведущие обсуждают, что лучше, мол, использовать Medium, потому что это быстро, удобно и «из коробки идёт рекомендательная система».</description>
    </item>
    
    <item>
      <title>Python. Посчитать количество объектов каждого типа</title>
      <link>https://antonz.ru/collections-counter/</link>
      <pubDate>Wed, 09 Jan 2019 13:17:14 +0000</pubDate>
      
      <guid>https://antonz.ru/collections-counter/</guid>
      <description>Допустим, вы пишете программу, которая обрабатывает заявки разных типов — идеи, вопросы и проблемы:
from collections import namedtuple Request = namedtuple(&amp;quot;Request&amp;quot;, (&amp;quot;type&amp;quot;, &amp;quot;text&amp;quot;)) requests = [ Request(type=&amp;quot;question&amp;quot;, text=&amp;quot;Как пасти котов?&amp;quot;), Request(type=&amp;quot;problem&amp;quot;, text=&amp;quot;Бакланы портят стадион&amp;quot;), Request(type=&amp;quot;idea&amp;quot;, text=&amp;quot;Переводчик с лисьего на русский&amp;quot;), Request(type=&amp;quot;problem&amp;quot;, text=&amp;quot;Кот крадёт электричество&amp;quot;), Request(type=&amp;quot;problem&amp;quot;, text=&amp;quot;Мыши похитили 540 кг марихуаны&amp;quot;), Request(type=&amp;quot;idea&amp;quot;, text=&amp;quot;Холодильник с таймером&amp;quot;), ] Предположим, требуется посчитать количество заявок каждого типа. Если в прошлой жизни человек писал на джаваскрипте, код может получиться таким:</description>
    </item>
    
    <item>
      <title>Python. Умолчательные значения настроек</title>
      <link>https://antonz.ru/collections-chainmap/</link>
      <pubDate>Tue, 08 Jan 2019 12:30:01 +0000</pubDate>
      
      <guid>https://antonz.ru/collections-chainmap/</guid>
      <description>Если в программе есть настройки, хорошо предусмотреть для них умолчательные значения. Так всё будет работать «из коробки», а в конфиг полезут только те, кому это действительно надо.
Допустим, настройки по умолчанию мы сложили в словарь:
DEFAULTS = { &amp;quot;name&amp;quot;: &amp;quot;Frank&amp;quot;, &amp;quot;species&amp;quot;: &amp;quot;pigeon&amp;quot;, &amp;quot;age&amp;quot;: 42, } А пользовательские настройки лежат в settings.ini. Их можно считать функцией load_settings(), которая тоже возвращает словарь.
Вопрос: как получить актуальное значение того или иного свойства?
Так себе способ:</description>
    </item>
    
    <item>
      <title>Python. Enum здорового человека</title>
      <link>https://antonz.ru/enum/</link>
      <pubDate>Fri, 04 Jan 2019 15:31:45 +0000</pubDate>
      
      <guid>https://antonz.ru/enum/</guid>
      <description>Если программист привык писать код, как это делали наши пращуры со времён аграрной революции, то перечисления у него выглядят как-то так:
class PigeonState: eating = 0 sleeping = 1 flying = 2 PigeonState.sleeping 1 Конечно, у наших современников есть способ получше — enum.Enum:
import enum class PigeonState(enum.Enum): eating = 0 sleeping = 1 flying = 2 PigeonState.sleeping.value 1 Это не просто более многословный способ сделать то же самое. У енумов есть вагон плюшек, недоступных староверам.</description>
    </item>
    
    <item>
      <title>Python. Исходники стандартной библиотеки</title>
      <link>https://antonz.ru/python-sources/</link>
      <pubDate>Thu, 03 Jan 2019 12:34:26 +0000</pubDate>
      
      <guid>https://antonz.ru/python-sources/</guid>
      <description>У большинства питонячих модулей хорошее описание: написано доходчиво, часто есть примеры. Но ничто не заменит исходного кода, если что-то непонятно или хочется понять, как та или иная штука реализована.
Core-разработчик Питона Реймонд Хеттингер тоже это заметил, и поэтому в документации к каждому модулю стандартной библиотеки первым делом идёт ссылка на исходники этого самого модуля на гитхабе.
 Модуль fnmatch — «лайтовая» альтернатива регулярным выраженияем. Хотите узнать, как он проверяет строки по паттернам?</description>
    </item>
    
    <item>
      <title>Дизайн — это здравый смысл</title>
      <link>https://antonz.ru/common-sense-design/</link>
      <pubDate>Wed, 26 Dec 2018 15:30:45 +0000</pubDate>
      
      <guid>https://antonz.ru/common-sense-design/</guid>
      <description>Чтобы создать хороший интерфейс, дизайнеру требуется:
 80% здравого смысла, 19% знания предметной области, 1% дизайн-мышления, дизайн-систем, насмотренности и прочего, про что дизайнеры любят писать статьи на Медиуме.  То есть главное в дизайне — здравый смысл. Чтобы доказать это утверждение, я сделаю «редизайн» популярного приложения Zoom (замена скайпу для видео- и аудио-конференций) с позиции обычного здравомыслящего человека, не дизайнера.
Не буду рисовать красивые макеты, а грубо покажу на скриншотах, что можно сделать иначе, если включить голову.</description>
    </item>
    
    <item>
      <title>Чистый код. Единообразие в именах</title>
      <link>https://antonz.ru/naming-consistency/</link>
      <pubDate>Thu, 13 Dec 2018 13:23:31 +0000</pubDate>
      
      <guid>https://antonz.ru/naming-consistency/</guid>
      <description>Всякая книга про хороший код начинается с главы об именах переменных и функций. Но каждый, кто работал с большим проектом, знает — хороших имён недостаточно. Важно ещё, чтобы они были единообразными во всём проекте.
Посмотрим на питоновский модуль difflib, который помогал нам сравнивать строки:
 find_longest_match() находит самый длинный совпадающий кусок между двуми последовательностями и возвращает match — объект с совпадением и дополнительной информацией. get_matching_blocks() находит все совпадения между двумя последовательностями и возвращает список из match.</description>
    </item>
    
    <item>
      <title>Python. Шаблонизатор для бедных</title>
      <link>https://antonz.ru/string-template/</link>
      <pubDate>Wed, 12 Dec 2018 15:32:00 +0000</pubDate>
      
      <guid>https://antonz.ru/string-template/</guid>
      <description>Мантра «There should be one — and preferably only one — obvious way to do it» из Zen of Python далека от реальности.
Все мы знаем, что в Питоне за долгие годы собрали аж три способа подстановки переменных в строку:
who = &amp;quot;Голубь Френк&amp;quot; &amp;quot;%s постучался в стеклянные двери&amp;quot; % who &amp;quot;{} постучался в стеклянные двери&amp;quot;.format(who) f&amp;quot;{who} постучался в стеклянные двери&amp;quot; Но не все знают, что есть ещё и четвёртый способ — string.</description>
    </item>
    
    <item>
      <title>Python. Разбить строку на слова с учётом кавычек</title>
      <link>https://antonz.ru/shlex-split/</link>
      <pubDate>Fri, 07 Dec 2018 15:55:00 +0000</pubDate>
      
      <guid>https://antonz.ru/shlex-split/</guid>
      <description>Предположим, вы собираете архив статей, и хотите для каждой автоматически определять теги — по ним можно будет моментально найти статью в архиве. В качестве тегов решили брать топ-3 слова из текста.
Например, такая статья:
text = &amp;quot;&amp;quot;&amp;quot;Голубь Френк прибыл в отель &amp;quot;Четыре сезона&amp;quot; с дружеским визитом. По сообщениям очевидцев, он сожрал в ресторане киноа прямо из тарелки гостя, а затем клюнул в глаз прибежавшего на шум официанта. Френк прилетает в &amp;quot;Четыре сезона&amp;quot; каждый год.</description>
    </item>
    
    <item>
      <title>Чистый код. Похожие названия методов</title>
      <link>https://antonz.ru/real-quick-ratio/</link>
      <pubDate>Thu, 06 Dec 2018 15:54:00 +0000</pubDate>
      
      <guid>https://antonz.ru/real-quick-ratio/</guid>
      <description>На днях мы использовали метод SequenceMatcher.ratio() из модуля difflib, чтобы оценить сходство двух строк.
А что бы вы сказали, если узнали, что у того же класса есть ещё методы quick_ratio() и real_quick_ratio()? С описанием «возвращает верхнюю границу ratio довольно быстро» и «возвращает верхнюю границу ratio очень быстро»?
Я бы сказал, что это говнокод. Если бы коллега принёс такой код на ревью, я бы предложил подумать ещё ツ Либо ты нормально называешь эти методы, чтобы понятно было, когда какой использовать.</description>
    </item>
    
    <item>
      <title>Обращение к JavaScript-разработчикам</title>
      <link>https://antonz.ru/nojs/</link>
      <pubDate>Wed, 05 Dec 2018 08:17:49 +0000</pubDate>
      
      <guid>https://antonz.ru/nojs/</guid>
      <description>Если вы фронтенд-разработчик — пожалуйста, не отчаивайтесь! Это не приговор. Многие мои знакомые фронтендеры сумели отказаться от этой калечащей привычки и вернуться к нормальной жизни.
Многие снова обрели душевное спокойствие и уверенность в завтрашнем дне. Они заново научились общаться с другими людьми. У многих есть семьи. Они счастливы!
Вы тоже можете измениться. Ещё не поздно. Коллеги из здоровых областей разработки с радостью примут вас. Во многих городах есть группы поддержки и митапы для бывших фронтендеров.</description>
    </item>
    
    <item>
      <title>Python. Кратко напечатать развесистую структуру</title>
      <link>https://antonz.ru/pprint-depth/</link>
      <pubDate>Tue, 04 Dec 2018 15:46:00 +0000</pubDate>
      
      <guid>https://antonz.ru/pprint-depth/</guid>
      <description>Наверняка вы знаете про функции pprint.pprint() и pprint.pformat(), которые красиво форматируют разные коллекции и словари.
У них есть замечательный опциональный параметр depth, который ограничивает уровень вложенности при форматировании. Он здорово помогает, если хочется получить общее представление о данных, не сильно вникая в детали.
Например, запросили вы апишечку и получили в ответ развесистый словарь:
rating = requests.get(&amp;quot;https://www.cia.gov/the-world-factbook/top-dumbest-animals&amp;quot;).json() Заглянем в него, не погружаясь в детали:
import pprint pprint.pprint(rating, depth=3) {&#39;leaderbord&#39;: [ {&#39;details&#39;: {.</description>
    </item>
    
    <item>
      <title>Python. Сравнить строки на похожесть</title>
      <link>https://antonz.ru/difflib-ratio/</link>
      <pubDate>Mon, 03 Dec 2018 12:06:00 +0000</pubDate>
      
      <guid>https://antonz.ru/difflib-ratio/</guid>
      <description>Помните ваш стартап с самыми актуальными новостями дня? Кажется, у него появился конкурент — он нагло крадёт ваши аутентичные новости, рерайтит их, и рассылает ничего не подозревающим клиентам, подрывая вашу репутацию.
Судите сами, вот ваши новости:
genuine = [ &amp;quot;«Братец-хлеб» из Китая носит плащ и корону из булочек, чтобы кормить чаек&amp;quot;, &amp;quot;Мясо гигантских тараканов станет вкусной и недорогой альтернативой говядине&amp;quot;, &amp;quot;Скандал в ботаническом саду: 10 миллионов рублей ушло на зарплату кактусам&amp;quot;, ] А вот новости жалкого подражателя:</description>
    </item>
    
    <item>
      <title>Как стать умнее на порядок</title>
      <link>https://antonz.ru/order-of-magnitude/</link>
      <pubDate>Mon, 03 Dec 2018 07:58:02 +0000</pubDate>
      
      <guid>https://antonz.ru/order-of-magnitude/</guid>
      <description>Есть одна вещь, которая огорчает меня в коллегах по отрасли. Встречается она даже у программистов, что уж говорить о других причастных к производству софта специализациях.
Это безответственное использование выражения «на порядок».
Часто, когда человек хочет сказать «намного больше» — говорит «на порядок». Это, видимо, должно придать словам дополнительный «математический» вес:
 Мы добавили на сайт пять всплывающих окон, и конверсия выросла на порядок.
  Новая версия нашего мега-продукта работает на порядок быстрее.</description>
    </item>
    
    <item>
      <title>Python. Простое сравнение с шаблоном</title>
      <link>https://antonz.ru/fnmatch/</link>
      <pubDate>Sun, 02 Dec 2018 18:05:00 +0000</pubDate>
      
      <guid>https://antonz.ru/fnmatch/</guid>
      <description>Для проверки строки по шаблону обычно используют регулярные выражения и модуль re. Но иногда хочется что-нибудь попроще, пусть и не такое мощное — вроде like в SQL.
Сравнить строку или список с шаблоном поможет модуль fnmatch:
import fnmatch journal = [ &amp;quot;10:00 Начался обычный день в омской ветклинике&amp;quot;, &amp;quot;10:30 Голубь Френк постучался в стеклянные двери&amp;quot;, &amp;quot;10:50 Лисица Клер поскреблась в окно&amp;quot;, &amp;quot;11:10 Попугай Питер проник через вентиляцию&amp;quot;, &amp;quot;11:11 Клер попыталась сожрать Френка и Питера&amp;quot;, &amp;quot;11:25 Осьминог Пауль всплыл в мужском туалете&amp;quot;, ] fnmatch.</description>
    </item>
    
    <item>
      <title>Python. Все слова с прописной буквы</title>
      <link>https://antonz.ru/string-capwords/</link>
      <pubDate>Fri, 30 Nov 2018 16:01:00 +0000</pubDate>
      
      <guid>https://antonz.ru/string-capwords/</guid>
      <description>Допустим, запустили вы стартап. В автоматическом режиме собираете самые упоротые новости русскоязычных СМИ, вот такие:
 Кот из Новокузнецка признан виновным в потопе
 Автоматически же переводите их на английский, вот так:
 Cat from Novokuznetsk found guilty in the flood
 И ежедневно рассылаете подписчикам по всему миру.
Всё хорошо, но знакомый эксперт из МГИМО подсказывает: в английском принято каждое слово в заголовке начинать с заглавной буквы. А у вас-то не так!</description>
    </item>
    
    <item>
      <title>Python. Отформатировать текст для консоли</title>
      <link>https://antonz.ru/textwrap-fill/</link>
      <pubDate>Thu, 29 Nov 2018 14:45:00 +0000</pubDate>
      
      <guid>https://antonz.ru/textwrap-fill/</guid>
      <description>Если любите делать CLI-утилиты, модуль textwrap наверняка вам понравится.
Он умеет перформатировать многострочный текст, чтобы длина строки не превышала N символов:
text = &amp;quot;Около двух месяцев назад породистый голубь по имени Френк постучался в стеклянные двери омской ветеринарной клиники&amp;quot; formatted = textwrap.fill(text, width=20) print(formatted) Около двух месяцев назад породистый голубь по имени Френк постучался в стеклянные двери Или добавить отступ, например для цитаты:
import textwrap inspirational = &amp;quot;Цитаты простых людей:&amp;quot; quote = &amp;quot;Откройте окно вообще дышать невозможно&amp;quot; quote = textwrap.</description>
    </item>
    
    <item>
      <title>Python. Сделать превьюшку длинного текста</title>
      <link>https://antonz.ru/textwrap-shorten/</link>
      <pubDate>Wed, 28 Nov 2018 17:46:00 +0000</pubDate>
      
      <guid>https://antonz.ru/textwrap-shorten/</guid>
      <description>Допустим, мы хотим получить превьюшку длинной статьи. Можно обрезать механически:
article = &amp;quot;Около двух месяцев назад породистый голубь по имени Френк постучался в стеклянные двери омской ветеринарной клиники&amp;quot; article[:30] &#39;Около двух месяцев назад пород&#39; Фраза оборвана посреди слова — это неуважение к читателю и к Френку.
А можно воспользоваться функцией textwrap.shorten():
import textwrap textwrap.shorten(article, 30, placeholder=&amp;quot;...&amp;quot;) &#39;Около двух месяцев назад...&#39; Намного лучше!
Заметка из телеграм-канала  «Oh My Py»
  </description>
    </item>
    
    <item>
      <title>Oh My Py — всё о стандартной библиотеке Python</title>
      <link>https://antonz.ru/ohmypy/</link>
      <pubDate>Wed, 28 Nov 2018 16:21:00 +0000</pubDate>
      
      <guid>https://antonz.ru/ohmypy/</guid>
      <description>Давно хотел подписаться на интересный канал по Питону, но не нашёл такого и решил завести свой ツ Встречайте Oh My Py — канал про тайные возможности стандартной библиотеки Питона.
Тайные не потому, что кто-то их скрывает, конечно. Просто стандартная библиотека огромная! А разработчики часто не копают глубоко и изобретают велосипед вместо того, чтобы использовать готовое.
Заодно обсудим полезные и не самые известные приёмы в работе с языком и структурами данных. А ещё особенности дизайна и говнокод в стандартной библиотеке (да, встречается и такое).</description>
    </item>
    
    <item>
      <title>Тестировщики не должны находить баги</title>
      <link>https://antonz.ru/testers-should-not-find-bugs/</link>
      <pubDate>Tue, 20 Nov 2018 16:21:00 +0000</pubDate>
      
      <guid>https://antonz.ru/testers-should-not-find-bugs/</guid>
      <description>Читаю сейчас книгу Мартина о правильных программистах. Вообще, Мартин весёлый дядька — обожает категоричные утверждения, прямо как я. Но тут превзошёл сам себя: тестировщики, мол не должны ничего находить! На кой-они тогда нужны, верно?
На самом деле, мысль его другая: код должен попадать к тестировщику уже тщательно проверенным. И тут я 100% «за».
Сколько раз наблюдал: программист чего-то там наделал, как-то вроде работает, какие-то даже тесты есть. И перебрасывает в тестирование — проверяйте, мол.</description>
    </item>
    
    <item>
      <title>Человек! Докажи, что это ты</title>
      <link>https://antonz.ru/first-verify/</link>
      <pubDate>Fri, 16 Nov 2018 16:40:00 +0000</pubDate>
      
      <guid>https://antonz.ru/first-verify/</guid>
      <description>Терпеть не могу Гугл и его сервисы, но на работе вынужден пользоваться Gmail. С периодичностью несколько раз в неделю Гугл выкидывает меня из почты и говорит:
 Человек, докажи, что это ты    Если у Гугла есть специальные люди, которые пишут текст для интерфейса, то в средневековой Японии им пришлось бы сделать сеппуку за такую формулировку.
По-своему это даже красиво: одним предложением указать пользователю его место в иерархии «человек-программа».</description>
    </item>
    
    <item>
      <title>​Премиальный и золотой тарифы</title>
      <link>https://antonz.ru/gold-pricing/</link>
      <pubDate>Fri, 16 Nov 2018 12:59:47 +0000</pubDate>
      
      <guid>https://antonz.ru/gold-pricing/</guid>
      <description>Наткнулся на забавный пример ценообразования. Есть приложение «Труколлер» — оно помогает распознавать телефонных спамеров. В базовом варианте бесплатное, но, разумеется, есть платный тариф (Premium). В нём типовой набор плюшек — нет рекламы, дополнительные приятные возможности, всякое такое. Обычное дело.
Но сегодня я заметил, что у «Труколлера» есть и «золотой» (Gold) тариф — ровно в 10 раз дороже «премиального». Смотрите, чем он отличается:
 Приоритетная техническая поддержка Почётный золотой значок (sic!)   Заплати в 10 раз больше и получи значок «я не лох»    Переплачивать за быструю техподдержку — стандартная практика в корпоративном сегменте.</description>
    </item>
    
    <item>
      <title>Финал «Интерфейсов без шелухи»</title>
      <link>https://antonz.ru/sin/</link>
      <pubDate>Tue, 13 Nov 2018 15:53:51 +0000</pubDate>
      
      <guid>https://antonz.ru/sin/</guid>
      <description>Рассылку об интерфейсах я запустил в апреле 2016 года. Сегодня, спустя 2,5 года и 6000 подписчиков, вышел финальный выпуск.
«Интерфейсы без шелухи» были и остаются единственной рассылкой, которая фокусируется на статьях русскоговорящих авторов. Большинство составителей предпочитают компилировать выпуски из переводов и англоязычных статей — так проще. Я же видел ребят, которые интересно пишут на русском и незаслуженно остаются в стороне — и хотел это исправить. Кажется, это вполне получилось.
Рассылка никогда не была объективной — в выпуск попадало только то, что лично я считал дельным.</description>
    </item>
    
    <item>
      <title>Django и пустые значения</title>
      <link>https://antonz.ru/django-null/</link>
      <pubDate>Thu, 08 Nov 2018 19:01:50 +0000</pubDate>
      
      <guid>https://antonz.ru/django-null/</guid>
      <description>В последние недели жизнь тесно познакомила меня с самым популярным фреймворком для быстрой разработки веб-приложений на Питоне — Django. В нём много любопытного, чем я время от времени намерен делиться ツ
Допустим, у вас в приложении есть сущность «Клиент», а у клиента поле «Имя». Клиенты указывают имя при регистрации, но поскольку это не обязательно — многие предпочитают оставлять поле пустым. Как в таких случаях должно имя храниться в базе данных?</description>
    </item>
    
    <item>
      <title>Секта свидетелей раздутой конверсии</title>
      <link>https://antonz.ru/conversion/</link>
      <pubDate>Thu, 06 Sep 2018 14:40:06 +0000</pubDate>
      
      <guid>https://antonz.ru/conversion/</guid>
      <description>Стоит только написать о человечном дизайне — например, рекомендовать сайту не плеваться всплывающими окнами и пуш-нотификациями — как тут же приходят опровергатели с железобетонным утверждением «а я так делаю, и у меня конверсия выросла»:
 Ну и что, что человек не может ничего прочитать, пока не подпишется на рассылку в огромном попапе? Так конверсия выше! Ну и что, что всех бесит, когда в углу прыгает и требует внимания онлайн-консультант? Зато конверсия растёт!</description>
    </item>
    
    <item>
      <title>Этикет ведущего телеграм-канала</title>
      <link>https://antonz.ru/telegram-etiquette/</link>
      <pubDate>Fri, 24 Aug 2018 12:42:12 +0000</pubDate>
      
      <guid>https://antonz.ru/telegram-etiquette/</guid>
      <description>Это правила гигиены, которых я придерживаюсь в канале «Интерфейсов без шелухи». Подойдут не всем, но пригодятся многим.
1. Не размазывать мысль по нескольким сообщениям Лучше сначала внятно сформулировать мысль целиком, и потом опубликовать одним постом — а не серией уточнений самого себя, как мы привыкли делать это в чатах.
Поток сознания
 Оформленная мысль
  А ещё — перечитайте пост перед отправкой и исправьте очевидные проблемы в формулировках. Никто не хочет читать полуфабрикат.</description>
    </item>
    
    <item>
      <title>Алиса, всё грустно</title>
      <link>https://antonz.ru/alice/</link>
      <pubDate>Wed, 22 Aug 2018 07:54:27 +0000</pubDate>
      
      <guid>https://antonz.ru/alice/</guid>
      <description>Голосовой помощник Яндекса — «Алиса» — работает на смартфонах, в автомобилях и в Яндекс-станции. Алиса обладает «навыками»: человек спрашивает и командует, Алиса отвечает и выполняет.
Есть стандартные навыки («какая сейчас погода»). Можно делать собственные: «включи свет», «проверь почту», «закажи пропуск». В теории выглядит красиво.
 У Яндекса целый каталог навыков  Я посмотрел, как «нестандартные» навыки работают на практике. Резюме такое, что для «умного» дома или офиса они совсем не годятся.</description>
    </item>
    
    <item>
      <title>Уберите капчу при оплате</title>
      <link>https://antonz.ru/payment-captcha/</link>
      <pubDate>Fri, 17 Aug 2018 10:58:08 +0000</pubDate>
      
      <guid>https://antonz.ru/payment-captcha/</guid>
      <description>«Спасибо, кэп! Какой чудак будет ставить капчу на форму оплаты?». А таких много. В этой заметке я покажу примеры и выведу универсальное правило применения капчи.
Капча для подписчика У газеты «Ведомости» есть платная подписка:
 Указываешь номер телефона, получаешь код по СМС, подтверждаешь.  На втором шаге человека встречает капча. Она не решает ровным счётом ни одной задачи, кроме как убить конверсию:
 Ведомости уже потратились на отправку СМС, а значит отсеивать ботов несколько поздновато.</description>
    </item>
    
    <item>
      <title>Как понять рекурсию</title>
      <link>https://antonz.ru/recursion/</link>
      <pubDate>Sat, 11 Aug 2018 09:51:13 +0000</pubDate>
      
      <guid>https://antonz.ru/recursion/</guid>
      <description>У программистов есть расхожая шутка:
 Чтобы понять рекурсию, надо понять рекурсию.
 Шутка на самом деле неудачная. Чтобы это увидеть, достаточно перевести её в псевдокод:
def understand_recursion(): understand_recursion() Не хватает важнейшей составляющей — базового случая. В результате получается бесконечная цепочка вызовов. Понятно теперь, почему программисты так лажают в рекурсивных алгоритмах.
Исправим ошибку:
def understand_recursion(myself): if recursion_is_understood(myself): return understand_recursion(myself) Или, переходя на естественный язык:
Чтобы понять рекурсию, надо понимать рекурсию до тех пор, пока не поймёте  И подписывайтесь на  «Oh My Py»</description>
    </item>
    
    <item>
      <title>О кодах подтверждения</title>
      <link>https://antonz.ru/security-code/</link>
      <pubDate>Wed, 08 Aug 2018 14:43:35 +0000</pubDate>
      
      <guid>https://antonz.ru/security-code/</guid>
      <description>Банки и другие сервисы используют коды подтверждения для защиты от мошенников. Обычно код выглядит как число из 4–6 цифр, которое приходит по СМС или пуш-оповещением.
В этой заметке я расскажу об удобстве и безопасности разных вариантов.
Какие бывают коды Дизайн кода подтверждения — классическая проблема, когда кажется, что безопасность конфликтует с удобством использования. Безопасники хотят сделать код как можно длиннее, чтобы злодей не смог его подобрать. А продуктовые ребята наоборот, хотят коды покороче, чтобы человеку было проще запомнить.</description>
    </item>
    
    <item>
      <title>Синтез и распознавание речи в 50 строк на JavaScript</title>
      <link>https://antonz.ru/speech-api/</link>
      <pubDate>Tue, 07 Aug 2018 12:29:34 +0000</pubDate>
      
      <guid>https://antonz.ru/speech-api/</guid>
      <description>Если вы, как большинство нормальных людей, не следите пристально за развитием веб-API, то вот краткая сводка их успехов в обработке речи.
Синтез речи Вовсю работает в нормальных браузерах. Реализуется в несколько строчек на джаваскрипте:
See the Pen Синтез речи by Anton (@nalgeon) on CodePen.
Функция speak создаёт говорилку и озвучивает переданный текст на русском языке.
Распознавание речи Работает только в хроме и фаерфоксе, причём у каждого по-своему. На андроиде тоже работает, хотя функциональность ограничена по сравнению с десктопом.</description>
    </item>
    
    <item>
      <title>Не надо заканчивать фичи</title>
      <link>https://antonz.ru/abandoned-features/</link>
      <pubDate>Mon, 30 Jul 2018 17:44:01 +0000</pubDate>
      
      <guid>https://antonz.ru/abandoned-features/</guid>
      <description>Вредный совет продакту: «Надо заканчивать фичи». Вредный совет вообще: «Надо заканчивать то, что начал».
 Я не заканчиваю читать начатую книгу, если понимаю, что она пустая. Я не заканчиваю и не публикую текст, если получилась фигня. Я не заканчиваю тренировку, если чувствую себя плохо.  И вам не советую.
 Говорить «нет» стоит как новым, так и начатым фичам // Dilbert  В применении к фичам:
Что значит не заканчивать фичу?</description>
    </item>
    
    <item>
      <title>Математика для программиста</title>
      <link>https://antonz.ru/math/</link>
      <pubDate>Mon, 23 Jul 2018 13:03:53 +0000</pubDate>
      
      <guid>https://antonz.ru/math/</guid>
      <description>В университете меня три года пичкали функциональным анализом, дифференциальными уравнениями и теорией функций комплексного переменного. Считаю это преступлением против юности: как и большинству программистов, эти знания никогда не понадобились.
В этой заметке я расскажу, какие (небольшие) кусочки математики действительно пригодятся программисту и как их освоить за несколько месяцев. Если вы уже программируете — можно использовать как чек-лист для самопроверки.
 Иногда математика и вовсе не нужна // xkcd  Сразу скажу, что если вы программируете игры или разрабатываете софт для физиков, медиков или биологов — этого не хватит.</description>
    </item>
    
    <item>
      <title>Прапор информационной безопасности</title>
      <link>https://antonz.ru/officer/</link>
      <pubDate>Fri, 08 Jun 2018 09:53:47 +0000</pubDate>
      
      <guid>https://antonz.ru/officer/</guid>
      <description>У американцев предусмотрен вагон должностей вида «чототам officer». Типа «Data Protection Officer» или «Information Security Officer».
Традиционно их переводят на русский как «офицеров». Это неправильно, потому что ну какие они к чёрту офицеры. В то же время, превращать officer в какого-нибудь «специалиста» или «менеджера» тоже нехорошо.
И вот сегодня меня осенило. Officer — это же «прапор»! Послушайте, как хорошо:
 прапор информационной безопасности прапор защиты данных старший прапор маркетинга   Уже на Хедхантере    Прапор идеально подходит.</description>
    </item>
    
    <item>
      <title>Автокомплит и проверка данных</title>
      <link>https://antonz.ru/suggestions-vs-validation/</link>
      <pubDate>Mon, 04 Jun 2018 17:29:32 +0000</pubDate>
      
      <guid>https://antonz.ru/suggestions-vs-validation/</guid>
      <description>Чтобы помочь человеку правильно ввести сложные данные, часто используют автокомплит (он же «подсказки»):
 Например, по адресу    Или по компании    Когда программист видит автокомплит — немедленно совмещает его с проверкой. Программист думает так:
 Если пользователь хочет ввести что-то непредусмотренное автокомплитом, следует сурово его покарать.
 Нельзя допустить, чтобы человек вводил отсебятину, думает программист:
 Плохой адрес, плохой. Уходи, негодный человек!  Люди спокойно вешают такие проверки на формы заказа в интернет-магазинах, например.</description>
    </item>
    
    <item>
      <title>Облако vs коробка</title>
      <link>https://antonz.ru/cloud-vs-box/</link>
      <pubDate>Thu, 17 May 2018 12:53:07 +0000</pubDate>
      
      <guid>https://antonz.ru/cloud-vs-box/</guid>
      <description>Ghost (лучший блого-движок ever) празднует пятилетний юбилей. По этому поводу авторы написали, что они поняли о рынке и разработке опенсорс-софта за прошедшее время. Статья классная, рекомендую.
Зацепил один момент. Они пишут:
 When we started out, we tried to make everything as simple and user-focused as possible. Most open source software has terrible UI design, so we would have great UI design and it would be the best of both worlds!</description>
    </item>
    
    <item>
      <title>Apple и вау-продукты</title>
      <link>https://antonz.ru/airpods/</link>
      <pubDate>Wed, 16 May 2018 10:20:09 +0000</pubDate>
      
      <guid>https://antonz.ru/airpods/</guid>
      <description>После выпуска айпода Эпл постоянно ищет новый вау-продукт — такой, чтобы не просто популярный, а аж дух захватывало.
 Сначала получилось с айфоном. Потом не получилась с айпадом — оказалось, что планшеты людям не особо нужны. Потом не получилось с макбуком. Эйр не слишком зашёл, а прошки постепенно стали хуже чем были. Потом не получилось с часами — тут история как с планшетами. Из нового захода на айфон получилось это убожество с ушами, о котором даже говорить неудобно.</description>
    </item>
    
    <item>
      <title>Где расположить ошибку</title>
      <link>https://antonz.ru/error-position/</link>
      <pubDate>Mon, 07 May 2018 14:50:00 +0000</pubDate>
      
      <guid>https://antonz.ru/error-position/</guid>
      <description>Сыграл с читателями «интерфейсов без шелухи» в моего любимого супергероя — Капитана Очевидность.
Солидные господа из Швейцарии провели исследование: где лучше всего показывать сообщение об ошибке при заполнении текстового поля на форме. Речь шла о десктопах, потому что в Швейцарии смартфоны не признают.
1000 дизайнеров использовали капитанское супероружие — здравый смысл — чтобы получить такие результаты:
Где расположить сообщение об ошибке (относительно текстового поля)?
↓ снизу — 616
👍👍👍👍👍👍👍 59%</description>
    </item>
    
    <item>
      <title>Карточки в интерфейсе</title>
      <link>https://antonz.ru/cards/</link>
      <pubDate>Sat, 28 Apr 2018 10:18:34 +0000</pubDate>
      
      <guid>https://antonz.ru/cards/</guid>
      <description>Карточки помогают компактно показать сложный объект:
 Карточка статьи на Медиуме  Понятно, что в компактном представлении все характеристики объекта не покажешь. Поэтому грамотные дизайнеры подбирают содержимое карточки под сценарий использования. Например, для Медиума это:
 иллюстрация (привлечь внимание); заголовок (понять, о чём статья); аватарка и имя автора (заинтересовать, если автор знаком читателю); количество аплодисментов (социальное доказательство ценности); время чтения (принять решение: читать сейчас, добавить в закладки или вовсе не читать).</description>
    </item>
    
    <item>
      <title>Как сделать собственный прокси для Телеграма</title>
      <link>https://antonz.ru/socks/</link>
      <pubDate>Mon, 16 Apr 2018 16:06:54 +0000</pubDate>
      
      <guid>https://antonz.ru/socks/</guid>
      <description>В России окончательно заблокировали Телеграм. Чтобы он продолжил работать, нужен либо VPN (сложный путь) либо SOCKS5-прокси (простой путь). Я выбираю простой. Есть готовые прокси, но если вы хотите поднять собственный — вот как это сделать.
Прежде всего, потребуется виртуальный сервер. Я лично предпочитаю Digital Ocean (реферальная ссылка, по которой бесплатно дают $10 — хватит на 2 месяца). Но можно попробовать другие облака, у которых есть бесплатные микро-сервера:
 Amazon EC2 Google Cloud Platform Microsoft Azure  В качестве операционной системы я выбрал Ubuntu 16.</description>
    </item>
    
    <item>
      <title>Задачка: регистрация с фото и паспортом</title>
      <link>https://antonz.ru/signup-puzzle/</link>
      <pubDate>Mon, 16 Apr 2018 08:06:09 +0000</pubDate>
      
      <guid>https://antonz.ru/signup-puzzle/</guid>
      <description>.img-bordered-thin { border: 1px solid #aaa; }  Я предложил читателям телеграм-канала «интерфейсов без шелухи» такую задачку:
  На просторах фейсбука встретил скрины регистрации в довольно типичном приложении, которому надо идентифицировать человека. Так обычно работают каршеринги и всяки уберо-подобные сервисы, которым не обойтись просто электронной почтой.
Интерфейс достаточно аккуратный, явно делал дизайнер. Но, думаю, есть что улучшить. Попробуем?
   Спасибо всем, кто прислал свои варианты! Давайте разберём решение.</description>
    </item>
    
    <item>
      <title>Оживляж для скучного приложения</title>
      <link>https://antonz.ru/boring-apps/</link>
      <pubDate>Wed, 11 Apr 2018 14:39:00 +0000</pubDate>
      
      <guid>https://antonz.ru/boring-apps/</guid>
      <description>Алиса Котляренко написала любопытную статью о том, каким должен быть интерфейс у скучных продуктов. Она выделяет такие приёмы: геймификация, анимация, иллюстрация, маскоты, юмор и настроение.
Я не проводил объективных исследований, поэтому могу говорить только за себя. У меня из перечисленного не работает ничего, кроме лёгкого, уместного юмора в интерфейсных текстах. Геймификация — ну такое, анимация и иллюстрации — безразлично, маскоты (aka Скрепыш в Ворде и обезьяна в Мейлчимпе) — раздражают.</description>
    </item>
    
    <item>
      <title>Пароли в СМС и пушах</title>
      <link>https://antonz.ru/sms-password/</link>
      <pubDate>Mon, 09 Apr 2018 14:33:00 +0000</pubDate>
      
      <guid>https://antonz.ru/sms-password/</guid>
      <description>Альфа-Банк тут выложил в общий доступ свою дизайн-систему, и там нашёлся хороший принцип про одноразовые пароли:
 Важно, чтобы одноразовый пароль был полностью виден в предпросмотре входящего сообщения и был как можно короче. Так клиент сможет быстро увидеть пароль, запомнить его и ввести.
 Золотые прям слова. Альфа-Банк много лет слал примерно такие сообщения:
 Podverdite perevod na summu NNN RUR na schet MMM. Vnimanie! Nikomu ne soobshayte parol. Parol dlya perevoda: 573281</description>
    </item>
    
    <item>
      <title>Потрясающий интерфейс и отвратительная морда</title>
      <link>https://antonz.ru/good-bad-ugly/</link>
      <pubDate>Fri, 16 Mar 2018 10:05:01 +0000</pubDate>
      
      <guid>https://antonz.ru/good-bad-ugly/</guid>
      <description>Мне иногда пишут «ты вот топишь за хорошие интерфейсы, а что толку — менеджмент всё равно всегда выбирает какаху, лишь бы подешевле».
Кажется, тут недопонимание.
На самом деле, нет выбора между «божественно прекрасный интерфейс задорого» и «самое убогое во вселенной отстоище задёшево». Обычно есть как минимум такие варианты:
 Сделать плохо, потратив N ресурсов. Сделать нормально, потратив те же N (или чуть больше) ресурсов. Сделать отлично, потратив k*N ресурсов.  Понимать принципы создания хороших интерфейсов стоит хотя бы для того, чтобы видеть вариант 2.</description>
    </item>
    
    <item>
      <title>Если нет награды, прогресс бесполезен</title>
      <link>https://antonz.ru/progress-and-reward/</link>
      <pubDate>Wed, 28 Feb 2018 11:07:08 +0000</pubDate>
      
      <guid>https://antonz.ru/progress-and-reward/</guid>
      <description>Мотивация усиливается по мере приближения к цели. Особенно хорошо это работает, если человек видит прогресс.
Продукты и сервисы вовсю этим пользуются. Хрестоматийный пример — LinkedIn с его «прогрессом заполнения профиля», но вообще приём используется повсеместно. Даже на форме заявки на кредитку пишут «шаг 1 из 4» — это тоже визуализация прогресса.
Приём работает при одном условии — человек понимает, в чём награда. Прогресс сам по себе не особо мотивирует, если я не понимаю, что получу взамен.</description>
    </item>
    
    <item>
      <title>Когда дизайн не нужен</title>
      <link>https://antonz.ru/admin-ui/</link>
      <pubDate>Wed, 21 Feb 2018 09:31:05 +0000</pubDate>
      
      <guid>https://antonz.ru/admin-ui/</guid>
      <description>Я вообще большой поклонник интерфейсов «под задачу». Таких, чтобы удобно закрывали конкретные пользовательские сценарии, а не пытались быть конструкторами под любые требования (чем часто грешат в корпоративном софте).
Но есть одно исключение — админки. Админка — это интерфейс над данными (клиентами, товарами, заказами, любыми объектами предметной области) с базовыми возможностями вроде поиска, фильтрации и редактирования. Работают с админкой исключительно сотрудники бэкофиса: техподдержка, контент-менеджеры, администраторы.
Я за универсальные админки, которые работают «из коробки», вообще без участия дизайнера и разработчика.</description>
    </item>
    
    <item>
      <title>Убийственный дизайн</title>
      <link>https://antonz.ru/design-can-kill/</link>
      <pubDate>Wed, 14 Feb 2018 13:11:27 +0000</pubDate>
      
      <guid>https://antonz.ru/design-can-kill/</guid>
      <description>Наткнулся на классную, судя по всему, книгу — Tragic Design. Об ошибках в дизайне, которые калечат и убивают — и о том, как их избежать.
Вторая глава с захватывающим названием «Design Can Kill» есть в открытом доступе. Там разобраны 4 ситуации, когда ошибки в интерфейсе продукта привели к фатальным последствиям:
 Аппарат для лучевой терапии, которые стрелял в пациентов направленным пучком в 17000 рад (в 85 раз больше нормальной дозы). Паром, у которого «газ» и «тормоз» менялись местами в зависимости от режима (вспоминается классическое программистское «define TRUE FALSE»).</description>
    </item>
    
    <item>
      <title>Прощание с пользователем</title>
      <link>https://antonz.ru/offboarding/</link>
      <pubDate>Thu, 08 Feb 2018 15:59:00 +0000</pubDate>
      
      <guid>https://antonz.ru/offboarding/</guid>
      <description>Есть такая штука — офбординг (offboarding). Это то, как продукт ведёт себя, когда взаимодействие с пользователем закончилось:
 человек уходит с сайта, ничего не купив; человек отменяет подписку на сервис; человек оформил заказ.  Как видно, расставание может быть на «позитиве» (оформил заказ) или на «негативе» (отменил подписку). В любом случае, маркетологам и дизайнером не хочется, чтобы продукт в этот момент стоял истуканом. И чаще всего — правильно не хочется.</description>
    </item>
    
    <item>
      <title>Не моя проблема</title>
      <link>https://antonz.ru/not-my-problem/</link>
      <pubDate>Fri, 26 Jan 2018 12:56:00 +0000</pubDate>
      
      <guid>https://antonz.ru/not-my-problem/</guid>
      <description>Вы, наверно, слышали афоризм про односторонность узкого специалиста. Афоризм лживый, на мой взгляд. Профи, прокачанный в одной области, волей-неволей неплохо понимает и в смежных — это необходимое условие мастерства.
Но проблема в другом — многие специалисты не дают себе труда разобраться в контексте проблемы.
Пример: медленно работает программа. Раньше уже были проблемы с базой данных, поэтому первым делом бегут к администратору БД. Тот смотрит и говорит:
 С базой всё в порядке, проблемы в приложении, идите к разработчикам.</description>
    </item>
    
    <item>
      <title>Обратить необратимое</title>
      <link>https://antonz.ru/irreversible/</link>
      <pubDate>Mon, 22 Jan 2018 09:44:51 +0000</pubDate>
      
      <guid>https://antonz.ru/irreversible/</guid>
      <description>Возможно, вы слышали о грандиозном UX-провале на Гавайях: там из-за плохого интерфейса оператор ошибся и отправил жителям оповещение о ракетном ударе (с милым дополнением «ЭТО НЕ УЧЕБНАЯ ТРЕВОГА»).
По этому поводу Гавайи и плохие интерфейсы простебали уже все кому не лень. Из основных проблем выделяют визуальную схожесть кнопок тестовой и реальной тревоги, плохое подтверждение действия и не-сценарность интерфейса (он выглядит просто как свалка ссылок).
Но главная беда, на мой взгляд, такая:</description>
    </item>
    
    <item>
      <title>Регистрация и оплата как необходимое зло</title>
      <link>https://antonz.ru/necessary-evil/</link>
      <pubDate>Fri, 19 Jan 2018 10:01:45 +0000</pubDate>
      
      <guid>https://antonz.ru/necessary-evil/</guid>
      <description>Два самых распространённых «необходимых зла» в интерфейсе — регистрация и оплата.
 зло — потому что пользователю они не нужны, у него другая задача; необходимое — потому что без них не получить результат.  Когда работаешь со «злом», главное — минимизировать боль и сохранить контекст.
Минимизировать боль Чем быстрее человек преодолеет препятствие, тем лучше. Поэтому из регистрации имеет смысл выкинуть всё лишнее, обойдясь необходимым минимумом.
Плохая регистрация
 Подписка на емейл-рассылку Сони настолько ужасна, что даже по-своему прекрасна  Хорошая</description>
    </item>
    
    <item>
      <title>По техническим причинам</title>
      <link>https://antonz.ru/reasons/</link>
      <pubDate>Tue, 16 Jan 2018 09:05:42 +0000</pubDate>
      
      <guid>https://antonz.ru/reasons/</guid>
      <description>Люди любят объяснять провалы «техническими причинами»:
 По техническим причинам поезда следуют с увеличенными интервалами. По техническим причинам платежи картой временно не принимаются. По техническим причинам магазин не работает после 18:00.
 Я знаю один секрет: всем плевать на абстрактные причины. Неважно, технические они, гуманитарные, политические, религиозные или социальные. Если не можете назвать конкретику, лучше ограничиться голыми фактами:
 Поезда ходят с интервалом 5–10 минут. Платежи картой заработают 25 января. Часы работы: 10–18</description>
    </item>
    
    <item>
      <title>Пуш-оповещения и гении из Гугла</title>
      <link>https://antonz.ru/chrome-push/</link>
      <pubDate>Fri, 12 Jan 2018 08:41:33 +0000</pubDate>
      
      <guid>https://antonz.ru/chrome-push/</guid>
      <description>Люди терпеть не могут пуш-оповещения на сайтах. Но когда те же самые люди делают собственные сайты, что-то у них в мозгу щёлкает и они обязательно добавляют запрос на нотификации, непременно на главную страницу.
Когда-то Хром (самый популярный браузер, на Андроиде работает по умолчанию) показывал такие запросы в маленькой всплывашке, которая не особо мешала работать с сайтом.
Потом команда Хрома исследовала вопрос и обнаружила: 90% запросов на пуш-оповещения люди игнорируют.
Какой вывод из этого сделал бы рядовой обыватель:</description>
    </item>
    
    <item>
      <title>Я медленно снимаю твои деньги с карты</title>
      <link>https://antonz.ru/ux-writing/</link>
      <pubDate>Wed, 03 Jan 2018 12:09:16 +0000</pubDate>
      
      <guid>https://antonz.ru/ux-writing/</guid>
      <description>Или как начать писать в интерфейсе по-человечески, не тратя полжизни на изучение бесконечных статей и книг Ильяхова на эту тему.
Многие сервисы заранее блокируют стоимость услуги на карте клиента, чтобы убедиться в его платёжеспособности.
Банки в СМС-оповещениях не делают разницы между блокировкой и списанием (может и правильно), потому присылают «с карты списано NNN рублей».
Если клиент пользуется услугой в первый раз, он начинает вибрировать: «ничего не сделали, а деньги уже списали, кидалы, а-а-а».</description>
    </item>
    
    <item>
      <title>Сила частичных решений</title>
      <link>https://antonz.ru/partial-solutions-power/</link>
      <pubDate>Mon, 25 Dec 2017 08:21:32 +0000</pubDate>
      
      <guid>https://antonz.ru/partial-solutions-power/</guid>
      <description>Программисты ненавидят частичные решения. Если штука работает 99 раз из 100, значит она не работает вообще — так считает программист. Если она работает 9 раз из 10, так это и вовсе издевательство.
Но при взаимодействии с людьми, этими нелогичными белковыми существами, попадание в 90% случаев — отличный результат. Главное, чтобы в оставшихся 10% алгоритм честно говорил «не знаю», а не выдавал результат наобум.
Пример: автоматическое определение пола по имени-фамилии. Да, никакой алгоритм не угадает пол у «Саши Савченко».</description>
    </item>
    
    <item>
      <title>Сломается всё</title>
      <link>https://antonz.ru/release-it/</link>
      <pubDate>Tue, 19 Dec 2017 12:51:48 +0000</pubDate>
      
      <guid>https://antonz.ru/release-it/</guid>
      <description>(и что с этим делать)
За долгую историю общения с нагруженными сервисами я понял — законы Мерфи работают.
Сломается всё, каждая отдельная часть. Сломается самым изощрённым способом. Сломаются внутренности, о которых ты даже не подозревал, что они существуют.
Сбои невозможно предупредить. Всё что остаётся — минимизировать риски и последствия.
Интересно, что этому никто не учит. Подозреваю, что те кто обычно учат — сами не умеют, а те кто умеют — не любят учить.</description>
    </item>
    
    <item>
      <title>Вредные привычки: mind maps</title>
      <link>https://antonz.ru/mind-maps/</link>
      <pubDate>Mon, 18 Dec 2017 09:20:29 +0000</pubDate>
      
      <guid>https://antonz.ru/mind-maps/</guid>
      <description>Самой вредной привычкой после курения оказалась для меня привычка записывать конспекты книг в виде ментальных карт (mind maps).
Я был жутко увлечен этим подходом. Скрупулёзно конспектировал в нечеловеческих условиях: на микроскопическом экранчике HTC Touch с Windows Mobile 6, яростно тыкая в него стилусом (суровые были времена, что и говорить). Собрал этих конспектов 50 штук.
А потом оказалось, что они даже для растопки не годятся.
Формат майндмапов провоцирует строить глубокие иерархии — 6–7 уровней вложенности.</description>
    </item>
    
    <item>
      <title>Днище ИТ-безопасности</title>
      <link>https://antonz.ru/it-security/</link>
      <pubDate>Tue, 12 Dec 2017 09:28:51 +0000</pubDate>
      
      <guid>https://antonz.ru/it-security/</guid>
      <description>С подачи Григория Бакунова я прочитал письмо Линуса Торвальдса о разработчиках, пользователях и спецах по информационной безопасности. Оно длинное, но вот самый смак в вольном переводе:
 Когда ты, безопасник, бесишь пользователей и разработчиков — я не приму работу и назову тебя хреновым специалистом.
  Потому что в конце концов, важны именно пользователи. Без них система может быть «безопасной», но вся твоя огораживательная активность — просто мастурбация. В конце концов, ты не сделал ничего полезного.</description>
    </item>
    
    <item>
      <title>Андроид и китайское лего</title>
      <link>https://antonz.ru/android-lego/</link>
      <pubDate>Wed, 29 Nov 2017 10:22:37 +0000</pubDate>
      
      <guid>https://antonz.ru/android-lego/</guid>
      <description>Однажды мне достался китайский ноунейм-аналог лего. Издалека он выглядел в точности как настоящий, но вблизи иллюзия разрушилась: блёклые кирпичики из плохой пластмассы, уродливые люди с болтающимися руками, а кубики не держатся вместе. Наверно, китайцы сочли, что всё это мелочи.
Андроид, при всех своих достоинствах (их полно, без шуток) — китайское лего. Если бы Гугл был рыцарем, то девизом следовало выбрать «пренебрежение к деталям».
Вот несколько примеров для моих друзей, лишенных радости ежедневного взаимодействия с андроидом.</description>
    </item>
    
    <item>
      <title>Угадайка и неленивый интерфейс</title>
      <link>https://antonz.ru/guess/</link>
      <pubDate>Tue, 28 Nov 2017 16:03:48 +0000</pubDate>
      
      <guid>https://antonz.ru/guess/</guid>
      <description>Ленивые интерфейсы любят выносить мозг. В любой ситуации, когда можно догадаться самостоятельно или спросить человека — ленивая программа предпочитает спросить. Давайте посмотрим, как этого избежать.
Угадайка Вот Мейлчимп требует, чтобы человек рассказал, где что лежит:
 Ну невозможно же догадаться, где здесь имя, а где телефон, правда?  Когда мы проектировали «Дадату», сразу хотели сделать нормально. В результате появилась угадайка типов:
 Человек загружает файл, а Дадата сама расставляет типы на столбцах и просит проверить.</description>
    </item>
    
    <item>
      <title>Никто не читает требования</title>
      <link>https://antonz.ru/specs/</link>
      <pubDate>Thu, 23 Nov 2017 11:33:28 +0000</pubDate>
      
      <guid>https://antonz.ru/specs/</guid>
      <description>Раньше я писал требования по Коберну с Вигерсом. Действующие лица, основной сценарий, альтернативные, глоссарий, развесистая структура спецификации, вот это всё.
Отличные требования. Одна проблема с ними — никто не читает. Это странно, у нас же типа инженерная профессия, должны люди внимательно читать спецификации. Но вот не читают. Гады.
Потом мне как-то прислали такую же чужую спеку на ознакомление, я прочёл и понял, что не понял. И не хочу понимать (хотя пришлось себя заставить, да).</description>
    </item>
    
    <item>
      <title>Бесплатные продукты и пирожки с говном</title>
      <link>https://antonz.ru/freeware/</link>
      <pubDate>Tue, 21 Nov 2017 09:42:44 +0000</pubDate>
      
      <guid>https://antonz.ru/freeware/</guid>
      <description>Однажды читатель «интерфейсов без шелухи» написал мне:
 Когда продукт бесплатный, у пользователей нет прав чего-то требовать от него вообще.
 Действительно, многие считают, что если продукт бесплатный, то с автора и спроса нет. Есть проблемы? Сиди и молчи в тряпочку, бесплатно же получил. Вообще спасибо сказать должен.
Тут фундаментальная ошибка. Делать продукт платным или бесплатным — решение автора и его выбор. Но бесплатный продукт — не подаяние, а клиент — не нищий с протянутой рукой.</description>
    </item>
    
    <item>
      <title>Категорически запрещено</title>
      <link>https://antonz.ru/prohibited/</link>
      <pubDate>Thu, 16 Nov 2017 08:18:45 +0000</pubDate>
      
      <guid>https://antonz.ru/prohibited/</guid>
      <description>В сознании многих людей запрет — вроде магического заклинания: надо подобрать формулировку посильнее, чтобы был эффект. Поэтому мало кто ограничивается обычным «запрещено».
Пишут:
 ЗАПРЕЩЕНО ЗАПРЕЩЕНО!!! СТРОГО ЗАПРЕЩЕНО СТРОЖАЙШЕ ЗАПРЕЩЕНО КАТЕГОРИЧЕСКИ ЗАПРЕЩЕНО  Когда заклинатель запретов с удивлением обнаруживает, что магия не действует, он напрягается и продолжает заклинание:
 ШТРАФ ШТРАФ 1000 руб. ШТРАФ 5000 рублей!!!  Когда и это не действует, запретитель впадает в ступор и пытается взять количеством объявлений, размером шрифта и восклицательными знаками.</description>
    </item>
    
    <item>
      <title>Плохой, плохой магазин</title>
      <link>https://antonz.ru/bad-bad-shop/</link>
      <pubDate>Tue, 14 Nov 2017 08:58:30 +0000</pubDate>
      
      <guid>https://antonz.ru/bad-bad-shop/</guid>
      <description>В России огромное количество плохих интернет-магазинов. В смысле, которыми неудобно пользоваться. И виноваты в этом не владельцы магазинов, которые не понимают в интерфейсах и не читают Baymard. Виноваты разработчики «коробок» и облачных платформ для магазинов, которые этого не делают.
Это они придумали спрашивать про «Ваш город — Самара. Мы угадали? Да / нет». Это они после складывания каждого товара в корзину показывают модальное окно «Продолжить покупки или перейти в корзину?». Это они начинают чекаут с требования зарегистрироваться.</description>
    </item>
    
    <item>
      <title>Гладкие и шершавые интеграции</title>
      <link>https://antonz.ru/smooth-integration/</link>
      <pubDate>Fri, 10 Nov 2017 10:20:33 +0000</pubDate>
      
      <guid>https://antonz.ru/smooth-integration/</guid>
      <description>Если вы работаете над облачным сервисом, то здоровенная часть пользовательского опыта — «гладкость» интеграции вашего сервиса со всякими другими. На эту часть разработчикам всегда хочется забить (вот ещё, возиться со сторонними сервисами) — а пользователи страдают.
Например, есть Яндекс-касса, которая сама не умеет выписывать чеки, но интегрирована с онлайн-кассами (Атол и Модуль-касса). Вот основной пункт инструкции по подключению:
 Пропишите здесь настройки для интеграции. Их можно скопировать в личном кабинете вашей онлайн-кассы.</description>
    </item>
    
    <item>
      <title>Жизнь через RSS</title>
      <link>https://antonz.ru/rssify/</link>
      <pubDate>Wed, 08 Nov 2017 06:44:27 +0000</pubDate>
      
      <guid>https://antonz.ru/rssify/</guid>
      <description>Как удобно читать блоги, рассылки, каналы в Телеграме, паблики в Фейсбуке и Вконтакте.
Была у меня идея для стартапа на миллион: один инструмент для всех подписок. Я даже сделал промо-страницу для проверки спроса.
 «Консона» берёт на себя все информационные подписки и показывает их в простом и удобном интерфейсе. Как RSS-ридер, только для любых источников.  Спроса особого не обнаружилось, но лично для меня проблема актуальности не потеряла. И вот, наконец, удалось свести все информационные каналы в один.</description>
    </item>
    
    <item>
      <title>Приём «показать все»</title>
      <link>https://antonz.ru/show-all/</link>
      <pubDate>Tue, 24 Oct 2017 09:04:47 +0000</pubDate>
      
      <guid>https://antonz.ru/show-all/</guid>
      <description>Распространённый приём: когда есть неизвестное, но потенциально большое количество элементов (например, результатов поиска), показывать топ-N и кнопку «показать все».
  Самый большой облом для пользователя: жмёшь на «показать все», и обнаруживаешь, что элементов всего и было N штук, то есть ничего нового ты не увидел.
Идеальный вариант — точно знать общее количество элементов, и сообщить пользователю. Но посчитать все элементы может быть вычислительно «дорого».
Есть алгоритм, который решает проблему. Я сначала покажу на примере, а потом напишу общее правило.</description>
    </item>
    
    <item>
      <title>Задачка: приглашение обновить ОС</title>
      <link>https://antonz.ru/os-update-puzzle/</link>
      <pubDate>Thu, 19 Oct 2017 07:05:03 +0000</pubDate>
      
      <guid>https://antonz.ru/os-update-puzzle/</guid>
      <description>Я предложил читателям телеграм-канала «интерфейсов без шелухи» такую задачку:
  Приглашение обновить ОС Сотрудники Apple любят хвастаться большим процентом пользователей, которые перешли на самую свежую версию ОС. Достигается этот большой процент модальным окном, которое выскакивает посреди экрана, блокируя работу с телефоном, и требует на выбор:
 Обнови меня немедленно. Обнови меня чуть позже. Насладись описанием новой версии.   Так выглядит приглашение обновить айось  Как видите, варианта «пшла прочь» не предусмотрено.</description>
    </item>
    
    <item>
      <title>Продавец-террорист</title>
      <link>https://antonz.ru/phone-sales/</link>
      <pubDate>Thu, 05 Oct 2017 16:05:08 +0000</pubDate>
      
      <guid>https://antonz.ru/phone-sales/</guid>
      <description>Типичный сценарий работы телефонного продавца-террориста:
 — Добрый день! Антон Николаевич? — Да. — Вам удобно сейчас говорить? — Да. — (нескончаемый поток слов с «уникальным торговым предложением»)
 Недавно наблюдал, как коллега сначала минуту слушала вступительную речь такого продавана, а потом ещё минуту пыталась уговорить его повесить трубку, потому что ей это не надо.
Я лично обрываю такие звонки после первых 10 секунд блеяния с той стороны, после чего заношу номер в чёрный список.</description>
    </item>
    
    <item>
      <title>Пейджинг, ещёкалка и бесконечный скрол</title>
      <link>https://antonz.ru/paging/</link>
      <pubDate>Wed, 27 Sep 2017 14:48:37 +0000</pubDate>
      
      <guid>https://antonz.ru/paging/</guid>
      <description>Три способа постраничной навигации по данным, и как их использовать.
Когда программа показывает пользователю много данных (товаров, клиентов, результатов поиска), загружать их все сразу бывает слишком накладно. Поэтому используют постраничную загрузку в одной из трёх разновидностей:
 Пейджинг. Разбить набор данных на страницы, присвоить каждой номер, показать номера пользователю. Пользователь может перейти к любой странице.  Ещёкалка. Показывать следующую страницу по кнопке «загрузить ещё». Пользователь может перейти только к следующей странице; перейти к произвольной не получится.</description>
    </item>
    
    <item>
      <title>Подсказки в голосовых интерфейсах</title>
      <link>https://antonz.ru/voice-cues/</link>
      <pubDate>Fri, 15 Sep 2017 12:45:50 +0000</pubDate>
      
      <guid>https://antonz.ru/voice-cues/</guid>
      <description>Кэтрин Уайтентон пишет, как в голосовых интерфейсах помочь пользователю понять, что надо сказать, чтобы решить свою задачу.
В графических интерфейсах помогают текстовые инструкции и внешний вид элементов управления (ссылки подчёркнуты, кнопки формой напоминают реальные). В голосовых сложнее — текста много давать нельзя (человек быстро запутается), а внешний вид вовсе отсутствует.
Кэтрин предлагает несколько приёмов:
 Использовать невербальные звуки (пиканье) как знак, что система восприняла команду. Либо чтобы привлечь внимание человека. Угадывать намерение и спрашивать подтверждение («Назначь встречу на 9» — «Окей, встреча на завтра на 9 утра.</description>
    </item>
    
    <item>
      <title>Задачка: бардак в телеграме</title>
      <link>https://antonz.ru/telegram-puzzle/</link>
      <pubDate>Wed, 06 Sep 2017 07:02:05 +0000</pubDate>
      
      <guid>https://antonz.ru/telegram-puzzle/</guid>
      <description>Я предложил читателям телеграм-канала «интерфейсов без шелухи» такую задачку:
  Бардак в Телеграме Утром вы просматривали любимые каналы, как телеграм вдруг зазвонил. Внезапно, это был Павел Дуров. Не знаю, что на него нашло, но он хочет предложить вам работу. Точнее, разовый проект.
Павел сказал, что гордится идеей каналов в телеграме. «Это как СМИ, только лучше», — сказал он. И продолжал:
Когда каналов становится много, работать с ними неудобно. Приходится массово мьютить, но это не спасает — всё равно засоряют список контактов и мешаются с чатами.</description>
    </item>
    
    <item>
      <title>Лучший движок для блога</title>
      <link>https://antonz.ru/ghost-one/</link>
      <pubDate>Mon, 28 Aug 2017 07:17:05 +0000</pubDate>
      
      <guid>https://antonz.ru/ghost-one/</guid>
      <description>Ghost — лучший блоговый движок для одиночек и небольших компаний. Он недавно обновился до версии 1.0, и это прекрасно.
Ghost идеально вписался между облачными платформами (Медиум, Тильда, Блогспот) и Вордпрессом. Он прост, удобен, содержит кучу функций из коробки и легко настраивается.
В конце июля вышла версия 1.0. Команда разработки пилила её весь год — исправляли конструктивные огрехи и закладывали основу для дальнейшего развития. В новой версии переработали редактор (хотя он и так был неплох), добавили пачку мелких фич, но основные изменения под капотом.</description>
    </item>
    
    <item>
      <title>Рейтинг как обратная связь</title>
      <link>https://antonz.ru/rating-as-feedback/</link>
      <pubDate>Wed, 23 Aug 2017 09:42:00 +0000</pubDate>
      
      <guid>https://antonz.ru/rating-as-feedback/</guid>
      <description>Мишель Фицпатрик из Интеркома написала, как встроить в продукт рейтинги, чтобы от них был толк для клиентов и сотрудников. Мишель говорит об обратной связи для службы поддержки (это специализация Интеркома), но статья на самом деле подходит для любой системы, в которой люди оценивают что-то.
Мишель пишет о трёх механиках: 5-балльной шкале («звёзды»), бинарной оценке («палец вверх, палец вниз») и эмоциях:
 Звёзды ★★★☆☆
Плохи тем, что у каждого человека своё понимание конкретной оценки.</description>
    </item>
    
    <item>
      <title>Суперсила дизайнера</title>
      <link>https://antonz.ru/design-superpower/</link>
      <pubDate>Mon, 14 Aug 2017 06:43:58 +0000</pubDate>
      
      <guid>https://antonz.ru/design-superpower/</guid>
      <description>Суперсила хорошего дизайнера — находить простые решения. Особенно это полезно в стартапах и, напротив, в сложных продуктах с большой историей:
 В стартапах важно двигаться как можно быстрее, а простые решения экономят время. В продуктах с историей интерфейс наслаивался годами, часто без оглядки на внутреннюю логику и удобство использования, и в результате так и просит упрощения.  Сегодня о первой ситуации — стартапах.
Возьмем сервис юзабилити-аудита, который показывает проблемы в UX сайта глазами обычного посетителя и дизайнера:</description>
    </item>
    
    <item>
      <title>Персоны, Jobs-to-Be-Done и здравый смысл</title>
      <link>https://antonz.ru/persona-jtbd-cargo/</link>
      <pubDate>Wed, 09 Aug 2017 17:19:23 +0000</pubDate>
      
      <guid>https://antonz.ru/persona-jtbd-cargo/</guid>
      <description>Пейдж Лаубхаймер из группы Нильсена-Нормана опубликовал статью-сравнение двух методик: персон и Jobs-to-Be-Done.
Я предлагаю не заморачиваться насчёт следования тому или иному походу. Они каждый год разные. Персоны, юзкейсы, юзер стори, джоб стори, whatever. Реально важно одно:
Для каждой фичи или сценария понимать, кто потребитель и зачем это ему, какую проблему решает. Выясняется серией вопросов постановщику задачи:
 — Давай добавим регистрацию через соцсети.
— Зачем?
— Ну, чтобы пользователям не надо было придумывать пароль.</description>
    </item>
    
    <item>
      <title>Задачка: Яндекс-музыка и медленный интернет</title>
      <link>https://antonz.ru/yandex-music-puzzle/</link>
      <pubDate>Mon, 07 Aug 2017 11:57:22 +0000</pubDate>
      
      <guid>https://antonz.ru/yandex-music-puzzle/</guid>
      <description>На днях я предложил читателям телеграм-канала «интерфейсов без шелухи» такую задачку:
Яндекс-музыка и медленный интернет Мобильное приложение Яндекс-музыки пребывает в иллюзии, что всегда и везде есть хороший интернет. Когда запускаешь приложение, оно хочет показать персональные рекомендации («плейлист дня»). Если связь плохая, или телефон подключился к вайфай-сети без интернета, то приложение долго тупит, после чего сообщает, что «не смогла».
Давайте поможем Яндекс-музыке и предложим, что делать при запуске приложения, если интернет медленный или его вовсе нет.</description>
    </item>
    
    <item>
      <title>Дырявая абстракция голосовых интерфейсов</title>
      <link>https://antonz.ru/voice-interface-leaking-abstraction/</link>
      <pubDate>Tue, 01 Aug 2017 11:03:26 +0000</pubDate>
      
      <guid>https://antonz.ru/voice-interface-leaking-abstraction/</guid>
      <description>Эдриан Цумбрюнен написал о голосовом интерфейсе, который прикидываются человеком: понимает свободные формулировки и демонстрируют эмоции. Эдриан называет такие интерфейсы «скеоморфными» и преподносит их как благо 1.
А я думаю, что они зло. Суть моего несогласия лучше всего сформулировал Алан Купер 2:
 Если так сложно добиться, чтобы люди чётко понимали устные инструкции — как мы собираемся давать устные инструкции компьютерам? Распознать слова — совсем не то же самое, что распознать смысл, а именно смысл критически важен в инструкциях.</description>
    </item>
    
    <item>
      <title>Задачка: город в интернет-магазине</title>
      <link>https://antonz.ru/delivery-city-puzzle/</link>
      <pubDate>Thu, 27 Jul 2017 08:47:46 +0000</pubDate>
      
      <guid>https://antonz.ru/delivery-city-puzzle/</guid>
      <description>Два дня назад я предложил читателям телеграм-канала «интерфейсов без шелухи» такую задачку:
Город в интернет-магазине Есть интернет-магазин, работает по всей стране. От города к городу отличаются доступные способы и стоимость доставки. Цены на 95% товаров одинаковые для всех городов, но для 5% отличаются.
Раньше магазин показывал каждому посетителю при входе такой попап:
Ваш город — «Санкт-Петербург». Мы угадали?
ДА / НЕТ
 Но пришёл новый директор по маркетингу и категорически требует попап убрать — он, мол, бесит покупателей.</description>
    </item>
    
    <item>
      <title>Урл как интерфейс</title>
      <link>https://antonz.ru/url-as-interface/</link>
      <pubDate>Wed, 26 Jul 2017 12:41:03 +0000</pubDate>
      
      <guid>https://antonz.ru/url-as-interface/</guid>
      <description>Для меня урл (URL) на сайте или в веб-приложении — часть интерфейса. Поэтому он должен быть хорош.
Понимаю, что нормальные люди не задумываются об урлах, а в идеале вовсе не знают, что это такое. Но я гик, поэтому хочу красивые и информативные адреса. Если у вас так же — оставайтесь, поговорим о плохих и хороших урлах.
Плохие урлы Начнём с характеристик плохого урла.
Урл не зависит от состояния Пусть есть список клиентов с адресом /customers.</description>
    </item>
    
    <item>
      <title>Хватит сортировать по алфавиту</title>
      <link>https://antonz.ru/no-more-latch/</link>
      <pubDate>Tue, 18 Jul 2017 08:52:05 +0000</pubDate>
      
      <guid>https://antonz.ru/no-more-latch/</guid>
      <description>Часто при проектировании интерфейса нужно показать на экране список однотипных объектов: людей, товаров, статей. И возникает вопрос — как их организовать? Классический ответ дал в 1989 году Ричард Вурман, автор термина «информационная архитектура». Он предложил мнемонику LATCH: положение, алфавит, время, категория, иерархия.
Это неплохая модель, но есть что улучшить. Вот мой вариант — как организовать информацию в интерфейсе.
По алфавиту Составить список объектов и отсортировать по названию. Например, контакты в телефонной книге компании упорядочены по фамилиям:</description>
    </item>
    
    <item>
      <title>Куда подглядывать, когда проектируешь интерфейс</title>
      <link>https://antonz.ru/spy-ui/</link>
      <pubDate>Mon, 03 Jul 2017 15:11:35 +0000</pubDate>
      
      <guid>https://antonz.ru/spy-ui/</guid>
      <description>На днях я предложил смотреть на Гмейл. Для мобильных интерфейсов, понятное дело, есть гайдлайны вендоров:
 Human Interface Guidelines Material Design Guidelines  А для веба ещё пара отличных источников, если работаете над бизнес-приложениями:
 Контур.Гайды Harmony Design System  В зависимости от тематики:
 Для интернет-магазинов я бы подглядывал интерфейс у МИФа. Медиа — Тинькофф-Журнал и Медуза. Каталоги и классифайды — Авто.ру и Яндекс.Маркет.  Если у вас есть проверенные временем авторитеты — пишите @nalgeon, дополню.</description>
    </item>
    
    <item>
      <title>Как веб-дизайнеру проектировать хардварные интерфейсы</title>
      <link>https://antonz.ru/ilya-aleksandrov/</link>
      <pubDate>Wed, 21 Jun 2017 07:56:53 +0000</pubDate>
      
      <guid>https://antonz.ru/ilya-aleksandrov/</guid>
      <description>Сегодняшнее интервью — с Ильёй Александровым. Он рассказывает о специфике проектирования интерфейсов для «железных» продуктов — носимых устройств, автомобилей и киосков самообслуживания. И советует, как обычному дизайнеру попасть в hardware. 
  Расскажи о себе вкратце: чем занимаешься, где работаешь, чем увлекаешься Я проектирую продукты и интерфейсы. Люблю разнообразие. Начинал с веб-сайтов и презентаций, немного мобильных приложений. Затем игровые интерфейсы в World of Tanks, позже киоск самообслуживания, электрический грузовик, рельсовый электровелосипед.</description>
    </item>
    
    <item>
      <title>Важные оповещения и ковбой Мальборо</title>
      <link>https://antonz.ru/important-notifications/</link>
      <pubDate>Fri, 16 Jun 2017 08:52:00 +0000</pubDate>
      
      <guid>https://antonz.ru/important-notifications/</guid>
      <description>Прочитал забавную статью с «критическим анализом» систем пуш-нотификации в андроиде и айоси. Автор подробно рассматривает особенности дизайна оповещений в каждой из систем и делает выводы о плюсах и минусах. Разделяет решения на более и менее полезные.
Смешно.
Оповещения, как они реализованы в обоих ОС — безусловное зло для пользователя. Их единственная цель — заставить человека почаще возвращаться к смартфону.
Вот система, которая могла бы приносить больше пользы, чем вреда:
  По умолчанию оповещения от всех приложений выключены.</description>
    </item>
    
    <item>
      <title>Как подписаться на блог в Медиуме по RSS</title>
      <link>https://antonz.ru/medium-rss/</link>
      <pubDate>Wed, 24 May 2017 07:02:28 +0000</pubDate>
      
      <guid>https://antonz.ru/medium-rss/</guid>
      <description>Медиум (Medium) — это популярная коллективная блоговая платформа. Она славится аскетичным интерфейсом, приятной типографикой и отсутствием нормального способа подписаться на конкретный блог.
Вы можете «зафоловить» человека, и Медиум будет присылать его новые статьи вам по электронной почте. Или не будет. Как повезёт.
Если хотите гарантированно подписаться на блог — используйте RSS. Медиум его поддерживает, хотя и не афиширует. Просто скормите RSS-ридеру ссылку на блог человека в таком виде:
https://medium.com/@юзернейм  Например:</description>
    </item>
    
    <item>
      <title>Машинное обучение для нормальных людей</title>
      <link>https://antonz.ru/machine-learning/</link>
      <pubDate>Wed, 03 May 2017 07:37:06 +0000</pubDate>
      
      <guid>https://antonz.ru/machine-learning/</guid>
      <description>Прочитал на днях статью «Применение машинного обучения для дизайнеров» и книгу «Машинное обучение для дизайнеров». Разочарован: не понимаю, для кого это всё пишут. Куча размахиваний руками в воздухе и псевдо-сложных рассуждений. Ноль практического применения.
Но я задумался — а где реально обычный дизайнер интерфейсов (или любой не-специалист в computer science) может столкнуться с машинным обучением в повседневных проектах, да ещё с русскоязычными данными. Я попробовал собрать несколько примеров вместе с инструментами.</description>
    </item>
    
    <item>
      <title>Долой скриншоты или Правильный отчёт о проекте</title>
      <link>https://antonz.ru/case-study/</link>
      <pubDate>Mon, 17 Apr 2017 16:27:00 +0000</pubDate>
      
      <guid>https://antonz.ru/case-study/</guid>
      <description>Лорен Холидей написала, как правильно рассказывать о выполненных проектах. Особенно рекомендую статью фрилансерам и руководителям студий.
Вместо скучных скриншотов автор рекомендует потратить силы и время, но подготовить полноценное описание проекта (case study). Вот из чего оно состоит:
1. Саммари Краткая суть проекта, из которой читатель поймёт, интересны ему подробности или нет. Основная проблема заказчика. Решение, к которому вы пришли. Количественные результаты. Ссылка на сайт.
Большинство читателей ограничится этим разделом, и это нормально.</description>
    </item>
    
    <item>
      <title>Запас доверия</title>
      <link>https://antonz.ru/trust/</link>
      <pubDate>Fri, 07 Apr 2017 09:24:26 +0000</pubDate>
      
      <guid>https://antonz.ru/trust/</guid>
      <description>Каждый раз, когда я начинаю работать с новым приложением, к нему есть запас доверия. Каждый раз, когда я сталкиваюсь с проблемой, этот запас уменьшается. Но иногда (реже, чем хотелось бы) запас восполняется — если программа оправдывает мои ожидания или превосходит их.
Вот что уменьшает моё доверие:
 На программу нельзя положиться: тупо не работает, теряет данные, глючит. Программа врёт: неправильно считает или не делает, что обещали. Заставляет меня терять время: тормозит или запрашивает лишнюю информацию.</description>
    </item>
    
    <item>
      <title>Люблю старые интерфейсы</title>
      <link>https://antonz.ru/old-interface/</link>
      <pubDate>Tue, 04 Apr 2017 12:42:27 +0000</pubDate>
      
      <guid>https://antonz.ru/old-interface/</guid>
      <description>Такие, знаете, немодные и слегка неказистые, которых давно не касалась рука дизайнера и разработчика.
К старому интерфейсу я привык. Пусть он не идеален, пусть заставляет выполнять лишние действия — зато я всё знаю, где и что лежит. Поэтому меня бесит Тинькофф: ребята как только закончат делать очередной интернет-банк, сразу начинают делать новый с нуля. Понимаю, lifetime learning и все дела, но я не готов каждый год осваивать ваш новый интерфейс.</description>
    </item>
    
    <item>
      <title>Письма пользователям-отщепенцам</title>
      <link>https://antonz.ru/retention-letter/</link>
      <pubDate>Mon, 03 Apr 2017 12:27:00 +0000</pubDate>
      
      <guid>https://antonz.ru/retention-letter/</guid>
      <description>Одна из тёмных областей, в которые редко заглядывают дизайнеры — емейлы пользователям. Обычно это вотчина маркетологов. А зря, потому что письма от продукта или команды к пользователю — тоже интерфейс. А для людей, которые не используют сервис (зарегистрировались однажды и забыли) — это единственный интерфейс.
Дес Трейнор из Интеркома написал небольшую статью «A simple improvement to product announcements». Простое улучшение, о котором он говорит — писать разные письма для активных и неактивных пользователей.</description>
    </item>
    
    <item>
      <title>Человеческого фактора не существует</title>
      <link>https://antonz.ru/human-factor/</link>
      <pubDate>Mon, 27 Mar 2017 09:27:00 +0000</pubDate>
      
      <guid>https://antonz.ru/human-factor/</guid>
      <description>Когда случается авария из-за ошибки человека, говорят «человеческий фактор». А правильнее сказать — «фактор системы» или «фактор интерфейса».
Человек всегда действует наилучшим образом, исходя из своего понимания ситуации. Если он серьезно ошибся — значит, неправильно понял ситуацию. В случае с компьютерными интерфейсами виновата в этом система, не человек.
Сотрудник Додо-пиццы ошибся в настройках, и компания вернула клиентам 8 миллионов рублей за уже выполненные заказы. Виновата система: у человека в принципе не должно быть возможности запустить такой огромный возврат.</description>
    </item>
    
    <item>
      <title>Купить в 1 клик</title>
      <link>https://antonz.ru/1-click/</link>
      <pubDate>Thu, 23 Mar 2017 15:20:00 +0000</pubDate>
      
      <guid>https://antonz.ru/1-click/</guid>
      <description>Покупку одной кнопкой, без оформления заказа, придумал лично Джеф Безос, основатель Амазона. Придумал, поставил задачу команде, взяли в работу, сделали. Презентуют. Безос заходит на страницу книги, жмёт «купить в 1 клик» и… Получает окошко с подтверждением «Точно купить? Да / Нет».
Джеф сожрал продакт-менеджера, а разработчиков заставил окошко убрать. Так на Амазоне появилась покупка в 1 клик.
А кнопка «купить в 1 клик», которая торчит в каждом втором интернет-магазине, на самом деле означает «перезвоните мне».</description>
    </item>
    
    <item>
      <title>Хороший продукт «прокачивает» пользователей</title>
      <link>https://antonz.ru/badass/</link>
      <pubDate>Thu, 16 Mar 2017 16:44:00 +0000</pubDate>
      
      <guid>https://antonz.ru/badass/</guid>
      <description>Это заметка из серии «60 секунд». В ней я публикую избранные короткие эссе, обычно со ссылкой на рекомендуемый материал. Больше таких заметок — в телеграме
Каждый продуктолог и дизайнер знает, что приложение надо строить не от фич, а от целевой аудитории и сценариев использования. А я на днях прочитал запись выступления Кэти Сьерры, где она предлагает сделать следующий шаг.
Кэти говорит: человек не просто хочет решить задачу. Он хочет стать лучше сам, стать крутым в некоторой области, стать экспертом.</description>
    </item>
    
    <item>
      <title>Редактура и голосовой интерфейс московского метро</title>
      <link>https://antonz.ru/metro-voice-interface/</link>
      <pubDate>Tue, 14 Mar 2017 07:11:00 +0000</pubDate>
      
      <guid>https://antonz.ru/metro-voice-interface/</guid>
      <description>xkcd
Большой кусок интерфейса метро — голосовые объявления. Они звучат в поездах и переходах, с их помощью метрополитен доносит до пассажиров всякие правильные мысли. С объявлениями есть две большие проблемы:
 Реклама. Её просто не должно быть — никто не имеет права гадить мне в мозг без моего согласия. Плохой текст. О нём и хочу поговорить.  Вы, может быть, слышали об инфостиле и проекте «пиши, сокращай» Максима Ильяхова. Там много пишут о вычистке текста от мусора.</description>
    </item>
    
    <item>
      <title>Главное правило выбора в интерфейсе</title>
      <link>https://antonz.ru/choice/</link>
      <pubDate>Thu, 09 Mar 2017 07:54:20 +0000</pubDate>
      
      <guid>https://antonz.ru/choice/</guid>
      <description>Главное правило выбора из нескольких вариантов в интерфейсе сформулировал Джоэл Спольски 16 лет назад:
 Каждый раз, когда вы просите пользователя сделать выбор — заставляете принимать решение. Это не всегда плохо. Но точно плохо, если выбор не относится к задаче, которую решает человек. Лучше сделать выбор за пользователя везде, кроме его основной задачи.
 Второстепенная задача → выбор делает программа Делайте выбор за пользователя везде, где это не относится к его цели.</description>
    </item>
    
    <item>
      <title>Правильные заметки к релизу</title>
      <link>https://antonz.ru/release-notes/</link>
      <pubDate>Wed, 08 Mar 2017 14:38:00 +0000</pubDate>
      
      <guid>https://antonz.ru/release-notes/</guid>
      <description>На днях Ника Троицкая подняла тему пользы и шуточек в release notes. А сегодня я прочитал статью Роба Гила «As a Designer I want Better Release Notes», в которой он подробно и с примерами описал идеальные заметки к релизу для апсторов.
Вкратце:
  Первым абзацем — краткая суть изменений в релизе («добавили вход по отпечатку пальца»). Можно короткий список, если главных изменений несколько.
  Не стесняйтесь написать, что весь релиз про исправление злого бага, если от него пострадали многие.</description>
    </item>
    
    <item>
      <title>Делайте пасхалки</title>
      <link>https://antonz.ru/easter-egg/</link>
      <pubDate>Tue, 28 Feb 2017 08:11:56 +0000</pubDate>
      
      <guid>https://antonz.ru/easter-egg/</guid>
      <description>«Пасхальное яйцо» в программе — это такая неочевидная для других деталь, которая приятно греет вам сердце. Если потребитель заметит пасхалку — порадуется, а если нет — ничего страшного. Главное, вы знаете, что она есть.
Мне нравится закладывать пасхалки в каждый проект или даже отдельную задачу. Это не требует много времени, а результату придает какую-то особую душевность.
Пример: в ХФЛабс мы разрабатываем суровый корпоративный продукт для банков и страховых компаний. Я обычно пишу для него заметки к релизу.</description>
    </item>
    
    <item>
      <title>Что-то пошло не так</title>
      <link>https://antonz.ru/oops/</link>
      <pubDate>Wed, 22 Feb 2017 13:12:00 +0000</pubDate>
      
      <guid>https://antonz.ru/oops/</guid>
      <description>Чуть ли не самая болезненная тема в проектировании интерфейсов — обработка ошибок. Во-первых, дизайнеры не любят о ней задумываться. Во-вторых, не могут предусмотреть всё многообразие проблемных ситуаций. В-третьих, на это вечно не хватает времени.
В результате дизайном сообщений об ошибках занимаются разработчики. Получается обычно плохо, потому что эти ребята мыслят с другой стороны экрана — их больше заботит система, а не пользователь.
Поэтому рекомендую подсунуть вашим знакомым разработчикам короткую вводную статью Рафаля Безымянного «How to Communicate Errors Well».</description>
    </item>
    
    <item>
      <title>Что подарить дизайнеру интерфейсов</title>
      <link>https://antonz.ru/gift-for-designer/</link>
      <pubDate>Tue, 21 Feb 2017 08:42:44 +0000</pubDate>
      
      <guid>https://antonz.ru/gift-for-designer/</guid>
      <description>UPD: а вот вариант 2019 года
Я спросил 1300 дизайнеров о профессиональном подарке, который они больше всего хотят получить. И вот что они ответили.
 Речь в опросе шла о подарках, которые существуют в электронном виде.  Сильнее всего дизайнеры мечтают о хорошей книге, хотя с радостью примут в подарок и обучающий курс. Намного меньше людей хотят получить программу или подписку на сервис.
А вот топ-3 подарков в каждой категории.</description>
    </item>
    
    <item>
      <title>Говорите громче!</title>
      <link>https://antonz.ru/louder/</link>
      <pubDate>Tue, 14 Feb 2017 12:06:00 +0000</pubDate>
      
      <guid>https://antonz.ru/louder/</guid>
      <description>Есть одна проблема у людей, которые делают сайд-проекты: забывают рассказать о сделанном. Особенно выражена у программистов, но у дизайнеров тоже встречается.
Сделал человек годную штуку, молодец. Теперь надо бы помочь миру узнать о ней. Наш герой пишет в любимую соцсеть «я сделялъ», получает десять лайков от друзей и один комментарий. Всё.
Так бывает чаще всего. Но сегодня мне повезло наткнуться на контрпример: отличное и содержание, и подача работы.
Рассказ о проекте здорового человека Александр Катин разработал плагин для скетча, который задаёт простые пропорции для слоёв (1:1, 2:1, 4:3, 16:9).</description>
    </item>
    
    <item>
      <title>Как взбодрить продакт-менеджера</title>
      <link>https://antonz.ru/product-cheer-up/</link>
      <pubDate>Mon, 13 Feb 2017 14:55:00 +0000</pubDate>
      
      <guid>https://antonz.ru/product-cheer-up/</guid>
      <description>Главная проблема «долгоживущих» продакт-менеджеров и вообще любых сотрудников: со временем у человека «замыливается» глаз. Команда перестаёт видеть очевидные извне проблемы продукта и упускает возможности.
Чтобы бороться с этим эффектом, не обязательно менять сотрудников. Достаточно, чтобы периодически люди извне набегали на команду со своими идеями:
 владелец продукта, который хочет странного; маркетолог, начитавшийся «30 свежайших трендов 2017 года»; пользователи, которых бесят острые углы продукта; конкуренты, которые глумятся над косяками в соцсетях.  А задача продакта — быть открытым этому потоку, и выцеплять из него всё ценное.</description>
    </item>
    
    <item>
      <title>Программирование без интернета</title>
      <link>https://antonz.ru/programming-without-internet/</link>
      <pubDate>Fri, 10 Feb 2017 15:47:40 +0000</pubDate>
      
      <guid>https://antonz.ru/programming-without-internet/</guid>
      <description>оригинал на xkcd  Топ-3 повседневных вопросов программиста:
 как сделать Х, почему работает так, а не эдак, как назвать переменную.  С третьим вопросом всё понятно — он неразрешим в принципе. С первыми двумя интереснее.
Чтобы получить ответы, программисты девяностых читали исходники и руководства. Программисты двухтысячных начали активно гуглить. А затем в 2008 появился Stack Overflow, и стал «внешней памятью» для разработчиков. Теперь на 95% вопросов есть готовый ответ: первая ссылка из гугла на Стек.</description>
    </item>
    
    <item>
      <title>Тяжелая правда о презентациях</title>
      <link>https://antonz.ru/slides/</link>
      <pubDate>Thu, 02 Feb 2017 16:04:00 +0000</pubDate>
      
      <guid>https://antonz.ru/slides/</guid>
      <description>Люди любят делиться презентациями. После каждой конференции организатор с трепетом выкладывает в соцсети пачку ПДФов, а люди не менее радостно репостят по всему фейсбуку и твитеру, и сохраняют в избранное. Я полагаю, что мотивация репостящего такая же, как с подборками «полезных ссылок» — человек думает, что презентация ему внезапно пригодится.
Тяжелая правда заключается в том, что презентация с конференции реально полезна только человеку, который слушал доклад. Потому что слайды дополняют выступление, сами по себе они — ничто.</description>
    </item>
    
    <item>
      <title>Конспект курильщика</title>
      <link>https://antonz.ru/summary/</link>
      <pubDate>Mon, 30 Jan 2017 11:44:57 +0000</pubDate>
      
      <guid>https://antonz.ru/summary/</guid>
      <description>Есть куча способов сделать плохой конспект книги, и только один — хороший.
Плохие способы  Выделить желтым ключевые фразы  и благополучно забить на них. Выделяя маркером слова, вы чувствуете, будто уловили самое важное. Этим польза и ограничивается: больше никогда в жизни вы к выделенному не вернётесь. Надергать цитат. Надежда здесь на то, что перечитывая цитаты, по ассоциации вспомните что-то дельное. Не вспомните. Написать длинный список выводов без структуры и примеров.</description>
    </item>
    
    <item>
      <title>Нелогичный пользователь</title>
      <link>https://antonz.ru/irrational-user/</link>
      <pubDate>Mon, 23 Jan 2017 10:03:00 +0000</pubDate>
      
      <guid>https://antonz.ru/irrational-user/</guid>
      <description>The Irrational User Элвина Ся — лучшая прикладная статья о когнитивных искажениях из всех, что я пока встретил. Правда, всё равно не дотягивает до идеала: слишком много ложного «наукообразия», слишком мало применения к продуктом. Но кое-что есть. Советую пропускать введение и переходить сразу к разделу «Common cognitive biases to keep in mind when building products».
Практические выводы с моими примерами:
Собственное мнение уважают Людям нравится, когда у продукта есть «мнение»: явно выраженная точка зрения на то, как делать правильно.</description>
    </item>
    
    <item>
      <title>Как собрать палитру из одного цвета</title>
      <link>https://antonz.ru/single-color-scheme/</link>
      <pubDate>Thu, 19 Jan 2017 15:36:00 +0000</pubDate>
      
      <guid>https://antonz.ru/single-color-scheme/</guid>
      <description>9 из 10 статей о работе с цветом в дизайне напоминают мне картинку «как нарисовать сову».
Сначала автор подробно и со вкусом рассказывает о HSB-модели и цветовом колесе. Наличие картинки с колесом строго обязательно, потому что без него статью не будут шарить и переводить, а если колесо в наличии — сразу видно: автор эксперт, статья стоящая.
Затем дело доходит до единственного вопроса, который на самом деле интересует читателя: «как мне подобрать палитру?</description>
    </item>
    
    <item>
      <title>Единственная книга о продакт-менеджменте</title>
      <link>https://antonz.ru/only-productology-book/</link>
      <pubDate>Wed, 18 Jan 2017 10:20:00 +0000</pubDate>
      
      <guid>https://antonz.ru/only-productology-book/</guid>
      <description>Если вы дизайнер, разработчик или тестировщик, рекомендую прочитать ровно одну книгу по продакт-менеджменту. Она удивительно толковая, при этом небольшая и бесплатная: Intercom on Product Management.
Книга учит:
     как сказать новой фиче «нет» (самый важный навык для любого, кто разрабатывает софт), когда все-таки можно сказать ей «да», как сделать так, чтобы фичей пользовались, а не сложили на полку, как улучшить существующие фичи, как составить роадмап.  Если вы начинающий продакт, тоже рекомендую.</description>
    </item>
    
    <item>
      <title>Баг, не фича</title>
      <link>https://antonz.ru/bug-not-feature/</link>
      <pubDate>Mon, 16 Jan 2017 09:46:33 +0000</pubDate>
      
      <guid>https://antonz.ru/bug-not-feature/</guid>
      <description>Абсурдное поведение системы часто имеет логичное объяснение со стороны разработчиков. Под разработчиком имею в виду любого, кто смотрит «изнутри» — это может быть менеджер, дизайнер или тестировщик. Но такая «логичность» — иллюзия.
Захотел я в одном сервисе изменить имя в профиле. Было «Антон Жиянов», а я решил поставить просто «Антон», чтобы не так официально. Зашел, изменил, сохранил, получил ошибку:
«Имя „Антон“ уже используется». Очевидный баг, верно? Ан нет.
Я написал разработчикам, и получил ответ основателя сервиса: это фича.</description>
    </item>
    
    <item>
      <title>Сделайте себе интересно</title>
      <link>https://antonz.ru/interest/</link>
      <pubDate>Tue, 27 Dec 2016 13:28:57 +0000</pubDate>
      
      <guid>https://antonz.ru/interest/</guid>
      <description>Это конспект лекции Людвига Быстроновского об интересе и контринтуитивном решении задач. Людвиг рассказывает, когда возникает интерес, какие приемы помогают не потерять его, чем вреден «поток» и как разрыв шаблона приводит к успеху.
  Не старайтесь и не ищите интерес на стороне  Плохой тамада очень старается сделать интересно, но получается ровно наоборот: он только всех раздражает.
 Не надо стараться «сделать себе интересно». Напряг в этом деле вызывает только скуку.</description>
    </item>
    
    <item>
      <title>Как упростить пользователю жизнь</title>
      <link>https://antonz.ru/simplify-users-life/</link>
      <pubDate>Thu, 15 Dec 2016 09:25:00 +0000</pubDate>
      
      <guid>https://antonz.ru/simplify-users-life/</guid>
      <description>Хорошие продукты и интерфейсы упрощают жизнь. С этим обычно все согласны. Споры начинаются, когда придумывают, что и как упрощать.
Например: есть сеть супермаркетов с доставкой на дом. Интерфейс — интернет-витрина, через которую люди заказывают продукты. Очевидное уже упростили: идти в магазин не надо, натыкал мышкой, картой оплатил, назавтра получил. Что дальше?
Дональд Норман, автор книги «Дизайн привычных вещей», выделяет четыре способа упростить задачу. Примерим на наш супермаркет и его лояльных клиентов — Валеру и Настю:</description>
    </item>
    
    <item>
      <title>Как спроектировать удобный интерфейс для сложной предметной области</title>
      <link>https://antonz.ru/olga-romanova/</link>
      <pubDate>Thu, 01 Dec 2016 08:11:04 +0000</pubDate>
      
      <guid>https://antonz.ru/olga-romanova/</guid>
      <description>Сегодняшнее интервью — с Ольгой Коноваловой из «Эльбы». Ольга рассказывает, как спроектировать сложный UI и научиться иллюстрации с нуля. А еще делится гайдлайнами дизайна интерфейсов и стикерами с котами для телеграма ツ
  Расскажи о себе вкратце: чем занимаешься, где и над чем работаешь, чем увлекаешься помимо работы Сейчас я проектирую интерфейсы в Эльбе, это проект компании СКБ Контур. Компания крупная, в ней 4,5 тысячи человек, большая часть в Екатеринбурге.</description>
    </item>
    
    <item>
      <title>Компания престарелых программистов</title>
      <link>https://antonz.ru/old-man-company/</link>
      <pubDate>Mon, 21 Nov 2016 05:39:00 +0000</pubDate>
      
      <guid>https://antonz.ru/old-man-company/</guid>
      <description>Иллюстрация Blake Loosli  На днях обедали с коллегой, и он бросил фразу, что мол стареет компания — всё меньше молодых сотрудников. Я тогда не придал значения, а сейчас огляделся по сторонам и понял — да, точно.
Ужас же, что творится. Большинство коллег уже пожилые, приближаются к 30 годам — этому критическому для айтишников возрасту. А некоторые, страшно сказать, уже и перевалили за него. Нет, так-то живы остались, внешне нормально сохранились, речь разборчивая, песок сыпется умеренно.</description>
    </item>
    
    <item>
      <title>Как найти программиста: единственный рабочий метод</title>
      <link>https://antonz.ru/find-developer/</link>
      <pubDate>Wed, 28 Sep 2016 08:08:32 +0000</pubDate>
      
      <guid>https://antonz.ru/find-developer/</guid>
      <description>Прежде всего, проверьте рабочее место программиста. Больше всего шансов найти его за монитором. Изредка программист может быть под столом, ковыряться в системном блоке. Если слышите голоса от кофемашины — проверьте там. Программисты любят общаться за кофе с другими программистами. Кто-то пьет вместо кофе чай, а особо отличившиеся — воду. Некоторые просто сидят на диванчике. К сожалению, некоторых программистов стоит поискать в курилке. Не курит? Тогда он в туалете. Со смартфоном это может быть надолго.</description>
    </item>
    
    <item>
      <title>Как совмещать дизайн и разработку</title>
      <link>https://antonz.ru/nick-babich/</link>
      <pubDate>Wed, 14 Sep 2016 11:23:30 +0000</pubDate>
      
      <guid>https://antonz.ru/nick-babich/</guid>
      <description>Сегодняшнее интервью — с Николаем Бабичем, известным дизайнером и автором статей, который оказался не совсем дизайнером ツ
  Расскажи о себе вкратце: чем занимаешься, где и над чем работаешь, чем увлекаешься помимо работы? Ты не поверишь, но я программист :–) Причем достаточно далеко нахожусь от фронтенда и проектирования UI, занимаюсь приложением для бекенда. В работе, как и в жизни, люблю чередовать вещи. Заниматься постоянно бекендом тяжко, и в качестве разнообразия у меня wireframing и прототипирование (как веб, так и мобильные приложения).</description>
    </item>
    
    <item>
      <title>Надмозги в метро: конечная станция</title>
      <link>https://antonz.ru/terminal-station/</link>
      <pubDate>Mon, 12 Sep 2016 08:49:41 +0000</pubDate>
      
      <guid>https://antonz.ru/terminal-station/</guid>
      <description>Когда надмозгов изгнали из перевода фильмов, их с радостью приютил московский метрополитен. Постоянные читатели блога помнят, как мы чинили объявление про эскалатор. Сегодня — объявление на конечной станции.
Раньше на конечной пассажиров подгоняло казенное объявление:
 Уважаемые пассажиры! Поезд дальше не идет, просьба выйти из вагона.
 Не идеально, но жить можно. Увы, пару месяцев назад очередной мозговой слизень дотянулся до лакомого затылка метрошного чиновника, и теперь объявление звучит так:</description>
    </item>
    
    <item>
      <title>Интерфейсы в энтерпрайзе и прокачка дизайнера</title>
      <link>https://antonz.ru/mike-ozornin/</link>
      <pubDate>Thu, 01 Sep 2016 06:56:41 +0000</pubDate>
      
      <guid>https://antonz.ru/mike-ozornin/</guid>
      <description>Я решил запустить серию интервью с дизайнерами интерфейсов. Не супер-звездами, а обычными ребятами, которые работают над коммерческими и массовыми продуктами и сервисами. Сегодня пилотный выпуск с Михаилом Озорниным.
  Расскажи о себе вкратце: чем занимаешься, где и над чем работаешь, чем увлекаешься помимо работы? Я был разработчиком, системным аналитиком, менеджером проектов, а потом пришел в проектирование и дизайн. Сейчас — дизайнер интерфейсов в Positive Technologies. Спорим, вы о ней не слышали?</description>
    </item>
    
    <item>
      <title>Горелый и его последний дизайн-линч</title>
      <link>https://antonz.ru/o-tawa-toki/</link>
      <pubDate>Wed, 24 Aug 2016 09:27:59 +0000</pubDate>
      
      <guid>https://antonz.ru/o-tawa-toki/</guid>
      <description>В апреле 2015 года я запустил Дизайн-линчер — аудит юзабилити сайта от обычного посетителя и профессионального дизайнера. Сегодня закрываю услугу аудита и пишу об уроках, которые для себя вынес.
 — Один из лучших кейсов в маркетинге, что я видел
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;из отзыва заказчика    Урок первый: «минимальный прототип» работает Сервис аудита состоял из трех частей:
 витрина: сайт и форма приема заявок; админка для управления заявками; мини-биржа для координации рецензентов.</description>
    </item>
    
    <item>
      <title>Чеклист хорошего дизайн-портфолио</title>
      <link>https://antonz.ru/design-portfolio/</link>
      <pubDate>Tue, 16 Aug 2016 08:13:46 +0000</pubDate>
      
      <guid>https://antonz.ru/design-portfolio/</guid>
      <description>Недавно прочел интересную статью в блоге Биханса — в ней эксперты из крупных дизайн-студий и Яндекса рассказали, что для них важно видеть в портфолио соискателя на вакансию дизайнера.
Статья достаточно сумбурная, поэтому я извлек из нее чеклист хорошего (по мнению экспертов) портфолио.
Проверьте себя:
 В портфолио только лучшие и релевантные вакансии работы. Не слишком много, 5–10 штук. На карточке проекта описаны цели, аудитория и проблемы заказчика. И презентовано ваше решение: как добились результата с помощью дизайна.</description>
    </item>
    
    <item>
      <title>Бизнес как игра</title>
      <link>https://antonz.ru/biznes-kak-igra/</link>
      <pubDate>Tue, 14 Jun 2016 09:54:23 +0000</pubDate>
      
      <guid>https://antonz.ru/biznes-kak-igra/</guid>
      <description>Руководители «Мосигры» — Сергей Абдульманов и Дмитрий Кибкало — написали книгу о своем опыте развития сети магазинов настольных игр. Мосигра славится человечным отношением к клиентом, а Абдульманов — легким слогом, так что книга получилась интересной.
  Формат такой: 100 эвристик «хорошо-плохо» по управлению, продажам, работе с магазинами и маркетингу. С примерами. Примеров, впрочем, не хватает, из-за чего некоторые советы выглядят как «лучше быть здоровым и богатым, чем бедным и больным».</description>
    </item>
    
    <item>
      <title>Ричард Хипп и SQLite</title>
      <link>https://antonz.ru/richard-hipp/</link>
      <pubDate>Mon, 30 May 2016 09:07:30 +0000</pubDate>
      
      <guid>https://antonz.ru/richard-hipp/</guid>
      <description>Ричард Хипп — создатель SQLite, самой распространенной в мире базы данных.
В 2001 году Ричард разрабатывал приложение по контракту. В качестве базы в проекте использовался Информикс. Он был кривовато настроен, и иногда падал — тогда приложение не работало. При этом база использовалась только на чтение. Ричард подумал — а зачем тогда клиент-серверная СУБД? Сделал свою встроенную базу — SQLitе, с базовой поддержкой SQL — и приложение перестало зависеть от сервера.</description>
    </item>
    
    <item>
      <title>«Психбольница» Купера 20 лет спустя: цели и сценарии</title>
      <link>https://antonz.ru/asylum-2/</link>
      <pubDate>Mon, 23 May 2016 09:38:09 +0000</pubDate>
      
      <guid>https://antonz.ru/asylum-2/</guid>
      <description>Это вторая часть «обезжиренного» конспекта книги Алана Купера «Психбольница в руках пациентов». Я убрал очевидное и воду, оставил пользу и примеры, добавил домашнее задание.
Краткое содержание первой части Чтобы продукт получился по-настоящему классным, он должен быть человечным. «Модный» интерфейс ≠ человечный интерфейс. Необходимое условие привлекательного продукта — проектирование под реальных пользователей. Инструмент проектирования — персонажи.
У персонажа есть имя, биография, привычки, цели и навыки. Имя и биография — вымышленные, всё остальное — настоящее, от реальных пользователей.</description>
    </item>
    
    <item>
      <title>Мозговой слизень атаковал городскую навигацию</title>
      <link>https://antonz.ru/slug-navigation/</link>
      <pubDate>Wed, 18 May 2016 10:39:00 +0000</pubDate>
      
      <guid>https://antonz.ru/slug-navigation/</guid>
      <description>После победы над метро мозговой слизень перебрался в мэрию. Теперь на перекрестках Москвы ставят вот такие указатели:
 ГБОУ Школа № 967
ГКУ СДР № 23
МАУ ДО СОЦ КД «БЕРЕЗКА»
ЗБС УПРЛС № 111
   Предположим, в спальных районах действительно нечего писать на указателях, кроме детских садов и школ (хм). Но как это написано.
Я сейчас буду предельно жесток. Большего идиотизма&amp;hellip; погодите, пришел человек из мэрии&amp;hellip; хм, что-то ползет по затылку&amp;hellip; ой!</description>
    </item>
    
    <item>
      <title>«Психбольница» Купера 20 лет спустя</title>
      <link>https://antonz.ru/asylum/</link>
      <pubDate>Mon, 16 May 2016 10:00:22 +0000</pubDate>
      
      <guid>https://antonz.ru/asylum/</guid>
      <description>Почти двадцать лет назад Алан Купер написал скандальную книгу о пользовательских интерфейсах — «Психбольница в руках пациентов». Мнения в индустрии о ней несколько, кхм, противоречивые — из-за резкого тона и яростной критики, с которой Алан обрушился на разработчиков и менеджеров. Но в книге много дельного: это признают даже противники метода «персонажей», который предлагает Купер.
Мне фиолетовы категоричные высказывания автора: чего-чего, а провокаторов в интернете хватает. В книге напрягало другое: безбрежный океан воды, банальностей, самоповторов и консалтинговых заклинаний, в которых Купер утопил суть.</description>
    </item>
    
    <item>
      <title>Как привести дела в порядок без Дэвида Аллена и СМС</title>
      <link>https://antonz.ru/jedi/</link>
      <pubDate>Tue, 26 Apr 2016 08:30:16 +0000</pubDate>
      
      <guid>https://antonz.ru/jedi/</guid>
      <description>Я знаю три способа управления задачами:
  По наитию. Иногда что-то куда записывать, эпизодически заносить дела в календарь, остальное запоминать (и забывать). Неплохо работает для фрилансеров — люди привыкли, что они факапят все на свете. Для остальных быстро превращает жизнь в боль.
  По умной книжке. Прочитать что-нибудь о продуктивности от мэтров: Глеба Архангельского, Дэвида Аллена, Брайана Трейси — они учат правильно жить. Круто изменить жизнь, продержаться две недели, забросить и разочароваться.</description>
    </item>
    
    <item>
      <title>Законы робототехники в интерфейсе</title>
      <link>https://antonz.ru/laws/</link>
      <pubDate>Tue, 12 Apr 2016 11:15:02 +0000</pubDate>
      
      <guid>https://antonz.ru/laws/</guid>
      <description>Интерфейс — это способ, которым человек решает свою задачу:
 войти в квартиру (интерфейс — дверь); сообщить машинисту поезда о пожаре (переговорная панель); найти на карте аэропорта ближайший туалет (информационный киоск). купить цветы в интернет-магазине (форма заказа).  Для человека интерфейс — это внешность и наблюдаемое поведение, а не внутреннее устройство. Пользователь не задумывается о том, как работает механизм или программа изнутри, пока она справляется со своими задачами.
Поиск Яндекса — это сложнейшая программа, которая работает на тысячах серверов.</description>
    </item>
    
    <item>
      <title>Главный секрет фронтенд-разработки</title>
      <link>https://antonz.ru/frontend-secret/</link>
      <pubDate>Wed, 30 Mar 2016 08:44:16 +0000</pubDate>
      
      <guid>https://antonz.ru/frontend-secret/</guid>
      <description>Бурный рост фреймворков, библиотек и подходов в джаваскрипт-разработке вызывает объяснимое беспокойство у моих знакомых фронтендеров.
Беда в том, что большинство ребят в веб-разработке очень молодые и не знают главный секрет новых тулов:
Они все сдохнут. И очень скоро.  Поэтому, если вы начинающий разработчик — не переживайте. Выдохните. Закройте эти пятьдесят вкладочек в браузере с «полезными ссылками для веб-разработчика». Отпишитесь от еженедельных рассылок. Не читайте в твитере гуру веб-разработки, они пишут не для вас.</description>
    </item>
    
    <item>
      <title>Пристрелите фичу</title>
      <link>https://antonz.ru/shoot-the-feature/</link>
      <pubDate>Tue, 22 Mar 2016 08:08:20 +0000</pubDate>
      
      <guid>https://antonz.ru/shoot-the-feature/</guid>
      <description>Фич всегда слишком много, а денег и времени — недостаточно. Вы и сами это знаете, если разрабатываете софт для реального мира, а не страны пресветлых эльфов. Трагическое несовершенство жирных фич и тощих сроков каждый разрешает для себя сам, но некоторые способы сильно лучше других.
Вот какие варианты усекновения фич мне встречались.
Снять с забега Капитанский совет: перед тем, как отдавать функцию в разработку, проверьте — может она вовсе не нужна? Ориентируйтесь на ценность для потребителя.</description>
    </item>
    
    <item>
      <title>Оглянуться вокруг, чтобы не налажать</title>
      <link>https://antonz.ru/look-around/</link>
      <pubDate>Tue, 15 Mar 2016 08:14:00 +0000</pubDate>
      
      <guid>https://antonz.ru/look-around/</guid>
      <description>Я почти не читаю книги про личную продуктивность-эффективность, но пару недель назад попалась на глаза одна. Питер Брегман, «18 минут».
272 страницы в печатной версии. Восемнадцать минут. Двести семьдесят две страницы. Отличная иллюстрация современной душеспасительной бизнес-литературы.
На удивление, первая глава в книге оказалась толковая, если отжать воду. Брегман пишет о том, как за рутиной и опытом не потерять адекватную картину мира.
   1. Осмотритесь  Kodak так хорошо продавала пленку 100 лет, что в ее картину мира просто не укладывалась цифровая фотография.</description>
    </item>
    
    <item>
      <title>Бэклогом управляют пользователи</title>
      <link>https://antonz.ru/users-not-backlog/</link>
      <pubDate>Fri, 03 Jul 2015 05:55:03 +0000</pubDate>
      
      <guid>https://antonz.ru/users-not-backlog/</guid>
      <description>Давным-давно, когда я только начал рулить проектами, попалась на глаза книга Getting Real. Книга о продуктовой разработке, а я занимался заказной, поэтому большая часть информации прошла мимо. Но одна вещь запомнилась.
 Что делать с этими запросами [на новые фичи]? Где хранить? Как управлять? Не надо ничего делать. Просто прочитайте и отбросьте их.
 Все во мне протестовало против этого. Как это — отбрасывать? А записать в бэклог? А приоритизировать? А планировать и перепланировать каждый месяц?</description>
    </item>
    
    <item>
      <title>Донат — зло</title>
      <link>https://antonz.ru/donate/</link>
      <pubDate>Tue, 28 Apr 2015 08:37:20 +0000</pubDate>
      
      <guid>https://antonz.ru/donate/</guid>
      <description>Есть секретный способ сделать отличный софт и при этом выглядеть нищебродом. Сейчас расскажу.
Используйте донат. Просите пожертвовать небольшую денюжку. Клянчите скромные суммы у пользователей. Разместите кнопку для пожертвований на сайте. Добавьте жалобную ссылку в письмо. Разместите личное обращение основателя. Снимите шляпу и сделайте жалобные глаза.
Пойти этим путем легко. Некоторые люди сами предложат: «Вы такие клевые! Как бы вам помочь материально?» Но донат — это слезы:
 часть людей просьба пожертвовать раздражает; некоторые обещают себе заплатить позже, а потом забудут; остальные снисходительно проигнорируют.</description>
    </item>
    
    <item>
      <title>Как не написать простыню</title>
      <link>https://antonz.ru/longread/</link>
      <pubDate>Wed, 01 Apr 2015 11:43:53 +0000</pubDate>
      
      <guid>https://antonz.ru/longread/</guid>
      <description>По лекции Максима Ильяхова
Если вы пишете статьи или тексты для сайтов, то наверняка сталкивались с эффектом «простыни» — равномерно залитой текстом страницы:
Простыня — это плохо. Стена текста угнетает, человеку неохота приниматься за чтение.
Задача редактора — визуально упростить текст и помочь читателю понять, чем он интересен. Прежде всего, редактор подключает воздух (поля вокруг текста).
Статья выглядит намного легче, но о чем она? Составить быстрое представление о сути текста помогут заголовки:</description>
    </item>
    
    <item>
      <title>По техническим причинам</title>
      <link>https://antonz.ru/metro-reason/</link>
      <pubDate>Tue, 10 Mar 2015 11:58:21 +0000</pubDate>
      
      <guid>https://antonz.ru/metro-reason/</guid>
      <description>Любую проблему метрополитен объясняет пассажирам техническими причинами:
 По техническим причинам, поезда следуют с увеличенными интервалами.
По техническим причинам, движение поездов между станциями Беговая и Таганская временно остановлено. Пользуйтесь городским наземным транспортом.
По техническим причинам, отправление поезда задерживается.
 Сотрудники метро считают важным в объявлении прежде всего подчеркнуть, что причины технические (вдруг подумают на религиозные), а уж потом переходить к сути дела.
Дорогой метрополитен! Пассажирам неважно, технические причины или гуманитарные. Даже если станция закрылась во славу Аполлона, это не тронет черствую душу пассажира.</description>
    </item>
    
    <item>
      <title>Специалисты, которых никто не любит</title>
      <link>https://antonz.ru/experts/</link>
      <pubDate>Tue, 03 Feb 2015 08:00:34 +0000</pubDate>
      
      <guid>https://antonz.ru/experts/</guid>
      <description>Все любят специалистов, правда? Профессиональных автомехаников, врачей и сотрудников техподдержки. Когда барахлит двигатель, колет в боку, а порнобаннер во весь экран не дает писать докладную записку, они придут и молча исправят все.
Ну, не всегда. Мои знакомые специалисты иногда впадают в одну из двух крайностей:
 Считают специалистами всех вокруг. Принимают других людей за слабоумных.  В обоих случаях они раздражают окружающих и сами страдают от непонимания.
Считает специалистами всех вокруг  — У меня с интернетом фигня какая-то.</description>
    </item>
    
    <item>
      <title>Чиним объявление про эскалатор в метро</title>
      <link>https://antonz.ru/fixing-escalator-announcement/</link>
      <pubDate>Tue, 14 Oct 2014 07:15:04 +0000</pubDate>
      
      <guid>https://antonz.ru/fixing-escalator-announcement/</guid>
      <description>Как помочь метрополитену с его объявлением про эскалатор?
1. Чиним суконный язык  — Эскалатор — техническое средство повышенной опасности.
  — Находясь на эскалаторе, стойте справа, лицом по направлению движения. Проходите слева, держась за поручень.
 Стойте справа, проходите слева. Держитесь за поручень. Смотрите вперед.
 — В условиях увеличенного пассажиропотока, по указанию работников метрополитена заполняйте левую и правую стороны ступеней эскалаторного полотна.
 В час пик становитесь по двое на ступеньку, слева и справа.</description>
    </item>
    
    <item>
      <title>Метро и слизни</title>
      <link>https://antonz.ru/metro-brain-slug/</link>
      <pubDate>Mon, 29 Sep 2014 21:03:13 +0000</pubDate>
      
      <guid>https://antonz.ru/metro-brain-slug/</guid>
      <description>Мозговой слизень атаковал средний менеджмент московского метро. В результате они записали и прокручивают звуковое объявление несчастным пассажирам, пока те поднимаются на эскалаторе.
Цитирую полностью:
 Эскалатор — техническое средство повышенной опасности.
Находясь на эскалаторе, стойте справа, лицом по направлению движения. Проходите слева, держась за поручень.
В условиях увеличенного пассажиропотока, по указанию работников метрополитена заполняйте левую и правую стороны ступеней эскалаторного полотна.
Будьте внимательны при сходе с эскалатора: готовьтесь к нему заранее и не задерживайтесь.</description>
    </item>
    
    <item>
      <title>Миф о сложности Oracle Database</title>
      <link>https://antonz.ru/oracle-myth/</link>
      <pubDate>Sun, 21 Sep 2014 16:19:42 +0000</pubDate>
      
      <guid>https://antonz.ru/oracle-myth/</guid>
      <description>Участвовали когда-нибудь в разработке корпоративного софта? Тогда вы знаете, что Оракл — это такая мегасложная система управления базами данных. Разработчик приложения, которое читает и пишет данные в БД Оракл, имеет минимум 3 года опыта и сертификат. Этого недостаточно, поэтому приложение тормозит уже на 10 пользователях и 5000 записей в базе. Чтобы оптимизировать производительность или настроить БД, нужен совсем другой человек. У него 15 лет стажа, 50 сертификатов и непривлекательные залысины с бифокальными очками.</description>
    </item>
    
    <item>
      <title>Дольки для Рашми</title>
      <link>https://antonz.ru/shares-for-rashmi/</link>
      <pubDate>Thu, 03 Jul 2014 09:27:36 +0000</pubDate>
      
      <guid>https://antonz.ru/shares-for-rashmi/</guid>
      <description>В прошлой статье мы рассмотрели 6 шагов проектирования игрофицированной системы по Кевину Вербаху. А сегодня применим этот подход в действии.
Вот какую задачу поставил профессор Вербах перед студентами на курсе по геймификации:
 С вами связалась Рашми Сингх, CEO компании ShareAll — одной из ведущих в области совместного потребления (если не знаете, что это, взгляните на статью в журнале Economist). Она просит вас спроектировать для нее геймифицированную систему, которая позволит бизнесу ShareAll выйти на новый уровень.</description>
    </item>
    
    <item>
      <title>Геймифицируй это!</title>
      <link>https://antonz.ru/gamify/</link>
      <pubDate>Fri, 27 Jun 2014 07:34:23 +0000</pubDate>
      
      <guid>https://antonz.ru/gamify/</guid>
      <description>Сегодня — про то, как проектировать геймифицированные системы. Хайп по этой теме спал, так что можно поговорить серьезно.
По всем канонам, я должен был бы для начала расписать теоретические основы игрофикации. Разумеется, я этого делать не буду. Ненавижу, когда базовые определения, история развития, области применения, описание преимуществ, и прочая лабудень отжирает место у практики. Поэтому к делу.
Ну ладно, дам одно определение. Геймификация — это ачивки, бейджи и левелапы использование игровых элементов и техник проектирования игр в неигровом контексте.</description>
    </item>
    
    <item>
      <title>Картоха, урлы и состояние</title>
      <link>https://antonz.ru/urls-state-potatoes/</link>
      <pubDate>Thu, 15 May 2014 20:44:26 +0000</pubDate>
      
      <guid>https://antonz.ru/urls-state-potatoes/</guid>
      <description>Если вы разрабатываете веб-приложение, то рано или поздно столкнетесь с проблемой сохранения текущего состояния системы для пользователя.
Например, вы продаете через интернет элитный картофель. Покупатель заходит на сайт и первым делом настраивает условия отбора картофелин: строго из Боливии или ЮАР, урожая 2013 года, размер клубня от 3 до 7 см, желательно в форме морского тюленя. Получает список из 300 позиций (да, в ЮАР очень популярна картоха в форме тюленя), нарезанный на 6 страниц из 50 элементов каждая.</description>
    </item>
    
    <item>
      <title>Ваш лучший друг, анонимус</title>
      <link>https://antonz.ru/your-anonymous-friend/</link>
      <pubDate>Fri, 18 Apr 2014 16:35:31 +0000</pubDate>
      
      <guid>https://antonz.ru/your-anonymous-friend/</guid>
      <description>Вы только что запустили свой стартап. Он классный, всем нужен, решает самые насущные проблемы потенциальной аудитории (ну, вы так думаете), выглядит сногсшибательно и супер-удобен в использовании.
Проходит день, неделя, месяц, три… Да, посещаемость неплохая. Да, пользовательская база растет. Но хочется большего. Как понять, чего не хватает вашим пользователям? Какие их потребности сервис не охватывает? Что делать неудобно? А что наоборот, сделано здорово, и менять ни в коем случае не стоит?</description>
    </item>
    
    <item>
      <title>Гик тоже хочет красиво</title>
      <link>https://antonz.ru/geek-as-a-human-being/</link>
      <pubDate>Tue, 08 Apr 2014 21:57:41 +0000</pubDate>
      
      <guid>https://antonz.ru/geek-as-a-human-being/</guid>
      <description>Давайте откровенно.
Мы, гики, как все нормальные люди любим простые и удобные интерфейсы.
Культ командной строки — это не от хорошей жизни. Мы выбираем легкий путь и стараемся не оперировать визуальными образами, ведь гору невнятного текста проще выдать, чем напрячься на одну понятную картинку. Но это не значит, что мы не радуемся хорошему дизайну.
Так вот. Есть такой блоговый движок — Wordpress, вы, наверно, знаете. Он классный, поддерживает кучу фич, подходит под любой мыслимый сценарий использования.</description>
    </item>
    
  </channel>
</rss>
